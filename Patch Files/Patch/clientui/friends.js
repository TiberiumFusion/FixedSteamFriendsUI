
// Fixed steam-chat.com PWA for FriendsUI in vgui clients
// By TiberiumFusion

const PATCH_ENABLE = true; // Set to false to quickly bypass the entire patch and run friends in vanilla form



// ____________________________________________________________________________________________________
//
//     Patch metadata
// ____________________________________________________________________________________________________
//

// First, the raw string, wrapped in a esoteric tag so that programs can scrape this if needed
//-@[PMJ[
var TfusionPatch_MetadataJsonRaw = `{
	"ScraperMagic": "{A0806671-AC87-4543-A2B6-51BC55CEE900}",
	"Level0": {
		"PatchType": "{62C3D4C0-8A0B-4602-820E-7020B8473037}",
		"Version": "<<![Version]>>",
		"VersionGuid": "<<![VersionGuid]>>",
		"ReleaseDate": "<<![ReleaseDate]>>",
		"ReleaseDateFriendly": "<<![ReleaseDateFriendly]>>",
		"CoreBase": "<<![ValveCLSTAMP]>>",
		"PayloadName": "steam-chat.com-snapshot-mod-<<![VersionGuid]>>",
		"PayloadRootIndexFilename": "index.html"
	}
}`
//]]@-

// Live object
var TfusionPatch_MetadataJson = JSON.parse(TfusionPatch_MetadataJsonRaw);


if (PATCH_ENABLE)
{
    
	console.log("FixedSteamFriendsUI local steam-chat.com snapshot v" + TfusionPatch_MetadataJson.Level0.Version + " (released " + TfusionPatch_MetadataJson.Level0.ReleaseDateFriendly + ") by TiberiumFusion");
    console.log("Valve CLSTAMP:", TfusionPatch_MetadataJson.Level0.CoreBase, ", Patch metadata:", TfusionPatch_MetadataJson);


    // ____________________________________________________________________________________________________
    //
    //     JS loader
    // ____________________________________________________________________________________________________
    //

    // For loading and evaluating shared javascript components without needing to modify index.html to load them via <script> elements
    function TfusionPatch_LoadJsOrDie(path)
    {
        let xhr = new XMLHttpRequest();
        xhr.open("GET", path, false); // must be synchronous
        xhr.send();
                
        if (xhr.status < 200 || xhr.status >= 300)
        {
            console.error("[!!!] Failed to load js file from path: '" + path + "' (full url: '" + xhr.responseURL + "'), http: " + xhr.status + " [!!!]");
            throw new Error();
        }

        if (xhr == null || typeof xhr.response !== "string" || xhr.length == 0)
        {
            console.error("[!!!] Failed to load js file from path: '" + path + "' (full url: '" + xhr.responseURL + "'), file contents are empty or were not retrieved as text");
            throw new Error();
        }

        // Hideous javascript kludge to run eval() in the global scope (i.e. on window)
        // See: https://stackoverflow.com/q/9107240
        return (1, eval)(xhr.responseText);
    }



    // ____________________________________________________________________________________________________
    //
    //     FixedSteamFriendsUI runtime root config
    // ____________________________________________________________________________________________________
    //

    var TfusionPatch_RootConfig = TfusionPatch_LoadJsOrDie(TfusionPatch_MetadataJson.Level0.PayloadName + "/_support_/shared/rootconfig.js");

    TfusionPatch_RootConfig.Initialize(
        "", // Root path suffix (keep as window.location's root, which will be "https://steamloopback.host/")
        [
            // List of config file paths to try loading from, specified in overwrite order
            TfusionPatch_MetadataJson.Level0.PayloadName + "/FixedSteamFriendsUI_Config.json",
            "FixedSteamFriendsUI_Config.json",
        ],
    );

    function TfusionPatch_RootConfig_GetValueOrFallback(path, fallback=null)
    {
        // Catch-all within our scope for anything that can go wrong with accessing the root config component
        try
        {
            return TfusionPatch_RootConfig.GetConfigProperty(path, throwIfUndefined=true, rethrowExceptions=true); // throw in all scenarios where we can supply a fallback config value
        }
        catch (e)
        {
            console.warn("[!] Unable to retrieve config property value for path: '" + path + "'; using fallback value instead: '" + fallback + "' [!]");
            console.log("  Inner exception details: ", e);
            return fallback;
        }
    }



    // ____________________________________________________________________________________________________
    //
    //     Inline libraries
    // ____________________________________________________________________________________________________
    //

    // There isn't really any clean way to include one js file in another in this context (i.e. libraries)
    // We could modify clientui\index_friends.html and add <script> tags for the files we need, but that increases the number of modified files which necessitates changes to the patch install procedure etc etc and I dont want to do that
    // So instead we are just going to inline any libraries this file needs right here in the file

    //
    // js-cookie 2.2.1
    //

    // Being the vile and ass-backwards language it is, javascript has zero ability to get a cookie by its name and requires a library to do that
    !function(e){var n;if("function"==typeof define&&define.amd&&(define(e),n=!0),"object"==typeof exports&&(module.exports=e(),n=!0),!n){var t=window.Cookies,o=window.Cookies=e();o.noConflict=function(){return window.Cookies=t,o}}}(function(){function e(){for(var e=0,n={};e<arguments.length;e++){var t=arguments[e];for(var o in t)n[o]=t[o]}return n}function n(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function t(o){function r(){}function i(n,t,i){if("undefined"!=typeof document){"number"==typeof(i=e({path:"/"},r.defaults,i)).expires&&(i.expires=new Date(1*new Date+864e5*i.expires)),i.expires=i.expires?i.expires.toUTCString():"";try{var c=JSON.stringify(t);/^[\{\[]/.test(c)&&(t=c)}catch(e){}t=o.write?o.write(t,n):encodeURIComponent(String(t)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),n=encodeURIComponent(String(n)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var f="";for(var u in i)i[u]&&(f+="; "+u,!0!==i[u]&&(f+="="+i[u].split(";")[0]));return document.cookie=n+"="+t+f}}function c(e,t){if("undefined"!=typeof document){for(var r={},i=document.cookie?document.cookie.split("; "):[],c=0;c<i.length;c++){var f=i[c].split("="),u=f.slice(1).join("=");t||'"'!==u.charAt(0)||(u=u.slice(1,-1));try{var a=n(f[0]);if(u=(o.read||o)(u,a)||n(u),t)try{u=JSON.parse(u)}catch(e){}if(r[a]=u,e===a)break}catch(e){}}return e?r[e]:r}}return r.set=i,r.get=function(e){return c(e,!1)},r.getJSON=function(e){return c(e,!0)},r.remove=function(n,t){i(n,"",e(t,{expires:-1}))},r.defaults={},r.withConverter=t,r}(function(){})});



    // ____________________________________________________________________________________________________
    //
    //     Automatic reload
    // ____________________________________________________________________________________________________
    //
 
    var IframeErrorInducedReloadCountMax = TfusionPatch_RootConfig_GetValueOrFallback("OuterFrame.InnerLoadFailAutoRetryCount", 3);
    var IframeErrorInducedReloadCount = 0;

    let ieirCount = Cookies.get("IframeErrorInducedReloadCount");
    if (ieirCount != null) {
        IframeErrorInducedReloadCount = parseInt(ieirCount); }

    if (IframeErrorInducedReloadCount > 0)
    {
        console.log(`This is Iframe Error Induced automatic reload attempt ${IframeErrorInducedReloadCount}/${IframeErrorInducedReloadCountMax}`);
    }



    // ____________________________________________________________________________________________________
    //
    //     Inner web page management
    // ____________________________________________________________________________________________________
    //

    //
    // Iframe document state tracking
    //

    var IsChatJavascriptIntialized = false;
    // Set to true in OnMessageFromFrame when we receive a ChatJavascriptIntialized message from the iframe document

}




// ____________________________________________________________________________________________________
//
//     Main
// ____________________________________________________________________________________________________
//


// ============================================================  Modified Valve friends.js below  ============================================================
// From the May 2023 client, dated 2023-03-10


/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./node_modules/google-protobuf/google-protobuf.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-protobuf/google-protobuf.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof __webpack_require__.g&&null!=__webpack_require__.g?__webpack_require__.g:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},"es6","es3");
$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");
$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"startsWith");a+="";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},"es6","es3");
$jscomp.polyfill("String.prototype.repeat",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self;
goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}:c[d]=b};
goog.define=function(a,b){if(!COMPILED){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a])}return b};goog.FEATURESET_YEAR=2012;goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};
goog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module=function(a){if("string"!==typeof a||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};
goog.module.getInternal_=function(a){if(!COMPILED){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};
goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
goog.declareModuleId=function(a){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a}}};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&null!=goog.getObjectByName(a)},goog.implicitNamespaces_={"goog.module":!0});
goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c]};goog.addDependency=function(a,b,c,d){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d)};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a)}finally{goog.moduleLoaderState_=b}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.nullFunction=function(){};
goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE="";goog.TRANSPILER="transpile.js";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(b){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return"(function(){"+a+"\n;})();\n"};
goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if("string"===typeof a)goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if("string"===typeof d&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,
c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+d+'"');}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
goog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){(0,eval)(g+"\n//# sourceURL="+f)}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=
goog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return e(a,b,c)};
goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isFunction=function(a){return"function"==goog.typeOf(a)};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};
goog.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,goog.UID_PROPERTY_)&&a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;
goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(d){}if("undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("script");c.type="text/javascript";c.defer=
!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,"&lt;"));b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,c){return null!=b&&c in b?b[c]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};
goog.exportProperty=function(a,b,c){a[b]=c};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);
goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;
goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(void 0!=goog.global.CLOSURE_BASE_PATH&&"string"===typeof goog.global.CLOSURE_BASE_PATH)goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;
a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0}function b(a){try{return!!eval(a)}catch(h){return!1}}
var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";a("es5",function(){return b("[1,].length==1")});a("es6",function(){return f.match(/Edge\/(\d+)(\.\d)*/i)?!1:b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});a("es9",function(){return b("({...rest} = {}), true")});a("es_next",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=this.transpilationTarget_||
c.target}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||"es6"!=b||"noModule"in goog.global.document.createElement("script")?!1:!0;throw Error("Unknown language mode: "+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={};
this.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null)}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f])}f=goog.require;var g=0;for(e=
0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c()})}else c()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1));this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b())},goog.DebugLoader_.prototype.setDependencyFactory=
function(a){this.factory_=a},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error("Bad dependency path or symbol: "+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a)}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_()}else throw a="goog.require could not find: "+
a,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0},resume:function(){c?a.resume_():b=!1},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d)},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);
return b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||""})},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(b){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,
b)},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f)}finally{c=!0}})();b&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a)},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);
break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=
function(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,
b,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=
a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=
function(a){delete goog.Dependency.callbackMap_[a]},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d)}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=
goog.global.document;if("complete"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded())}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?
' nonce="'+goog.getScriptNonce()+'"':"";d='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+c+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+d+">\x3c/script>";b.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}else{var e=b.createElement("script");e.defer=goog.Dependency.defer_;e.async=!1;e.type="text/javascript";(d=goog.getScriptNonce())&&e.setAttribute("nonce",d);goog.DebugLoader_.IS_OLD_IE_?
(a.pause(),e.onreadystatechange=function(){if("loaded"==e.readyState||"complete"==e.readyState)a.loaded(),a.resume()}):e.onload=function(){e.onload=null;a.loaded()};e.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path;b.head.appendChild(e)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),
a.loaded()):a.pause()},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){a=b?'<script type="module" crossorigin>'+b+"\x3c/script>":'<script type="module" crossorigin src="'+a+'">\x3c/script>';d.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(a):a)}function c(a,b){var c=d.createElement("script");c.defer=!0;c.async=!1;c.type=
"module";c.setAttribute("crossorigin",!0);var e=goog.getScriptNonce();e&&c.setAttribute("nonce",e);b?c.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(b):b:c.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(a):a;d.head.appendChild(c)}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=
!0}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6)});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName)});f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);
a.clearModuleState();a.loaded()});f(void 0,'goog.Dependency.callback_("'+k+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause()},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=
goog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path))}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName}finally{f&&a.clearModuleState()}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),
d)});a.loaded()}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c()}),d='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+b+'");')+"\x3c/script>";a.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(d):d)}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):a.pause();
else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c()});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();var l=k.onreadystatechange;k.onreadystatechange=function(){"interactive"==k.readyState&&(k.onreadystatechange=
l,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c()}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},
goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;this.transpiler_=g},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=
function(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&void 0!==goog.global.JSON?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,c,
d){b=b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||"es3",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e},goog.DependencyFactory=function(a){this.transpiler=a},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,
b,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a)},goog.global.CLOSURE_NO_DEPS||
goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b)});goog.TRUSTED_TYPES_POLICY_NAME="";goog.identity_=function(a){return a};goog.createTrustedTypesPolicy=function(a){var b=null,c=goog.global.trustedTypes||goog.global.TrustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(d){goog.logToConsole_(d.message)}return b};
goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]]}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(var d in b)if(!(d in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
goog.object.create=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};
goog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a)}return goog.object.getKeys(d)};goog.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};var jspb={asserts:{}};jspb.asserts.doAssertFailure=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d}else a&&(e+=": "+a,f=b);throw Error(""+e,f||[]);};jspb.asserts.assert=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];a||jspb.asserts.doAssertFailure("",null,b,d);return a};
jspb.asserts.assertString=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];"string"!==typeof a&&jspb.asserts.doAssertFailure("Expected string but got %s: %s.",[goog.typeOf(a),a],b,d);return a};jspb.asserts.assertArray=function(a,b,c){for(var d=[],e=2;e<arguments.length;++e)d[e-2]=arguments[e];Array.isArray(a)||jspb.asserts.doAssertFailure("Expected array but got %s: %s.",[goog.typeOf(a),a],b,d);return a};
jspb.asserts.fail=function(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];throw Error("Failure"+(a?": "+a:""),c);};jspb.asserts.assertInstanceof=function(a,b,c,d){for(var e=[],f=3;f<arguments.length;++f)e[f-3]=arguments[f];a instanceof b||jspb.asserts.doAssertFailure("Expected instanceof %s but got %s.",[jspb.asserts.getType(b),jspb.asserts.getType(a)],c,e);return a};
jspb.asserts.getType=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};jspb.BinaryConstants={};jspb.ConstBinaryMessage=function(){};jspb.BinaryMessage=function(){};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_=function(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d}else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};
goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertExists=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&null==a&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"number"!==typeof a&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"string"!==typeof a&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&"boolean"!==typeof a&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.")};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,c);for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,c);for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){var d=a.length,e="string"===typeof a?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g="string"===typeof a?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};
goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f="string"===typeof a?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};
goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:"string"===typeof a?a.charAt(b):a[b]};
goog.array.findIndexRight=function(a,b,c){var d=a.length,e="string"===typeof a?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!Array.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};
goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};
goog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};
goog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};
goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+(g-f>>>1);var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:-f-1};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};
goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};
goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);void 0!==g&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};
goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(Array.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g])}else b.push(d)}return b};goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};
goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};
goog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d)}return b};
goog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join(b||"")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b};
goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63)}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023))}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63)}return b.join("")};
goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.dom.asserts={};goog.dom.asserts.assertIsLocation=function(a){if(goog.asserts.ENABLE_ASSERTS){var b=goog.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(a))}return a};
goog.dom.asserts.assertIsElementType_=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=goog.dom.asserts.getWindow_(a);c&&"undefined"!=typeof c[b]&&(a&&(a instanceof c[b]||!(a instanceof c.Location||a instanceof c.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",b,goog.dom.asserts.debugStringForType_(a)))}return a};goog.dom.asserts.assertIsHTMLAnchorElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAnchorElement")};
goog.dom.asserts.assertIsHTMLButtonElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLButtonElement")};goog.dom.asserts.assertIsHTMLLinkElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLLinkElement")};goog.dom.asserts.assertIsHTMLImageElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLImageElement")};goog.dom.asserts.assertIsHTMLAudioElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLAudioElement")};
goog.dom.asserts.assertIsHTMLVideoElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLVideoElement")};goog.dom.asserts.assertIsHTMLInputElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLInputElement")};goog.dom.asserts.assertIsHTMLTextAreaElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLTextAreaElement")};goog.dom.asserts.assertIsHTMLCanvasElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLCanvasElement")};
goog.dom.asserts.assertIsHTMLEmbedElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLEmbedElement")};goog.dom.asserts.assertIsHTMLFormElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFormElement")};goog.dom.asserts.assertIsHTMLFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLFrameElement")};goog.dom.asserts.assertIsHTMLIFrameElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLIFrameElement")};
goog.dom.asserts.assertIsHTMLObjectElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLObjectElement")};goog.dom.asserts.assertIsHTMLScriptElement=function(a){return goog.dom.asserts.assertIsElementType_(a,"HTMLScriptElement")};
goog.dom.asserts.debugStringForType_=function(a){if(goog.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return"<object could not be stringified>"}else return void 0===a?"undefined":null===a?"null":typeof a};goog.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,c=b&&(b.defaultView||b.parentWindow);c=c||goog.global;if(c.Element&&c.Location)return c}catch(d){}return null};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=function(){return!1};goog.functions.TRUE=function(){return!0};goog.functions.NULL=function(){return null};goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};
goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};
goog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};
goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};
goog.functions.debounce=function(a,b,c){var d=0;return function(e){goog.global.clearTimeout(d);var f=arguments;d=goog.global.setTimeout(function(){a.apply(c,f)},b)}};goog.functions.throttle=function(a,b,c){var d=0,e=!1,f=[],g=function(){d=0;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(c,f)};return function(a){f=arguments;d?e=!0:h()}};goog.functions.rateLimit=function(a,b,c){var d=0,e=function(){d=0};return function(f){d||(d=goog.global.setTimeout(e,b),a.apply(c,arguments))}};goog.dom.HtmlElement=function(){};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName("A");goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR");goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM");goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS");goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET");goog.dom.TagName.AREA=new goog.dom.TagName("AREA");goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE");
goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE");goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO");goog.dom.TagName.B=new goog.dom.TagName("B");goog.dom.TagName.BASE=new goog.dom.TagName("BASE");goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT");goog.dom.TagName.BDI=new goog.dom.TagName("BDI");goog.dom.TagName.BDO=new goog.dom.TagName("BDO");goog.dom.TagName.BIG=new goog.dom.TagName("BIG");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE");goog.dom.TagName.BODY=new goog.dom.TagName("BODY");
goog.dom.TagName.BR=new goog.dom.TagName("BR");goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON");goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS");goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION");goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER");goog.dom.TagName.CITE=new goog.dom.TagName("CITE");goog.dom.TagName.CODE=new goog.dom.TagName("CODE");goog.dom.TagName.COL=new goog.dom.TagName("COL");goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP");
goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND");goog.dom.TagName.DATA=new goog.dom.TagName("DATA");goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST");goog.dom.TagName.DD=new goog.dom.TagName("DD");goog.dom.TagName.DEL=new goog.dom.TagName("DEL");goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS");goog.dom.TagName.DFN=new goog.dom.TagName("DFN");goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG");goog.dom.TagName.DIR=new goog.dom.TagName("DIR");goog.dom.TagName.DIV=new goog.dom.TagName("DIV");
goog.dom.TagName.DL=new goog.dom.TagName("DL");goog.dom.TagName.DT=new goog.dom.TagName("DT");goog.dom.TagName.EM=new goog.dom.TagName("EM");goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED");goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION");goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE");goog.dom.TagName.FONT=new goog.dom.TagName("FONT");goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER");goog.dom.TagName.FORM=new goog.dom.TagName("FORM");
goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME");goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET");goog.dom.TagName.H1=new goog.dom.TagName("H1");goog.dom.TagName.H2=new goog.dom.TagName("H2");goog.dom.TagName.H3=new goog.dom.TagName("H3");goog.dom.TagName.H4=new goog.dom.TagName("H4");goog.dom.TagName.H5=new goog.dom.TagName("H5");goog.dom.TagName.H6=new goog.dom.TagName("H6");goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD");goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER");
goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP");goog.dom.TagName.HR=new goog.dom.TagName("HR");goog.dom.TagName.HTML=new goog.dom.TagName("HTML");goog.dom.TagName.I=new goog.dom.TagName("I");goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME");goog.dom.TagName.IMG=new goog.dom.TagName("IMG");goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT");goog.dom.TagName.INS=new goog.dom.TagName("INS");goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX");goog.dom.TagName.KBD=new goog.dom.TagName("KBD");
goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN");goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL");goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND");goog.dom.TagName.LI=new goog.dom.TagName("LI");goog.dom.TagName.LINK=new goog.dom.TagName("LINK");goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN");goog.dom.TagName.MAP=new goog.dom.TagName("MAP");goog.dom.TagName.MARK=new goog.dom.TagName("MARK");goog.dom.TagName.MATH=new goog.dom.TagName("MATH");goog.dom.TagName.MENU=new goog.dom.TagName("MENU");
goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM");goog.dom.TagName.META=new goog.dom.TagName("META");goog.dom.TagName.METER=new goog.dom.TagName("METER");goog.dom.TagName.NAV=new goog.dom.TagName("NAV");goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT");goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT");goog.dom.TagName.OL=new goog.dom.TagName("OL");goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP");
goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION");goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT");goog.dom.TagName.P=new goog.dom.TagName("P");goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM");goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE");goog.dom.TagName.PRE=new goog.dom.TagName("PRE");goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS");goog.dom.TagName.Q=new goog.dom.TagName("Q");goog.dom.TagName.RP=new goog.dom.TagName("RP");goog.dom.TagName.RT=new goog.dom.TagName("RT");
goog.dom.TagName.RTC=new goog.dom.TagName("RTC");goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY");goog.dom.TagName.S=new goog.dom.TagName("S");goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP");goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT");goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION");goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT");goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL");goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE");goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN");
goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE");goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG");goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE");goog.dom.TagName.SUB=new goog.dom.TagName("SUB");goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY");goog.dom.TagName.SUP=new goog.dom.TagName("SUP");goog.dom.TagName.SVG=new goog.dom.TagName("SVG");goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE");goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY");goog.dom.TagName.TD=new goog.dom.TagName("TD");
goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE");goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA");goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT");goog.dom.TagName.TH=new goog.dom.TagName("TH");goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD");goog.dom.TagName.TIME=new goog.dom.TagName("TIME");goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE");goog.dom.TagName.TR=new goog.dom.TagName("TR");goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK");goog.dom.TagName.TT=new goog.dom.TagName("TT");
goog.dom.TagName.U=new goog.dom.TagName("U");goog.dom.TagName.UL=new goog.dom.TagName("UL");goog.dom.TagName.VAR=new goog.dom.TagName("VAR");goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO");goog.dom.TagName.WBR=new goog.dom.TagName("WBR");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.html={};goog.html.trustedtypes={};goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null;goog.string={};goog.string.TypedString=function(){};goog.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
goog.DEBUG&&(goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"});goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
goog.string.Const.from=function(a){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeScript.fromConstantAndArgs=function(a,b){for(var c=[],d=1;d<arguments.length;d++)c.push(goog.html.SafeScript.stringify_(arguments[d]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(a)+")("+c.join(", ")+");")};goog.html.SafeScript.fromJson=function(a){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(a))};goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};
goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"});goog.html.SafeScript.unwrap=function(a){return goog.html.SafeScript.unwrapTrustedScript(a).toString()};
goog.html.SafeScript.unwrapTrustedScript=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"};
goog.html.SafeScript.stringify_=function(a){return JSON.stringify(a).replace(/</g,"\\x3c")};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(a):a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.UrlObject_=function(){};goog.fs.url.UrlObject_.prototype.createObjectURL=function(a){};goog.fs.url.UrlObject_.prototype.revokeObjectURL=function(a){};
goog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};goog.fs.url.findUrlObject_=function(){return void 0!==goog.global.URL&&void 0!==goog.global.URL.createObjectURL?goog.global.URL:void 0!==goog.global.webkitURL&&void 0!==goog.global.webkitURL.createObjectURL?goog.global.webkitURL:void 0!==goog.global.createObjectURL?goog.global:null};
goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.fs.blob={};goog.fs.blob.getBlob=function(a){var b=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(var c=0;c<arguments.length;c++)b.append(arguments[c]);return b.getBlob()}return goog.fs.blob.getBlobWithProperties(goog.array.toArray(arguments))};
goog.fs.blob.getBlobWithProperties=function(a,b,c){var d=goog.global.BlobBuilder||goog.global.WebKitBlobBuilder;if(void 0!==d){d=new d;for(var e=0;e<a.length;e++)d.append(a[e],c);return d.getBlob(b)}if(void 0!==goog.global.Blob)return d={},b&&(d.type=b),c&&(d.endings=c),new Blob(a,d);throw Error("This browser doesn't seem to support creating Blobs");};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;
goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||
"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,
7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase());
goog.i18n.bidi.Format={LRE:"\u202a",RLE:"\u202b",PDF:"\u202c",LRM:"\u200e",RLM:"\u200f"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT="right";goog.i18n.bidi.LEFT="left";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir=function(a,b){return"number"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_="A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0900-\u1fff\u200e\u2c00-\ud801\ud804-\ud839\ud83c-\udbff\uf900-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";goog.i18n.bidi.rtlChars_="\u0591-\u06ef\u06fa-\u08ff\u200f\ud802-\ud803\ud83a-\ud83b\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,""):a};goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};
goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};
goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,b+"$&"+b)};goog.i18n.bidi.enforceRtlInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+a+"</span>"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};
goog.i18n.bidi.enforceLtrInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+a+"</span>"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;
goog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1\u05f3")};goog.i18n.bidi.wordSeparatorRe_=/\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;
goog.i18n.bidi.estimateDirection=function(a,b){var c=0,d=0,e=!1;a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){var f=a[b];goog.i18n.bidi.startsWithRtl(f)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(f)?e=!0:goog.i18n.bidi.hasAnyLtr(f)?d++:goog.i18n.bidi.hasNumeralsRe_.test(f)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};
goog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")};
goog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:a.dir="rtl";break;default:a.removeAttribute("dir")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.TrustedResourceUrl=function(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=a===goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};
goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var c=goog.html.TrustedResourceUrl.unwrap(this);c=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(c);var d=c[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",c[2]||"",a)+goog.html.TrustedResourceUrl.stringifyParams_("#",d,b))};
goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"});goog.html.TrustedResourceUrl.unwrap=function(a){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof goog.string.Const?goog.string.Const.unwrap(a):
encodeURIComponent(String(a))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i;goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;
goog.html.TrustedResourceUrl.formatWithParams=function(a,b,c,d){return goog.html.TrustedResourceUrl.format(a,b).cloneWithParams(c,d)};goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.TrustedResourceUrl.fromSafeScript=function(a){a=goog.fs.blob.getBlobWithProperties([goog.html.SafeScript.unwrap(a)],"text/javascript");a=goog.fs.url.createObjectUrl(a);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){a=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(a):a;return new goog.html.TrustedResourceUrl(goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};
goog.html.TrustedResourceUrl.stringifyParams_=function(a,b,c){if(null==c)return b;if("string"===typeof c)return c?a+encodeURIComponent(c):"";for(var d in c){var e=c[d];e=Array.isArray(e)?e:[e];for(var f=0;f<e.length;f++){var g=e[f];null!=g&&(b||(b=a),b+=(b.length>a.length?"&":"")+encodeURIComponent(d)+"="+encodeURIComponent(String(g)))}}return b};goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"))}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||"",g=b[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==
f[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.html.SafeUrl=function(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=a===goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_&&b||"";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"});
goog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i;goog.html.SafeUrl.isSafeMimeType=function(a){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(a)};
goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SafeUrl.isSafeMimeType(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromMediaSource=function(a){goog.asserts.assert("MediaSource"in goog.global,"No support for MediaSource");a=a instanceof MediaSource?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\/]+=*$/i;goog.html.SafeUrl.fromDataUrl=function(a){a=a.replace(/(%0A|%0D)/g,"");var b=a.match(goog.html.DATA_URL_PATTERN_);b=b&&goog.html.SafeUrl.isSafeMimeType(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i;goog.html.SafeUrl.fromSipUrl=function(a){goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromFacebookMessengerUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"fb-messenger://share")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.fromWhatsAppUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"whatsapp://send")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.fromSmsUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf("#");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(c){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(a)};goog.html.SafeUrl.fromSshUrl=function(a){goog.string.internal.caseInsensitiveStartsWith(a,"ssh://")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,a,b)};goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,a,b)};
goog.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,c){(a=a.exec(b))?(a=a[1],-1==(c instanceof goog.string.Const?[goog.string.Const.unwrap(c)]:c.map(function(a){return goog.string.Const.unwrap(a)})).indexOf(a)&&(b=goog.html.SafeUrl.INNOCUOUS_STRING)):b=goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeUrl.fromTrustedResourceUrl=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(a))};
goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_;goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof goog.html.SafeUrl)return a;a="object"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=goog.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(a),"%s does not match the safe URL pattern",a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new goog.html.SafeUrl(goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_,a)};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.asserts.assert(goog.string.internal.endsWith(a,";"),"Last character of style string is not ';': "+a);goog.asserts.assert(goog.string.internal.contains(a,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"});
goog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail("expected object of type SafeStyle, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez";
goog.html.SafeStyle.create=function(a){var b="",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error("Name allows only [-_a-zA-Z0-9], got: "+c);var d=a[c];null!=d&&(d=Array.isArray(d)?goog.array.map(d,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(d),b+=c+":"+d+";")}return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};
goog.html.SafeStyle.sanitizePropertyValue_=function(a){if(a instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(a).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';a=a instanceof goog.string.Const?goog.string.Const.unwrap(a):goog.html.SafeStyle.sanitizePropertyValueString_(String(a));if(/[{;}]/.test(a))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[a]);return a};
goog.html.SafeStyle.sanitizePropertyValueString_=function(a){var b=a.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");if(goog.html.SafeStyle.VALUE_RE_.test(b)){if(goog.html.SafeStyle.COMMENT_RE_.test(a))return goog.asserts.fail("String value disallows comments, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedQuotes_(a))return goog.asserts.fail("String value requires balanced quotes, got: "+
a),goog.html.SafeStyle.INNOCUOUS_STRING;if(!goog.html.SafeStyle.hasBalancedSquareBrackets_(a))return goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING}else return goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+a),goog.html.SafeStyle.INNOCUOUS_STRING;return goog.html.SafeStyle.sanitizeUrl_(a)};
goog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.hasBalancedSquareBrackets_=function(a){for(var b=!0,c=/^[-_a-zA-Z0-9]$/,d=0;d<a.length;d++){var e=a.charAt(d);if("]"==e){if(b)return!1;b=!0}else if("["==e){if(!b)return!1;b=!1}else if(!b&&!c.test(e))return!1}return b};goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]";
goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$");goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g;goog.html.SafeStyle.ALLOWED_FUNCTIONS_="calc cubic-bezier fit-content hsl hsla linear-gradient matrix minmax repeat rgb rgba (rotate|scale|translate)(X|Y|Z|3d)?".split(" ");
goog.html.SafeStyle.FUNCTIONS_RE_=new RegExp("\\b("+goog.html.SafeStyle.ALLOWED_FUNCTIONS_.join("|")+")\\([-+*/0-9a-z.%\\[\\], ]+\\)","g");goog.html.SafeStyle.COMMENT_RE_=/\/\*/;goog.html.SafeStyle.sanitizeUrl_=function(a){return a.replace(goog.html.SafeStyle.URL_RE_,function(a,c,d,e){var b="";d=d.replace(/^(['"])(.*)\1$/,function(a,c,d){b=c;return d});a=goog.html.SafeUrl.sanitize(d).getTypedStringValue();return c+b+a+b+e})};
goog.html.SafeStyle.concat=function(a){var b="",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
goog.html.SafeStyleSheet.createRule=function(a,b){if(goog.string.internal.contains(a,"<"))throw Error("Selector does not allow '<', got: "+a);var c=a.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(c))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+a);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(c))throw Error("() and [] in selector must be balanced, got: "+a);b instanceof goog.html.SafeStyle||(b=goog.html.SafeStyle.create(b));
a=a+"{"+goog.html.SafeStyle.unwrap(b).replace(/</g,"\\3C ")+"}";return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.hasBalancedBrackets_=function(a){for(var b={"(":")","[":"]"},c=[],d=0;d<a.length;d++){var e=a[d];if(b[e])c.push(b[e]);else if(goog.object.contains(b,e)&&c.pop()!=e)return!1}return 0==c.length};
goog.html.SafeStyleSheet.concat=function(a){var b="",c=function(a){Array.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.internal.contains(a,"<"),"Forbidden '<' character in style sheet string: "+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};
goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"});
goog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};
goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};
goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")};
goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")};
goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};
goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_;goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_;goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
goog.labs.userAgent.browser.isEdgeChromium()?a(["Edg"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS","HeadlessChrome"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";var c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.ENABLE_ERROR_MESSAGES=goog.DEBUG;goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE=!0;goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()};goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});goog.html.SafeHtml.unwrap=function(a){return goog.html.SafeHtml.unwrapTrustedHTML(a).toString()};
goog.html.SafeHtml.unwrapTrustedHTML=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeHtml, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeHtml"};
goog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b="object"==typeof a,c=null;b&&a.implementsGoogI18nBidiDirectionalString&&(c=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(a),c)};
goog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.comment=function(a){return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!--"+goog.string.internal.htmlEscape(a)+"--\x3e",null)};goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};
goog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?"Invalid tag name <"+a+">.":"");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?"Tag name <"+a+"> is not allowed for SafeHtml.":"");};
goog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:""},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?"The browser does not support sandboxed iframes.":"");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);a=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",a)};
goog.html.SafeHtml.createScript=function(a,b){for(var c in b){var d=c.toLowerCase();if("language"==d||"src"==d||"text"==d||"type"==d)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot set "'+d+'" attribute':"");}c="";a=goog.array.concat(a);for(d=0;d<a.length;d++)c+=goog.html.SafeScript.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",b,a)};
goog.html.SafeHtml.createStyle=function(a,b){b=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},b);var c="";a=goog.array.concat(a);for(var d=0;d<a.length;d++)c+=goog.html.SafeStyleSheet.unwrap(a[d]);a=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",b,a)};
goog.html.SafeHtml.createMetaRefresh=function(a,b){a=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(b||0)+"; url="+a})};
goog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())if(goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE)c=goog.html.SafeHtml.getStyleValue_(c);else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute "style" not supported.':"");else{if(/^on/i.test(b))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute "'+b+'" requires goog.string.Const value, "'+c+'" given.':"");if(b.toLowerCase()in
goog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);else if("string"===typeof c)c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Attribute "'+b+'" on tag "'+a+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+c+'" given.':"");}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());
goog.asserts.assert("string"===typeof c||"number"===typeof c,"String or number value expected, got "+typeof c+" with value: "+c);return b+'="'+goog.string.internal.htmlEscape(String(c))+'"'};goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a:"");a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};
goog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};
goog.html.SafeHtml.join=function(a,b){a=goog.html.SafeHtml.htmlEscape(a);var c=a.getDirection(),d=[],e=function(a){Array.isArray(a)?goog.array.forEach(a,e):(a=goog.html.SafeHtml.htmlEscape(a),d.push(goog.html.SafeHtml.unwrap(a)),a=a.getDirection(),c==goog.i18n.bidi.Dir.NEUTRAL?c=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&c!=a&&(c=null))};goog.array.forEach(b,e);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d.join(goog.html.SafeHtml.unwrap(a)),c)};
goog.html.SafeHtml.concat=function(a){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))};goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(a):a;this.dir_=b;return this};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null;var e="<"+a+goog.html.SafeHtml.stringifyAttributes(a,b);null==c?c=[]:Array.isArray(c)||(c=[c]);goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,"Void tag <"+a+"> does not allow content."),e+=">"):(d=goog.html.SafeHtml.concat(c),e+=">"+goog.html.SafeHtml.unwrap(d)+"</"+a+">",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:null);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,
d)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c="";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Invalid attribute name "'+d+'".':"");var e=b[d];null!=e&&(c+=" "+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};
goog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=b[e];if(c)for(e in c){var f=e.toLowerCase();if(f in a)throw Error(goog.html.SafeHtml.ENABLE_ERROR_MESSAGES?'Cannot override "'+f+'" attribute, got "'+e+'" with value "'+c[e]+'"':"");f in b&&delete d[f];d[e]=c[e]}return d};
goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrapTrustedHTML(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue(function(){if(goog.DEBUG&&"undefined"===typeof document)return!1;var a=document.createElement("div"),b=document.createElement("div");b.appendChild(document.createElement("div"));a.appendChild(b);if(goog.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);return!b.parentElement});
goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setFormElementAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLFormElement(a).action=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setButtonFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLButtonElement(a).formAction=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.setInputFormAction=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);goog.dom.asserts.assertIsHTMLInputElement(a).formAction=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrapTrustedHTML(b))};
goog.dom.safe.setAnchorHref=function(a,b){goog.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:image\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.setAudioSrc=function(a,b){goog.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:audio\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};goog.dom.safe.setVideoSrc=function(a,b){goog.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof goog.html.SafeUrl)){var c=/^data:video\//i.test(b);b=goog.html.SafeUrl.sanitizeAssertUnchanged(b,c)}a.src=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.asserts.assertIsHTMLEmbedElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setFrameSrc=function(a,b){goog.dom.asserts.assertIsHTMLFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};
goog.dom.safe.setIframeSrcdoc=function(a,b){goog.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(b)};
goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.asserts.assertIsHTMLLinkElement(a);a.rel=c;goog.string.internal.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrap(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitizeAssertUnchanged(b))};
goog.dom.safe.setObjectData=function(a,b){goog.dom.asserts.assertIsHTMLObjectElement(a);a.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};
goog.dom.safe.setScriptContent=function(a,b){goog.dom.asserts.assertIsHTMLScriptElement(a);a.text=goog.html.SafeScript.unwrapTrustedScript(b);(b=goog.getScriptNonce())&&a.setAttribute("nonce",b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=goog.html.SafeUrl.unwrap(b)};
goog.dom.safe.assignLocation=function(a,b){goog.dom.asserts.assertIsLocation(a);b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(goog.html.SafeUrl.unwrap(b))};goog.dom.safe.replaceLocation=function(a,b){b=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(goog.html.SafeUrl.unwrap(b))};
goog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||goog.global;c=c instanceof goog.string.Const?goog.string.Const.unwrap(c):c||"";return b.open(goog.html.SafeUrl.unwrap(a),c,d,e)};goog.dom.safe.parseFromStringHtml=function(a,b){return goog.dom.safe.parseFromString(a,b,"text/html")};goog.dom.safe.parseFromString=function(a,b,c){return a.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(b),c)};
goog.dom.safe.createImageFromBlob=function(a){if(!/^image\/.*/g.test(a.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var b=goog.global.URL.createObjectURL(a);a=new goog.global.Image;a.onload=function(){goog.global.URL.revokeObjectURL(b)};goog.dom.safe.setImageSrc(a,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),b));return a};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};
goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};
goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;
goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};var d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;"#"==b.charAt(0)&&(b=Number("0"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(goog.dom.safe.setInnerHtml(d,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),
a+" ")),e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"};goog.string.jsEscapeCache_={"'":"\\'"};
goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c="\\x",16>b||256<b)c+="0"}else c="\\u",4096>b&&(c+="0");c+=b.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;
goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};
goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=void 0!==c?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};
goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;
goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};
goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b="string"===typeof b?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};
goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return"string"===typeof a?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||""};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")};
goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isKaiOS()?(b=/(?:KaiOS)\/(\S+)/i,
b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};
goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;
goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||"","X11")};
goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();
goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE){var a=goog.userAgent.getDocumentMode_();return a?a:parseInt(goog.userAgent.VERSION,10)||void 0}}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.";goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4};goog.crypt.base64.paddingChars_="=.";
goog.crypt.base64.isPadding_=function(a){return goog.string.contains(goog.crypt.base64.paddingChars_,a)};goog.crypt.base64.byteToCharMaps_={};goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;
goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");void 0===b&&(b=goog.crypt.base64.Alphabet.DEFAULT);goog.crypt.base64.init_();b=goog.crypt.base64.byteToCharMaps_[b];for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g]||"",b[k]||"")}return c.join("")};
goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a)});return c};
goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a)});return c};
goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=a.length,c=3*b/4;c%3?c=Math.floor(c):goog.crypt.base64.isPadding_(a[b-1])&&(c=goog.crypt.base64.isPadding_(a[b-2])?c-2:c-1);var d=new Uint8Array(c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a});return d.subarray(0,e)};
goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h))}};
goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var a=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++){var d=a.concat(b[c].split(""));goog.crypt.base64.byteToCharMaps_[c]=d;for(var e=0;e<d.length;e++){var f=d[e],g=goog.crypt.base64.charToByteMap_[f];void 0===g?goog.crypt.base64.charToByteMap_[f]=e:goog.asserts.assert(g===e)}}}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a};
jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c};
jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|
a)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23);16777216<=a&&++c;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a&8388607)>>>0}};
jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0}else{c=
a;var d=0;if(2<=c)for(;2<=c&&1023>d;)d++,c/=2;else for(;1>c&&-1022<d;)c*=2,d--;c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c}};
jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+(a>>>0)};
jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.toZigzag64=function(a,b,c){var d=b>>31;return c(a<<1^d,(b<<1|a>>>31)^d)};jspb.utils.joinZigzag64=function(a,b){return jspb.utils.fromZigzag64(a,b,jspb.utils.joinInt64)};jspb.utils.fromZigzag64=function(a,b,c){var d=-(a&1);return c((a>>>1|b<<31)^d,b>>>1^d)};
jspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};
jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");jspb.utils.ZERO_CHAR_CODE_=48;jspb.utils.A_CHAR_CODE_=97;
jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a,b){a=a?String(a):"";return b?"0000000".slice(a.length)+a:a}if(2097151>=b)return""+jspb.utils.joinUint64(a,b);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);return c(b,0)+c(d,b)+c(a,1)};
jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};
jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};
jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255}jspb.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,a.charCodeAt(f)-jspb.utils.ZERO_CHAR_CODE_);d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a))};
jspb.utils.toHexDigit_=function(a){return String.fromCharCode(10>a?jspb.utils.ZERO_CHAR_CODE_+a:jspb.utils.A_CHAR_CODE_-10+a)};jspb.utils.fromHexCharCode_=function(a){return a>=jspb.utils.A_CHAR_CODE_?a-jspb.utils.A_CHAR_CODE_+10:a-jspb.utils.ZERO_CHAR_CODE_};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.toHexDigit_(d>>4);b[2*c+3]=jspb.utils.toHexDigit_(d&15)}return b.join("")};
jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();jspb.asserts.assert(18==a.length);jspb.asserts.assert("0"==a[0]);jspb.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+2)),e=jspb.utils.fromHexCharCode_(a.charCodeAt(2*c+3));b=String.fromCharCode(16*d+e)+b}return b};
jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7}if(a[b++]!=g)break;f++;b+=e}return f};
jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16)}return b+'"'};
jspb.utils.debugScalarToTextFormat=function(a){return"string"===typeof a?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d}return b};
jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);if(a instanceof Uint8Array)return new Uint8Array(a.buffer,a.byteOffset,a.byteLength);jspb.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c)};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)};
jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};
jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=void 0!==b?b:0;this.end_=void 0!==c?this.start_+c:this.bytes_.length;this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};
jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_)};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
jspb.BinaryDecoder.prototype.readSplitVarint64=function(a){for(var b=128,c=0,d=0,e=0;4>e&&128<=b;e++)b=this.bytes_[this.cursor_++],c|=(b&127)<<7*e;128<=b&&(b=this.bytes_[this.cursor_++],c|=(b&127)<<28,d|=(b&127)>>4);if(128<=b)for(e=0;5>e&&128<=b;e++)b=this.bytes_[this.cursor_++],d|=(b&127)<<7*e+3;if(128>b)return a(c>>>0,d>>>0);jspb.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=!0};
jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(a){return this.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};jspb.BinaryDecoder.prototype.readSplitFixed64=function(a){var b=this.bytes_,c=this.cursor_;this.cursor_+=8;for(var d=0,e=0,f=c+7;f>=c;f--)d=d<<8|b[f],e=e<<8|b[f+4];return a(d,e)};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++};
jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--};
jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,jspb.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,jspb.asserts.assert(this.cursor_<=
this.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,jspb.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&jspb.asserts.assert(!1);jspb.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=function(){return~~this.readUnsignedVarint32()};jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)};
jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)};jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};
jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};
jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;jspb.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;jspb.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;jspb.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63)}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63)}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320)}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0)}e+=goog.crypt.byteArrayToString(d);
this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,jspb.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;jspb.asserts.assert(this.cursor_<=this.end_);return b};jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)};
jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null};jspb.BinaryReader.instanceCache_=[];
jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};goog.exportProperty(jspb.BinaryReader.prototype,"getFieldNumber",jspb.BinaryReader.prototype.getFieldNumber);jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED};
goog.exportProperty(jspb.BinaryReader.prototype,"isDelimited",jspb.BinaryReader.prototype.isDelimited);jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};goog.exportProperty(jspb.BinaryReader.prototype,"isEndGroup",jspb.BinaryReader.prototype.isEndGroup);jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};
jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a)};
jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return jspb.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return jspb.asserts.fail("Invalid wire type: %s (at position %s)",
a,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};goog.exportProperty(jspb.BinaryReader.prototype,"nextField",jspb.BinaryReader.prototype.nextField);jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()};
jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(jspb.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)jspb.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a)}};
jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(jspb.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(jspb.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)};
jspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){jspb.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(jspb.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}while(1)};
jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:jspb.asserts.fail("Invalid wire encoding for field.")}};
jspb.BinaryReader.prototype.registerReadCallback=function(a,b){null===this.readCallbacks_&&(this.readCallbacks_={});jspb.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b};jspb.BinaryReader.prototype.runReadCallback=function(a){jspb.asserts.assert(null!==this.readCallbacks_);a=this.readCallbacks_[a];jspb.asserts.assert(a);return a(this)};
jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
case b.GROUP:jspb.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:jspb.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
default:jspb.asserts.fail("Invalid field type in readAny()")}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c)};goog.exportProperty(jspb.BinaryReader.prototype,"readMessage",jspb.BinaryReader.prototype.readMessage);
jspb.BinaryReader.prototype.readGroup=function(a,b,c){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);jspb.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(jspb.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)};goog.exportProperty(jspb.BinaryReader.prototype,"readGroup",jspb.BinaryReader.prototype.readGroup);
jspb.BinaryReader.prototype.getFieldDecoder=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
goog.exportProperty(jspb.BinaryReader.prototype,"readInt32",jspb.BinaryReader.prototype.readInt32);jspb.BinaryReader.prototype.readInt32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
goog.exportProperty(jspb.BinaryReader.prototype,"readInt64",jspb.BinaryReader.prototype.readInt64);jspb.BinaryReader.prototype.readInt64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};jspb.BinaryReader.prototype.readUint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};
goog.exportProperty(jspb.BinaryReader.prototype,"readUint32",jspb.BinaryReader.prototype.readUint32);jspb.BinaryReader.prototype.readUint32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
goog.exportProperty(jspb.BinaryReader.prototype,"readUint64",jspb.BinaryReader.prototype.readUint64);jspb.BinaryReader.prototype.readUint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};
goog.exportProperty(jspb.BinaryReader.prototype,"readSint32",jspb.BinaryReader.prototype.readSint32);jspb.BinaryReader.prototype.readSint64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,"readSint64",jspb.BinaryReader.prototype.readSint64);
jspb.BinaryReader.prototype.readSint64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};goog.exportProperty(jspb.BinaryReader.prototype,"readFixed32",jspb.BinaryReader.prototype.readFixed32);
jspb.BinaryReader.prototype.readFixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};goog.exportProperty(jspb.BinaryReader.prototype,"readFixed64",jspb.BinaryReader.prototype.readFixed64);jspb.BinaryReader.prototype.readFixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};
jspb.BinaryReader.prototype.readSfixed32=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};goog.exportProperty(jspb.BinaryReader.prototype,"readSfixed32",jspb.BinaryReader.prototype.readSfixed32);jspb.BinaryReader.prototype.readSfixed32String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
jspb.BinaryReader.prototype.readSfixed64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};goog.exportProperty(jspb.BinaryReader.prototype,"readSfixed64",jspb.BinaryReader.prototype.readSfixed64);jspb.BinaryReader.prototype.readSfixed64String=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};
jspb.BinaryReader.prototype.readFloat=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};goog.exportProperty(jspb.BinaryReader.prototype,"readFloat",jspb.BinaryReader.prototype.readFloat);jspb.BinaryReader.prototype.readDouble=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};goog.exportProperty(jspb.BinaryReader.prototype,"readDouble",jspb.BinaryReader.prototype.readDouble);
jspb.BinaryReader.prototype.readBool=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};goog.exportProperty(jspb.BinaryReader.prototype,"readBool",jspb.BinaryReader.prototype.readBool);jspb.BinaryReader.prototype.readEnum=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};goog.exportProperty(jspb.BinaryReader.prototype,"readEnum",jspb.BinaryReader.prototype.readEnum);
jspb.BinaryReader.prototype.readString=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};goog.exportProperty(jspb.BinaryReader.prototype,"readString",jspb.BinaryReader.prototype.readString);jspb.BinaryReader.prototype.readBytes=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
goog.exportProperty(jspb.BinaryReader.prototype,"readBytes",jspb.BinaryReader.prototype.readBytes);jspb.BinaryReader.prototype.readVarintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readSintHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarintHash64()};
jspb.BinaryReader.prototype.readSplitVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(a)};jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSplitVarint64(function(b,c){return jspb.utils.fromZigzag64(b,c,a)})};
jspb.BinaryReader.prototype.readFixedHash64=function(){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};jspb.BinaryReader.prototype.readSplitFixed64=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readSplitFixed64(a)};
jspb.BinaryReader.prototype.readPackedField_=function(a){jspb.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedInt32",jspb.BinaryReader.prototype.readPackedInt32);
jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedInt64",jspb.BinaryReader.prototype.readPackedInt64);jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};
jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedUint32",jspb.BinaryReader.prototype.readPackedUint32);jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};
goog.exportProperty(jspb.BinaryReader.prototype,"readPackedUint64",jspb.BinaryReader.prototype.readPackedUint64);jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedSint32",jspb.BinaryReader.prototype.readPackedSint32);
jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedSint64",jspb.BinaryReader.prototype.readPackedSint64);jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};
goog.exportProperty(jspb.BinaryReader.prototype,"readPackedFixed32",jspb.BinaryReader.prototype.readPackedFixed32);jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedFixed64",jspb.BinaryReader.prototype.readPackedFixed64);jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};
jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedSfixed32",jspb.BinaryReader.prototype.readPackedSfixed32);jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedSfixed64",jspb.BinaryReader.prototype.readPackedSfixed64);
jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedFloat",jspb.BinaryReader.prototype.readPackedFloat);jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};
goog.exportProperty(jspb.BinaryReader.prototype,"readPackedDouble",jspb.BinaryReader.prototype.readPackedDouble);jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};goog.exportProperty(jspb.BinaryReader.prototype,"readPackedBool",jspb.BinaryReader.prototype.readPackedBool);jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};
goog.exportProperty(jspb.BinaryReader.prototype,"readPackedEnum",jspb.BinaryReader.prototype.readPackedEnum);jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.BinaryEncoder=function(){this.buffer_=[]};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(b==Math.floor(b));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b)};
jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));for(jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a)};
jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1)}};
jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0)};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(a))};jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(a){var b=this;jspb.utils.splitHash64(a);jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,function(a,d){b.writeSplitVarint64(a>>>0,d>>>0)})};
jspb.BinaryEncoder.prototype.writeUint8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeUint16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeUint32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};jspb.BinaryEncoder.prototype.writeUint64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt8=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255)};jspb.BinaryEncoder.prototype.writeInt16=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255)};
jspb.BinaryEncoder.prototype.writeInt32=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255)};
jspb.BinaryEncoder.prototype.writeInt64=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeInt64String=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFloat=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low)};
jspb.BinaryEncoder.prototype.writeDouble=function(a){jspb.asserts.assert(Infinity===a||-Infinity===a||isNaN(a)||a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};jspb.BinaryEncoder.prototype.writeBool=function(a){jspb.asserts.assert("boolean"===typeof a||"number"===typeof a);this.buffer_.push(a?1:0)};
jspb.BinaryEncoder.prototype.writeEnum=function(a){jspb.asserts.assert(a==Math.floor(a));jspb.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a)};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a)};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High)};
jspb.BinaryEncoder.prototype.writeString=function(a){var b=this.buffer_.length;jspb.asserts.assertString(a);for(var c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|
128),c++)}else this.buffer_.push(d>>12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128)}return this.buffer_.length-b};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};
jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c}""==a&&(a="0");return a};
jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c)}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b};
jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[]};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length};
jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(jspb.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++};
jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c))};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c)};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[]};
jspb.BinaryWriter.prototype.getResultBuffer=function(){jspb.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length}b=this.encoder_.end();a.set(b,d);d+=b.length;jspb.asserts.assert(d==a.length);this.blocks_=[a];return a};goog.exportProperty(jspb.BinaryWriter.prototype,"getResultBuffer",jspb.BinaryWriter.prototype.getResultBuffer);
jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a))};jspb.BinaryWriter.prototype.endSubMessage=function(){jspb.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop())};
jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){jspb.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b)};
jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:jspb.asserts.fail("Group field type not supported in writeAny()");
break;case d.MESSAGE:jspb.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:jspb.asserts.fail("Invalid field type in writeAny()")}};
jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b))};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b))};
jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b))};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b))};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b))};
jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b))};jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(b))};
jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeInt32",jspb.BinaryWriter.prototype.writeInt32);jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeInt64",jspb.BinaryWriter.prototype.writeInt64);jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeUint32",jspb.BinaryWriter.prototype.writeUint32);jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b))};
jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeUint64",jspb.BinaryWriter.prototype.writeUint64);jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi))};
jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeSint32",jspb.BinaryWriter.prototype.writeSint32);jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b))};
goog.exportProperty(jspb.BinaryWriter.prototype,"writeSint64",jspb.BinaryWriter.prototype.writeSint64);jspb.BinaryWriter.prototype.writeSintHash64=function(a,b){null!=b&&this.writeZigzagVarintHash64_(a,b)};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&this.writeZigzagVarint64String_(a,b)};
jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeFixed32",jspb.BinaryWriter.prototype.writeFixed32);
jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(jspb.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeFixed64",jspb.BinaryWriter.prototype.writeFixed64);
jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b))};
goog.exportProperty(jspb.BinaryWriter.prototype,"writeSfixed32",jspb.BinaryWriter.prototype.writeSfixed32);jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeSfixed64",jspb.BinaryWriter.prototype.writeSfixed64);
jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi))};jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeFloat",jspb.BinaryWriter.prototype.writeFloat);
jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeDouble",jspb.BinaryWriter.prototype.writeDouble);jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(jspb.asserts.assert("boolean"===typeof b||"number"===typeof b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b))};
goog.exportProperty(jspb.BinaryWriter.prototype,"writeBool",jspb.BinaryWriter.prototype.writeBool);jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(jspb.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeEnum",jspb.BinaryWriter.prototype.writeEnum);
jspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeString",jspb.BinaryWriter.prototype.writeString);jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b))};
goog.exportProperty(jspb.BinaryWriter.prototype,"writeBytes",jspb.BinaryWriter.prototype.writeBytes);jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeMessage",jspb.BinaryWriter.prototype.writeMessage);
jspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))};
jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP))};goog.exportProperty(jspb.BinaryWriter.prototype,"writeGroup",jspb.BinaryWriter.prototype.writeGroup);jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b))};
jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(jspb.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b))};jspb.BinaryWriter.prototype.writeSplitFixed64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(b,c)};
jspb.BinaryWriter.prototype.writeSplitVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(b,c)};jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(a,b,c){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);var d=this.encoder_;jspb.utils.toZigzag64(b,c,function(a,b){d.writeSplitVarint64(a>>>0,b>>>0)})};
jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedInt32",jspb.BinaryWriter.prototype.writeRepeatedInt32);jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedInt64",jspb.BinaryWriter.prototype.writeRepeatedInt64);jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitFixed64(a,c(b[e]),d(b[e]))};
jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(a,b,c,d){if(null!=b)for(var e=0;e<b.length;e++)this.writeSplitZigzagVarint64(a,c(b[e]),d(b[e]))};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedUint32",jspb.BinaryWriter.prototype.writeRepeatedUint32);jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedUint64",jspb.BinaryWriter.prototype.writeRepeatedUint64);jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedSint32",jspb.BinaryWriter.prototype.writeRepeatedSint32);jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedSint64",jspb.BinaryWriter.prototype.writeRepeatedSint64);
jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarintHash64_(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedFixed32",jspb.BinaryWriter.prototype.writeRepeatedFixed32);
jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedFixed64",jspb.BinaryWriter.prototype.writeRepeatedFixed64);jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedFixed64String",jspb.BinaryWriter.prototype.writeRepeatedFixed64String);
jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedSfixed32",jspb.BinaryWriter.prototype.writeRepeatedSfixed32);jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedSfixed64",jspb.BinaryWriter.prototype.writeRepeatedSfixed64);
jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c])};jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedFloat",jspb.BinaryWriter.prototype.writeRepeatedFloat);
jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedDouble",jspb.BinaryWriter.prototype.writeRepeatedDouble);jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedBool",jspb.BinaryWriter.prototype.writeRepeatedBool);
jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedEnum",jspb.BinaryWriter.prototype.writeRepeatedEnum);jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedString",jspb.BinaryWriter.prototype.writeRepeatedString);
jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c])};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedBytes",jspb.BinaryWriter.prototype.writeRepeatedBytes);jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedMessage",jspb.BinaryWriter.prototype.writeRepeatedMessage);
jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP)};goog.exportProperty(jspb.BinaryWriter.prototype,"writeRepeatedGroup",jspb.BinaryWriter.prototype.writeRepeatedGroup);jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c])};
jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c])};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedInt32",jspb.BinaryWriter.prototype.writePackedInt32);
jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedInt64",jspb.BinaryWriter.prototype.writePackedInt64);
jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitFixed64(c(b[e]),d(b[e]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=0;e<b.length;e++)this.encoder_.writeSplitVarint64(c(b[e]),d(b[e]));this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(a,b,c,d){if(null!=b){a=this.beginDelimited_(a);for(var e=this.encoder_,f=0;f<b.length;f++)jspb.utils.toZigzag64(c(b[f]),d(b[f]),function(a,b){e.writeSplitVarint64(a>>>0,b>>>0)});this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedUint32",jspb.BinaryWriter.prototype.writePackedUint32);
jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedUint64",jspb.BinaryWriter.prototype.writePackedUint64);
jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi)}this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a)}};
goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedSint32",jspb.BinaryWriter.prototype.writePackedSint32);jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedSint64",jspb.BinaryWriter.prototype.writePackedSint64);
jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(b[c]));this.endDelimited_(a)}};jspb.BinaryWriter.prototype.writePackedSintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarintHash64(b[c]);this.endDelimited_(a)}};
jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedFixed32",jspb.BinaryWriter.prototype.writePackedFixed32);
jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedFixed64",jspb.BinaryWriter.prototype.writePackedFixed64);
jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi)}};
jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedSfixed32",jspb.BinaryWriter.prototype.writePackedSfixed32);
jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedSfixed64",jspb.BinaryWriter.prototype.writePackedSfixed64);
jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a])};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a])};
goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedFloat",jspb.BinaryWriter.prototype.writePackedFloat);jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedDouble",jspb.BinaryWriter.prototype.writePackedDouble);
jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a])};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedBool",jspb.BinaryWriter.prototype.writePackedBool);
jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a)}};goog.exportProperty(jspb.BinaryWriter.prototype,"writePackedEnum",jspb.BinaryWriter.prototype.writePackedEnum);
jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a])};jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a)}};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_()};goog.exportSymbol("jspb.Map",jspb.Map);jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1])}this.arrClean=!0};
jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray()}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value])}this.arrClean=!0}return this.arr_};goog.exportProperty(jspb.Map.prototype,"toArray",jspb.Map.prototype.toArray);
jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(jspb.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value])}return d};goog.exportProperty(jspb.Map.prototype,"toObject",jspb.Map.prototype.toObject);jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f)}return b};
goog.exportProperty(jspb.Map,"fromObject",jspb.Map.fromObject);jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a};jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};
goog.exportProperty(jspb.Map.prototype,"getLength",jspb.Map.prototype.getLength);jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1};goog.exportProperty(jspb.Map.prototype,"clear",jspb.Map.prototype.clear);jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};goog.exportProperty(jspb.Map.prototype,"del",jspb.Map.prototype.del);
jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value])}return a};goog.exportProperty(jspb.Map.prototype,"getEntryList",jspb.Map.prototype.getEntryList);jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)])}return new jspb.Map.ArrayIteratorIterable_(a)};
goog.exportProperty(jspb.Map.prototype,"entries",jspb.Map.prototype.entries);jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};goog.exportProperty(jspb.Map.prototype,"keys",jspb.Map.prototype.keys);jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
goog.exportProperty(jspb.Map.prototype,"values",jspb.Map.prototype.values);jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this)}};goog.exportProperty(jspb.Map.prototype,"forEach",jspb.Map.prototype.forEach);jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};
goog.exportProperty(jspb.Map.prototype,"set",jspb.Map.prototype.set);jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};goog.exportProperty(jspb.Map.prototype,"get",jspb.Map.prototype.get);jspb.Map.prototype.has=function(a){return a.toString()in this.map_};goog.exportProperty(jspb.Map.prototype,"has",jspb.Map.prototype.has);
jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage()}};goog.exportProperty(jspb.Map.prototype,"serializeBinary",jspb.Map.prototype.serializeBinary);
jspb.Map.deserializeBinary=function(a,b,c,d,e,f,g){for(;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(jspb.asserts.assert(e),g||(g=new a.valueCtor_),d.call(b,g,e)):g=d.call(b))}jspb.asserts.assert(void 0!=f);jspb.asserts.assert(void 0!=g);a.set(f,g)};goog.exportProperty(jspb.Map,"deserializeBinary",jspb.Map.deserializeBinary);
jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e};goog.exportSymbol("jspb.ExtensionFieldInfo",jspb.ExtensionFieldInfo);jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f};goog.exportSymbol("jspb.ExtensionFieldBinaryInfo",jspb.ExtensionFieldBinaryInfo);
jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};goog.exportProperty(jspb.ExtensionFieldInfo.prototype,"isMessageType",jspb.ExtensionFieldInfo.prototype.isMessageType);jspb.Message=function(){};goog.exportSymbol("jspb.Message",jspb.Message);jspb.Message.GENERATE_TO_OBJECT=!0;goog.exportProperty(jspb.Message,"GENERATE_TO_OBJECT",jspb.Message.GENERATE_TO_OBJECT);jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
goog.exportProperty(jspb.Message,"GENERATE_FROM_OBJECT",jspb.Message.GENERATE_FROM_OBJECT);jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};goog.exportProperty(jspb.Message.prototype,"getJsPbMessageId",jspb.Message.prototype.getJsPbMessageId);jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};
jspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b])};goog.exportProperty(jspb.Message,"initialize",jspb.Message.initialize);jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:Array.isArray(a)};
jspb.Message.isExtensionObject_=function(a){return null!==a&&"object"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE};
jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={})};jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};goog.exportProperty(jspb.Message,"toObjectList",jspb.Message.toObjectList);
jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h}}};goog.exportProperty(jspb.Message,"toObjectExtension",jspb.Message.toObjectExtension);
jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
else f.binaryWriterFn.call(b,g.fieldIndex,h)}};goog.exportProperty(jspb.Message,"serializeBinaryExtensions",jspb.Message.serializeBinaryExtensions);
jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g)}else b.skipField()};goog.exportProperty(jspb.Message,"readBinaryExtension",jspb.Message.readBinaryExtension);
jspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};goog.exportProperty(jspb.Message,"getField",jspb.Message.getField);jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};goog.exportProperty(jspb.Message,"getRepeatedField",jspb.Message.getRepeatedField);
jspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};goog.exportProperty(jspb.Message,"getOptionalFloatingPointField",jspb.Message.getOptionalFloatingPointField);jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};goog.exportProperty(jspb.Message,"getBooleanField",jspb.Message.getBooleanField);
jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,"getRepeatedFloatingPointField",jspb.Message.getRepeatedFloatingPointField);
jspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0}return c};goog.exportProperty(jspb.Message,"getRepeatedBooleanField",jspb.Message.getRepeatedBooleanField);
jspb.Message.bytesAsB64=function(a){if(null==a||"string"===typeof a)return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);jspb.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,"bytesAsB64",jspb.Message.bytesAsB64);
jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if("string"===typeof a)return goog.crypt.base64.decodeStringToUint8Array(a);jspb.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};goog.exportProperty(jspb.Message,"bytesAsU8",jspb.Message.bytesAsU8);jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return a.length&&"string"!==typeof a[0]?goog.array.map(a,jspb.Message.bytesAsB64):a};
goog.exportProperty(jspb.Message,"bytesListAsB64",jspb.Message.bytesListAsB64);jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};goog.exportProperty(jspb.Message,"bytesListAsU8",jspb.Message.bytesListAsU8);
jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&jspb.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b)})}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,"getFieldWithDefault",jspb.Message.getFieldWithDefault);
jspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,"getBooleanFieldWithDefault",jspb.Message.getBooleanFieldWithDefault);jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};goog.exportProperty(jspb.Message,"getFloatingPointFieldWithDefault",jspb.Message.getFloatingPointFieldWithDefault);jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;
goog.exportProperty(jspb.Message,"getFieldProto3",jspb.Message.getFieldProto3);jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e)}return a.wrappers_[b]=new jspb.Map(e,d)};goog.exportProperty(jspb.Message,"getMapField",jspb.Message.getMapField);
jspb.Message.setField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);return a};goog.exportProperty(jspb.Message,"setField",jspb.Message.setField);jspb.Message.setProto3IntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,"setProto3IntField",jspb.Message.setProto3IntField);
jspb.Message.setProto3FloatField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,"setProto3FloatField",jspb.Message.setProto3FloatField);jspb.Message.setProto3BooleanField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,!1)};goog.exportProperty(jspb.Message,"setProto3BooleanField",jspb.Message.setProto3BooleanField);jspb.Message.setProto3StringField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};
goog.exportProperty(jspb.Message,"setProto3StringField",jspb.Message.setProto3StringField);jspb.Message.setProto3BytesField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"")};goog.exportProperty(jspb.Message,"setProto3BytesField",jspb.Message.setProto3BytesField);jspb.Message.setProto3EnumField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,0)};goog.exportProperty(jspb.Message,"setProto3EnumField",jspb.Message.setProto3EnumField);
jspb.Message.setProto3StringIntField=function(a,b,c){return jspb.Message.setFieldIgnoringDefault_(a,b,c,"0")};goog.exportProperty(jspb.Message,"setProto3StringIntField",jspb.Message.setProto3StringIntField);jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);c!==d?jspb.Message.setField(a,b,c):b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(a),delete a.extensionObject_[b]);return a};
jspb.Message.addToRepeatedField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);b=jspb.Message.getRepeatedField(a,b);void 0!=d?b.splice(d,0,c):b.push(c);return a};goog.exportProperty(jspb.Message,"addToRepeatedField",jspb.Message.addToRepeatedField);
jspb.Message.setOneofField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,"setOneofField",jspb.Message.setOneofField);
jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0))}return c?(jspb.Message.setField(a,c,d),c):0};goog.exportProperty(jspb.Message,"computeOneofCase",jspb.Message.computeOneofCase);jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e)}return a.wrappers_[c]};
goog.exportProperty(jspb.Message,"getWrapperField",jspb.Message.getWrapperField);jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};goog.exportProperty(jspb.Message,"getRepeatedWrapperField",jspb.Message.getRepeatedWrapperField);
jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e}};jspb.Message.setWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,"setWrapperField",jspb.Message.setWrapperField);
jspb.Message.setOneofWrapperField=function(a,b,c,d){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;return jspb.Message.setOneofField(a,b,c,e)};goog.exportProperty(jspb.Message,"setOneofWrapperField",jspb.Message.setOneofWrapperField);
jspb.Message.setRepeatedWrapperField=function(a,b,c){jspb.asserts.assertInstanceof(a,jspb.Message);a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;return jspb.Message.setField(a,b,d)};goog.exportProperty(jspb.Message,"setRepeatedWrapperField",jspb.Message.setRepeatedWrapperField);
jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};goog.exportProperty(jspb.Message,"addToRepeatedWrapperField",jspb.Message.addToRepeatedWrapperField);
jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};goog.exportProperty(jspb.Message,"toMap",jspb.Message.toMap);jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(Array.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray()}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};
goog.exportProperty(jspb.Message.prototype,"toArray",jspb.Message.prototype.toArray);jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
goog.exportProperty(jspb.Message.prototype,"getExtension",jspb.Message.prototype.getExtension);
jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};goog.exportProperty(jspb.Message.prototype,"setExtension",jspb.Message.prototype.setExtension);
jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};goog.exportProperty(jspb.Message,"difference",jspb.Message.difference);
jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};goog.exportProperty(jspb.Message,"equals",jspb.Message.equals);jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};goog.exportProperty(jspb.Message,"compareExtensions",jspb.Message.compareExtensions);
jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return"number"===typeof a&&isNaN(a)||"number"===typeof b&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&
g.constructor==Object&&(jspb.asserts.assert(void 0===d),jspb.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(jspb.asserts.assert(void 0===e),jspb.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};goog.exportProperty(jspb.Message,"compareFields",jspb.Message.compareFields);
jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,"cloneMessage",jspb.Message.prototype.cloneMessage);jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};goog.exportProperty(jspb.Message.prototype,"clone",jspb.Message.prototype.clone);jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};goog.exportProperty(jspb.Message,"clone",jspb.Message.clone);jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
jspb.Message.copyInto=function(a,b){jspb.asserts.assertInstanceof(a,jspb.Message);jspb.asserts.assertInstanceof(b,jspb.Message);jspb.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_};goog.exportProperty(jspb.Message,"copyInto",jspb.Message.copyInto);
jspb.Message.clone_=function(a){if(Array.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d)}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(jspb.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){b.messageId=a};
goog.exportProperty(jspb.Message,"registerMessageType",jspb.Message.registerMessageType);jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.Export={}; true&&(exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf);


/***/ }),

/***/ "./src/css/fonts.css":
/*!***************************!*\
  !*** ./src/css/fonts.css ***!
  \***************************/
/***/ (() => {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/css/index_friends.css":
/*!***********************************!*\
  !*** ./src/css/index_friends.css ***!
  \***********************************/
/***/ (() => {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../../../web_src/shared/js/ui/shared_dialog.css":
/*!*******************************************************!*\
  !*** ../../../web_src/shared/js/ui/shared_dialog.css ***!
  \*******************************************************/
/***/ (() => {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../../../web_src/shared/js/ui/shared_svg_library.scss":
/*!*************************************************************!*\
  !*** ../../../web_src/shared/js/ui/shared_svg_library.scss ***!
  \*************************************************************/
/***/ ((module) => {

// extracted by mini-css-extract-plugin
module.exports = {"EmoticonBow":"shared_svg_library_EmoticonBow_3pZfA","EmoticonBow_st0":"shared_svg_library_EmoticonBow_st0_qBW44","EmoticonBow_st1":"shared_svg_library_EmoticonBow_st1_23IlE","SteamDeckCompatInfo":"shared_svg_library_SteamDeckCompatInfo_3TbPV","SteamDeckCompatLogo":"shared_svg_library_SteamDeckCompatLogo_Q6MwZ","SteamDeckCompatIcon":"shared_svg_library_SteamDeckCompatIcon_2hKXi","SteamDeckCompatVerified":"shared_svg_library_SteamDeckCompatVerified_1PZiH","SteamDeckCompatPlayable":"shared_svg_library_SteamDeckCompatPlayable_uTOLJ","SteamDeckCompatUnsupported":"shared_svg_library_SteamDeckCompatUnsupported_3XLWD","SteamDeckCompatUnknown":"shared_svg_library_SteamDeckCompatUnknown_53DS6"};

/***/ }),

/***/ "../../../web_src/shared/js/ui/throbber.scss":
/*!***************************************************!*\
  !*** ../../../web_src/shared/js/ui/throbber.scss ***!
  \***************************************************/
/***/ ((module) => {

// extracted by mini-css-extract-plugin
module.exports = {"LoadingWrapper":"throbber_LoadingWrapper_1HyRg","Static":"throbber_Static_18ooy","none":"throbber_none_3dXVh","bottomCircle":"throbber_bottomCircle_25ip-","noString":"throbber_noString_25hUI","Throbber":"throbber_Throbber_v2Wva","throbber_small":"throbber_throbber_small_4dIL2","throbber_medium":"throbber_throbber_medium_QXu8P","throbber_large":"throbber_throbber_large_3nisx","throbber_center_wrapper":"throbber_throbber_center_wrapper_3hIjC","ThrobberText":"throbber_ThrobberText_2LAFw","blur":"throbber_blur_1Zb5U","ThrobberRoundLoop":"throbber_ThrobberRoundLoop_1PbAa","roundOuterOutline":"throbber_roundOuterOutline_TrexM","roundOuter":"throbber_roundOuter_5ck73","roundFill":"throbber_roundFill_3rrUj","ThrobberFillLoop":"throbber_ThrobberFillLoop_HAZ1M","topCircle":"throbber_topCircle__EJ7b","circlePulse":"throbber_circlePulse_379p5","ThrobberTopCircleLoop":"throbber_ThrobberTopCircleLoop_2GFtS","ThrobberBottomCircleLoop":"throbber_ThrobberBottomCircleLoop_7qnpn","roundThrobber15":"throbber_roundThrobber15_3Xmey","roundThrobber14":"throbber_roundThrobber14_3Bz3S","roundThrobber13":"throbber_roundThrobber13_3He3o","roundThrobber12":"throbber_roundThrobber12_1wN9D","roundThrobber11":"throbber_roundThrobber11_6i7GD","roundThrobber10":"throbber_roundThrobber10_12Nu_","roundThrobber09":"throbber_roundThrobber09_2tK3N","roundThrobber08":"throbber_roundThrobber08_3ARjZ","roundThrobber07":"throbber_roundThrobber07_2O6v6","roundThrobber06":"throbber_roundThrobber06_3IwAT","roundThrobber05":"throbber_roundThrobber05_2PAW0","roundThrobber04":"throbber_roundThrobber04_3GvQ1","roundThrobber03":"throbber_roundThrobber03_SCH1y","roundThrobber02":"throbber_roundThrobber02_1OqfY","roundThrobber01":"throbber_roundThrobber01_1VNop","ThrobberRoundLoopThickness":"throbber_ThrobberRoundLoopThickness_2cif1","throbber_xlarge":"throbber_throbber_xlarge_3LxJj","throbber_xxlarge":"throbber_throbber_xxlarge_1mUb9","ThrobberDelayAppear":"throbber_ThrobberDelayAppear_25iLt","Visible":"throbber_Visible_19Akj"};

/***/ }),

/***/ "./node_modules/mobx-react-lite/es/ObserverComponent.js":
/*!**************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/ObserverComponent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* binding */ ObserverComponent)
/* harmony export */ });
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useObserver */ "./node_modules/mobx-react-lite/es/useObserver.js");

function ObserverComponent(_a) {
    var children = _a.children, render = _a.render;
    var component = children || render;
    if (typeof component !== "function") {
        return null;
    }
    return (0,_useObserver__WEBPACK_IMPORTED_MODULE_0__.useObserver)(component);
}
ObserverComponent.propTypes = {
    children: ObserverPropsCheck,
    render: ObserverPropsCheck
};
ObserverComponent.displayName = "Observer";

function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp && hasExtraProp) {
        return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp || hasExtraProp) {
        return null;
    }
    return new Error("Invalid prop `" +
        propFullName +
        "` of type `" +
        typeof props[key] +
        "` supplied to" +
        " `" +
        componentName +
        "`, expected `function`.");
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/assertEnvironment.js":
/*!**************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/assertEnvironment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


if (!react__WEBPACK_IMPORTED_MODULE_1__.useState) {
    throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!mobx__WEBPACK_IMPORTED_MODULE_0__.spy) {
    throw new Error("mobx-react-lite requires mobx at least version 4 to be available");
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* reexport safe */ _ObserverComponent__WEBPACK_IMPORTED_MODULE_6__.Observer),
/* harmony export */   "isObserverBatched": () => (/* reexport safe */ _observerBatching__WEBPACK_IMPORTED_MODULE_2__.isObserverBatched),
/* harmony export */   "isUsingStaticRendering": () => (/* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_3__.isUsingStaticRendering),
/* harmony export */   "observer": () => (/* reexport safe */ _observer__WEBPACK_IMPORTED_MODULE_4__.observer),
/* harmony export */   "observerBatching": () => (/* reexport safe */ _observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching),
/* harmony export */   "useAsObservableSource": () => (/* reexport safe */ _useAsObservableSource__WEBPACK_IMPORTED_MODULE_8__.useAsObservableSource),
/* harmony export */   "useForceUpdate": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_7__.useForceUpdate),
/* harmony export */   "useLocalStore": () => (/* reexport safe */ _useLocalStore__WEBPACK_IMPORTED_MODULE_9__.useLocalStore),
/* harmony export */   "useObserver": () => (/* reexport safe */ _useObserver__WEBPACK_IMPORTED_MODULE_5__.useObserver),
/* harmony export */   "useQueuedForceUpdate": () => (/* reexport safe */ _useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_10__.useQueuedForceUpdate),
/* harmony export */   "useQueuedForceUpdateBlock": () => (/* reexport safe */ _useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_10__.useQueuedForceUpdateBlock),
/* harmony export */   "useStaticRendering": () => (/* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_3__.useStaticRendering)
/* harmony export */ });
/* harmony import */ var _assertEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assertEnvironment */ "./node_modules/mobx-react-lite/es/assertEnvironment.js");
/* harmony import */ var _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ "./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js");
/* harmony import */ var _observerBatching__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observerBatching */ "./node_modules/mobx-react-lite/es/observerBatching.js");
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/mobx-react-lite/es/staticRendering.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observer */ "./node_modules/mobx-react-lite/es/observer.js");
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useObserver */ "./node_modules/mobx-react-lite/es/useObserver.js");
/* harmony import */ var _ObserverComponent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ObserverComponent */ "./node_modules/mobx-react-lite/es/ObserverComponent.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./node_modules/mobx-react-lite/es/utils.js");
/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useAsObservableSource */ "./node_modules/mobx-react-lite/es/useAsObservableSource.js");
/* harmony import */ var _useLocalStore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useLocalStore */ "./node_modules/mobx-react-lite/es/useLocalStore.js");
/* harmony import */ var _useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useQueuedForceUpdate */ "./node_modules/mobx-react-lite/es/useQueuedForceUpdate.js");



(0,_observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates);











/***/ }),

/***/ "./node_modules/mobx-react-lite/es/observer.js":
/*!*****************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/observer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observer": () => (/* binding */ observer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/mobx-react-lite/es/staticRendering.js");
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useObserver */ "./node_modules/mobx-react-lite/es/useObserver.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



// n.b. base case is not used for actual typings or exported in the typing files
function observer(baseComponent, options) {
    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)()) {
        return baseComponent;
    }
    var realOptions = __assign({ forwardRef: false }, options);
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    var wrappedComponent = function (props, ref) {
        return (0,_useObserver__WEBPACK_IMPORTED_MODULE_2__.useObserver)(function () { return baseComponent(props, ref); }, baseComponentName);
    };
    wrappedComponent.displayName = baseComponentName;
    // memo; we are not interested in deep updates
    // in props; we assume that if deep objects are changed,
    // this is in observables, which would have been tracked anyway
    var memoComponent;
    if (realOptions.forwardRef) {
        // we have to use forwardRef here because:
        // 1. it cannot go before memo, only after it
        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it
        //    since it wouldn't be a callable function anymore
        memoComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(wrappedComponent));
    }
    else {
        memoComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(wrappedComponent);
    }
    copyStaticProperties(baseComponent, memoComponent);
    memoComponent.displayName = baseComponentName;
    return memoComponent;
}
// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true
};
function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function (key) {
        if (!hoistBlackList[key]) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
    });
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/observerBatching.js":
/*!*************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/observerBatching.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultNoopBatch": () => (/* binding */ defaultNoopBatch),
/* harmony export */   "isObserverBatched": () => (/* binding */ isObserverBatched),
/* harmony export */   "observerBatching": () => (/* binding */ observerBatching)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/mobx-react-lite/es/utils.js");


var observerBatchingConfiguredSymbol = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getSymbol)("observerBatching");
function defaultNoopBatch(callback) {
    callback();
}
function observerBatching(reactionScheduler) {
    if (!reactionScheduler) {
        reactionScheduler = defaultNoopBatch;
        if (true) {
            console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
        }
    }
    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.configure)({ reactionScheduler: reactionScheduler });
    (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)()[observerBatchingConfiguredSymbol] = true;
}
var isObserverBatched = function () { return !!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)()[observerBatchingConfiguredSymbol]; };


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/printDebugValue.js":
/*!************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/printDebugValue.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printDebugValue": () => (/* binding */ printDebugValue)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");

function printDebugValue(v) {
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.getDependencyTree)(v);
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/reactionCleanupTracking.js":
/*!********************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/reactionCleanupTracking.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS": () => (/* binding */ CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS),
/* harmony export */   "CLEANUP_TIMER_LOOP_MILLIS": () => (/* binding */ CLEANUP_TIMER_LOOP_MILLIS),
/* harmony export */   "createTrackingData": () => (/* binding */ createTrackingData),
/* harmony export */   "forceCleanupTimerToRunNowForTests": () => (/* binding */ forceCleanupTimerToRunNowForTests),
/* harmony export */   "recordReactionAsCommitted": () => (/* binding */ recordReactionAsCommitted),
/* harmony export */   "resetCleanupScheduleForTests": () => (/* binding */ resetCleanupScheduleForTests),
/* harmony export */   "scheduleCleanupOfReactionIfLeaked": () => (/* binding */ scheduleCleanupOfReactionIfLeaked)
/* harmony export */ });
function createTrackingData(reaction) {
    var trackingData = {
        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,
        reaction: reaction
    };
    return trackingData;
}
/**
 * The minimum time before we'll clean up a Reaction created in a render
 * for a component that hasn't managed to run its effects. This needs to
 * be big enough to ensure that a component won't turn up and have its
 * effects run without being re-rendered.
 */
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
/**
 * The frequency with which we'll check for leaked reactions.
 */
var CLEANUP_TIMER_LOOP_MILLIS = 10000;
/**
 * Reactions created by components that have yet to be fully mounted.
 */
var uncommittedReactionRefs = new Set();
/**
 * Latest 'uncommitted reactions' cleanup timer handle.
 */
var reactionCleanupHandle;
function ensureCleanupTimerRunning() {
    if (reactionCleanupHandle === undefined) {
        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
    }
}
function scheduleCleanupOfReactionIfLeaked(ref) {
    uncommittedReactionRefs.add(ref);
    ensureCleanupTimerRunning();
}
function recordReactionAsCommitted(reactionRef) {
    uncommittedReactionRefs.delete(reactionRef);
}
/**
 * Run by the cleanup timer to dispose any outstanding reactions
 */
function cleanUncommittedReactions() {
    reactionCleanupHandle = undefined;
    // Loop through all the candidate leaked reactions; those older
    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.
    var now = Date.now();
    uncommittedReactionRefs.forEach(function (ref) {
        var tracking = ref.current;
        if (tracking) {
            if (now >= tracking.cleanAt) {
                // It's time to tidy up this leaked reaction.
                tracking.reaction.dispose();
                ref.current = null;
                uncommittedReactionRefs.delete(ref);
            }
        }
    });
    if (uncommittedReactionRefs.size > 0) {
        // We've just finished a round of cleanups but there are still
        // some leak candidates outstanding.
        ensureCleanupTimerRunning();
    }
}
/* istanbul ignore next */
/**
 * Only to be used by test functions; do not export outside of mobx-react-lite
 */
function forceCleanupTimerToRunNowForTests() {
    // This allows us to control the execution of the cleanup timer
    // to force it to run at awkward times in unit tests.
    if (reactionCleanupHandle) {
        clearTimeout(reactionCleanupHandle);
        cleanUncommittedReactions();
    }
}
/* istanbul ignore next */
function resetCleanupScheduleForTests() {
    if (reactionCleanupHandle) {
        clearTimeout(reactionCleanupHandle);
        reactionCleanupHandle = undefined;
    }
    uncommittedReactionRefs.clear();
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/staticRendering.js":
/*!************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/staticRendering.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUsingStaticRendering": () => (/* binding */ isUsingStaticRendering),
/* harmony export */   "useStaticRendering": () => (/* binding */ useStaticRendering)
/* harmony export */ });
var globalIsUsingStaticRendering = false;
function useStaticRendering(enable) {
    globalIsUsingStaticRendering = enable;
}
function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useAsObservableSource.js":
/*!******************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useAsObservableSource.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useAsObservableSource": () => (/* binding */ useAsObservableSource),
/* harmony export */   "useAsObservableSourceInternal": () => (/* binding */ useAsObservableSourceInternal)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/mobx-react-lite/es/utils.js");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function useAsObservableSourceInternal(current, usedByLocalStore) {
    var culprit = usedByLocalStore ? "useLocalStore" : "useAsObservableSource";
    if ( true && usedByLocalStore) {
        var _a = __read(react__WEBPACK_IMPORTED_MODULE_1___default().useState(current), 1), initialSource = _a[0];
        if ((initialSource !== undefined && current === undefined) ||
            (initialSource === undefined && current !== undefined)) {
            throw new Error("make sure you never pass `undefined` to " + culprit);
        }
    }
    if (usedByLocalStore && current === undefined) {
        return undefined;
    }
    if ( true && !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(current)) {
        throw new Error(culprit + " expects a plain object as " + (usedByLocalStore ? "second" : "first") + " argument");
    }
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1___default().useState(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observable)(current, {}, { deep: false }); }), 1), res = _b[0];
    if ( true &&
        Object.keys(res).length !== Object.keys(current).length) {
        throw new Error("the shape of objects passed to " + culprit + " should be stable");
    }
    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () {
        Object.assign(res, current);
    });
    return res;
}
function useAsObservableSource(current) {
    return useAsObservableSourceInternal(current, false);
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useLocalStore.js":
/*!**********************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useLocalStore.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLocalStore": () => (/* binding */ useLocalStore)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAsObservableSource */ "./node_modules/mobx-react-lite/es/useAsObservableSource.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./node_modules/mobx-react-lite/es/utils.js");




function useLocalStore(initializer, current) {
    var source = (0,_useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__.useAsObservableSourceInternal)(current, true);
    return react__WEBPACK_IMPORTED_MODULE_1___default().useState(function () {
        var local = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observable)(initializer(source));
        if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(local)) {
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () {
                Object.keys(local).forEach(function (key) {
                    var value = local[key];
                    if (typeof value === "function") {
                        // @ts-ignore No idea why ts2536 is popping out here
                        local[key] = wrapInTransaction(value, local);
                    }
                });
            });
        }
        return local;
    })[0];
}
// tslint:disable-next-line: ban-types
function wrapInTransaction(fn, context) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.transaction)(function () { return fn.apply(context, args); });
    };
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useObserver.js":
/*!********************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useObserver.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useObserver": () => (/* binding */ useObserver)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _printDebugValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./printDebugValue */ "./node_modules/mobx-react-lite/es/printDebugValue.js");
/* harmony import */ var _reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reactionCleanupTracking */ "./node_modules/mobx-react-lite/es/reactionCleanupTracking.js");
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/mobx-react-lite/es/staticRendering.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ "./node_modules/mobx-react-lite/es/utils.js");
/* harmony import */ var _useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useQueuedForceUpdate */ "./node_modules/mobx-react-lite/es/useQueuedForceUpdate.js");







var EMPTY_OBJECT = {};
function observerComponentNameFor(baseComponentName) {
    return "observer" + baseComponentName;
}
function useObserver(fn, baseComponentName, options) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (options === void 0) { options = EMPTY_OBJECT; }
    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_4__.isUsingStaticRendering)()) {
        return fn();
    }
    var wantedForceUpdateHook = options.useForceUpdate || _utils__WEBPACK_IMPORTED_MODULE_5__.useForceUpdate;
    var forceUpdate = wantedForceUpdateHook();
    var queuedForceUpdate = (0,_useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_6__.useQueuedForceUpdate)(forceUpdate);
    // StrictMode/ConcurrentMode/Suspense may mean that our component is
    // rendered and abandoned multiple times, so we need to track leaked
    // Reactions.
    var reactionTrackingRef = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(null);
    if (!reactionTrackingRef.current) {
        // First render for this component (or first time since a previous
        // reaction from an abandoned render was disposed).
        var newReaction_1 = new mobx__WEBPACK_IMPORTED_MODULE_0__.Reaction(observerComponentNameFor(baseComponentName), function () {
            // Observable has changed, meaning we want to re-render
            // BUT if we're a component that hasn't yet got to the useEffect()
            // stage, we might be a component that _started_ to render, but
            // got dropped, and we don't want to make state changes then.
            // (It triggers warnings in StrictMode, for a start.)
            if (trackingData_1.mounted) {
                // We have reached useEffect(), so we're mounted, and can trigger an update
                queuedForceUpdate();
            }
            else {
                // We haven't yet reached useEffect(), so we'll need to trigger a re-render
                // when (and if) useEffect() arrives.  The easiest way to do that is just to
                // drop our current reaction and allow useEffect() to recreate it.
                newReaction_1.dispose();
                reactionTrackingRef.current = null;
            }
        });
        var trackingData_1 = (0,_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_3__.createTrackingData)(newReaction_1);
        reactionTrackingRef.current = trackingData_1;
        (0,_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_3__.scheduleCleanupOfReactionIfLeaked)(reactionTrackingRef);
    }
    var reaction = reactionTrackingRef.current.reaction;
    react__WEBPACK_IMPORTED_MODULE_1___default().useDebugValue(reaction, _printDebugValue__WEBPACK_IMPORTED_MODULE_2__.printDebugValue);
    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(function () {
        // Called on first mount only
        (0,_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_3__.recordReactionAsCommitted)(reactionTrackingRef);
        if (reactionTrackingRef.current) {
            // Great. We've already got our reaction from our render;
            // all we need to do is to record that it's now mounted,
            // to allow future observable changes to trigger re-renders
            reactionTrackingRef.current.mounted = true;
        }
        else {
            // The reaction we set up in our render has been disposed.
            // This is either due to bad timings of renderings, e.g. our
            // component was paused for a _very_ long time, and our
            // reaction got cleaned up, or we got a observable change
            // between render and useEffect
            // Re-create the reaction
            reactionTrackingRef.current = {
                reaction: new mobx__WEBPACK_IMPORTED_MODULE_0__.Reaction(observerComponentNameFor(baseComponentName), function () {
                    // We've definitely already been mounted at this point
                    queuedForceUpdate();
                }),
                cleanAt: Infinity
            };
            queuedForceUpdate();
        }
        return function () {
            reactionTrackingRef.current.reaction.dispose();
            reactionTrackingRef.current = null;
        };
    }, []);
    // delay all force-update calls after rendering of this component
    return (0,_useQueuedForceUpdate__WEBPACK_IMPORTED_MODULE_6__.useQueuedForceUpdateBlock)(function () {
        // render the original component, but have the
        // reaction track the observables, so that rendering
        // can be invalidated (see above) once a dependency changes
        var rendering;
        var exception;
        reaction.track(function () {
            try {
                rendering = fn();
            }
            catch (e) {
                exception = e;
            }
        });
        if (exception) {
            throw exception; // re-throw any exceptions caught during rendering
        }
        return rendering;
    });
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/useQueuedForceUpdate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/useQueuedForceUpdate.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useQueuedForceUpdate": () => (/* binding */ useQueuedForceUpdate),
/* harmony export */   "useQueuedForceUpdateBlock": () => (/* binding */ useQueuedForceUpdateBlock)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var insideRender = false;
var forceUpdateQueue = [];
function useQueuedForceUpdate(forceUpdate) {
    return function () {
        if (insideRender) {
            forceUpdateQueue.push(forceUpdate);
        }
        else {
            forceUpdate();
        }
    };
}
function useQueuedForceUpdateBlock(callback) {
    // start intercepting force-update calls
    insideRender = true;
    forceUpdateQueue = [];
    try {
        var result = callback();
        // stop intercepting force-update
        insideRender = false;
        // store queue or nothing if it was empty to execute useLayoutEffect only when necessary
        var queue_1 = forceUpdateQueue.length > 0 ? forceUpdateQueue : undefined;
        // run force-update queue in useLayoutEffect
        react__WEBPACK_IMPORTED_MODULE_0___default().useLayoutEffect(function () {
            if (queue_1) {
                queue_1.forEach(function (x) { return x(); });
            }
        }, [queue_1]);
        return result;
    }
    finally {
        insideRender = false;
    }
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGlobal": () => (/* binding */ getGlobal),
/* harmony export */   "getSymbol": () => (/* binding */ getSymbol),
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject),
/* harmony export */   "useForceUpdate": () => (/* binding */ useForceUpdate),
/* harmony export */   "useUnmount": () => (/* binding */ useUnmount)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

var EMPTY_ARRAY = [];
function useUnmount(fn) {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () { return fn; }, EMPTY_ARRAY);
}
function useForceUpdate() {
    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), 2), setTick = _a[1];
    var update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
        setTick(function (tick) { return tick + 1; });
    }, []);
    return update;
}
function isPlainObject(value) {
    if (!value || typeof value !== "object") {
        return false;
    }
    var proto = Object.getPrototypeOf(value);
    return !proto || proto === Object.prototype;
}
function getSymbol(name) {
    if (typeof Symbol === "function") {
        return Symbol.for(name);
    }
    return "__$mobx-react " + name + "__";
}
var mockGlobal = {};
function getGlobal() {
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof __webpack_require__.g !== "undefined") {
        return __webpack_require__.g;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    return mockGlobal;
}


/***/ }),

/***/ "./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unstable_batchedUpdates": () => (/* reexport safe */ react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates)
/* harmony export */ });
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);



/***/ }),

/***/ "./node_modules/mobx-react/dist/mobxreact.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/mobx-react/dist/mobxreact.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MobXProviderContext": () => (/* binding */ MobXProviderContext),
/* harmony export */   "Observer": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.Observer),
/* harmony export */   "PropTypes": () => (/* binding */ PropTypes),
/* harmony export */   "Provider": () => (/* binding */ Provider),
/* harmony export */   "disposeOnUnmount": () => (/* binding */ disposeOnUnmount),
/* harmony export */   "inject": () => (/* binding */ inject),
/* harmony export */   "isUsingStaticRendering": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.isUsingStaticRendering),
/* harmony export */   "observer": () => (/* binding */ observer),
/* harmony export */   "observerBatching": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.observerBatching),
/* harmony export */   "useAsObservableSource": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.useAsObservableSource),
/* harmony export */   "useLocalStore": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.useLocalStore),
/* harmony export */   "useObserver": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.useObserver),
/* harmony export */   "useStaticRendering": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.useStaticRendering)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx-react-lite */ "./node_modules/mobx-react-lite/es/index.js");





var symbolId = 0;

function createSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
  symbolId++;
  return symbol;
}

var createdSymbols = {};
function newSymbol(name) {
  if (!createdSymbols[name]) {
    createdSymbols[name] = createSymbol(name);
  }

  return createdSymbols[name];
}
function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) return true;

  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


var hoistBlackList = {
  $$typeof: 1,
  render: 1,
  compare: 1,
  type: 1,
  childContextTypes: 1,
  contextType: 1,
  contextTypes: 1,
  defaultProps: 1,
  getDefaultProps: 1,
  getDerivedStateFromError: 1,
  getDerivedStateFromProps: 1,
  mixins: 1,
  propTypes: 1
};
function copyStaticProperties(base, target) {
  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
  Object.getOwnPropertyNames(base).forEach(function (key) {
    if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}
/**
 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
 * and the handler provided by mobx-react
 */

var mobxMixins =
/*#__PURE__*/
newSymbol("patchMixins");
var mobxPatchedDefinition =
/*#__PURE__*/
newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName, mixinMethod) {
  var mixins = getMixins(target, methodName);

  if (mixins.methods.indexOf(mixinMethod) < 0) {
    mixins.methods.push(mixinMethod);
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
    return wrappedFunc;
  }, _ref.set = function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
}

var mobxAdminProperty = mobx__WEBPACK_IMPORTED_MODULE_0__.$mobx || "$mobx";
var mobxObserverProperty =
/*#__PURE__*/
newSymbol("isMobXReactObserver");
var mobxIsUnmounted =
/*#__PURE__*/
newSymbol("isUnmounted");
var skipRenderKey =
/*#__PURE__*/
newSymbol("skipRender");
var isForcingUpdateKey =
/*#__PURE__*/
newSymbol("isForcingUpdate");
function makeClassComponentObserver(componentClass) {
  var target = componentClass.prototype;

  if (componentClass[mobxObserverProperty]) {
    var displayName = getDisplayName(target);
    console.warn("The provided component class (" + displayName + ") \n                has already been declared as an observer component.");
  } else {
    componentClass[mobxObserverProperty] = true;
  }

  if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");

  if (componentClass["__proto__"] !== react__WEBPACK_IMPORTED_MODULE_1__.PureComponent) {
    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
  } // this.props and this.state are made observable, just to make sure @computed fields that
  // are defined inside the component, and which rely on state or props, re-compute if state or props change
  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


  makeObservableProp(target, "props");
  makeObservableProp(target, "state");
  var baseRender = target.render;

  target.render = function () {
    return makeComponentReactive.call(this, baseRender);
  };

  patch(target, "componentWillUnmount", function () {
    var _this$render$mobxAdmi;

    if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.isUsingStaticRendering)() === true) return;
    (_this$render$mobxAdmi = this.render[mobxAdminProperty]) === null || _this$render$mobxAdmi === void 0 ? void 0 : _this$render$mobxAdmi.dispose();
    this[mobxIsUnmounted] = true;

    if (!this.render[mobxAdminProperty]) {
      // Render may have been hot-swapped and/or overriden by a subclass.
      var _displayName = getDisplayName(this);

      console.warn("The reactive render of an observer class component (" + _displayName + ") \n                was overriden after MobX attached. This may result in a memory leak if the \n                overriden reactive render was not properly disposed.");
    }
  });
  return componentClass;
} // Generates a friendly name for debugging

function getDisplayName(comp) {
  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
}

function makeComponentReactive(render) {
  var _this = this;

  if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.isUsingStaticRendering)() === true) return render.call(this);
  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */

  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false);
  var initialName = getDisplayName(this);
  var baseRender = render.bind(this);
  var isRenderingPending = false;
  var reaction = new mobx__WEBPACK_IMPORTED_MODULE_0__.Reaction(initialName + ".render()", function () {
    if (!isRenderingPending) {
      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
      // This unidiomatic React usage but React will correctly warn about this so we continue as usual
      // See #85 / Pull #44
      isRenderingPending = true;

      if (_this[mobxIsUnmounted] !== true) {
        var hasError = true;

        try {
          setHiddenProp(_this, isForcingUpdateKey, true);
          if (!_this[skipRenderKey]) react__WEBPACK_IMPORTED_MODULE_1__.Component.prototype.forceUpdate.call(_this);
          hasError = false;
        } finally {
          setHiddenProp(_this, isForcingUpdateKey, false);
          if (hasError) reaction.dispose();
        }
      }
    }
  });
  reaction["reactComponent"] = this;
  reactiveRender[mobxAdminProperty] = reaction;
  this.render = reactiveRender;

  function reactiveRender() {
    isRenderingPending = false;
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      try {
        rendering = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChanges)(false, baseRender);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      throw exception;
    }

    return rendering;
  }

  return reactiveRender.call(this);
}

function observerSCU(nextProps, nextState) {
  if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.isUsingStaticRendering)()) {
    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
  } // update on any state changes (as is the default)


  if (this.state !== nextState) {
    return true;
  } // update if props are shallowly not equal, inspired by PureRenderMixin
  // we could return just 'false' here, and avoid the `skipRender` checks etc
  // however, it is nicer if lifecycle events are triggered like usually,
  // so we return true here if props are shallowly modified.


  return !shallowEqual(this.props, nextProps);
}

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var prevReadState = false;

      if (mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsStart && mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsEnd) {
        prevReadState = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsStart)(true);
      }

      getAtom.call(this).reportObserved();

      if (mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsStart && mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsEnd) {
        (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateReadsEnd)(prevReadState);
      }

      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}

var hasSymbol = typeof Symbol === "function" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

var ReactForwardRefSymbol = hasSymbol ?
/*#__PURE__*/
Symbol.for("react.forward_ref") : typeof react__WEBPACK_IMPORTED_MODULE_1__.forwardRef === "function" &&
/*#__PURE__*/
(0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function (props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol = hasSymbol ?
/*#__PURE__*/
Symbol.for("react.memo") : typeof react__WEBPACK_IMPORTED_MODULE_1__.memo === "function" &&
/*#__PURE__*/
(0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(function (props) {
  return null;
})["$$typeof"];
/**
 * Observer function / decorator
 */

function observer(component) {
  if (component["isMobxInjector"] === true) {
    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
  }

  if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {
    throw new Error("Mobx observer: You are trying to use 'observer' on a function component wrapped in either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");
  } // Unwrap forward refs into `<Observer>` component
  // we need to unwrap the render, because it is the inner render that needs to be tracked,
  // not the ForwardRef HoC


  if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {
    var baseRender = component["render"];
    if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function ObserverForwardRef() {
      var args = arguments;
      return (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.Observer, null, function () {
        return baseRender.apply(undefined, args);
      });
    });
  } // Function component


  if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(react__WEBPACK_IMPORTED_MODULE_1__.Component, component)) {
    return (0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_2__.observer)(component);
  }

  return makeClassComponentObserver(component);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MobXProviderContext =
/*#__PURE__*/
react__WEBPACK_IMPORTED_MODULE_1___default().createContext({});
function Provider(props) {
  var children = props.children,
      stores = _objectWithoutPropertiesLoose(props, ["children"]);

  var parentValue = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(MobXProviderContext);
  var mutableProviderRef = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(_extends({}, parentValue, stores));
  var value = mutableProviderRef.current;

  if (true) {
    var newValue = _extends({}, value, stores); // spread in previous state for the context based stores


    if (!shallowEqual(value, newValue)) {
      throw new Error("MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.");
    }
  }

  return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MobXProviderContext.Provider, {
    value: value
  }, children);
}
Provider.displayName = "MobXProvider";

/**
 * Store Injection
 */

function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
  // Support forward refs
  var Injector = react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef(function (props, ref) {
    var newProps = _extends({}, props);

    var context = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(MobXProviderContext);
    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

    if (ref) {
      newProps.ref = ref;
    }

    return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(component, newProps);
  });
  if (makeReactive) Injector = observer(Injector);
  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
  // Static fields from component should be visible on the generated Injector

  copyStaticProperties(component, Injector);
  Injector["wrappedComponent"] = component;
  Injector.displayName = getInjectName(component, injectNames);
  return Injector;
}

function getInjectName(component, injectNames) {
  var displayName;
  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
  return displayName;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject() {
  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
    storeNames[_key] = arguments[_key];
  }

  if (typeof arguments[0] === "function") {
    var grabStoresFn = arguments[0];
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
    };
  } else {
    return function (componentClass) {
      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
    };
  }
}

var protoStoreKey =
/*#__PURE__*/
newSymbol("disposeOnUnmountProto");
var instStoreKey =
/*#__PURE__*/
newSymbol("disposeOnUnmountInst");

function runDisposersOnWillUnmount() {
  var _this = this;
  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (Array.isArray(prop)) prop.map(function (f) {
        return f();
      });else prop();
    }
  });
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  var c = Object.getPrototypeOf(target).constructor;
  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

  if (!(c === (react__WEBPACK_IMPORTED_MODULE_1___default().Component) || c === (react__WEBPACK_IMPORTED_MODULE_1___default().PureComponent) || c2 === (react__WEBPACK_IMPORTED_MODULE_1___default().Component) || c2 === (react__WEBPACK_IMPORTED_MODULE_1___default().PureComponent) || c3 === (react__WEBPACK_IMPORTED_MODULE_1___default().Component) || c3 === (react__WEBPACK_IMPORTED_MODULE_1___default().PureComponent))) {
    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // decorator's target is the prototype, so it doesn't have any instance properties like props


  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
  var store = isDecorator ? // decorators are added to the prototype store
  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
  target[instStoreKey] || (target[instStoreKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

function createChainableTypeChecker(validator) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.untracked)(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = typeof propValue;

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.untracked)(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray;
          break;

        case "Object":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject;
          break;

        case "Map":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableMap;
          break;

        default:
          throw new Error("Unexpected mobxType: " + mobxType);
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.untracked)(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      } else {
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
        if (error instanceof Error) return error;
        var propValue = props[propName];

        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }

        return null;
      }
    });
  });
}

var observableArray =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf =
/*#__PURE__*/
createObservableArrayOfTypeChecker.bind(null, false);
var observableMap =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Map");
var observableObject =
/*#__PURE__*/
createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray =
/*#__PURE__*/
createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf =
/*#__PURE__*/
createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject =
/*#__PURE__*/
createObservableTypeCheckerCreator(true, "Object");
var PropTypes = {
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
};

if (!react__WEBPACK_IMPORTED_MODULE_1__.Component) throw new Error("mobx-react requires React to be available");
if (!mobx__WEBPACK_IMPORTED_MODULE_0__.observable) throw new Error("mobx-react requires mobx to be available");


//# sourceMappingURL=mobxreact.esm.js.map


/***/ }),

/***/ "./node_modules/mobx-utils/mobx-utils.module.js":
/*!******************************************************!*\
  !*** ./node_modules/mobx-utils/mobx-utils.module.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FULFILLED": () => (/* binding */ FULFILLED),
/* harmony export */   "IDENTITY": () => (/* binding */ IDENTITY),
/* harmony export */   "NOOP": () => (/* binding */ NOOP),
/* harmony export */   "ObservableGroupMap": () => (/* binding */ ObservableGroupMap),
/* harmony export */   "PENDING": () => (/* binding */ PENDING),
/* harmony export */   "REJECTED": () => (/* binding */ REJECTED),
/* harmony export */   "ViewModel": () => (/* binding */ ViewModel),
/* harmony export */   "actionAsync": () => (/* binding */ actionAsync),
/* harmony export */   "addHiddenProp": () => (/* binding */ addHiddenProp),
/* harmony export */   "asyncAction": () => (/* binding */ asyncAction),
/* harmony export */   "chunkProcessor": () => (/* binding */ chunkProcessor),
/* harmony export */   "computedFn": () => (/* binding */ computedFn),
/* harmony export */   "createTransformer": () => (/* binding */ createTransformer),
/* harmony export */   "createViewModel": () => (/* binding */ createViewModel),
/* harmony export */   "deepObserve": () => (/* binding */ deepObserve),
/* harmony export */   "deprecated": () => (/* binding */ deprecated),
/* harmony export */   "expr": () => (/* binding */ expr),
/* harmony export */   "fail": () => (/* binding */ fail$1),
/* harmony export */   "fromPromise": () => (/* binding */ fromPromise),
/* harmony export */   "fromResource": () => (/* binding */ fromResource),
/* harmony export */   "fromStream": () => (/* binding */ fromStream),
/* harmony export */   "getAllMethodsAndProperties": () => (/* binding */ getAllMethodsAndProperties),
/* harmony export */   "invariant": () => (/* binding */ invariant),
/* harmony export */   "isPromiseBasedObservable": () => (/* binding */ isPromiseBasedObservable),
/* harmony export */   "keepAlive": () => (/* binding */ keepAlive),
/* harmony export */   "lazyObservable": () => (/* binding */ lazyObservable),
/* harmony export */   "moveItem": () => (/* binding */ moveItem),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "queueProcessor": () => (/* binding */ queueProcessor),
/* harmony export */   "task": () => (/* binding */ task),
/* harmony export */   "toStream": () => (/* binding */ toStream),
/* harmony export */   "whenAsync": () => (/* binding */ whenAsync),
/* harmony export */   "whenWithTimeout": () => (/* binding */ whenWithTimeout)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");


var NOOP = function () { };
var IDENTITY = function (_) { return _; };
function fail$1(message) {
    throw new Error("[mobx-utils] " + message);
}
function invariant(cond, message) {
    if (message === void 0) { message = "Illegal state"; }
    if (!cond)
        fail$1(message);
}
var deprecatedMessages = [];
function deprecated(msg) {
    if (deprecatedMessages.indexOf(msg) !== -1)
        return;
    deprecatedMessages.push(msg);
    console.error("[mobx-utils] Deprecated: " + msg);
}
function addHiddenProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value,
    });
}
var deepFields = function (x) {
    return (x &&
        x !== Object.prototype &&
        Object.getOwnPropertyNames(x).concat(deepFields(Object.getPrototypeOf(x)) || []));
};
var distinctDeepFields = function (x) {
    var deepFieldsIndistinct = deepFields(x);
    var deepFieldsDistinct = deepFieldsIndistinct.filter(function (item, index) { return deepFieldsIndistinct.indexOf(item) === index; });
    return deepFieldsDistinct;
};
var getAllMethodsAndProperties = function (x) {
    return distinctDeepFields(x).filter(function (name) { return name !== "constructor" && !~name.indexOf("__"); });
};

var PENDING = "pending";
var FULFILLED = "fulfilled";
var REJECTED = "rejected";
function caseImpl(handlers) {
    switch (this.state) {
        case PENDING:
            return handlers.pending && handlers.pending(this.value);
        case REJECTED:
            return handlers.rejected && handlers.rejected(this.value);
        case FULFILLED:
            return handlers.fulfilled ? handlers.fulfilled(this.value) : this.value;
    }
}
/**
 * `fromPromise` takes a Promise, extends it with 2 observable properties that track
 * the status of the promise and returns it. The returned object has the following observable properties:
 *  - `value`: either the initial value, the value the Promise resolved to, or the value the Promise was rejected with. use `.state` if you need to be able to tell the difference.
 *  - `state`: one of `"pending"`, `"fulfilled"` or `"rejected"`
 *
 * And the following methods:
 * - `case({fulfilled, rejected, pending})`: maps over the result using the provided handlers, or returns `undefined` if a handler isn't available for the current promise state.
 * - `then((value: TValue) => TResult1 | PromiseLike<TResult1>, [(rejectReason: any) => any])`: chains additional handlers to the provided promise.
 *
 * The returned object implements `PromiseLike<TValue>`, so you can chain additional `Promise` handlers using `then`. You may also use it with `await` in `async` functions.
 *
 * Note that the status strings are available as constants:
 * `mobxUtils.PENDING`, `mobxUtils.REJECTED`, `mobxUtil.FULFILLED`
 *
 * fromPromise takes an optional second argument, a previously created `fromPromise` based observable.
 * This is useful to replace one promise based observable with another, without going back to an intermediate
 * "pending" promise state while fetching data. For example:
 *
 * @example
 * \@observer
 * class SearchResults extends React.Component {
 *   \@observable.ref searchResults
 *
 *   componentDidUpdate(nextProps) {
 *     if (nextProps.query !== this.props.query)
 *       this.searchResults = fromPromise(
 *         window.fetch("/search?q=" + nextProps.query),
 *         // by passing, we won't render a pending state if we had a successful search query before
 *         // rather, we will keep showing the previous search results, until the new promise resolves (or rejects)
 *         this.searchResults
 *       )
 *   }
 *
 *   render() {
 *     return this.searchResults.case({
 *        pending: (staleValue) => {
 *          return staleValue || "searching" // <- value might set to previous results while the promise is still pending
 *        },
 *        fulfilled: (value) => {
 *          return value // the fresh results
 *        },
 *        rejected: (error) => {
 *          return "Oops: " + error
 *        }
 *     })
 *   }
 * }
 *
 * Observable promises can be created immediately in a certain state using
 * `fromPromise.reject(reason)` or `fromPromise.resolve(value?)`.
 * The main advantage of `fromPromise.resolve(value)` over `fromPromise(Promise.resolve(value))` is that the first _synchronously_ starts in the desired state.
 *
 * It is possible to directly create a promise using a resolve, reject function:
 * `fromPromise((resolve, reject) => setTimeout(() => resolve(true), 1000))`
 *
 * @example
 * const fetchResult = fromPromise(fetch("http://someurl"))
 *
 * // combine with when..
 * when(
 *   () => fetchResult.state !== "pending",
 *   () => {
 *     console.log("Got ", fetchResult.value)
 *   }
 * )
 *
 * // or a mobx-react component..
 * const myComponent = observer(({ fetchResult }) => {
 *   switch(fetchResult.state) {
 *      case "pending": return <div>Loading...</div>
 *      case "rejected": return <div>Ooops... {fetchResult.value}</div>
 *      case "fulfilled": return <div>Gotcha: {fetchResult.value}</div>
 *   }
 * })
 *
 * // or using the case method instead of switch:
 *
 * const myComponent = observer(({ fetchResult }) =>
 *   fetchResult.case({
 *     pending:   () => <div>Loading...</div>,
 *     rejected:  error => <div>Ooops.. {error}</div>,
 *     fulfilled: value => <div>Gotcha: {value}</div>,
 *   }))
 *
 * // chain additional handler(s) to the resolve/reject:
 *
 * fetchResult.then(
 *   (result) =>  doSomeTransformation(result),
 *   (rejectReason) => console.error('fetchResult was rejected, reason: ' + rejectReason)
 * ).then(
 *   (transformedResult) => console.log('transformed fetchResult: ' + transformedResult)
 * )
 *
 * @param {IThenable<T>} promise The promise which will be observed
 * @param {IThenable<T>} oldPromise? The previously observed promise
 * @returns {IPromiseBasedObservable<T>}
 */
function fromPromise(origPromise, oldPromise) {
    invariant(arguments.length <= 2, "fromPromise expects up to two arguments");
    invariant(typeof origPromise === "function" ||
        (typeof origPromise === "object" &&
            origPromise &&
            typeof origPromise.then === "function"), "Please pass a promise or function to fromPromise");
    if (origPromise.isPromiseBasedObservable === true)
        return origPromise;
    if (typeof origPromise === "function") {
        // If it is a (reject, resolve function, wrap it)
        origPromise = new Promise(origPromise);
    }
    var promise = origPromise;
    origPromise.then((0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("observableFromPromise-resolve", function (value) {
        promise.value = value;
        promise.state = FULFILLED;
    }), (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("observableFromPromise-reject", function (reason) {
        promise.value = reason;
        promise.state = REJECTED;
    }));
    promise.isPromiseBasedObservable = true;
    promise.case = caseImpl;
    var oldData = oldPromise && oldPromise.state === FULFILLED
        ? oldPromise.value
        : undefined;
    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.extendObservable)(promise, {
        value: oldData,
        state: PENDING,
    }, {}, { deep: false });
    return promise;
}
(function (fromPromise) {
    fromPromise.reject = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("fromPromise.reject", function (reason) {
        var p = fromPromise(Promise.reject(reason));
        p.state = REJECTED;
        p.value = reason;
        return p;
    });
    function resolveBase(value) {
        if (value === void 0) { value = undefined; }
        var p = fromPromise(Promise.resolve(value));
        p.state = FULFILLED;
        p.value = value;
        return p;
    }
    fromPromise.resolve = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("fromPromise.resolve", resolveBase);
})(fromPromise || (fromPromise = {}));
/**
 * Returns true if the provided value is a promise-based observable.
 * @param value any
 * @returns {boolean}
 */
function isPromiseBasedObservable(value) {
    return value && value.isPromiseBasedObservable === true;
}

var __spreadArrays = ( false) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * Moves an item from one position to another, checking that the indexes given are within bounds.
 *
 * @example
 * const source = observable([1, 2, 3])
 * moveItem(source, 0, 1)
 * console.log(source.map(x => x)) // [2, 1, 3]
 *
 * @export
 * @param {ObservableArray<T>} target
 * @param {number} fromIndex
 * @param {number} toIndex
 * @returns {ObservableArray<T>}
 */
function moveItem(target, fromIndex, toIndex) {
    checkIndex(target, fromIndex);
    checkIndex(target, toIndex);
    if (fromIndex === toIndex) {
        return;
    }
    var oldItems = target[mobx__WEBPACK_IMPORTED_MODULE_0__.$mobx].values;
    var newItems;
    if (fromIndex < toIndex) {
        newItems = __spreadArrays(oldItems.slice(0, fromIndex), oldItems.slice(fromIndex + 1, toIndex + 1), [
            oldItems[fromIndex]
        ], oldItems.slice(toIndex + 1));
    }
    else {
        // toIndex < fromIndex
        newItems = __spreadArrays(oldItems.slice(0, toIndex), [
            oldItems[fromIndex]
        ], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
    }
    target.replace(newItems);
    return target;
}
/**
 * Checks whether the specified index is within bounds. Throws if not.
 *
 * @private
 * @param {ObservableArray<any>} target
 * @param {number }index
 */
function checkIndex(target, index) {
    if (index < 0) {
        throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
    }
    var length = target[mobx__WEBPACK_IMPORTED_MODULE_0__.$mobx].values.length;
    if (index >= length) {
        throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
    }
}

/**
 * `lazyObservable` creates an observable around a `fetch` method that will not be invoked
 * until the observable is needed the first time.
 * The fetch method receives a `sink` callback which can be used to replace the
 * current value of the lazyObservable. It is allowed to call `sink` multiple times
 * to keep the lazyObservable up to date with some external resource.
 *
 * Note that it is the `current()` call itself which is being tracked by MobX,
 * so make sure that you don't dereference to early.
 *
 * @example
 * const userProfile = lazyObservable(
 *   sink => fetch("/myprofile").then(profile => sink(profile))
 * )
 *
 * // use the userProfile in a React component:
 * const Profile = observer(({ userProfile }) =>
 *   userProfile.current() === undefined
 *   ? <div>Loading user profile...</div>
 *   : <div>{userProfile.current().displayName}</div>
 * )
 *
 * // triggers refresh the userProfile
 * userProfile.refresh()
 *
 * @param {(sink: (newValue: T) => void) => void} fetch method that will be called the first time the value of this observable is accessed. The provided sink can be used to produce a new value, synchronously or asynchronously
 * @param {T} [initialValue=undefined] optional initialValue that will be returned from `current` as long as the `sink` has not been called at least once
 * @returns {{
 *     current(): T,
 *     refresh(): T,
 *     reset(): T
 *     pending: boolean
 * }}
 */
function lazyObservable(fetch, initialValue) {
    if (initialValue === void 0) { initialValue = undefined; }
    var started = false;
    var value = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.box(initialValue, { deep: false });
    var pending = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.box(false);
    var currentFnc = function () {
        if (!started) {
            started = true;
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChanges)(true, function () {
                pending.set(true);
            });
            fetch(function (newValue) {
                (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChanges)(true, function () {
                    value.set(newValue);
                    pending.set(false);
                });
            });
        }
        return value.get();
    };
    var resetFnc = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("lazyObservable-reset", function () {
        started = false;
        value.set(initialValue);
        return value.get();
    });
    return {
        current: currentFnc,
        refresh: function () {
            if (started) {
                started = false;
                return currentFnc();
            }
            else {
                return value.get();
            }
        },
        reset: function () {
            return resetFnc();
        },
        get pending() {
            return pending.get();
        },
    };
}

/**
 * `fromResource` creates an observable whose current state can be inspected using `.current()`,
 * and which can be kept in sync with some external datasource that can be subscribed to.
 *
 * The created observable will only subscribe to the datasource if it is in use somewhere,
 * (un)subscribing when needed. To enable `fromResource` to do that two callbacks need to be provided,
 * one to subscribe, and one to unsubscribe. The subscribe callback itself will receive a `sink` callback, which can be used
 * to update the current state of the observable, allowing observes to react.
 *
 * Whatever is passed to `sink` will be returned by `current()`. The values passed to the sink will not be converted to
 * observables automatically, but feel free to do so.
 * It is the `current()` call itself which is being tracked,
 * so make sure that you don't dereference to early.
 *
 * For inspiration, an example integration with the apollo-client on [github](https://github.com/apollostack/apollo-client/issues/503#issuecomment-241101379),
 * or the [implementation](https://github.com/mobxjs/mobx-utils/blob/1d17cf7f7f5200937f68cc0b5e7ec7f3f71dccba/src/now.ts#L43-L57) of `mobxUtils.now`
 *
 * The following example code creates an observable that connects to a `dbUserRecord`,
 * which comes from an imaginary database and notifies when it has changed.
 *
 * @example
 * function createObservableUser(dbUserRecord) {
 *   let currentSubscription;
 *   return fromResource(
 *     (sink) => {
 *       // sink the current state
 *       sink(dbUserRecord.fields)
 *       // subscribe to the record, invoke the sink callback whenever new data arrives
 *       currentSubscription = dbUserRecord.onUpdated(() => {
 *         sink(dbUserRecord.fields)
 *       })
 *     },
 *     () => {
 *       // the user observable is not in use at the moment, unsubscribe (for now)
 *       dbUserRecord.unsubscribe(currentSubscription)
 *     }
 *   )
 * }
 *
 * // usage:
 * const myUserObservable = createObservableUser(myDatabaseConnector.query("name = 'Michel'"))
 *
 * // use the observable in autorun
 * autorun(() => {
 *   // printed everytime the database updates its records
 *   console.log(myUserObservable.current().displayName)
 * })
 *
 * // ... or a component
 * const userComponent = observer(({ user }) =>
 *   <div>{user.current().displayName}</div>
 * )
 *
 * @export
 * @template T
 * @param {(sink: (newValue: T) => void) => void} subscriber
 * @param {IDisposer} [unsubscriber=NOOP]
 * @param {T} [initialValue=undefined] the data that will be returned by `get()` until the `sink` has emitted its first data
 * @returns {{
 *     current(): T;
 *     dispose(): void;
 *     isAlive(): boolean;
 * }}
 */
function fromResource(subscriber, unsubscriber, initialValue) {
    if (unsubscriber === void 0) { unsubscriber = NOOP; }
    if (initialValue === void 0) { initialValue = undefined; }
    var isActive = false;
    var isDisposed = false;
    var value = initialValue;
    var suspender = function () {
        if (isActive) {
            isActive = false;
            unsubscriber();
        }
    };
    var atom = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.createAtom)("ResourceBasedObservable", function () {
        invariant(!isActive && !isDisposed);
        isActive = true;
        subscriber(function (newValue) {
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__._allowStateChanges)(true, function () {
                value = newValue;
                atom.reportChanged();
            });
        });
    }, suspender);
    return {
        current: function () {
            invariant(!isDisposed, "subscribingObservable has already been disposed");
            var isBeingTracked = atom.reportObserved();
            if (!isBeingTracked && !isActive)
                console.warn("Called `get` of a subscribingObservable outside a reaction. Current value will be returned but no new subscription has started");
            return value;
        },
        dispose: function () {
            isDisposed = true;
            suspender();
        },
        isAlive: function () { return isActive; },
    };
}

var __decorate = ( false) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function observableSymbol() {
    return (typeof Symbol === "function" && Symbol.observable) || "@@observable";
}
/**
 * Converts an expression to an observable stream (a.k.a. TC 39 Observable / RxJS observable).
 * The provided expression is tracked by mobx as long as there are subscribers, automatically
 * emitting when new values become available. The expressions respect (trans)actions.
 *
 * @example
 *
 * const user = observable({
 *   firstName: "C.S",
 *   lastName: "Lewis"
 * })
 *
 * Rx.Observable
 *   .from(mobxUtils.toStream(() => user.firstname + user.lastName))
 *   .scan(nameChanges => nameChanges + 1, 0)
 *   .subscribe(nameChanges => console.log("Changed name ", nameChanges, "times"))
 *
 * @export
 * @template T
 * @param {() => T} expression
 * @param {boolean} fireImmediately (by default false)
 * @returns {IObservableStream<T>}
 */
function toStream(expression, fireImmediately) {
    var _a;
    if (fireImmediately === void 0) { fireImmediately = false; }
    var computedValue = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(expression);
    return _a = {
            subscribe: function (observer) {
                if ("function" === typeof observer) {
                    return {
                        unsubscribe: computedValue.observe(function (_a) {
                            var newValue = _a.newValue;
                            return observer(newValue);
                        }, fireImmediately),
                    };
                }
                if (observer && "object" === typeof observer && observer.next) {
                    return {
                        unsubscribe: computedValue.observe(function (_a) {
                            var newValue = _a.newValue;
                            return observer.next(newValue);
                        }, fireImmediately),
                    };
                }
                return {
                    unsubscribe: function () { },
                };
            }
        },
        _a[observableSymbol()] = function () {
            return this;
        },
        _a;
}
var StreamListener = /** @class */ (function () {
    function StreamListener(observable, initialValue) {
        var _this = this;
        (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () {
            _this.current = initialValue;
            _this.subscription = observable.subscribe(_this);
        });
    }
    StreamListener.prototype.dispose = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    StreamListener.prototype.next = function (value) {
        this.current = value;
    };
    StreamListener.prototype.complete = function () {
        this.dispose();
    };
    StreamListener.prototype.error = function (value) {
        this.current = value;
        this.dispose();
    };
    __decorate([
        mobx__WEBPACK_IMPORTED_MODULE_0__.observable.ref
    ], StreamListener.prototype, "current", void 0);
    __decorate([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], StreamListener.prototype, "next", null);
    __decorate([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], StreamListener.prototype, "complete", null);
    __decorate([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], StreamListener.prototype, "error", null);
    return StreamListener;
}());
function fromStream(observable, initialValue) {
    if (initialValue === void 0) { initialValue = undefined; }
    return new StreamListener(observable, initialValue);
}

var __assign = ( false) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate$1 = ( false) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RESERVED_NAMES = ["model", "reset", "submit", "isDirty", "isPropertyDirty", "resetProperty"];
var ViewModel = /** @class */ (function () {
    function ViewModel(model) {
        var _this = this;
        this.model = model;
        this.localValues = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map({});
        this.localComputedValues = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map({});
        this.isPropertyDirty = function (key) {
            return _this.localValues.has(key);
        };
        invariant((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(model), "createViewModel expects an observable object");
        // use this helper as Object.getOwnPropertyNames doesn't return getters
        getAllMethodsAndProperties(model).forEach(function (key) {
            if (key === mobx__WEBPACK_IMPORTED_MODULE_0__.$mobx || key === "__mobxDidRunLazyInitializers") {
                return;
            }
            invariant(RESERVED_NAMES.indexOf(key) === -1, "The propertyname " + key + " is reserved and cannot be used with viewModels");
            if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isComputedProp)(model, key)) {
                var derivation = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._getAdministration)(model, key).derivation; // Fixme: there is no clear api to get the derivation
                _this.localComputedValues.set(key, (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(derivation.bind(_this)));
            }
            var descriptor = Object.getOwnPropertyDescriptor(model, key);
            var additionalDescriptor = descriptor ? { enumerable: descriptor.enumerable } : {};
            Object.defineProperty(_this, key, __assign(__assign({}, additionalDescriptor), { configurable: true, get: function () {
                    if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isComputedProp)(model, key))
                        return _this.localComputedValues.get(key).get();
                    if (_this.isPropertyDirty(key))
                        return _this.localValues.get(key);
                    else
                        return _this.model[key];
                }, set: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)(function (value) {
                    if (value !== _this.model[key]) {
                        _this.localValues.set(key, value);
                    }
                    else {
                        _this.localValues.delete(key);
                    }
                }) }));
        });
    }
    Object.defineProperty(ViewModel.prototype, "isDirty", {
        get: function () {
            return this.localValues.size > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewModel.prototype, "changedValues", {
        get: function () {
            return this.localValues.toJS();
        },
        enumerable: false,
        configurable: true
    });
    ViewModel.prototype.submit = function () {
        var _this = this;
        (0,mobx__WEBPACK_IMPORTED_MODULE_0__.keys)(this.localValues).forEach(function (key) {
            var source = _this.localValues.get(key);
            var destination = _this.model[key];
            if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(destination)) {
                destination.replace(source);
            }
            else if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableMap)(destination)) {
                destination.clear();
                destination.merge(source);
            }
            else if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isComputed)(source)) {
                _this.model[key] = source;
            }
        });
        this.localValues.clear();
    };
    ViewModel.prototype.reset = function () {
        this.localValues.clear();
    };
    ViewModel.prototype.resetProperty = function (key) {
        this.localValues.delete(key);
    };
    __decorate$1([
        mobx__WEBPACK_IMPORTED_MODULE_0__.computed
    ], ViewModel.prototype, "isDirty", null);
    __decorate$1([
        mobx__WEBPACK_IMPORTED_MODULE_0__.computed
    ], ViewModel.prototype, "changedValues", null);
    __decorate$1([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], ViewModel.prototype, "submit", null);
    __decorate$1([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], ViewModel.prototype, "reset", null);
    __decorate$1([
        mobx__WEBPACK_IMPORTED_MODULE_0__.action.bound
    ], ViewModel.prototype, "resetProperty", null);
    return ViewModel;
}());
/**
 * `createViewModel` takes an object with observable properties (model)
 * and wraps a viewmodel around it. The viewmodel proxies all enumerable properties of the original model with the following behavior:
 *  - as long as no new value has been assigned to the viewmodel property, the original property will be returned.
 *  - any future change in the model will be visible in the viewmodel as well unless the viewmodel property was dirty at the time of the attempted change.
 *  - once a new value has been assigned to a property of the viewmodel, that value will be returned during a read of that property in the future. However, the original model remain untouched until `submit()` is called.
 *
 * The viewmodel exposes the following additional methods, besides all the enumerable properties of the model:
 * - `submit()`: copies all the values of the viewmodel to the model and resets the state
 * - `reset()`: resets the state of the viewmodel, abandoning all local modifications
 * - `resetProperty(propName)`: resets the specified property of the viewmodel
 * - `isDirty`: observable property indicating if the viewModel contains any modifications
 * - `isPropertyDirty(propName)`: returns true if the specified property is dirty
 * - `changedValues`: returns a key / value map with the properties that have been changed in the model so far
 * - `model`: The original model object for which this viewModel was created
 *
 * You may use observable arrays, maps and objects with `createViewModel` but keep in mind to assign fresh instances of those to the viewmodel's properties, otherwise you would end up modifying the properties of the original model.
 * Note that if you read a non-dirty property, viewmodel only proxies the read to the model. You therefore need to assign a fresh instance not only the first time you make the assignment but also after calling `reset()` or `submit()`.
 *
 * @example
 * class Todo {
 *   \@observable title = "Test"
 * }
 *
 * const model = new Todo()
 * const viewModel = createViewModel(model);
 *
 * autorun(() => console.log(viewModel.model.title, ",", viewModel.title))
 * // prints "Test, Test"
 * model.title = "Get coffee"
 * // prints "Get coffee, Get coffee", viewModel just proxies to model
 * viewModel.title = "Get tea"
 * // prints "Get coffee, Get tea", viewModel's title is now dirty, and the local value will be printed
 * viewModel.submit()
 * // prints "Get tea, Get tea", changes submitted from the viewModel to the model, viewModel is proxying again
 * viewModel.title = "Get cookie"
 * // prints "Get tea, Get cookie" // viewModel has diverged again
 * viewModel.reset()
 * // prints "Get tea, Get tea", changes of the viewModel have been abandoned
 *
 * @param {T} model
 * @returns {(T & IViewModel<T>)}
 * ```
 */
function createViewModel(model) {
    return new ViewModel(model);
}

/**
 * Like normal `when`, except that this `when` will automatically dispose if the condition isn't met within a certain amount of time.
 *
 * @example
 * test("expect store to load", t => {
 *   const store = {
 *     items: [],
 *     loaded: false
 *   }
 *   fetchDataForStore((data) => {
 *     store.items = data;
 *     store.loaded = true;
 *   })
 *   whenWithTimeout(
 *     () => store.loaded
 *     () => t.end()
 *     2000,
 *     () => t.fail("store didn't load with 2 secs")
 *   )
 * })
 *
 *
 * @export
 * @param {() => boolean} expr see when, the expression to await
 * @param {() => void} action see when, the action to execut when expr returns truthy
 * @param {number} [timeout=10000] maximum amount when spends waiting before giving up
 * @param {any} [onTimeout=() => {}] the ontimeout handler will be called if the condition wasn't met within the given time
 * @returns {IDisposer} disposer function that can be used to cancel the when prematurely. Neither action or onTimeout will be fired if disposed
 */
function whenWithTimeout(expr, action, timeout, onTimeout) {
    if (timeout === void 0) { timeout = 10000; }
    if (onTimeout === void 0) { onTimeout = function () { }; }
    deprecated("whenWithTimeout is deprecated, use mobx.when with timeout option instead");
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.when)(expr, action, {
        timeout: timeout,
        onError: onTimeout,
    });
}

/**
 * MobX normally suspends any computed value that is not in use by any reaction,
 * and lazily re-evaluates the expression if needed outside a reaction while not in use.
 * `keepAlive` marks a computed value as always in use, meaning that it will always fresh, but never disposed automatically.
 *
 * @example
 * const obj = observable({
 *   number: 3,
 *   doubler: function() { return this.number * 2 }
 * })
 * const stop = keepAlive(obj, "doubler")
 *
 * @param {Object} target an object that has a computed property, created by `@computed` or `extendObservable`
 * @param {string} property the name of the property to keep alive
 * @returns {IDisposer} stops this keep alive so that the computed value goes back to normal behavior
 */
/**
 * @example
 * const number = observable(3)
 * const doubler = computed(() => number.get() * 2)
 * const stop = keepAlive(doubler)
 * // doubler will now stay in sync reactively even when there are no further observers
 * stop()
 * // normal behavior, doubler results will be recomputed if not observed but needed, but lazily
 *
 * @param {IComputedValue<any>} computedValue created using the `computed` function
 * @returns {IDisposer} stops this keep alive so that the computed value goes back to normal behavior
 */
function keepAlive(_1, _2) {
    var computed = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.getAtom)(_1, _2);
    if (!computed)
        throw new Error("No computed provided, please provide an object created with `computed(() => expr)` or an object + property name");
    return computed.observe(function () { });
}

/**
 * `queueProcessor` takes an observable array, observes it and calls `processor`
 * once for each item added to the observable array, optionally debouncing the action
 *
 * @example
 * const pendingNotifications = observable([])
 * const stop = queueProcessor(pendingNotifications, msg => {
 *   // show Desktop notification
 *   new Notification(msg);
 * })
 *
 * // usage:
 * pendingNotifications.push("test!")
 *
 * @param {T[]} observableArray observable array instance to track
 * @param {(item: T) => void} processor action to call per item
 * @param {number} [debounce=0] optional debounce time in ms. With debounce 0 the processor will run synchronously
 * @returns {IDisposer} stops the processor
 */
function queueProcessor(observableArray, processor, debounce) {
    if (debounce === void 0) { debounce = 0; }
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(observableArray))
        throw new Error("Expected observable array as first argument");
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isAction)(processor))
        processor = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("queueProcessor", processor);
    var runner = function () {
        // construct a final set
        var items = observableArray.slice(0);
        // clear the queue for next iteration
        (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () { return observableArray.splice(0); });
        // fire processor
        items.forEach(processor);
    };
    if (debounce > 0)
        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)(runner, { delay: debounce });
    else
        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)(runner);
}

/**
 * `chunkProcessor` takes an observable array, observes it and calls `processor`
 * once for a chunk of items added to the observable array, optionally deboucing the action.
 * The maximum chunk size can be limited by number.
 * This allows both, splitting larger into smaller chunks or (when debounced) combining smaller
 * chunks and/or single items into reasonable chunks of work.
 *
 * @example
 * const trackedActions = observable([])
 * const stop = chunkProcessor(trackedActions, chunkOfMax10Items => {
 *   sendTrackedActionsToServer(chunkOfMax10Items);
 * }, 100, 10)
 *
 * // usage:
 * trackedActions.push("scrolled")
 * trackedActions.push("hoveredButton")
 * // when both pushes happen within 100ms, there will be only one call to server
 *
 * @param {T[]} observableArray observable array instance to track
 * @param {(item: T[]) => void} processor action to call per item
 * @param {number} [debounce=0] optional debounce time in ms. With debounce 0 the processor will run synchronously
 * @param {number} [maxChunkSize=0] optionally do not call on full array but smaller chunks. With 0 it will process the full array.
 * @returns {IDisposer} stops the processor
 */
function chunkProcessor(observableArray, processor, debounce, maxChunkSize) {
    if (debounce === void 0) { debounce = 0; }
    if (maxChunkSize === void 0) { maxChunkSize = 0; }
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(observableArray))
        throw new Error("Expected observable array as first argument");
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__.isAction)(processor))
        processor = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.action)("chunkProcessor", processor);
    var runner = function () {
        var _loop_1 = function () {
            var chunkSize = maxChunkSize === 0
                ? observableArray.length
                : Math.min(observableArray.length, maxChunkSize);
            // construct a final set
            var items = observableArray.slice(0, chunkSize);
            // clear the slice for next iteration
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.runInAction)(function () { return observableArray.splice(0, chunkSize); });
            // fire processor
            processor(items);
        };
        while (observableArray.length > 0) {
            _loop_1();
        }
    };
    if (debounce > 0)
        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)(runner, { delay: debounce });
    else
        return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.autorun)(runner);
}

var tickers = {};
/**
 * Returns the current date time as epoch number.
 * The date time is read from an observable which is updated automatically after the given interval.
 * So basically it treats time as an observable.
 *
 * The function takes an interval as parameter, which indicates how often `now()` will return a new value.
 * If no interval is given, it will update each second. If "frame" is specified, it will update each time a
 * `requestAnimationFrame` is available.
 *
 * Multiple clocks with the same interval will automatically be synchronized.
 *
 * Countdown example: https://jsfiddle.net/mweststrate/na0qdmkw/
 *
 * @example
 *
 * const start = Date.now()
 *
 * autorun(() => {
 *   console.log("Seconds elapsed: ", (mobxUtils.now() - start) / 1000)
 * })
 *
 *
 * @export
 * @param {(number | "frame")} [interval=1000] interval in milliseconds about how often the interval should update
 * @returns
 */
function now(interval) {
    if (interval === void 0) { interval = 1000; }
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__._isComputingDerivation)()) {
        // See #40
        return Date.now();
    }
    if (!tickers[interval]) {
        if (typeof interval === "number")
            tickers[interval] = createIntervalTicker(interval);
        else
            tickers[interval] = createAnimationFrameTicker();
    }
    return tickers[interval].current();
}
function createIntervalTicker(interval) {
    var subscriptionHandle;
    return fromResource(function (sink) {
        sink(Date.now());
        subscriptionHandle = setInterval(function () { return sink(Date.now()); }, interval);
    }, function () {
        clearInterval(subscriptionHandle);
    }, Date.now());
}
function createAnimationFrameTicker() {
    var frameBasedTicker = fromResource(function (sink) {
        sink(Date.now());
        function scheduleTick() {
            window.requestAnimationFrame(function () {
                sink(Date.now());
                if (frameBasedTicker.isAlive())
                    scheduleTick();
            });
        }
        scheduleTick();
    }, function () { }, Date.now());
    return frameBasedTicker;
}

var __assign$1 = ( false) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * _deprecated_ this functionality can now be found as `flow` in the mobx package. However, `flow` is not applicable as decorator, where `asyncAction` still is.
 *
 *
 *
 * `asyncAction` takes a generator function and automatically wraps all parts of the process in actions. See the examples below.
 * `asyncAction` can be used both as decorator or to wrap functions.
 *
 * - It is important that `asyncAction should always be used with a generator function (recognizable as `function*` or `*name` syntax)
 * - Each yield statement should return a Promise. The generator function will continue as soon as the promise settles, with the settled value
 * - When the generator function finishes, you can return a normal value. The `asyncAction` wrapped function will always produce a promise delivering that value.
 *
 * When using the mobx devTools, an asyncAction will emit `action` events with names like:
 * * `"fetchUsers - runid: 6 - init"`
 * * `"fetchUsers - runid: 6 - yield 0"`
 * * `"fetchUsers - runid: 6 - yield 1"`
 *
 * The `runId` represents the generator instance. In other words, if `fetchUsers` is invoked multiple times concurrently, the events with the same `runid` belong together.
 * The `yield` number indicates the progress of the generator. `init` indicates spawning (it won't do anything, but you can find the original arguments of the `asyncAction` here).
 * `yield 0` ... `yield n` indicates the code block that is now being executed. `yield 0` is before the first `yield`, `yield 1` after the first one etc. Note that yield numbers are not determined lexically but by the runtime flow.
 *
 * `asyncActions` requires `Promise` and `generators` to be available on the target environment. Polyfill `Promise` if needed. Both TypeScript and Babel can compile generator functions down to ES5.
 *
 *  N.B. due to a [babel limitation](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy/issues/26), in Babel generatos cannot be combined with decorators. See also [#70](https://github.com/mobxjs/mobx-utils/issues/70)
 *
 *
 * @example
 * import {asyncAction} from "mobx-utils"
 *
 * let users = []
 *
 * const fetchUsers = asyncAction("fetchUsers", function* (url) {
 *   const start = Date.now()
 *   const data = yield window.fetch(url)
 *   users = yield data.json()
 *   return start - Date.now()
 * })
 *
 * fetchUsers("http://users.com").then(time => {
 *   console.dir("Got users", users, "in ", time, "ms")
 * })
 *
 * @example
 * import {asyncAction} from "mobx-utils"
 *
 * mobx.configure({ enforceActions: "observed" }) // don't allow state modifications outside actions
 *
 * class Store {
 * 	\@observable githubProjects = []
 * 	\@observable = "pending" // "pending" / "done" / "error"
 *
 * 	\@asyncAction
 * 	*fetchProjects() { // <- note the star, this a generator function!
 * 		this.githubProjects = []
 * 		this.state = "pending"
 * 		try {
 * 			const projects = yield fetchGithubProjectsSomehow() // yield instead of await
 * 			const filteredProjects = somePreprocessing(projects)
 * 			// the asynchronous blocks will automatically be wrapped actions
 * 			this.state = "done"
 * 			this.githubProjects = filteredProjects
 * 		} catch (error) {
 * 			this.state = "error"
 * 		}
 * 	}
 * }
 *
 * @export
 * @returns {Promise}
 */
function asyncAction(arg1, arg2) {
    // decorator
    if (typeof arguments[1] === "string") {
        var name_1 = arguments[1];
        var descriptor_1 = arguments[2];
        if (descriptor_1 && descriptor_1.value) {
            return Object.assign({}, descriptor_1, {
                value: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.flow)(descriptor_1.value),
            });
        }
        else {
            return Object.assign({}, descriptor_1, {
                set: function (v) {
                    Object.defineProperty(this, name_1, __assign$1(__assign$1({}, descriptor_1), { value: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.flow)(v) }));
                },
            });
        }
    }
    // direct invocation
    var generator = typeof arg1 === "string" ? arg2 : arg1;
    var name = typeof arg1 === "string" ? arg1 : generator.name || "<unnamed async action>";
    deprecated("asyncAction is deprecated. use mobx.flow instead");
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.flow)(generator); // name get's dropped..
}

/**
 * _deprecated_ whenAsync is deprecated, use mobx.when without effect instead.
 *
 * Like normal `when`, except that this `when` will return a promise that resolves when the expression becomes truthy
 *
 * @example
 * await whenAsync(() => !state.someBoolean)
 *
 * @export
 * @param {() => boolean} fn see when, the expression to await
 * @param {number} timeout maximum amount of time to wait, before the promise rejects
 * @returns Promise for when an observable eventually matches some condition. Rejects if timeout is provided and has expired
 */
function whenAsync(fn, timeout) {
    if (timeout === void 0) { timeout = 0; }
    deprecated("whenAsync is deprecated, use mobx.when without effect instead");
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.when)(fn, {
        timeout: timeout,
    });
}

/**
 * expr can be used to create temporarily views inside views.
 * This can be improved to improve performance if a value changes often, but usually doesn't affect the outcome of an expression.
 *
 * In the following example the expression prevents that a component is rerender _each time_ the selection changes;
 * instead it will only rerenders when the current todo is (de)selected.
 *
 * @example
 * const Todo = observer((props) => {
 *     const todo = props.todo;
 *     const isSelected = mobxUtils.expr(() => props.viewState.selection === todo);
 *     return <div className={isSelected ? "todo todo-selected" : "todo"}>{todo.title}</div>
 * });
 *
 */
function expr(expr) {
    if (!(0,mobx__WEBPACK_IMPORTED_MODULE_0__._isComputingDerivation)())
        console.warn("'expr' should only be used inside other reactive functions.");
    // optimization: would be more efficient if the expr itself wouldn't be evaluated first on the next change, but just a 'changed' signal would be fired
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(expr).get();
}

var __assign$2 = ( false) || function () {
    __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$2.apply(this, arguments);
};
var memoizationId = 0;
function createTransformer(transformer, arg2) {
    invariant(typeof transformer === "function" && transformer.length < 2, "createTransformer expects a function that accepts one argument");
    // Memoizes: object id -> reactive view that applies transformer to the object
    var views = {};
    var onCleanup = undefined;
    var keepAlive = false;
    var debugNameGenerator = undefined;
    if (typeof arg2 === "object") {
        onCleanup = arg2.onCleanup;
        keepAlive = arg2.keepAlive !== undefined ? arg2.keepAlive : false;
        debugNameGenerator = arg2.debugNameGenerator;
    }
    else if (typeof arg2 === "function") {
        onCleanup = arg2;
    }
    function createView(sourceIdentifier, sourceObject) {
        var latestValue;
        var computedValueOptions = {};
        if (typeof arg2 === "object") {
            onCleanup = arg2.onCleanup;
            debugNameGenerator = arg2.debugNameGenerator;
            computedValueOptions = arg2;
        }
        else if (typeof arg2 === "function") {
            onCleanup = arg2;
        }
        else {
            onCleanup = undefined;
            debugNameGenerator = undefined;
        }
        var prettifiedName = debugNameGenerator
            ? debugNameGenerator(sourceObject)
            : "Transformer-" + transformer.name + "-" + sourceIdentifier;
        var expr = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {
            return (latestValue = transformer(sourceObject));
        }, __assign$2(__assign$2({}, computedValueOptions), { name: prettifiedName }));
        if (!keepAlive) {
            var disposer_1 = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.onBecomeUnobserved)(expr, function () {
                delete views[sourceIdentifier];
                disposer_1();
                if (onCleanup)
                    onCleanup(latestValue, sourceObject);
            });
        }
        return expr;
    }
    var memoWarned = false;
    return function (object) {
        var identifier = getMemoizationId(object);
        var reactiveView = views[identifier];
        if (reactiveView)
            return reactiveView.get();
        if (!keepAlive && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__._isComputingDerivation)()) {
            if (!memoWarned) {
                console.warn("invoking a transformer from outside a reactive context won't memorized " +
                    "and is cleaned up immediately, unless keepAlive is set");
                memoWarned = true;
            }
            var value = transformer(object);
            if (onCleanup)
                onCleanup(value, object);
            return value;
        }
        // Not in cache; create a reactive view
        reactiveView = views[identifier] = createView(identifier, object);
        return reactiveView.get();
    };
}
function getMemoizationId(object) {
    var objectType = typeof object;
    if (objectType === "string")
        return "string:" + object;
    if (objectType === "number")
        return "number:" + object;
    if (object === null || (objectType !== "object" && objectType !== "function"))
        throw new Error("[mobx-utils] transform expected an object, function, string or number, got: " + String(object));
    var tid = object.$transformId;
    if (tid === undefined) {
        tid = "memoizationId:" + ++memoizationId;
        addHiddenProp(object, "$transformId", tid);
    }
    return tid;
}

function buildPath(entry) {
    if (!entry)
        return "ROOT";
    var res = [];
    while (entry.parent) {
        res.push(entry.path);
        entry = entry.parent;
    }
    return res.reverse().join("/");
}
function isRecursivelyObservable(thing) {
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableObject)(thing) || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableArray)(thing) || (0,mobx__WEBPACK_IMPORTED_MODULE_0__.isObservableMap)(thing);
}
/**
 * Given an object, deeply observes the given object.
 * It is like `observe` from mobx, but applied recursively, including all future children.
 *
 * Note that the given object cannot ever contain cycles and should be a tree.
 *
 * As benefit: path and root will be provided in the callback, so the signature of the listener is
 * (change, path, root) => void
 *
 * The returned disposer can be invoked to clean up the listener
 *
 * deepObserve cannot be used on computed values.
 *
 * @example
 * const disposer = deepObserve(target, (change, path) => {
 *    console.dir(change)
 * })
 */
function deepObserve(target, listener) {
    var entrySet = new WeakMap();
    function genericListener(change) {
        var entry = entrySet.get(change.object);
        processChange(change, entry);
        listener(change, buildPath(entry), target);
    }
    function processChange(change, parent) {
        switch (change.type) {
            // Object changes
            case "add": // also for map
                observeRecursively(change.newValue, parent, change.name);
                break;
            case "update": // also for array and map
                unobserveRecursively(change.oldValue);
                observeRecursively(change.newValue, parent, change.name || "" + change.index);
                break;
            case "remove": // object
            case "delete": // map
                unobserveRecursively(change.oldValue);
                break;
            // Array changes
            case "splice":
                change.removed.map(unobserveRecursively);
                change.added.forEach(function (value, idx) {
                    return observeRecursively(value, parent, "" + (change.index + idx));
                });
                // update paths
                for (var i = change.index + change.addedCount; i < change.object.length; i++) {
                    if (isRecursivelyObservable(change.object[i])) {
                        var entry = entrySet.get(change.object[i]);
                        if (entry)
                            entry.path = "" + i;
                    }
                }
                break;
        }
    }
    function observeRecursively(thing, parent, path) {
        if (isRecursivelyObservable(thing)) {
            var entry = entrySet.get(thing);
            if (entry) {
                if (entry.parent !== parent || entry.path !== path)
                    // MWE: this constraint is artificial, and this tool could be made to work with cycles,
                    // but it increases administration complexity, has tricky edge cases and the meaning of 'path'
                    // would become less clear. So doesn't seem to be needed for now
                    throw new Error("The same observable object cannot appear twice in the same tree," +
                        (" trying to assign it to '" + buildPath(parent) + "/" + path + "',") +
                        (" but it already exists at '" + buildPath(entry.parent) + "/" + entry.path + "'"));
            }
            else {
                var entry_1 = {
                    parent: parent,
                    path: path,
                    dispose: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(thing, genericListener),
                };
                entrySet.set(thing, entry_1);
                (0,mobx__WEBPACK_IMPORTED_MODULE_0__.entries)(thing).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    return observeRecursively(value, entry_1, key);
                });
            }
        }
    }
    function unobserveRecursively(thing) {
        if (isRecursivelyObservable(thing)) {
            var entry = entrySet.get(thing);
            if (!entry)
                return;
            entrySet.delete(thing);
            entry.dispose();
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.values)(thing).forEach(unobserveRecursively);
        }
    }
    observeRecursively(target, undefined, "");
    return function () {
        unobserveRecursively(target);
    };
}

var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Reactively sorts a base observable array into multiple observable arrays based on the value of a
 * `groupBy: (item: T) => G` function.
 *
 * This observes the individual computed groupBy values and only updates the source and dest arrays
 * when there is an actual change, so this is far more efficient than, for example
 * `base.filter(i => groupBy(i) === 'we')`. Call #dispose() to stop tracking.
 *
 * No guarantees are made about the order of items in the grouped arrays.
 *
 * The resulting map of arrays is read-only. clear(), set(), delete() are not supported and
 * modifying the group arrays will lead to undefined behavior.
 *
 * NB: ObservableGroupMap relies on `Symbol`s. If you are targeting a platform which doesn't
 * support these natively, you will need to provide a polyfill.
 *
 * @param {array} base The array to sort into groups.
 * @param {function} groupBy The function used for grouping.
 * @param options Object with properties:
 *  `name`: Debug name of this ObservableGroupMap.
 *  `keyToName`: Function to create the debug names of the observable group arrays.
 *
 * @example
 * const slices = observable([
 *     { day: "mo", hours: 12 },
 *     { day: "tu", hours: 2 },
 * ])
 * const slicesByDay = new ObservableGroupMap(slices, (slice) => slice.day)
 * autorun(() => console.log(
 *     slicesByDay.get("mo")?.length ?? 0,
 *     slicesByDay.get("we"))) // outputs 1, undefined
 * slices[0].day = "we" // outputs 0, [{ day: "we", hours: 12 }]
 */
var ObservableGroupMap = /** @class */ (function (_super) {
    __extends(ObservableGroupMap, _super);
    function ObservableGroupMap(base, groupBy, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.name, name = _c === void 0 ? "ogm" + ((Math.random() * 1000) | 0) : _c, _d = _b.keyToName, keyToName = _d === void 0 ? function (x) { return "" + x; } : _d;
        var _this = _super.call(this) || this;
        _this._keyToName = keyToName;
        _this._groupBy = groupBy;
        _this._ogmInfoKey = Symbol("ogmInfo" + name);
        _this._base = base;
        for (var i = 0; i < base.length; i++) {
            _this._addItem(base[i]);
        }
        _this._disposeBaseObserver = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observe)(_this._base, function (change) {
            if ("splice" === change.type) {
                (0,mobx__WEBPACK_IMPORTED_MODULE_0__.transaction)(function () {
                    for (var _i = 0, _a = change.removed; _i < _a.length; _i++) {
                        var removed = _a[_i];
                        _this._removeItem(removed);
                    }
                    for (var _b = 0, _c = change.added; _b < _c.length; _b++) {
                        var added = _c[_b];
                        _this._addItem(added);
                    }
                });
            }
            else if ("update" === change.type) {
                (0,mobx__WEBPACK_IMPORTED_MODULE_0__.transaction)(function () {
                    _this._removeItem(change.oldValue);
                    _this._addItem(change.newValue);
                });
            }
            else {
                throw new Error("illegal state");
            }
        });
        return _this;
    }
    ObservableGroupMap.prototype.clear = function () {
        throw new Error("not supported");
    };
    ObservableGroupMap.prototype.delete = function (_key) {
        throw new Error("not supported");
    };
    ObservableGroupMap.prototype.set = function (_key, _value) {
        throw new Error("not supported");
    };
    /**
     * Disposes all observers created during construction and removes state added to base array
     * items.
     */
    ObservableGroupMap.prototype.dispose = function () {
        this._disposeBaseObserver();
        for (var i = 0; i < this._base.length; i++) {
            var item = this._base[i];
            var grouperItemInfo = item[this._ogmInfoKey];
            grouperItemInfo.reaction();
            delete item[this._ogmInfoKey];
        }
    };
    ObservableGroupMap.prototype._getGroupArr = function (key) {
        var result = _super.prototype.get.call(this, key);
        if (undefined === result) {
            result = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.observable)([], { name: "GroupArray[" + this._keyToName(key) + "]", deep: false });
            _super.prototype.set.call(this, key, result);
        }
        return result;
    };
    ObservableGroupMap.prototype._removeFromGroupArr = function (key, itemIndex) {
        var arr = _super.prototype.get.call(this, key);
        if (1 === arr.length) {
            _super.prototype.delete.call(this, key);
        }
        else if (itemIndex === arr.length - 1) {
            // last position in array
            arr.length--;
        }
        else {
            arr[itemIndex] = arr[arr.length - 1];
            arr[itemIndex][this._ogmInfoKey].groupArrIndex = itemIndex;
            arr.length--;
        }
    };
    ObservableGroupMap.prototype._addItem = function (item) {
        var _this = this;
        var groupByValue = this._groupBy(item);
        var groupArr = this._getGroupArr(groupByValue);
        var value = {
            groupByValue: groupByValue,
            groupArrIndex: groupArr.length,
            reaction: (0,mobx__WEBPACK_IMPORTED_MODULE_0__.reaction)(function () { return _this._groupBy(item); }, function (newGroupByValue, _r) {
                var grouperItemInfo = item[_this._ogmInfoKey];
                _this._removeFromGroupArr(grouperItemInfo.groupByValue, grouperItemInfo.groupArrIndex);
                var newGroupArr = _this._getGroupArr(newGroupByValue);
                var newGroupArrIndex = newGroupArr.length;
                newGroupArr.push(item);
                grouperItemInfo.groupByValue = newGroupByValue;
                grouperItemInfo.groupArrIndex = newGroupArrIndex;
            }),
        };
        Object.defineProperty(item, this._ogmInfoKey, {
            configurable: true,
            enumerable: false,
            value: value,
        });
        groupArr.push(item);
    };
    ObservableGroupMap.prototype._removeItem = function (item) {
        var grouperItemInfo = item[this._ogmInfoKey];
        this._removeFromGroupArr(grouperItemInfo.groupByValue, grouperItemInfo.groupArrIndex);
        grouperItemInfo.reaction();
        delete item[this._ogmInfoKey];
    };
    return ObservableGroupMap;
}(mobx__WEBPACK_IMPORTED_MODULE_0__.ObservableMap));

/**
 * @private
 */
var DeepMapEntry = /** @class */ (function () {
    function DeepMapEntry(base, args) {
        this.base = base;
        this.args = args;
        this.closestIdx = 0;
        this.isDisposed = false;
        var current = (this.closest = this.root = base);
        var i = 0;
        for (; i < this.args.length - 1; i++) {
            current = current.get(args[i]);
            if (current)
                this.closest = current;
            else
                break;
        }
        this.closestIdx = i;
    }
    DeepMapEntry.prototype.exists = function () {
        this.assertNotDisposed();
        var l = this.args.length;
        return this.closestIdx >= l - 1 && this.closest.has(this.args[l - 1]);
    };
    DeepMapEntry.prototype.get = function () {
        this.assertNotDisposed();
        if (!this.exists())
            throw new Error("Entry doesn't exist");
        return this.closest.get(this.args[this.args.length - 1]);
    };
    DeepMapEntry.prototype.set = function (value) {
        this.assertNotDisposed();
        var l = this.args.length;
        var current = this.closest;
        // create remaining maps
        for (var i = this.closestIdx; i < l - 1; i++) {
            var m = new Map();
            current.set(this.args[i], m);
            current = m;
        }
        this.closestIdx = l - 1;
        this.closest = current;
        current.set(this.args[l - 1], value);
    };
    DeepMapEntry.prototype.delete = function () {
        this.assertNotDisposed();
        if (!this.exists())
            throw new Error("Entry doesn't exist");
        var l = this.args.length;
        this.closest.delete(this.args[l - 1]);
        // clean up remaining maps if needed (reconstruct stack first)
        var c = this.root;
        var maps = [c];
        for (var i = 0; i < l - 1; i++) {
            c = c.get(this.args[i]);
            maps.push(c);
        }
        for (var i = maps.length - 1; i > 0; i--) {
            if (maps[i].size === 0)
                maps[i - 1].delete(this.args[i - 1]);
        }
        this.isDisposed = true;
    };
    DeepMapEntry.prototype.assertNotDisposed = function () {
        // TODO: once this becomes annoying, we should introduce a reset method to re-run the constructor logic
        if (this.isDisposed)
            throw new Error("Concurrent modification exception");
    };
    return DeepMapEntry;
}());
/**
 * @private
 */
var DeepMap = /** @class */ (function () {
    function DeepMap() {
        this.store = new Map();
        this.argsLength = -1;
    }
    DeepMap.prototype.entry = function (args) {
        if (this.argsLength === -1)
            this.argsLength = args.length;
        else if (this.argsLength !== args.length)
            throw new Error("DeepMap should be used with functions with a consistent length, expected: " + this.argsLength + ", got: " + args.length);
        if (this.last)
            this.last.isDisposed = true;
        return (this.last = new DeepMapEntry(this.store, args));
    };
    return DeepMap;
}());

var __assign$3 = ( false) || function () {
    __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$3.apply(this, arguments);
};
/**
 * computedFn takes a function with an arbitrary amount of arguments,
 * and memoizes the output of the function based on the arguments passed in.
 *
 * computedFn(fn) returns a function with the very same signature. There is no limit on the amount of arguments
 * that is accepted. However, the amount of arguments must be constant and default arguments are not supported.
 *
 * By default the output of a function call will only be memoized as long as the
 * output is being observed.
 *
 * The function passes into `computedFn` should be pure, not be an action and only be relying on
 * observables.
 *
 * Setting `keepAlive` to `true` will cause the output to be forcefully cached forever.
 * Note that this might introduce memory leaks!
 *
 * @example
 * const store = observable({
    a: 1,
    b: 2,
    c: 3,
    m: computedFn(function(x) {
      return this.a * this.b * x
    })
  })

  const d = autorun(() => {
    // store.m(3) will be cached as long as this autorun is running
    console.log(store.m(3) * store.c)
  })
 *
 * @param fn
 * @param keepAliveOrOptions
 */
function computedFn(fn, keepAliveOrOptions) {
    if (keepAliveOrOptions === void 0) { keepAliveOrOptions = false; }
    if ((0,mobx__WEBPACK_IMPORTED_MODULE_0__.isAction)(fn))
        throw new Error("computedFn shouldn't be used on actions");
    var memoWarned = false;
    var i = 0;
    var opts = typeof keepAliveOrOptions === "boolean"
        ? { keepAlive: keepAliveOrOptions }
        : keepAliveOrOptions;
    var d = new DeepMap();
    return function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var entry = d.entry(args);
        // cache hit, return
        if (entry.exists())
            return entry.get().get();
        // if function is invoked, and its a cache miss without reactive, there is no point in caching...
        if (!opts.keepAlive && !(0,mobx__WEBPACK_IMPORTED_MODULE_0__._isComputingDerivation)()) {
            if (!memoWarned) {
                console.warn("invoking a computedFn from outside an reactive context won't be memoized, unless keepAlive is set");
                memoWarned = true;
            }
            return fn.apply(this, args);
        }
        // create new entry
        var c = (0,mobx__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {
            return fn.apply(_this, args);
        }, __assign$3(__assign$3({}, opts), { name: "computedFn(" + fn.name + "#" + ++i + ")" }));
        entry.set(c);
        // clean up if no longer observed
        if (!opts.keepAlive)
            (0,mobx__WEBPACK_IMPORTED_MODULE_0__.onBecomeUnobserved)(c, function () {
                d.entry(args).delete();
            });
        // return current val
        return c.get();
    };
}

function decorateMethodOrField(decoratorName, decorateFn, target, prop, descriptor) {
    if (descriptor) {
        return decorateMethod(decoratorName, decorateFn, prop, descriptor);
    }
    else {
        decorateField(decorateFn, target, prop);
    }
}
function decorateMethod(decoratorName, decorateFn, prop, descriptor) {
    if (descriptor.get !== undefined) {
        return fail(decoratorName + " cannot be used with getters");
    }
    // babel / typescript
    // @action method() { }
    if (descriptor.value) {
        // typescript
        return {
            value: decorateFn(prop, descriptor.value),
            enumerable: false,
            configurable: true,
            writable: true,
        };
    }
    // babel only: @action method = () => {}
    var initializer = descriptor.initializer;
    return {
        enumerable: false,
        configurable: true,
        writable: true,
        initializer: function () {
            // N.B: we can't immediately invoke initializer; this would be wrong
            return decorateFn(prop, initializer.call(this));
        },
    };
}
function decorateField(decorateFn, target, prop) {
    // Simple property that writes on first invocation to the current instance
    Object.defineProperty(target, prop, {
        configurable: true,
        enumerable: false,
        get: function () {
            return undefined;
        },
        set: function (value) {
            addHiddenProp(this, prop, decorateFn(prop, value));
        },
    });
}

var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = ( false) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var runId = 0;
var unfinishedIds = new Set();
var currentlyActiveIds = new Set();
var inOrderExecution;
{
    var taskOrderPromise_1 = Promise.resolve();
    var queueMicrotaskPolyfill_1;
    if (typeof queueMicrotask !== "undefined") {
        // use real implementation if possible in modern browsers/node
        queueMicrotaskPolyfill_1 = queueMicrotask;
    }
    else if (typeof process !== "undefined" && process.nextTick) {
        // fallback to node's process.nextTick in node <= 10
        queueMicrotaskPolyfill_1 = function (cb) {
            process.nextTick(cb);
        };
    }
    else {
        // use setTimeout for old browsers
        queueMicrotaskPolyfill_1 = function (cb) {
            setTimeout(cb, 0);
        };
    }
    var idle_1 = function () {
        return new Promise(function (r) {
            queueMicrotaskPolyfill_1(r);
        });
    };
    // we use this trick to force a proper order of execution
    // even for immediately resolved promises
    inOrderExecution = function () {
        taskOrderPromise_1 = taskOrderPromise_1.then(idle_1);
        return taskOrderPromise_1;
    };
}
var actionAsyncContextStack = [];
function task(value) {
    return __awaiter(this, void 0, void 0, function () {
        var ctx, runId, actionName, args, scope, actionRunInfo, step, nextStep, ret, err_1, actionRunInfo_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ctx = actionAsyncContextStack[actionAsyncContextStack.length - 1];
                    if (!ctx) {
                        fail$1("'actionAsync' context not present when running 'task'. did you await inside an 'actionAsync' without using 'task(promise)'? did you forget to await the task?");
                    }
                    runId = ctx.runId, actionName = ctx.actionName, args = ctx.args, scope = ctx.scope, actionRunInfo = ctx.actionRunInfo, step = ctx.step;
                    nextStep = step + 1;
                    actionAsyncContextStack.pop();
                    (0,mobx__WEBPACK_IMPORTED_MODULE_0__._endAction)(actionRunInfo);
                    currentlyActiveIds.delete(runId);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, 6, 7]);
                    return [4 /*yield*/, value];
                case 2:
                    ret = _a.sent();
                    return [4 /*yield*/, inOrderExecution()];
                case 3:
                    _a.sent();
                    return [2 /*return*/, ret];
                case 4:
                    err_1 = _a.sent();
                    return [4 /*yield*/, inOrderExecution()];
                case 5:
                    _a.sent();
                    throw err_1;
                case 6:
                    // only restart if it not a dangling promise (the action is not yet finished)
                    if (unfinishedIds.has(runId)) {
                        actionRunInfo_1 = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._startAction)(getActionAsyncName(actionName, runId, nextStep), this, args);
                        actionAsyncContextStack.push({
                            runId: runId,
                            step: nextStep,
                            actionRunInfo: actionRunInfo_1,
                            actionName: actionName,
                            args: args,
                            scope: scope,
                        });
                        currentlyActiveIds.add(runId);
                    }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    });
}
// base
/**
 * Alternative syntax for async actions, similar to `flow` but more compatible with
 * Typescript typings. Not to be confused with `asyncAction`, which is deprecated.
 *
 * `actionAsync` can be used either as a decorator or as a function.
 * It takes an async function that internally must use `await task(promise)` rather than
 * the standard `await promise`.
 *
 * When using the mobx devTools, an asyncAction will emit `action` events with names like:
 * * `"fetchUsers - runid 6 - step 0"`
 * * `"fetchUsers - runid 6 - step 1"`
 * * `"fetchUsers - runid 6 - step 2"`
 *
 * The `runId` represents the action instance. In other words, if `fetchUsers` is invoked
 * multiple times concurrently, the events with the same `runid` belong together.
 * The `step` number indicates the code block that is now being executed.
 *
 * @example
 * import {actionAsync, task} from "mobx-utils"
 *
 * let users = []
 *
 * const fetchUsers = actionAsync("fetchUsers", async (url) => {
 *   const start = Date.now()
 *   // note the use of task when awaiting!
 *   const data = await task(window.fetch(url))
 *   users = await task(data.json())
 *   return start - Date.now()
 * })
 *
 * const time = await fetchUsers("http://users.com")
 * console.log("Got users", users, "in ", time, "ms")
 *
 * @example
 * import {actionAsync, task} from "mobx-utils"
 *
 * mobx.configure({ enforceActions: "observed" }) // don't allow state modifications outside actions
 *
 * class Store {
 *   \@observable githubProjects = []
 *   \@observable = "pending" // "pending" / "done" / "error"
 *
 *   \@actionAsync
 *   async fetchProjects() {
 *     this.githubProjects = []
 *     this.state = "pending"
 *     try {
 *       // note the use of task when awaiting!
 *       const projects = await task(fetchGithubProjectsSomehow())
 *       const filteredProjects = somePreprocessing(projects)
 *       // the asynchronous blocks will automatically be wrapped actions
 *       this.state = "done"
 *       this.githubProjects = filteredProjects
 *     } catch (error) {
 *        this.state = "error"
 *     }
 *   }
 * }
 */
function actionAsync(arg1, arg2, arg3) {
    // decorator
    if (typeof arguments[1] === "string") {
        return decorateMethodOrField("@actionAsync", function (prop, v) {
            return actionAsyncFn(prop, v);
        }, arg1, arg2, arg3);
    }
    // direct invocation
    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
    var fn = typeof arg1 === "function" ? arg1 : arg2;
    return actionAsyncFn(actionName, fn);
}
function actionAsyncFn(actionName, fn) {
    if (!mobx__WEBPACK_IMPORTED_MODULE_0__._startAction || !mobx__WEBPACK_IMPORTED_MODULE_0__._endAction) {
        fail$1("'actionAsync' requires mobx >=5.13.1 or >=4.13.1");
    }
    invariant(typeof fn === "function", "'asyncAction' expects a function");
    if (typeof actionName !== "string" || !actionName)
        fail$1("actions should have valid names, got: '" + actionName + "'");
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var nextRunId, actionRunInfo, finish, promise, ret, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nextRunId = runId++;
                        unfinishedIds.add(nextRunId);
                        actionRunInfo = (0,mobx__WEBPACK_IMPORTED_MODULE_0__._startAction)(getActionAsyncName(actionName, nextRunId, 0), this, args);
                        actionAsyncContextStack.push({
                            runId: nextRunId,
                            step: 0,
                            actionRunInfo: actionRunInfo,
                            actionName: actionName,
                            args: args,
                            scope: this,
                        });
                        currentlyActiveIds.add(nextRunId);
                        finish = function (err) {
                            unfinishedIds.delete(nextRunId);
                            var ctx = actionAsyncContextStack.pop();
                            if (!ctx || ctx.runId !== nextRunId) {
                                // push it back if invalid
                                if (ctx) {
                                    actionAsyncContextStack.push(ctx);
                                }
                                var msg = "invalid 'actionAsync' context when finishing action '" + actionName + "'.";
                                if (!ctx) {
                                    msg += " no action context could be found instead.";
                                }
                                else {
                                    msg += " an action context for '" + ctx.actionName + "' was found instead.";
                                }
                                msg +=
                                    " did you await inside an 'actionAsync' without using 'task(promise)'? did you forget to await the task?";
                                fail$1(msg);
                            }
                            ctx.actionRunInfo.error = err;
                            (0,mobx__WEBPACK_IMPORTED_MODULE_0__._endAction)(ctx.actionRunInfo);
                            currentlyActiveIds.delete(nextRunId);
                            if (err) {
                                throw err;
                            }
                        };
                        try {
                            promise = fn.apply(this, args);
                        }
                        catch (err) {
                            finish(err);
                        }
                        // are we done sync? (no task run)
                        if (currentlyActiveIds.has(nextRunId)) {
                            finish(undefined);
                            return [2 /*return*/, promise];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, promise];
                    case 2:
                        ret = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        finish(err_2);
                        return [3 /*break*/, 4];
                    case 4:
                        finish(undefined);
                        return [2 /*return*/, ret];
                }
            });
        });
    };
}
function getActionAsyncName(actionName, runId, step) {
    return actionName + " - runid " + runId + " - step " + step;
}




/***/ }),

/***/ "./node_modules/mobx/lib/mobx.module.js":
/*!**********************************************!*\
  !*** ./node_modules/mobx/lib/mobx.module.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$mobx": () => (/* binding */ $mobx),
/* harmony export */   "FlowCancellationError": () => (/* binding */ FlowCancellationError),
/* harmony export */   "IDerivationState": () => (/* binding */ IDerivationState),
/* harmony export */   "ObservableMap": () => (/* binding */ ObservableMap),
/* harmony export */   "ObservableSet": () => (/* binding */ ObservableSet),
/* harmony export */   "Reaction": () => (/* binding */ Reaction),
/* harmony export */   "_allowStateChanges": () => (/* binding */ allowStateChanges),
/* harmony export */   "_allowStateChangesInsideComputed": () => (/* binding */ allowStateChangesInsideComputed),
/* harmony export */   "_allowStateReadsEnd": () => (/* binding */ allowStateReadsEnd),
/* harmony export */   "_allowStateReadsStart": () => (/* binding */ allowStateReadsStart),
/* harmony export */   "_endAction": () => (/* binding */ _endAction),
/* harmony export */   "_getAdministration": () => (/* binding */ getAdministration),
/* harmony export */   "_getGlobalState": () => (/* binding */ getGlobalState),
/* harmony export */   "_interceptReads": () => (/* binding */ interceptReads),
/* harmony export */   "_isComputingDerivation": () => (/* binding */ isComputingDerivation),
/* harmony export */   "_resetGlobalState": () => (/* binding */ resetGlobalState),
/* harmony export */   "_startAction": () => (/* binding */ _startAction),
/* harmony export */   "action": () => (/* binding */ action),
/* harmony export */   "autorun": () => (/* binding */ autorun),
/* harmony export */   "comparer": () => (/* binding */ comparer),
/* harmony export */   "computed": () => (/* binding */ computed),
/* harmony export */   "configure": () => (/* binding */ configure),
/* harmony export */   "createAtom": () => (/* binding */ createAtom),
/* harmony export */   "decorate": () => (/* binding */ decorate),
/* harmony export */   "entries": () => (/* binding */ entries),
/* harmony export */   "extendObservable": () => (/* binding */ extendObservable),
/* harmony export */   "flow": () => (/* binding */ flow),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getAtom": () => (/* binding */ getAtom),
/* harmony export */   "getDebugName": () => (/* binding */ getDebugName),
/* harmony export */   "getDependencyTree": () => (/* binding */ getDependencyTree),
/* harmony export */   "getObserverTree": () => (/* binding */ getObserverTree),
/* harmony export */   "has": () => (/* binding */ has),
/* harmony export */   "intercept": () => (/* binding */ intercept),
/* harmony export */   "isAction": () => (/* binding */ isAction),
/* harmony export */   "isArrayLike": () => (/* binding */ isArrayLike),
/* harmony export */   "isBoxedObservable": () => (/* binding */ isObservableValue),
/* harmony export */   "isComputed": () => (/* binding */ isComputed),
/* harmony export */   "isComputedProp": () => (/* binding */ isComputedProp),
/* harmony export */   "isFlowCancellationError": () => (/* binding */ isFlowCancellationError),
/* harmony export */   "isObservable": () => (/* binding */ isObservable),
/* harmony export */   "isObservableArray": () => (/* binding */ isObservableArray),
/* harmony export */   "isObservableMap": () => (/* binding */ isObservableMap),
/* harmony export */   "isObservableObject": () => (/* binding */ isObservableObject),
/* harmony export */   "isObservableProp": () => (/* binding */ isObservableProp),
/* harmony export */   "isObservableSet": () => (/* binding */ isObservableSet),
/* harmony export */   "keys": () => (/* binding */ keys),
/* harmony export */   "observable": () => (/* binding */ observable),
/* harmony export */   "observe": () => (/* binding */ observe),
/* harmony export */   "onBecomeObserved": () => (/* binding */ onBecomeObserved),
/* harmony export */   "onBecomeUnobserved": () => (/* binding */ onBecomeUnobserved),
/* harmony export */   "onReactionError": () => (/* binding */ onReactionError),
/* harmony export */   "reaction": () => (/* binding */ reaction),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "runInAction": () => (/* binding */ runInAction),
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "spy": () => (/* binding */ spy),
/* harmony export */   "toJS": () => (/* binding */ toJS),
/* harmony export */   "trace": () => (/* binding */ trace),
/* harmony export */   "transaction": () => (/* binding */ transaction),
/* harmony export */   "untracked": () => (/* binding */ untracked),
/* harmony export */   "values": () => (/* binding */ values),
/* harmony export */   "when": () => (/* binding */ when)
/* harmony export */ });
/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.";
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
function getNextId() {
    return ++globalState.mobxGuid;
}
function fail(message) {
    invariant(false, message);
    throw "X"; // unreachable
}
function invariant(check, message) {
    if (!check)
        throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
}
/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */
var deprecatedMessages = [];
function deprecated(msg, thing) {
    if (false)
        {}
    if (thing) {
        return deprecated("'" + msg + "', use '" + thing + "' instead.");
    }
    if (deprecatedMessages.indexOf(msg) !== -1)
        return false;
    deprecatedMessages.push(msg);
    console.error("[mobx] Deprecated: " + msg);
    return true;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
    var invoked = false;
    return function () {
        if (invoked)
            return;
        invoked = true;
        return func.apply(this, arguments);
    };
}
var noop = function () { };
function unique(list) {
    var res = [];
    list.forEach(function (item) {
        if (res.indexOf(item) === -1)
            res.push(item);
    });
    return res;
}
function isObject(value) {
    return value !== null && typeof value === "object";
}
function isPlainObject(value) {
    if (value === null || typeof value !== "object")
        return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
function convertToMap(dataStructure) {
    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
        return dataStructure;
    }
    else if (Array.isArray(dataStructure)) {
        return new Map(dataStructure);
    }
    else if (isPlainObject(dataStructure)) {
        var map = new Map();
        for (var key in dataStructure) {
            map.set(key, dataStructure[key]);
        }
        return map;
    }
    else {
        return fail("Cannot convert to map from '" + dataStructure + "'");
    }
}
function addHiddenProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
function addHiddenFinalProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
function isPropertyConfigurable(object, prop) {
    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
}
function assertPropertyConfigurable(object, prop) {
    if ( true && !isPropertyConfigurable(object, prop))
        fail("Cannot make property '" + prop.toString() + "' observable, it is not configurable and writable in the target object");
}
function createInstanceofPredicate(name, clazz) {
    var propName = "isMobX" + name;
    clazz.prototype[propName] = true;
    return function (x) {
        return isObject(x) && x[propName] === true;
    };
}
/**
 * Returns whether the argument is an array, disregarding observability.
 */
function isArrayLike(x) {
    return Array.isArray(x) || isObservableArray(x);
}
function isES6Map(thing) {
    return thing instanceof Map;
}
function isES6Set(thing) {
    return thing instanceof Set;
}
/**
 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
 */
function getPlainObjectKeys(object) {
    var enumerables = new Set();
    for (var key in object)
        enumerables.add(key); // *all* enumerables
    Object.getOwnPropertySymbols(object).forEach(function (k) {
        if (Object.getOwnPropertyDescriptor(object, k).enumerable)
            enumerables.add(k);
    }); // *own* symbols
    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
    // as there is no efficient iterator that returns *all* properties
    return Array.from(enumerables);
}
function stringifyKey(key) {
    if (key && key.toString)
        return key.toString();
    else
        return new String(key).toString();
}
function toPrimitive(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
}
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys
    ? Reflect.ownKeys
    : Object.getOwnPropertySymbols
        ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); }
        : /* istanbul ignore next */ Object.getOwnPropertyNames;

var $mobx = Symbol("mobx administration");
var Atom = /** @class */ (function () {
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */
    function Atom(name) {
        if (name === void 0) { name = "Atom@" + getNextId(); }
        this.name = name;
        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
        this.isBeingObserved = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.NOT_TRACKING;
    }
    Atom.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    Atom.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Invoke this method to notify mobx that your atom has been used somehow.
     * Returns true if there is currently a reactive context.
     */
    Atom.prototype.reportObserved = function () {
        return reportObserved(this);
    };
    /**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */
    Atom.prototype.reportChanged = function () {
        startBatch();
        propagateChanged(this);
        endBatch();
    };
    Atom.prototype.toString = function () {
        return this.name;
    };
    return Atom;
}());
var isAtom = createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop; }
    if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop; }
    var atom = new Atom(name);
    // default `noop` listener will not initialize the hook Set
    if (onBecomeObservedHandler !== noop) {
        onBecomeObserved(atom, onBecomeObservedHandler);
    }
    if (onBecomeUnobservedHandler !== noop) {
        onBecomeUnobserved(atom, onBecomeUnobservedHandler);
    }
    return atom;
}

function identityComparer(a, b) {
    return a === b;
}
function structuralComparer(a, b) {
    return deepEqual(a, b);
}
function shallowComparer(a, b) {
    return deepEqual(a, b, 1);
}
function defaultComparer(a, b) {
    return Object.is(a, b);
}
var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    default: defaultComparer,
    shallow: shallowComparer
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers");
var mobxPendingDecorators = Symbol("mobx pending decorators");
var enumerableDescriptorCache = {};
var nonEnumerableDescriptorCache = {};
function createPropertyInitializerDescriptor(prop, enumerable) {
    var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
    return (cache[prop] ||
        (cache[prop] = {
            configurable: true,
            enumerable: enumerable,
            get: function () {
                initializeInstance(this);
                return this[prop];
            },
            set: function (value) {
                initializeInstance(this);
                this[prop] = value;
            }
        }));
}
function initializeInstance(target) {
    var e_1, _a;
    if (target[mobxDidRunLazyInitializersSymbol] === true)
        return;
    var decorators = target[mobxPendingDecorators];
    if (decorators) {
        addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
        // Build property key array from both strings and symbols
        var keys = __spread(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                var d = decorators[key];
                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
}
function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
    return function decoratorFactory() {
        var decoratorArguments;
        var decorator = function decorate(target, prop, descriptor, applyImmediately
        // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
        // as the instance to apply the decorator to equals the target
        ) {
            if (applyImmediately === true) {
                propertyCreator(target, prop, descriptor, target, decoratorArguments);
                return null;
            }
            if ( true && !quacksLikeADecorator(arguments))
                fail("This function is a decorator, but it wasn't invoked like a decorator");
            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
                var inheritedDecorators = target[mobxPendingDecorators];
                addHiddenProp(target, mobxPendingDecorators, __assign({}, inheritedDecorators));
            }
            target[mobxPendingDecorators][prop] = {
                prop: prop,
                propertyCreator: propertyCreator,
                descriptor: descriptor,
                decoratorTarget: target,
                decoratorArguments: decoratorArguments
            };
            return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
        };
        if (quacksLikeADecorator(arguments)) {
            // @decorator
            decoratorArguments = EMPTY_ARRAY;
            return decorator.apply(null, arguments);
        }
        else {
            // @decorator(args)
            decoratorArguments = Array.prototype.slice.call(arguments);
            return decorator;
        }
    };
}
function quacksLikeADecorator(args) {
    return (((args.length === 2 || args.length === 3) &&
        (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
        (args.length === 4 && args[3] === true));
}

function deepEnhancer(v, _, name) {
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    if (Array.isArray(v))
        return observable.array(v, { name: name });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name });
    if (isES6Map(v))
        return observable.map(v, { name: name });
    if (isES6Set(v))
        return observable.set(v, { name: name });
    return v;
}
function shallowEnhancer(v, _, name) {
    if (v === undefined || v === null)
        return v;
    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))
        return v;
    if (Array.isArray(v))
        return observable.array(v, { name: name, deep: false });
    if (isPlainObject(v))
        return observable.object(v, undefined, { name: name, deep: false });
    if (isES6Map(v))
        return observable.map(v, { name: name, deep: false });
    if (isES6Set(v))
        return observable.set(v, { name: name, deep: false });
    return fail( true &&
        "The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}
function referenceEnhancer(newValue) {
    // never turn into an observable
    return newValue;
}
function refStructEnhancer(v, oldValue, name) {
    if ( true && isObservable(v))
        throw "observable.struct should not be used with observable values";
    if (deepEqual(v, oldValue))
        return oldValue;
    return v;
}

function createDecoratorForEnhancer(enhancer) {
    invariant(enhancer);
    var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
        if (true) {
            invariant(!descriptor || !descriptor.get, "@observable cannot be used on getter (property \"" + stringifyKey(propertyName) + "\"), use @computed instead.");
        }
        var initialValue = descriptor
            ? descriptor.initializer
                ? descriptor.initializer.call(target)
                : descriptor.value
            : undefined;
        asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
    });
    var res = 
    // Extra process checks, as this happens during module initialization
    typeof process !== "undefined" && ({"NODE_ENV":"development","STEAM_BUILD":"dev"}) && "development" !== "production"
        ? function observableDecorator() {
            // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
            // and simply return the created prop decorator
            if (arguments.length < 2)
                return fail("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
            return decorator.apply(null, arguments);
        }
        : decorator;
    res.enhancer = enhancer;
    return res;
}

// Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases
var defaultCreateObservableOptions = {
    deep: true,
    name: undefined,
    defaultDecorator: undefined,
    proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function assertValidOption(key) {
    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
        fail("invalid option for (extend)observable: " + key);
}
function asCreateObservableOptions(thing) {
    if (thing === null || thing === undefined)
        return defaultCreateObservableOptions;
    if (typeof thing === "string")
        return { name: thing, deep: true, proxy: true };
    if (true) {
        if (typeof thing !== "object")
            return fail("expected options object");
        Object.keys(thing).forEach(assertValidOption);
    }
    return thing;
}
var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
function getEnhancerFromOptions(options) {
    return options.defaultDecorator
        ? options.defaultDecorator.enhancer
        : options.deep === false
            ? referenceEnhancer
            : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v, arg2, arg3) {
    // @observable someProp;
    if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
        return deepDecorator.apply(null, arguments);
    }
    // it is an observable already, done
    if (isObservable(v))
        return v;
    // something that can be converted and mutated?
    var res = isPlainObject(v)
        ? observable.object(v, arg2, arg3)
        : Array.isArray(v)
            ? observable.array(v, arg2)
            : isES6Map(v)
                ? observable.map(v, arg2)
                : isES6Set(v)
                    ? observable.set(v, arg2)
                    : v;
    // this value could be converted to a new observable data structure, return it
    if (res !== v)
        return res;
    // otherwise, just box it
    fail( true &&
        "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
}
var observableFactories = {
    box: function (value, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("box");
        var o = asCreateObservableOptions(options);
        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
    },
    array: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("array");
        var o = asCreateObservableOptions(options);
        return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
    },
    map: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("map");
        var o = asCreateObservableOptions(options);
        return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
    },
    set: function (initialValues, options) {
        if (arguments.length > 2)
            incorrectlyUsedAsDecorator("set");
        var o = asCreateObservableOptions(options);
        return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
    },
    object: function (props, decorators, options) {
        if (typeof arguments[1] === "string")
            incorrectlyUsedAsDecorator("object");
        var o = asCreateObservableOptions(options);
        if (o.proxy === false) {
            return extendObservable({}, props, decorators, o);
        }
        else {
            var defaultDecorator = getDefaultDecoratorFromObjectOptions(o);
            var base = extendObservable({}, undefined, undefined, o);
            var proxy = createDynamicObservableObject(base);
            extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator);
            return proxy;
        }
    },
    ref: refDecorator,
    shallow: shallowDecorator,
    deep: deepDecorator,
    struct: refStructDecorator
};
var observable = createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
Object.keys(observableFactories).forEach(function (name) { return (observable[name] = observableFactories[name]); });
function incorrectlyUsedAsDecorator(methodName) {
    fail(
    // process.env.NODE_ENV !== "production" &&
    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}

var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
    if (true) {
        invariant(descriptor && descriptor.get, "Trying to declare a computed value for unspecified getter '" + stringifyKey(propertyName) + "'");
    }
    var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
    // Optimization: faster on decorator target or instance? Assuming target
    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
    // Forcing instance now, fixes hot reloadig issues on React Native:
    var options = decoratorArgs[0] || {};
    asObservableObject(instance).addComputedProp(instance, propertyName, __assign({ get: get,
        set: set, context: instance }, options));
});
var computedStructDecorator = computedDecorator({ equals: comparer.structural });
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2, arg3) {
    if (typeof arg2 === "string") {
        // @computed
        return computedDecorator.apply(null, arguments);
    }
    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
        // @computed({ options })
        return computedDecorator.apply(null, arguments);
    }
    // computed(expr, options?)
    if (true) {
        invariant(typeof arg1 === "function", "First argument to `computed` should be an expression.");
        invariant(arguments.length < 3, "Computed takes one or two arguments if used as function");
    }
    var opts = typeof arg2 === "object" ? arg2 : {};
    opts.get = arg1;
    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
    opts.name = opts.name || arg1.name || ""; /* for generated name */
    return new ComputedValue(opts);
};
computed.struct = computedStructDecorator;

var IDerivationState;
(function (IDerivationState) {
    // before being run or (outside batch and not being observed)
    // at this point derivation is not holding any data about dependency tree
    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
    // no shallow dependency changed since last computation
    // won't recalculate derivation
    // this is what makes mobx fast
    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
    // some deep dependency changed, but don't know if shallow dependency changed
    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
    // currently only ComputedValue will propagate POSSIBLY_STALE
    //
    // having this state is second big optimization:
    // don't have to recompute on every dependency change, but only when it's needed
    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
    // A shallow dependency has changed since last computation and the derivation
    // will need to recompute when it's needed next.
    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
})(IDerivationState || (IDerivationState = {}));
var TraceMode;
(function (TraceMode) {
    TraceMode[TraceMode["NONE"] = 0] = "NONE";
    TraceMode[TraceMode["LOG"] = 1] = "LOG";
    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = /** @class */ (function () {
    function CaughtException(cause) {
        this.cause = cause;
        // Empty
    }
    return CaughtException;
}());
function isCaughtException(e) {
    return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
    switch (derivation.dependenciesState) {
        case IDerivationState.UP_TO_DATE:
            return false;
        case IDerivationState.NOT_TRACKING:
        case IDerivationState.STALE:
            return true;
        case IDerivationState.POSSIBLY_STALE: {
            // state propagation can occur outside of action/reactive context #2195
            var prevAllowStateReads = allowStateReadsStart(true);
            var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
            var obs = derivation.observing, l = obs.length;
            for (var i = 0; i < l; i++) {
                var obj = obs[i];
                if (isComputedValue(obj)) {
                    if (globalState.disableErrorBoundaries) {
                        obj.get();
                    }
                    else {
                        try {
                            obj.get();
                        }
                        catch (e) {
                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                            untrackedEnd(prevUntracked);
                            allowStateReadsEnd(prevAllowStateReads);
                            return true;
                        }
                    }
                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                    // and `derivation` is an observer of `obj`
                    // invariantShouldCompute(derivation)
                    if (derivation.dependenciesState === IDerivationState.STALE) {
                        untrackedEnd(prevUntracked);
                        allowStateReadsEnd(prevAllowStateReads);
                        return true;
                    }
                }
            }
            changeDependenciesStateTo0(derivation);
            untrackedEnd(prevUntracked);
            allowStateReadsEnd(prevAllowStateReads);
            return false;
        }
    }
}
// function invariantShouldCompute(derivation: IDerivation) {
//     const newDepState = (derivation as any).dependenciesState
//     if (
//         process.env.NODE_ENV === "production" &&
//         (newDepState === IDerivationState.POSSIBLY_STALE ||
//             newDepState === IDerivationState.NOT_TRACKING)
//     )
//         fail("Illegal dependency state")
// }
function isComputingDerivation() {
    return globalState.trackingDerivation !== null; // filter out actions inside computations
}
function checkIfStateModificationsAreAllowed(atom) {
    var hasObservers = atom.observers.size > 0;
    // Should never be possible to change an observed observable from inside computed, see #798
    if (globalState.computationDepth > 0 && hasObservers)
        fail( true &&
            "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "strict"))
        fail( true &&
            (globalState.enforceActions
                ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: "
                : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") +
                atom.name);
}
function checkIfStateReadsAreAllowed(observable) {
    if ( true &&
        !globalState.allowStateReads &&
        globalState.observableRequiresReaction) {
        console.warn("[mobx] Observable " + observable.name + " being read outside a reactive context");
    }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
    var prevAllowStateReads = allowStateReadsStart(true);
    // pre allocate array allocation + room for variation in deps
    // array will be trimmed by bindDependencies
    changeDependenciesStateTo0(derivation);
    derivation.newObserving = new Array(derivation.observing.length + 100);
    derivation.unboundDepsCount = 0;
    derivation.runId = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    var result;
    if (globalState.disableErrorBoundaries === true) {
        result = f.call(context);
    }
    else {
        try {
            result = f.call(context);
        }
        catch (e) {
            result = new CaughtException(e);
        }
    }
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    warnAboutDerivationWithoutDependencies(derivation);
    allowStateReadsEnd(prevAllowStateReads);
    return result;
}
function warnAboutDerivationWithoutDependencies(derivation) {
    if (false)
        {}
    if (derivation.observing.length !== 0)
        return;
    if (globalState.reactionRequiresObservable || derivation.requiresObservable) {
        console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
    }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
    var prevObserving = derivation.observing;
    var observing = (derivation.observing = derivation.newObserving);
    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
    // Go through all new observables and check diffValue: (this list can contain duplicates):
    //   0: first occurrence, change to 1 and keep it
    //   1: extra occurrence, drop it
    var i0 = 0, l = derivation.unboundDepsCount;
    for (var i = 0; i < l; i++) {
        var dep = observing[i];
        if (dep.diffValue === 0) {
            dep.diffValue = 1;
            if (i0 !== i)
                observing[i0] = dep;
            i0++;
        }
        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
        // not hitting the condition
        if (dep.dependenciesState > lowestNewObservingDerivationState) {
            lowestNewObservingDerivationState = dep.dependenciesState;
        }
    }
    observing.length = i0;
    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
    //   0: it's not in new observables, unobserve it
    //   1: it keeps being observed, don't want to notify it. change to 0
    l = prevObserving.length;
    while (l--) {
        var dep = prevObserving[l];
        if (dep.diffValue === 0) {
            removeObserver(dep, derivation);
        }
        dep.diffValue = 0;
    }
    // Go through all new observables and check diffValue: (now it should be unique)
    //   0: it was set to 0 in last loop. don't need to do anything.
    //   1: it wasn't observed, let's observe it. set back to 0
    while (i0--) {
        var dep = observing[i0];
        if (dep.diffValue === 1) {
            dep.diffValue = 0;
            addObserver(dep, derivation);
        }
    }
    // Some new observed derivations may become stale during this derivation computation
    // so they have had no chance to propagate staleness (#916)
    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
        derivation.dependenciesState = lowestNewObservingDerivationState;
        derivation.onBecomeStale();
    }
}
function clearObserving(derivation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
    var obs = derivation.observing;
    derivation.observing = [];
    var i = obs.length;
    while (i--)
        removeObserver(obs[i], derivation);
    derivation.dependenciesState = IDerivationState.NOT_TRACKING;
}
function untracked(action) {
    var prev = untrackedStart();
    try {
        return action();
    }
    finally {
        untrackedEnd(prev);
    }
}
function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
}
function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
    var prev = globalState.allowStateReads;
    globalState.allowStateReads = allowStateReads;
    return prev;
}
function allowStateReadsEnd(prev) {
    globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)
        return;
    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
    var obs = derivation.observing;
    var i = obs.length;
    while (i--)
        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
}

// we don't use globalState for these in order to avoid possible issues with multiple
// mobx versions
var currentActionId = 0;
var nextActionId = 1;
var functionNameDescriptor = Object.getOwnPropertyDescriptor(function () { }, "name");
var isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable;
function createAction(actionName, fn, ref) {
    if (true) {
        invariant(typeof fn === "function", "`action` can only be invoked on functions");
        if (typeof actionName !== "string" || !actionName)
            fail("actions should have valid names, got: '" + actionName + "'");
    }
    var res = function () {
        return executeAction(actionName, fn, ref || this, arguments);
    };
    res.isMobxAction = true;
    if (true) {
        if (isFunctionNameConfigurable) {
            Object.defineProperty(res, "name", { value: actionName });
        }
    }
    return res;
}
function executeAction(actionName, fn, scope, args) {
    var runInfo = _startAction(actionName, scope, args);
    try {
        return fn.apply(scope, args);
    }
    catch (err) {
        runInfo.error = err;
        throw err;
    }
    finally {
        _endAction(runInfo);
    }
}
function _startAction(actionName, scope, args) {
    var notifySpy = isSpyEnabled() && !!actionName;
    var startTime = 0;
    if (notifySpy && "development" !== "production") {
        startTime = Date.now();
        var l = (args && args.length) || 0;
        var flattendArgs = new Array(l);
        if (l > 0)
            for (var i = 0; i < l; i++)
                flattendArgs[i] = args[i];
        spyReportStart({
            type: "action",
            name: actionName,
            object: scope,
            arguments: flattendArgs
        });
    }
    var prevDerivation = untrackedStart();
    startBatch();
    var prevAllowStateChanges = allowStateChangesStart(true);
    var prevAllowStateReads = allowStateReadsStart(true);
    var runInfo = {
        prevDerivation: prevDerivation,
        prevAllowStateChanges: prevAllowStateChanges,
        prevAllowStateReads: prevAllowStateReads,
        notifySpy: notifySpy,
        startTime: startTime,
        actionId: nextActionId++,
        parentActionId: currentActionId
    };
    currentActionId = runInfo.actionId;
    return runInfo;
}
function _endAction(runInfo) {
    if (currentActionId !== runInfo.actionId) {
        fail("invalid action stack. did you forget to finish an action?");
    }
    currentActionId = runInfo.parentActionId;
    if (runInfo.error !== undefined) {
        globalState.suppressReactionErrors = true;
    }
    allowStateChangesEnd(runInfo.prevAllowStateChanges);
    allowStateReadsEnd(runInfo.prevAllowStateReads);
    endBatch();
    untrackedEnd(runInfo.prevDerivation);
    if (runInfo.notifySpy && "development" !== "production") {
        spyReportEnd({ time: Date.now() - runInfo.startTime });
    }
    globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges, func) {
    var prev = allowStateChangesStart(allowStateChanges);
    var res;
    try {
        res = func();
    }
    finally {
        allowStateChangesEnd(prev);
    }
    return res;
}
function allowStateChangesStart(allowStateChanges) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges;
    return prev;
}
function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
}
function allowStateChangesInsideComputed(func) {
    var prev = globalState.computationDepth;
    globalState.computationDepth = 0;
    var res;
    try {
        res = func();
    }
    finally {
        globalState.computationDepth = prev;
    }
    return res;
}

var ObservableValue = /** @class */ (function (_super) {
    __extends(ObservableValue, _super);
    function ObservableValue(value, enhancer, name, notifySpy, equals) {
        if (name === void 0) { name = "ObservableValue@" + getNextId(); }
        if (notifySpy === void 0) { notifySpy = true; }
        if (equals === void 0) { equals = comparer.default; }
        var _this = _super.call(this, name) || this;
        _this.enhancer = enhancer;
        _this.name = name;
        _this.equals = equals;
        _this.hasUnreportedChange = false;
        _this.value = enhancer(value, undefined, name);
        if (notifySpy && isSpyEnabled() && "development" !== "production") {
            // only notify spy if this is a stand-alone observable
            spyReport({ type: "create", name: _this.name, newValue: "" + _this.value });
        }
        return _this;
    }
    ObservableValue.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableValue.prototype.set = function (newValue) {
        var oldValue = this.value;
        newValue = this.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            if (notifySpy && "development" !== "production") {
                spyReportStart({
                    type: "update",
                    name: this.name,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
            this.setNewValue(newValue);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
        }
    };
    ObservableValue.prototype.prepareNewValue = function (newValue) {
        checkIfStateModificationsAreAllowed(this);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this,
                type: "update",
                newValue: newValue
            });
            if (!change)
                return globalState.UNCHANGED;
            newValue = change.newValue;
        }
        // apply modifier
        newValue = this.enhancer(newValue, this.value, this.name);
        return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
    };
    ObservableValue.prototype.setNewValue = function (newValue) {
        var oldValue = this.value;
        this.value = newValue;
        this.reportChanged();
        if (hasListeners(this)) {
            notifyListeners(this, {
                type: "update",
                object: this,
                newValue: newValue,
                oldValue: oldValue
            });
        }
    };
    ObservableValue.prototype.get = function () {
        this.reportObserved();
        return this.dehanceValue(this.value);
    };
    ObservableValue.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableValue.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately)
            listener({
                object: this,
                type: "update",
                newValue: this.value,
                oldValue: undefined
            });
        return registerListener(this, listener);
    };
    ObservableValue.prototype.toJSON = function () {
        return this.get();
    };
    ObservableValue.prototype.toString = function () {
        return this.name + "[" + this.value + "]";
    };
    ObservableValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ObservableValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ObservableValue;
}(Atom));
var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
var ComputedValue = /** @class */ (function () {
    /**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce a new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */
    function ComputedValue(options) {
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = null; // during tracking it's an array with new observed observers
        this.isBeingObserved = false;
        this.isPendingUnobservation = false;
        this.observers = new Set();
        this.diffValue = 0;
        this.runId = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.UP_TO_DATE;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.value = new CaughtException(null);
        this.isComputing = false; // to check for cycles
        this.isRunningSetter = false;
        this.isTracing = TraceMode.NONE;
        invariant(options.get, "missing option for computed: get");
        this.derivation = options.get;
        this.name = options.name || "ComputedValue@" + getNextId();
        if (options.set)
            this.setter = createAction(this.name + "-setter", options.set);
        this.equals =
            options.equals ||
                (options.compareStructural || options.struct
                    ? comparer.structural
                    : comparer.default);
        this.scope = options.context;
        this.requiresReaction = !!options.requiresReaction;
        this.keepAlive = !!options.keepAlive;
    }
    ComputedValue.prototype.onBecomeStale = function () {
        propagateMaybeChanged(this);
    };
    ComputedValue.prototype.onBecomeObserved = function () {
        if (this.onBecomeObservedListeners) {
            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    ComputedValue.prototype.onBecomeUnobserved = function () {
        if (this.onBecomeUnobservedListeners) {
            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
        }
    };
    /**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */
    ComputedValue.prototype.get = function () {
        if (this.isComputing)
            fail("Cycle detected in computation " + this.name + ": " + this.derivation);
        if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
            if (shouldCompute(this)) {
                this.warnAboutUntrackedRead();
                startBatch(); // See perf test 'computed memoization'
                this.value = this.computeValue(false);
                endBatch();
            }
        }
        else {
            reportObserved(this);
            if (shouldCompute(this))
                if (this.trackAndCompute())
                    propagateChangeConfirmed(this);
        }
        var result = this.value;
        if (isCaughtException(result))
            throw result.cause;
        return result;
    };
    ComputedValue.prototype.peek = function () {
        var res = this.computeValue(false);
        if (isCaughtException(res))
            throw res.cause;
        return res;
    };
    ComputedValue.prototype.set = function (value) {
        if (this.setter) {
            invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
            this.isRunningSetter = true;
            try {
                this.setter.call(this.scope, value);
            }
            finally {
                this.isRunningSetter = false;
            }
        }
        else
            invariant(false,  true &&
                "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
    };
    ComputedValue.prototype.trackAndCompute = function () {
        if (isSpyEnabled() && "development" !== "production") {
            spyReport({
                object: this.scope,
                type: "compute",
                name: this.name
            });
        }
        var oldValue = this.value;
        var wasSuspended = 
        /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING;
        var newValue = this.computeValue(true);
        var changed = wasSuspended ||
            isCaughtException(oldValue) ||
            isCaughtException(newValue) ||
            !this.equals(oldValue, newValue);
        if (changed) {
            this.value = newValue;
        }
        return changed;
    };
    ComputedValue.prototype.computeValue = function (track) {
        this.isComputing = true;
        globalState.computationDepth++;
        var res;
        if (track) {
            res = trackDerivedFunction(this, this.derivation, this.scope);
        }
        else {
            if (globalState.disableErrorBoundaries === true) {
                res = this.derivation.call(this.scope);
            }
            else {
                try {
                    res = this.derivation.call(this.scope);
                }
                catch (e) {
                    res = new CaughtException(e);
                }
            }
        }
        globalState.computationDepth--;
        this.isComputing = false;
        return res;
    };
    ComputedValue.prototype.suspend = function () {
        if (!this.keepAlive) {
            clearObserving(this);
            this.value = undefined; // don't hold on to computed value!
        }
    };
    ComputedValue.prototype.observe = function (listener, fireImmediately) {
        var _this = this;
        var firstTime = true;
        var prevValue = undefined;
        return autorun(function () {
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
                var prevU = untrackedStart();
                listener({
                    type: "update",
                    object: _this,
                    newValue: newValue,
                    oldValue: prevValue
                });
                untrackedEnd(prevU);
            }
            firstTime = false;
            prevValue = newValue;
        });
    };
    ComputedValue.prototype.warnAboutUntrackedRead = function () {
        if (false)
            {}
        if (this.requiresReaction === true) {
            fail("[mobx] Computed value " + this.name + " is read outside a reactive context");
        }
        if (this.isTracing !== TraceMode.NONE) {
            console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
        }
        if (globalState.computedRequiresReaction) {
            console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
        }
    };
    ComputedValue.prototype.toJSON = function () {
        return this.get();
    };
    ComputedValue.prototype.toString = function () {
        return this.name + "[" + this.derivation.toString() + "]";
    };
    ComputedValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ComputedValue.prototype[Symbol.toPrimitive] = function () {
        return this.valueOf();
    };
    return ComputedValue;
}());
var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

/**
 * These values will persist if global state is reset
 */
var persistentKeys = [
    "mobxGuid",
    "spyListeners",
    "enforceActions",
    "computedRequiresReaction",
    "reactionRequiresObservable",
    "observableRequiresReaction",
    "allowStateReads",
    "disableErrorBoundaries",
    "runId",
    "UNCHANGED"
];
var MobXGlobals = /** @class */ (function () {
    function MobXGlobals() {
        /**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         *
         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
         * internal state storage of MobX, and can be the same across many different package versions
         */
        this.version = 5;
        /**
         * globally unique token to signal unchanged
         */
        this.UNCHANGED = {};
        /**
         * Currently running derivation
         */
        this.trackingDerivation = null;
        /**
         * Are we running a computation currently? (not a reaction)
         */
        this.computationDepth = 0;
        /**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */
        this.runId = 0;
        /**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */
        this.mobxGuid = 0;
        /**
         * Are we in a batch block? (and how many of them)
         */
        this.inBatch = 0;
        /**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */
        this.pendingUnobservations = [];
        /**
         * List of scheduled, not yet executed, reactions.
         */
        this.pendingReactions = [];
        /**
         * Are we currently processing reactions?
         */
        this.isRunningReactions = false;
        /**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */
        this.allowStateChanges = true;
        /**
         * Is it allowed to read observables at this point?
         * Used to hold the state needed for `observableRequiresReaction`
         */
        this.allowStateReads = true;
        /**
         * If strict mode is enabled, state changes are by default not allowed
         */
        this.enforceActions = false;
        /**
         * Spy callbacks
         */
        this.spyListeners = [];
        /**
         * Globally attached error handlers that react specifically to errors in reactions
         */
        this.globalReactionErrorHandlers = [];
        /**
         * Warn if computed values are accessed outside a reactive context
         */
        this.computedRequiresReaction = false;
        /**
         * (Experimental)
         * Warn if you try to create to derivation / reactive context without accessing any observable.
         */
        this.reactionRequiresObservable = false;
        /**
         * (Experimental)
         * Warn if observables are accessed outside a reactive context
         */
        this.observableRequiresReaction = false;
        /**
         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
         */
        this.computedConfigurable = false;
        /*
         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
         * the stack when an exception occurs while debugging.
         */
        this.disableErrorBoundaries = false;
        /*
         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
         */
        this.suppressReactionErrors = false;
    }
    return MobXGlobals;
}());
var mockGlobal = {};
function getGlobal() {
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof __webpack_require__.g !== "undefined") {
        return __webpack_require__.g;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    return mockGlobal;
}
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = (function () {
    var global = getGlobal();
    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
        canMergeGlobalState = false;
    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)
        canMergeGlobalState = false;
    if (!canMergeGlobalState) {
        setTimeout(function () {
            if (!isolateCalled) {
                fail("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
            }
        }, 1);
        return new MobXGlobals();
    }
    else if (global.__mobxGlobals) {
        global.__mobxInstanceCount += 1;
        if (!global.__mobxGlobals.UNCHANGED)
            global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
        return global.__mobxGlobals;
    }
    else {
        global.__mobxInstanceCount = 1;
        return (global.__mobxGlobals = new MobXGlobals());
    }
})();
function isolateGlobalState() {
    if (globalState.pendingReactions.length ||
        globalState.inBatch ||
        globalState.isRunningReactions)
        fail("isolateGlobalState should be called before MobX is running any reactions");
    isolateCalled = true;
    if (canMergeGlobalState) {
        if (--getGlobal().__mobxInstanceCount === 0)
            getGlobal().__mobxGlobals = undefined;
        globalState = new MobXGlobals();
    }
}
function getGlobalState() {
    return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */
function resetGlobalState() {
    var defaultGlobals = new MobXGlobals();
    for (var key in defaultGlobals)
        if (persistentKeys.indexOf(key) === -1)
            globalState[key] = defaultGlobals[key];
    globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
    return observable.observers && observable.observers.size > 0;
}
function getObservers(observable) {
    return observable.observers;
}
// function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }
function addObserver(observable, node) {
    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
    // invariantObservers(observable);
    observable.observers.add(node);
    if (observable.lowestObserverState > node.dependenciesState)
        observable.lowestObserverState = node.dependenciesState;
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
    // invariantObservers(observable);
    observable.observers.delete(node);
    if (observable.observers.size === 0) {
        // deleting last observer
        queueForUnobservation(observable);
    }
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function queueForUnobservation(observable) {
    if (observable.isPendingUnobservation === false) {
        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
        observable.isPendingUnobservation = true;
        globalState.pendingUnobservations.push(observable);
    }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
    globalState.inBatch++;
}
function endBatch() {
    if (--globalState.inBatch === 0) {
        runReactions();
        // the batch is actually about to finish, all unobserving should happen here.
        var list = globalState.pendingUnobservations;
        for (var i = 0; i < list.length; i++) {
            var observable = list[i];
            observable.isPendingUnobservation = false;
            if (observable.observers.size === 0) {
                if (observable.isBeingObserved) {
                    // if this observable had reactive observers, trigger the hooks
                    observable.isBeingObserved = false;
                    observable.onBecomeUnobserved();
                }
                if (observable instanceof ComputedValue) {
                    // computed values are automatically teared down when the last observer leaves
                    // this process happens recursively, this computed might be the last observable of another, etc..
                    observable.suspend();
                }
            }
        }
        globalState.pendingUnobservations = [];
    }
}
function reportObserved(observable) {
    checkIfStateReadsAreAllowed(observable);
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
        /**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */
        if (derivation.runId !== observable.lastAccessedBy) {
            observable.lastAccessedBy = derivation.runId;
            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
            derivation.newObserving[derivation.unboundDepsCount++] = observable;
            if (!observable.isBeingObserved) {
                observable.isBeingObserved = true;
                observable.onBecomeObserved();
            }
        }
        return true;
    }
    else if (observable.observers.size === 0 && globalState.inBatch > 0) {
        queueForUnobservation(observable);
    }
    return false;
}
// function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
    // invariantLOS(observable, "changed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    // Ideally we use for..of here, but the downcompiled version is really slow...
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
        d.dependenciesState = IDerivationState.STALE;
    });
    // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
    // invariantLOS(observable, "confirmed start");
    if (observable.lowestObserverState === IDerivationState.STALE)
        return;
    observable.lowestObserverState = IDerivationState.STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)
            d.dependenciesState = IDerivationState.STALE;
        else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
        )
            observable.lowestObserverState = IDerivationState.UP_TO_DATE;
    });
    // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
    // invariantLOS(observable, "maybe start");
    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)
        return;
    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
    observable.observers.forEach(function (d) {
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            d.dependenciesState = IDerivationState.POSSIBLY_STALE;
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
    });
    // invariantLOS(observable, "maybe end");
}
function logTraceInfo(derivation, observable) {
    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
    if (derivation.isTracing === TraceMode.BREAK) {
        var lines = [];
        printDepTree(getDependencyTree(derivation), lines, 1);
        // prettier-ignore
        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
}
function printDepTree(tree, lines, depth) {
    if (lines.length >= 1000) {
        lines.push("(and many more)");
        return;
    }
    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
    if (tree.dependencies)
        tree.dependencies.forEach(function (child) { return printDepTree(child, lines, depth + 1); });
}

var Reaction = /** @class */ (function () {
    function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
        if (name === void 0) { name = "Reaction@" + getNextId(); }
        if (requiresObservable === void 0) { requiresObservable = false; }
        this.name = name;
        this.onInvalidate = onInvalidate;
        this.errorHandler = errorHandler;
        this.requiresObservable = requiresObservable;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = [];
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.diffValue = 0;
        this.runId = 0;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.isDisposed = false;
        this._isScheduled = false;
        this._isTrackPending = false;
        this._isRunning = false;
        this.isTracing = TraceMode.NONE;
    }
    Reaction.prototype.onBecomeStale = function () {
        this.schedule();
    };
    Reaction.prototype.schedule = function () {
        if (!this._isScheduled) {
            this._isScheduled = true;
            globalState.pendingReactions.push(this);
            runReactions();
        }
    };
    Reaction.prototype.isScheduled = function () {
        return this._isScheduled;
    };
    /**
     * internal, use schedule() if you intend to kick off a reaction
     */
    Reaction.prototype.runReaction = function () {
        if (!this.isDisposed) {
            startBatch();
            this._isScheduled = false;
            if (shouldCompute(this)) {
                this._isTrackPending = true;
                try {
                    this.onInvalidate();
                    if (this._isTrackPending &&
                        isSpyEnabled() &&
                        "development" !== "production") {
                        // onInvalidate didn't trigger track right away..
                        spyReport({
                            name: this.name,
                            type: "scheduled-reaction"
                        });
                    }
                }
                catch (e) {
                    this.reportExceptionInDerivation(e);
                }
            }
            endBatch();
        }
    };
    Reaction.prototype.track = function (fn) {
        if (this.isDisposed) {
            return;
            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
        }
        startBatch();
        var notify = isSpyEnabled();
        var startTime;
        if (notify && "development" !== "production") {
            startTime = Date.now();
            spyReportStart({
                name: this.name,
                type: "reaction"
            });
        }
        this._isRunning = true;
        var result = trackDerivedFunction(this, fn, undefined);
        this._isRunning = false;
        this._isTrackPending = false;
        if (this.isDisposed) {
            // disposed during last run. Clean up everything that was bound after the dispose call.
            clearObserving(this);
        }
        if (isCaughtException(result))
            this.reportExceptionInDerivation(result.cause);
        if (notify && "development" !== "production") {
            spyReportEnd({
                time: Date.now() - startTime
            });
        }
        endBatch();
    };
    Reaction.prototype.reportExceptionInDerivation = function (error) {
        var _this = this;
        if (this.errorHandler) {
            this.errorHandler(error, this);
            return;
        }
        if (globalState.disableErrorBoundaries)
            throw error;
        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
        if (globalState.suppressReactionErrors) {
            console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
        }
        else {
            console.error(message, error);
            /** If debugging brought you here, please, read the above message :-). Tnx! */
        }
        if (isSpyEnabled()) {
            spyReport({
                type: "error",
                name: this.name,
                message: message,
                error: "" + error
            });
        }
        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
    };
    Reaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
            if (!this._isRunning) {
                // if disposed while running, clean up later. Maybe not optimal, but rare case
                startBatch();
                clearObserving(this);
                endBatch();
            }
        }
    };
    Reaction.prototype.getDisposer = function () {
        var r = this.dispose.bind(this);
        r[$mobx] = this;
        return r;
    };
    Reaction.prototype.toString = function () {
        return "Reaction[" + this.name + "]";
    };
    Reaction.prototype.trace = function (enterBreakPoint) {
        if (enterBreakPoint === void 0) { enterBreakPoint = false; }
        trace(this, enterBreakPoint);
    };
    return Reaction;
}());
function onReactionError(handler) {
    globalState.globalReactionErrorHandlers.push(handler);
    return function () {
        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
        if (idx >= 0)
            globalState.globalReactionErrorHandlers.splice(idx, 1);
    };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function (f) { return f(); };
function runReactions() {
    // Trampolining, if runReactions are already running, new reactions will be picked up
    if (globalState.inBatch > 0 || globalState.isRunningReactions)
        return;
    reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    // While running reactions, new reactions might be triggered.
    // Hence we work with two variables and check whether
    // we converge to no remaining reactions after a while.
    while (allReactions.length > 0) {
        if (++iterations === MAX_REACTION_ITERATIONS) {
            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." +
                (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            allReactions.splice(0); // clear reactions
        }
        var remainingReactions = allReactions.splice(0);
        for (var i = 0, l = remainingReactions.length; i < l; i++)
            remainingReactions[i].runReaction();
    }
    globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
    var baseScheduler = reactionScheduler;
    reactionScheduler = function (f) { return fn(function () { return baseScheduler(f); }); };
}

function isSpyEnabled() {
    return  true && !!globalState.spyListeners.length;
}
function spyReport(event) {
    if (false)
        {} // dead code elimination can do the rest
    if (!globalState.spyListeners.length)
        return;
    var listeners = globalState.spyListeners;
    for (var i = 0, l = listeners.length; i < l; i++)
        listeners[i](event);
}
function spyReportStart(event) {
    if (false)
        {}
    var change = __assign(__assign({}, event), { spyReportStart: true });
    spyReport(change);
}
var END_EVENT = { spyReportEnd: true };
function spyReportEnd(change) {
    if (false)
        {}
    if (change)
        spyReport(__assign(__assign({}, change), { spyReportEnd: true }));
    else
        spyReport(END_EVENT);
}
function spy(listener) {
    if (false) {}
    else {
        globalState.spyListeners.push(listener);
        return once(function () {
            globalState.spyListeners = globalState.spyListeners.filter(function (l) { return l !== listener; });
        });
    }
}

function dontReassignFields() {
    fail( true && "@action fields are not reassignable");
}
function namedActionDecorator(name) {
    return function (target, prop, descriptor) {
        if (descriptor) {
            if ( true && descriptor.get !== undefined) {
                return fail("@action cannot be used with getters");
            }
            // babel / typescript
            // @action method() { }
            if (descriptor.value) {
                // typescript
                return {
                    value: createAction(name, descriptor.value),
                    enumerable: false,
                    configurable: true,
                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
                };
            }
            // babel only: @action method = () => {}
            var initializer_1 = descriptor.initializer;
            return {
                enumerable: false,
                configurable: true,
                writable: true,
                initializer: function () {
                    // N.B: we can't immediately invoke initializer; this would be wrong
                    return createAction(name, initializer_1.call(this));
                }
            };
        }
        // bound instance methods
        return actionFieldDecorator(name).apply(this, arguments);
    };
}
function actionFieldDecorator(name) {
    // Simple property that writes on first invocation to the current instance
    return function (target, prop, descriptor) {
        Object.defineProperty(target, prop, {
            configurable: true,
            enumerable: false,
            get: function () {
                return undefined;
            },
            set: function (value) {
                addHiddenProp(this, prop, action(name, value));
            }
        });
    };
}
function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
    if (applyToInstance === true) {
        defineBoundAction(target, propertyName, descriptor.value);
        return null;
    }
    if (descriptor) {
        // if (descriptor.value)
        // Typescript / Babel: @action.bound method() { }
        // also: babel @action.bound method = () => {}
        return {
            configurable: true,
            enumerable: false,
            get: function () {
                defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
                return this[propertyName];
            },
            set: dontReassignFields
        };
    }
    // field decorator Typescript @action.bound method = () => {}
    return {
        enumerable: false,
        configurable: true,
        set: function (v) {
            defineBoundAction(this, propertyName, v);
        },
        get: function () {
            return undefined;
        }
    };
}

var action = function action(arg1, arg2, arg3, arg4) {
    // action(fn() {})
    if (arguments.length === 1 && typeof arg1 === "function")
        return createAction(arg1.name || "<unnamed action>", arg1);
    // action("name", fn() {})
    if (arguments.length === 2 && typeof arg2 === "function")
        return createAction(arg1, arg2);
    // @action("name") fn() {}
    if (arguments.length === 1 && typeof arg1 === "string")
        return namedActionDecorator(arg1);
    // @action fn() {}
    if (arg4 === true) {
        // apply to instance immediately
        addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
    }
    else {
        return namedActionDecorator(arg2).apply(null, arguments);
    }
};
action.bound = boundActionDecorator;
function runInAction(arg1, arg2) {
    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
    var fn = typeof arg1 === "function" ? arg1 : arg2;
    if (true) {
        invariant(typeof fn === "function" && fn.length === 0, "`runInAction` expects a function without arguments");
        if (typeof actionName !== "string" || !actionName)
            fail("actions should have valid names, got: '" + actionName + "'");
    }
    return executeAction(actionName, fn, this, undefined);
}
function isAction(thing) {
    return typeof thing === "function" && thing.isMobxAction === true;
}
function defineBoundAction(target, propertyName, fn) {
    addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
}

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */
function autorun(view, opts) {
    if (opts === void 0) { opts = EMPTY_OBJECT; }
    if (true) {
        invariant(typeof view === "function", "Autorun expects a function as first argument");
        invariant(isAction(view) === false, "Autorun does not accept actions since actions are untrackable");
    }
    var name = (opts && opts.name) || view.name || "Autorun@" + getNextId();
    var runSync = !opts.scheduler && !opts.delay;
    var reaction;
    if (runSync) {
        // normal autorun
        reaction = new Reaction(name, function () {
            this.track(reactionRunner);
        }, opts.onError, opts.requiresObservable);
    }
    else {
        var scheduler_1 = createSchedulerFromOptions(opts);
        // debounced autorun
        var isScheduled_1 = false;
        reaction = new Reaction(name, function () {
            if (!isScheduled_1) {
                isScheduled_1 = true;
                scheduler_1(function () {
                    isScheduled_1 = false;
                    if (!reaction.isDisposed)
                        reaction.track(reactionRunner);
                });
            }
        }, opts.onError, opts.requiresObservable);
    }
    function reactionRunner() {
        view(reaction);
    }
    reaction.schedule();
    return reaction.getDisposer();
}
var run = function (f) { return f(); };
function createSchedulerFromOptions(opts) {
    return opts.scheduler
        ? opts.scheduler
        : opts.delay
            ? function (f) { return setTimeout(f, opts.delay); }
            : run;
}
function reaction(expression, effect, opts) {
    if (opts === void 0) { opts = EMPTY_OBJECT; }
    if (true) {
        invariant(typeof expression === "function", "First argument to reaction should be a function");
        invariant(typeof opts === "object", "Third argument of reactions should be an object");
    }
    var name = opts.name || "Reaction@" + getNextId();
    var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
    var runSync = !opts.scheduler && !opts.delay;
    var scheduler = createSchedulerFromOptions(opts);
    var firstTime = true;
    var isScheduled = false;
    var value;
    var equals = opts.compareStructural
        ? comparer.structural
        : opts.equals || comparer.default;
    var r = new Reaction(name, function () {
        if (firstTime || runSync) {
            reactionRunner();
        }
        else if (!isScheduled) {
            isScheduled = true;
            scheduler(reactionRunner);
        }
    }, opts.onError, opts.requiresObservable);
    function reactionRunner() {
        isScheduled = false; // Q: move into reaction runner?
        if (r.isDisposed)
            return;
        var changed = false;
        r.track(function () {
            var nextValue = expression(r);
            changed = firstTime || !equals(value, nextValue);
            value = nextValue;
        });
        if (firstTime && opts.fireImmediately)
            effectAction(value, r);
        if (!firstTime && changed === true)
            effectAction(value, r);
        if (firstTime)
            firstTime = false;
    }
    r.schedule();
    return r.getDisposer();
}
function wrapErrorHandler(errorHandler, baseFn) {
    return function () {
        try {
            return baseFn.apply(this, arguments);
        }
        catch (e) {
            errorHandler.call(this, e);
        }
    };
}

function onBecomeObserved(thing, arg2, arg3) {
    return interceptHook("onBecomeObserved", thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
    return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
}
function interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
    var cb = typeof arg3 === "function" ? arg3 : arg2;
    var listenersKey = hook + "Listeners";
    if (atom[listenersKey]) {
        atom[listenersKey].add(cb);
    }
    else {
        atom[listenersKey] = new Set([cb]);
    }
    var orig = atom[hook];
    if (typeof orig !== "function")
        return fail( true && "Not an atom that can be (un)observed");
    return function () {
        var hookListeners = atom[listenersKey];
        if (hookListeners) {
            hookListeners.delete(cb);
            if (hookListeners.size === 0) {
                delete atom[listenersKey];
            }
        }
    };
}

function configure(options) {
    var enforceActions = options.enforceActions, computedRequiresReaction = options.computedRequiresReaction, computedConfigurable = options.computedConfigurable, disableErrorBoundaries = options.disableErrorBoundaries, reactionScheduler = options.reactionScheduler, reactionRequiresObservable = options.reactionRequiresObservable, observableRequiresReaction = options.observableRequiresReaction;
    if (options.isolateGlobalState === true) {
        isolateGlobalState();
    }
    if (enforceActions !== undefined) {
        if (typeof enforceActions === "boolean" || enforceActions === "strict")
            deprecated("Deprecated value for 'enforceActions', use 'false' => '\"never\"', 'true' => '\"observed\"', '\"strict\"' => \"'always'\" instead");
        var ea = void 0;
        switch (enforceActions) {
            case true:
            case "observed":
                ea = true;
                break;
            case false:
            case "never":
                ea = false;
                break;
            case "strict":
            case "always":
                ea = "strict";
                break;
            default:
                fail("Invalid value for 'enforceActions': '" + enforceActions + "', expected 'never', 'always' or 'observed'");
        }
        globalState.enforceActions = ea;
        globalState.allowStateChanges = ea === true || ea === "strict" ? false : true;
    }
    if (computedRequiresReaction !== undefined) {
        globalState.computedRequiresReaction = !!computedRequiresReaction;
    }
    if (reactionRequiresObservable !== undefined) {
        globalState.reactionRequiresObservable = !!reactionRequiresObservable;
    }
    if (observableRequiresReaction !== undefined) {
        globalState.observableRequiresReaction = !!observableRequiresReaction;
        globalState.allowStateReads = !globalState.observableRequiresReaction;
    }
    if (computedConfigurable !== undefined) {
        globalState.computedConfigurable = !!computedConfigurable;
    }
    if (disableErrorBoundaries !== undefined) {
        if (disableErrorBoundaries === true)
            console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
        globalState.disableErrorBoundaries = !!disableErrorBoundaries;
    }
    if (reactionScheduler) {
        setReactionScheduler(reactionScheduler);
    }
}

function decorate(thing, decorators) {
     true &&
        invariant(isPlainObject(decorators), "Decorators should be a key value map");
    var target = typeof thing === "function" ? thing.prototype : thing;
    var _loop_1 = function (prop) {
        var propertyDecorators = decorators[prop];
        if (!Array.isArray(propertyDecorators)) {
            propertyDecorators = [propertyDecorators];
        }
         true &&
            invariant(propertyDecorators.every(function (decorator) { return typeof decorator === "function"; }), "Decorate: expected a decorator function or array of decorator functions for '" + prop + "'");
        var descriptor = Object.getOwnPropertyDescriptor(target, prop);
        var newDescriptor = propertyDecorators.reduce(function (accDescriptor, decorator) { return decorator(target, prop, accDescriptor); }, descriptor);
        if (newDescriptor)
            Object.defineProperty(target, prop, newDescriptor);
    };
    for (var prop in decorators) {
        _loop_1(prop);
    }
    return thing;
}

function extendObservable(target, properties, decorators, options) {
    if (true) {
        invariant(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
        invariant(typeof target === "object", "'extendObservable' expects an object as first argument");
        invariant(!isObservableMap(target), "'extendObservable' should not be used on maps, use map.merge instead");
    }
    options = asCreateObservableOptions(options);
    var defaultDecorator = getDefaultDecoratorFromObjectOptions(options);
    initializeInstance(target); // Fixes #1740
    asObservableObject(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
    if (properties)
        extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator);
    return target;
}
function getDefaultDecoratorFromObjectOptions(options) {
    return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
}
function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
    var e_1, _a, e_2, _b;
    if (true) {
        invariant(!isObservable(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
        if (decorators) {
            var keys = getPlainObjectKeys(decorators);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    if (!(key in properties))
                        fail("Trying to declare a decorator for unspecified property '" + stringifyKey(key) + "'");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    startBatch();
    try {
        var keys = ownKeys(properties);
        try {
            for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                var key = keys_2_1.value;
                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
                if (true) {
                    if (!isPlainObject(properties))
                        fail("'extendObservable' only accepts plain objects as second argument");
                    if (isComputed(descriptor.value))
                        fail("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
                }
                var decorator = decorators && key in decorators
                    ? decorators[key]
                    : descriptor.get
                        ? computedDecorator
                        : defaultDecorator;
                if ( true && typeof decorator !== "function")
                    fail("Not a valid decorator for '" + stringifyKey(key) + "', got: " + decorator);
                var resultDescriptor = decorator(target, key, descriptor, true);
                if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
                )
                    Object.defineProperty(target, key, resultDescriptor);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    finally {
        endBatch();
    }
}

function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
    var result = {
        name: node.name
    };
    if (node.observing && node.observing.length > 0)
        result.dependencies = unique(node.observing).map(nodeToDependencyTree);
    return result;
}
function getObserverTree(thing, property) {
    return nodeToObserverTree(getAtom(thing, property));
}
function nodeToObserverTree(node) {
    var result = {
        name: node.name
    };
    if (hasObservers(node))
        result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
    return result;
}

var generatorId = 0;
function FlowCancellationError() {
    this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = Object.create(Error.prototype);
function isFlowCancellationError(error) {
    return error instanceof FlowCancellationError;
}
function flow(generator) {
    if (arguments.length !== 1)
        fail( true && "Flow expects 1 argument and cannot be used as decorator");
    var name = generator.name || "<unnamed flow>";
    // Implementation based on https://github.com/tj/co/blob/master/index.js
    return function () {
        var ctx = this;
        var args = arguments;
        var runId = ++generatorId;
        var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
        var rejector;
        var pendingPromise = undefined;
        var promise = new Promise(function (resolve, reject) {
            var stepId = 0;
            rejector = reject;
            function onFulfilled(res) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
                }
                catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function onRejected(err) {
                pendingPromise = undefined;
                var ret;
                try {
                    ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
                }
                catch (e) {
                    return reject(e);
                }
                next(ret);
            }
            function next(ret) {
                if (ret && typeof ret.then === "function") {
                    // an async iterator
                    ret.then(next, reject);
                    return;
                }
                if (ret.done)
                    return resolve(ret.value);
                pendingPromise = Promise.resolve(ret.value);
                return pendingPromise.then(onFulfilled, onRejected);
            }
            onFulfilled(undefined); // kick off the process
        });
        promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
            try {
                if (pendingPromise)
                    cancelPromise(pendingPromise);
                // Finally block can return (or yield) stuff..
                var res = gen.return(undefined);
                // eat anything that promise would do, it's cancelled!
                var yieldedPromise = Promise.resolve(res.value);
                yieldedPromise.then(noop, noop);
                cancelPromise(yieldedPromise); // maybe it can be cancelled :)
                // reject our original promise
                rejector(new FlowCancellationError());
            }
            catch (e) {
                rejector(e); // there could be a throwing finally block
            }
        });
        return promise;
    };
}
function cancelPromise(promise) {
    if (typeof promise.cancel === "function")
        promise.cancel();
}

function interceptReads(thing, propOrHandler, handler) {
    var target;
    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
        target = getAdministration(thing);
    }
    else if (isObservableObject(thing)) {
        if (typeof propOrHandler !== "string")
            return fail( true &&
                "InterceptReads can only be used with a specific property, not with an object in general");
        target = getAdministration(thing, propOrHandler);
    }
    else {
        return fail( true &&
            "Expected observable map, object or array as first array");
    }
    if (target.dehancer !== undefined)
        return fail( true && "An intercept reader was already established");
    target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
    return function () {
        target.dehancer = undefined;
    };
}

function intercept(thing, propOrHandler, handler) {
    if (typeof handler === "function")
        return interceptProperty(thing, propOrHandler, handler);
    else
        return interceptInterceptable(thing, propOrHandler);
}
function interceptInterceptable(thing, handler) {
    return getAdministration(thing).intercept(handler);
}
function interceptProperty(thing, property, handler) {
    return getAdministration(thing, property).intercept(handler);
}

function _isComputed(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if (isObservableObject(value) === false)
            return false;
        if (!value[$mobx].values.has(property))
            return false;
        var atom = getAtom(value, property);
        return isComputedValue(atom);
    }
    return isComputedValue(value);
}
function isComputed(value) {
    if (arguments.length > 1)
        return fail( true &&
            "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    return _isComputed(value);
}
function isComputedProp(value, propName) {
    if (typeof propName !== "string")
        return fail( true &&
            "isComputed expected a property name as second argument");
    return _isComputed(value, propName);
}

function _isObservable(value, property) {
    if (value === null || value === undefined)
        return false;
    if (property !== undefined) {
        if ( true &&
            (isObservableMap(value) || isObservableArray(value)))
            return fail("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
        if (isObservableObject(value)) {
            return value[$mobx].values.has(property);
        }
        return false;
    }
    // For first check, see #701
    return (isObservableObject(value) ||
        !!value[$mobx] ||
        isAtom(value) ||
        isReaction(value) ||
        isComputedValue(value));
}
function isObservable(value) {
    if (arguments.length !== 1)
        fail( true &&
            "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    return _isObservable(value);
}
function isObservableProp(value, propName) {
    if (typeof propName !== "string")
        return fail( true && "expected a property name as second argument");
    return _isObservable(value, propName);
}

function keys(obj) {
    if (isObservableObject(obj)) {
        return obj[$mobx].getKeys();
    }
    if (isObservableMap(obj)) {
        return Array.from(obj.keys());
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.keys());
    }
    if (isObservableArray(obj)) {
        return obj.map(function (_, index) { return index; });
    }
    return fail( true &&
        "'keys()' can only be used on observable objects, arrays, sets and maps");
}
function values(obj) {
    if (isObservableObject(obj)) {
        return keys(obj).map(function (key) { return obj[key]; });
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(function (key) { return obj.get(key); });
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.values());
    }
    if (isObservableArray(obj)) {
        return obj.slice();
    }
    return fail( true &&
        "'values()' can only be used on observable objects, arrays, sets and maps");
}
function entries(obj) {
    if (isObservableObject(obj)) {
        return keys(obj).map(function (key) { return [key, obj[key]]; });
    }
    if (isObservableMap(obj)) {
        return keys(obj).map(function (key) { return [key, obj.get(key)]; });
    }
    if (isObservableSet(obj)) {
        return Array.from(obj.entries());
    }
    if (isObservableArray(obj)) {
        return obj.map(function (key, index) { return [index, key]; });
    }
    return fail( true &&
        "'entries()' can only be used on observable objects, arrays and maps");
}
function set(obj, key, value) {
    if (arguments.length === 2 && !isObservableSet(obj)) {
        startBatch();
        var values_1 = key;
        try {
            for (var key_1 in values_1)
                set(obj, key_1, values_1[key_1]);
        }
        finally {
            endBatch();
        }
        return;
    }
    if (isObservableObject(obj)) {
        var adm = obj[$mobx];
        var existingObservable = adm.values.get(key);
        if (existingObservable) {
            adm.write(key, value);
        }
        else {
            adm.addObservableProp(key, value, adm.defaultEnhancer);
        }
    }
    else if (isObservableMap(obj)) {
        obj.set(key, value);
    }
    else if (isObservableSet(obj)) {
        obj.add(key);
    }
    else if (isObservableArray(obj)) {
        if (typeof key !== "number")
            key = parseInt(key, 10);
        invariant(key >= 0, "Not a valid index: '" + key + "'");
        startBatch();
        if (key >= obj.length)
            obj.length = key + 1;
        obj[key] = value;
        endBatch();
    }
    else {
        return fail( true &&
            "'set()' can only be used on observable objects, arrays and maps");
    }
}
function remove(obj, key) {
    if (isObservableObject(obj)) {
        obj[$mobx].remove(key);
    }
    else if (isObservableMap(obj)) {
        obj.delete(key);
    }
    else if (isObservableSet(obj)) {
        obj.delete(key);
    }
    else if (isObservableArray(obj)) {
        if (typeof key !== "number")
            key = parseInt(key, 10);
        invariant(key >= 0, "Not a valid index: '" + key + "'");
        obj.splice(key, 1);
    }
    else {
        return fail( true &&
            "'remove()' can only be used on observable objects, arrays and maps");
    }
}
function has(obj, key) {
    if (isObservableObject(obj)) {
        // return keys(obj).indexOf(key) >= 0
        var adm = getAdministration(obj);
        return adm.has(key);
    }
    else if (isObservableMap(obj)) {
        return obj.has(key);
    }
    else if (isObservableSet(obj)) {
        return obj.has(key);
    }
    else if (isObservableArray(obj)) {
        return key >= 0 && key < obj.length;
    }
    else {
        return fail( true &&
            "'has()' can only be used on observable objects, arrays and maps");
    }
}
function get(obj, key) {
    if (!has(obj, key))
        return undefined;
    if (isObservableObject(obj)) {
        return obj[key];
    }
    else if (isObservableMap(obj)) {
        return obj.get(key);
    }
    else if (isObservableArray(obj)) {
        return obj[key];
    }
    else {
        return fail( true &&
            "'get()' can only be used on observable objects, arrays and maps");
    }
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
    if (typeof cbOrFire === "function")
        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
    else
        return observeObservable(thing, propOrCb, cbOrFire);
}
function observeObservable(thing, listener, fireImmediately) {
    return getAdministration(thing).observe(listener, fireImmediately);
}
function observeObservableProperty(thing, property, listener, fireImmediately) {
    return getAdministration(thing, property).observe(listener, fireImmediately);
}

var defaultOptions = {
    detectCycles: true,
    exportMapsAsObjects: true,
    recurseEverything: false
};
function cache(map, key, value, options) {
    if (options.detectCycles)
        map.set(key, value);
    return value;
}
function toJSHelper(source, options, __alreadySeen) {
    if (!options.recurseEverything && !isObservable(source))
        return source;
    if (typeof source !== "object")
        return source;
    // Directly return null if source is null
    if (source === null)
        return null;
    // Directly return the Date object itself if contained in the observable
    if (source instanceof Date)
        return source;
    if (isObservableValue(source))
        return toJSHelper(source.get(), options, __alreadySeen);
    // make sure we track the keys of the object
    if (isObservable(source))
        keys(source);
    var detectCycles = options.detectCycles === true;
    if (detectCycles && source !== null && __alreadySeen.has(source)) {
        return __alreadySeen.get(source);
    }
    if (isObservableArray(source) || Array.isArray(source)) {
        var res_1 = cache(__alreadySeen, source, [], options);
        var toAdd = source.map(function (value) { return toJSHelper(value, options, __alreadySeen); });
        res_1.length = toAdd.length;
        for (var i = 0, l = toAdd.length; i < l; i++)
            res_1[i] = toAdd[i];
        return res_1;
    }
    if (isObservableSet(source) || Object.getPrototypeOf(source) === Set.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_2 = cache(__alreadySeen, source, new Set(), options);
            source.forEach(function (value) {
                res_2.add(toJSHelper(value, options, __alreadySeen));
            });
            return res_2;
        }
        else {
            var res_3 = cache(__alreadySeen, source, [], options);
            source.forEach(function (value) {
                res_3.push(toJSHelper(value, options, __alreadySeen));
            });
            return res_3;
        }
    }
    if (isObservableMap(source) || Object.getPrototypeOf(source) === Map.prototype) {
        if (options.exportMapsAsObjects === false) {
            var res_4 = cache(__alreadySeen, source, new Map(), options);
            source.forEach(function (value, key) {
                res_4.set(key, toJSHelper(value, options, __alreadySeen));
            });
            return res_4;
        }
        else {
            var res_5 = cache(__alreadySeen, source, {}, options);
            source.forEach(function (value, key) {
                res_5[key] = toJSHelper(value, options, __alreadySeen);
            });
            return res_5;
        }
    }
    // Fallback to the situation that source is an ObservableObject or a plain object
    var res = cache(__alreadySeen, source, {}, options);
    getPlainObjectKeys(source).forEach(function (key) {
        res[key] = toJSHelper(source[key], options, __alreadySeen);
    });
    return res;
}
function toJS(source, options) {
    // backward compatibility
    if (typeof options === "boolean")
        options = { detectCycles: options };
    if (!options)
        options = defaultOptions;
    options.detectCycles =
        options.detectCycles === undefined
            ? options.recurseEverything === true
            : options.detectCycles === true;
    var __alreadySeen;
    if (options.detectCycles)
        __alreadySeen = new Map();
    return toJSHelper(source, options, __alreadySeen);
}

function trace() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var enterBreakPoint = false;
    if (typeof args[args.length - 1] === "boolean")
        enterBreakPoint = args.pop();
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
        return fail( true &&
            "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
    }
    if (derivation.isTracing === TraceMode.NONE) {
        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
    }
    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
    switch (args.length) {
        case 0:
            return globalState.trackingDerivation;
        case 1:
            return getAtom(args[0]);
        case 2:
            return getAtom(args[0], args[1]);
    }
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
    if (thisArg === void 0) { thisArg = undefined; }
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}

function when(predicate, arg1, arg2) {
    if (arguments.length === 1 || (arg1 && typeof arg1 === "object"))
        return whenPromise(predicate, arg1);
    return _when(predicate, arg1, arg2 || {});
}
function _when(predicate, effect, opts) {
    var timeoutHandle;
    if (typeof opts.timeout === "number") {
        timeoutHandle = setTimeout(function () {
            if (!disposer[$mobx].isDisposed) {
                disposer();
                var error = new Error("WHEN_TIMEOUT");
                if (opts.onError)
                    opts.onError(error);
                else
                    throw error;
            }
        }, opts.timeout);
    }
    opts.name = opts.name || "When@" + getNextId();
    var effectAction = createAction(opts.name + "-effect", effect);
    var disposer = autorun(function (r) {
        if (predicate()) {
            r.dispose();
            if (timeoutHandle)
                clearTimeout(timeoutHandle);
            effectAction();
        }
    }, opts);
    return disposer;
}
function whenPromise(predicate, opts) {
    if ( true && opts && opts.onError)
        return fail("the options 'onError' and 'promise' cannot be combined");
    var cancel;
    var res = new Promise(function (resolve, reject) {
        var disposer = _when(predicate, resolve, __assign(__assign({}, opts), { onError: reject }));
        cancel = function () {
            disposer();
            reject("WHEN_CANCELLED");
        };
    });
    res.cancel = cancel;
    return res;
}

function getAdm(target) {
    return target[$mobx];
}
function isPropertyKey(val) {
    return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
}
// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!
var objectProxyTraps = {
    has: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return true;
        var adm = getAdm(target);
        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
        // TODO: check performance stats!
        // if (adm.values.get(name as string)) return true
        if (isPropertyKey(name))
            return adm.has(name);
        return name in target;
    },
    get: function (target, name) {
        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
            return target[name];
        var adm = getAdm(target);
        var observable = adm.values.get(name);
        if (observable instanceof Atom) {
            var result = observable.get();
            if (result === undefined) {
                // This fixes #1796, because deleting a prop that has an
                // undefined value won't retrigger a observer (no visible effect),
                // the autorun wouldn't subscribe to future key changes (see also next comment)
                adm.has(name);
            }
            return result;
        }
        // make sure we start listening to future keys
        // note that we only do this here for optimization
        if (isPropertyKey(name))
            adm.has(name);
        return target[name];
    },
    set: function (target, name, value) {
        if (!isPropertyKey(name))
            return false;
        set(target, name, value);
        return true;
    },
    deleteProperty: function (target, name) {
        if (!isPropertyKey(name))
            return false;
        var adm = getAdm(target);
        adm.remove(name);
        return true;
    },
    ownKeys: function (target) {
        var adm = getAdm(target);
        adm.keysAtom.reportObserved();
        return Reflect.ownKeys(target);
    },
    preventExtensions: function (target) {
        fail("Dynamic observable objects cannot be frozen");
        return false;
    }
};
function createDynamicObservableObject(base) {
    var proxy = new Proxy(base, objectProxyTraps);
    base[$mobx].proxy = proxy;
    return proxy;
}

function hasInterceptors(interceptable) {
    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
    interceptors.push(handler);
    return once(function () {
        var idx = interceptors.indexOf(handler);
        if (idx !== -1)
            interceptors.splice(idx, 1);
    });
}
function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
        var interceptors = __spread((interceptable.interceptors || []));
        for (var i = 0, l = interceptors.length; i < l; i++) {
            change = interceptors[i](change);
            invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
            if (!change)
                break;
        }
        return change;
    }
    finally {
        untrackedEnd(prevU);
    }
}

function hasListeners(listenable) {
    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
    listeners.push(handler);
    return once(function () {
        var idx = listeners.indexOf(handler);
        if (idx !== -1)
            listeners.splice(idx, 1);
    });
}
function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners;
    if (!listeners)
        return;
    listeners = listeners.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i](change);
    }
    untrackedEnd(prevU);
}

var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
var arrayTraps = {
    get: function (target, name) {
        if (name === $mobx)
            return target[$mobx];
        if (name === "length")
            return target[$mobx].getArrayLength();
        if (typeof name === "number") {
            return arrayExtensions.get.call(target, name);
        }
        if (typeof name === "string" && !isNaN(name)) {
            return arrayExtensions.get.call(target, parseInt(name));
        }
        if (arrayExtensions.hasOwnProperty(name)) {
            return arrayExtensions[name];
        }
        return target[name];
    },
    set: function (target, name, value) {
        if (name === "length") {
            target[$mobx].setArrayLength(value);
        }
        if (typeof name === "number") {
            arrayExtensions.set.call(target, name, value);
        }
        if (typeof name === "symbol" || isNaN(name)) {
            target[name] = value;
        }
        else {
            // numeric string
            arrayExtensions.set.call(target, parseInt(name), value);
        }
        return true;
    },
    preventExtensions: function (target) {
        fail("Observable arrays cannot be frozen");
        return false;
    }
};
function createObservableArray(initialValues, enhancer, name, owned) {
    if (name === void 0) { name = "ObservableArray@" + getNextId(); }
    if (owned === void 0) { owned = false; }
    var adm = new ObservableArrayAdministration(name, enhancer, owned);
    addHiddenFinalProp(adm.values, $mobx, adm);
    var proxy = new Proxy(adm.values, arrayTraps);
    adm.proxy = proxy;
    if (initialValues && initialValues.length) {
        var prev = allowStateChangesStart(true);
        adm.spliceWithArray(0, 0, initialValues);
        allowStateChangesEnd(prev);
    }
    return proxy;
}
var ObservableArrayAdministration = /** @class */ (function () {
    function ObservableArrayAdministration(name, enhancer, owned) {
        this.owned = owned;
        this.values = [];
        this.proxy = undefined;
        this.lastKnownLength = 0;
        this.atom = new Atom(name || "ObservableArray@" + getNextId());
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
    }
    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined)
            return this.dehancer(value);
        return value;
    };
    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
        if (this.dehancer !== undefined && values.length > 0)
            return values.map(this.dehancer);
        return values;
    };
    ObservableArrayAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        if (fireImmediately) {
            listener({
                object: this.proxy,
                type: "splice",
                index: 0,
                added: this.values.slice(),
                addedCount: this.values.length,
                removed: [],
                removedCount: 0
            });
        }
        return registerListener(this, listener);
    };
    ObservableArrayAdministration.prototype.getArrayLength = function () {
        this.atom.reportObserved();
        return this.values.length;
    };
    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
        if (typeof newLength !== "number" || newLength < 0)
            throw new Error("[mobx.array] Out of range: " + newLength);
        var currentLength = this.values.length;
        if (newLength === currentLength)
            return;
        else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for (var i = 0; i < newLength - currentLength; i++)
                newItems[i] = undefined; // No Array.fill everywhere...
            this.spliceWithArray(currentLength, 0, newItems);
        }
        else
            this.spliceWithArray(newLength, currentLength - newLength);
    };
    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
        if (oldLength !== this.lastKnownLength)
            throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
        this.lastKnownLength += delta;
    };
    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this.atom);
        var length = this.values.length;
        if (index === undefined)
            index = 0;
        else if (index > length)
            index = length;
        else if (index < 0)
            index = Math.max(0, length + index);
        if (arguments.length === 1)
            deleteCount = length - index;
        else if (deleteCount === undefined || deleteCount === null)
            deleteCount = 0;
        else
            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
        if (newItems === undefined)
            newItems = EMPTY_ARRAY;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy,
                type: "splice",
                index: index,
                removedCount: deleteCount,
                added: newItems
            });
            if (!change)
                return EMPTY_ARRAY;
            deleteCount = change.removedCount;
            newItems = change.added;
        }
        newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
        if (true) {
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength(length, lengthDelta); // checks if internal array wasn't modified
        }
        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
        if (deleteCount !== 0 || newItems.length !== 0)
            this.notifyArraySplice(index, newItems, res);
        return this.dehanceValues(res);
    };
    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
        var _a;
        if (newItems.length < MAX_SPLICE_SIZE) {
            return (_a = this.values).splice.apply(_a, __spread([index, deleteCount], newItems));
        }
        else {
            var res = this.values.slice(index, index + deleteCount);
            this.values = this.values
                .slice(0, index)
                .concat(newItems, this.values.slice(index + deleteCount));
            return res;
        }
    };
    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            }
            : null;
        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
        if (notifySpy && "development" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "development" !== "production")
            spyReportEnd();
    };
    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                object: this.proxy,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            }
            : null;
        if (notifySpy && "development" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
        this.atom.reportChanged();
        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "development" !== "production")
            spyReportEnd();
    };
    return ObservableArrayAdministration;
}());
var arrayExtensions = {
    intercept: function (handler) {
        return this[$mobx].intercept(handler);
    },
    observe: function (listener, fireImmediately) {
        if (fireImmediately === void 0) { fireImmediately = false; }
        var adm = this[$mobx];
        return adm.observe(listener, fireImmediately);
    },
    clear: function () {
        return this.splice(0);
    },
    replace: function (newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(0, adm.values.length, newItems);
    },
    /**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */
    toJS: function () {
        return this.slice();
    },
    toJSON: function () {
        // Used by JSON.stringify
        return this.toJS();
    },
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */
    splice: function (index, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var adm = this[$mobx];
        switch (arguments.length) {
            case 0:
                return [];
            case 1:
                return adm.spliceWithArray(index);
            case 2:
                return adm.spliceWithArray(index, deleteCount);
        }
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    spliceWithArray: function (index, deleteCount, newItems) {
        var adm = this[$mobx];
        return adm.spliceWithArray(index, deleteCount, newItems);
    },
    push: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(adm.values.length, 0, items);
        return adm.values.length;
    },
    pop: function () {
        return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
    },
    shift: function () {
        return this.splice(0, 1)[0];
    },
    unshift: function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this[$mobx];
        adm.spliceWithArray(0, 0, items);
        return adm.values.length;
    },
    reverse: function () {
        // reverse by default mutates in place before returning the result
        // which makes it both a 'derivation' and a 'mutation'.
        // so we deviate from the default and just make it an dervitation
        if (true) {
            console.warn("[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place");
        }
        var clone = this.slice();
        return clone.reverse.apply(clone, arguments);
    },
    sort: function (compareFn) {
        // sort by default mutates in place before returning the result
        // which goes against all good practices. Let's not change the array in place!
        if (true) {
            console.warn("[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place");
        }
        var clone = this.slice();
        return clone.sort.apply(clone, arguments);
    },
    remove: function (value) {
        var adm = this[$mobx];
        var idx = adm.dehanceValues(adm.values).indexOf(value);
        if (idx > -1) {
            this.splice(idx, 1);
            return true;
        }
        return false;
    },
    get: function (index) {
        var adm = this[$mobx];
        if (adm) {
            if (index < adm.values.length) {
                adm.atom.reportObserved();
                return adm.dehanceValue(adm.values[index]);
            }
            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        }
        return undefined;
    },
    set: function (index, newValue) {
        var adm = this[$mobx];
        var values = adm.values;
        if (index < values.length) {
            // update at index in range
            checkIfStateModificationsAreAllowed(adm.atom);
            var oldValue = values[index];
            if (hasInterceptors(adm)) {
                var change = interceptChange(adm, {
                    type: "update",
                    object: adm.proxy,
                    index: index,
                    newValue: newValue
                });
                if (!change)
                    return;
                newValue = change.newValue;
            }
            newValue = adm.enhancer(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
                values[index] = newValue;
                adm.notifyArrayChildUpdate(index, newValue, oldValue);
            }
        }
        else if (index === values.length) {
            // add a new item
            adm.spliceWithArray(index, 0, [newValue]);
        }
        else {
            // out of bounds
            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
        }
    }
};
[
    "concat",
    "flat",
    "includes",
    "indexOf",
    "join",
    "lastIndexOf",
    "slice",
    "toString",
    "toLocaleString"
].forEach(function (funcName) {
    // Feature detection (eg flat may not be available)
    if (typeof Array.prototype[funcName] !== "function") {
        return;
    }
    arrayExtensions[funcName] = function () {
        var adm = this[$mobx];
        adm.atom.reportObserved();
        var dehancedValues = adm.dehanceValues(adm.values);
        return dehancedValues[funcName].apply(dehancedValues, arguments);
    };
});
["every", "filter", "find", "findIndex", "flatMap", "forEach", "map", "some"].forEach(function (funcName) {
    // Feature detection (eg flatMap may not be available)
    if (typeof Array.prototype[funcName] !== "function") {
        return;
    }
    arrayExtensions[funcName] = function (callback, thisArg) {
        var _this = this;
        var adm = this[$mobx];
        adm.atom.reportObserved();
        var dehancedValues = adm.dehanceValues(adm.values);
        return dehancedValues[funcName](function (element, index) {
            return callback.call(thisArg, element, index, _this);
        }, thisArg);
    };
});
["reduce", "reduceRight"].forEach(function (funcName) {
    arrayExtensions[funcName] = function () {
        var _this = this;
        var adm = this[$mobx];
        adm.atom.reportObserved();
        // #2432 - reduce behavior depends on arguments.length
        var callback = arguments[0];
        arguments[0] = function (accumulator, currentValue, index) {
            currentValue = adm.dehanceValue(currentValue);
            return callback(accumulator, currentValue, index, _this);
        };
        return adm.values[funcName].apply(adm.values, arguments);
    };
});
var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
    return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _a;
var ObservableMapMarker = {};
// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556
var ObservableMap = /** @class */ (function () {
    function ObservableMap(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableMap@" + getNextId(); }
        this.enhancer = enhancer;
        this.name = name;
        this[_a] = ObservableMapMarker;
        this._keysAtom = createAtom(this.name + ".keys()");
        this[Symbol.toStringTag] = "Map";
        if (typeof Map !== "function") {
            throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
        }
        this._data = new Map();
        this._hasMap = new Map();
        this.merge(initialData);
    }
    ObservableMap.prototype._has = function (key) {
        return this._data.has(key);
    };
    ObservableMap.prototype.has = function (key) {
        var _this = this;
        if (!globalState.trackingDerivation)
            return this._has(key);
        var entry = this._hasMap.get(key);
        if (!entry) {
            // todo: replace with atom (breaking change)
            var newEntry = (entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false));
            this._hasMap.set(key, newEntry);
            onBecomeUnobserved(newEntry, function () { return _this._hasMap.delete(key); });
        }
        return entry.get();
    };
    ObservableMap.prototype.set = function (key, value) {
        var hasKey = this._has(key);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: hasKey ? "update" : "add",
                object: this,
                newValue: value,
                name: key
            });
            if (!change)
                return this;
            value = change.newValue;
        }
        if (hasKey) {
            this._updateValue(key, value);
        }
        else {
            this._addValue(key, value);
        }
        return this;
    };
    ObservableMap.prototype.delete = function (key) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._keysAtom);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                name: key
            });
            if (!change)
                return false;
        }
        if (this._has(key)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data.get(key).value,
                    name: key
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            transaction(function () {
                _this._keysAtom.reportChanged();
                _this._updateHasMapEntry(key, false);
                var observable = _this._data.get(key);
                observable.setNewValue(undefined);
                _this._data.delete(key);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
        var entry = this._hasMap.get(key);
        if (entry) {
            entry.setNewValue(value);
        }
    };
    ObservableMap.prototype._updateValue = function (key, newValue) {
        var observable = this._data.get(key);
        newValue = observable.prepareNewValue(newValue);
        if (newValue !== globalState.UNCHANGED) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
        }
    };
    ObservableMap.prototype._addValue = function (key, newValue) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._keysAtom);
        transaction(function () {
            var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
            _this._data.set(key, observable);
            newValue = observable.value; // value might have been changed
            _this._updateHasMapEntry(key, true);
            _this._keysAtom.reportChanged();
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && "development" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "development" !== "production")
            spyReportEnd();
    };
    ObservableMap.prototype.get = function (key) {
        if (this.has(key))
            return this.dehanceValue(this._data.get(key).get());
        return this.dehanceValue(undefined);
    };
    ObservableMap.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableMap.prototype.keys = function () {
        this._keysAtom.reportObserved();
        return this._data.keys();
    };
    ObservableMap.prototype.values = function () {
        var self = this;
        var keys = this.keys();
        return makeIterable({
            next: function () {
                var _b = keys.next(), done = _b.done, value = _b.value;
                return {
                    done: done,
                    value: done ? undefined : self.get(value)
                };
            }
        });
    };
    ObservableMap.prototype.entries = function () {
        var self = this;
        var keys = this.keys();
        return makeIterable({
            next: function () {
                var _b = keys.next(), done = _b.done, value = _b.value;
                return {
                    done: done,
                    value: done ? undefined : [value, self.get(value)]
                };
            }
        });
    };
    ObservableMap.prototype[(_a = $mobx, Symbol.iterator)] = function () {
        return this.entries();
    };
    ObservableMap.prototype.forEach = function (callback, thisArg) {
        var e_1, _b;
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                callback.call(thisArg, value, key, this);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /** Merge another object into this object, returns this. */
    ObservableMap.prototype.merge = function (other) {
        var _this = this;
        if (isObservableMap(other)) {
            other = other.toJS();
        }
        transaction(function () {
            var prev = allowStateChangesStart(true);
            try {
                if (isPlainObject(other))
                    getPlainObjectKeys(other).forEach(function (key) {
                        return _this.set(key, other[key]);
                    });
                else if (Array.isArray(other))
                    other.forEach(function (_b) {
                        var _c = __read(_b, 2), key = _c[0], value = _c[1];
                        return _this.set(key, value);
                    });
                else if (isES6Map(other)) {
                    if (other.constructor !== Map)
                        fail("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
                    other.forEach(function (value, key) { return _this.set(key, value); });
                }
                else if (other !== null && other !== undefined)
                    fail("Cannot initialize map from " + other);
            }
            finally {
                allowStateChangesEnd(prev);
            }
        });
        return this;
    };
    ObservableMap.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_2, _b;
                try {
                    for (var _c = __values(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var key = _d.value;
                        _this.delete(key);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
        });
    };
    ObservableMap.prototype.replace = function (values) {
        var _this = this;
        // Implementation requirements:
        // - respect ordering of replacement map
        // - allow interceptors to run and potentially prevent individual operations
        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
        // - note that result map may differ from replacement map due to the interceptors
        transaction(function () {
            var e_3, _b, e_4, _c;
            // Convert to map so we can do quick key lookups
            var replacementMap = convertToMap(values);
            var orderedData = new Map();
            // Used for optimization
            var keysReportChangedCalled = false;
            try {
                // Delete keys that don't exist in replacement map
                // if the key deletion is prevented by interceptor
                // add entry at the beginning of the result map
                for (var _d = __values(_this._data.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var key = _e.value;
                    // Concurrently iterating/deleting keys
                    // iterator should handle this correctly
                    if (!replacementMap.has(key)) {
                        var deleted = _this.delete(key);
                        // Was the key removed?
                        if (deleted) {
                            // _keysAtom.reportChanged() was already called
                            keysReportChangedCalled = true;
                        }
                        else {
                            // Delete prevented by interceptor
                            var value = _this._data.get(key);
                            orderedData.set(key, value);
                        }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_3) throw e_3.error; }
            }
            try {
                // Merge entries
                for (var _f = __values(replacementMap.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
                    // We will want to know whether a new key is added
                    var keyExisted = _this._data.has(key);
                    // Add or update value
                    _this.set(key, value);
                    // The addition could have been prevent by interceptor
                    if (_this._data.has(key)) {
                        // The update could have been prevented by interceptor
                        // and also we want to preserve existing values
                        // so use value from _data map (instead of replacement map)
                        var value_1 = _this._data.get(key);
                        orderedData.set(key, value_1);
                        // Was a new key added?
                        if (!keyExisted) {
                            // _keysAtom.reportChanged() was already called
                            keysReportChangedCalled = true;
                        }
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                }
                finally { if (e_4) throw e_4.error; }
            }
            // Check for possible key order change
            if (!keysReportChangedCalled) {
                if (_this._data.size !== orderedData.size) {
                    // If size differs, keys are definitely modified
                    _this._keysAtom.reportChanged();
                }
                else {
                    var iter1 = _this._data.keys();
                    var iter2 = orderedData.keys();
                    var next1 = iter1.next();
                    var next2 = iter2.next();
                    while (!next1.done) {
                        if (next1.value !== next2.value) {
                            _this._keysAtom.reportChanged();
                            break;
                        }
                        next1 = iter1.next();
                        next2 = iter2.next();
                    }
                }
            }
            // Use correctly ordered map
            _this._data = orderedData;
        });
        return this;
    };
    Object.defineProperty(ObservableMap.prototype, "size", {
        get: function () {
            this._keysAtom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a plain object that represents this map.
     * Note that all the keys being stringified.
     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
     */
    ObservableMap.prototype.toPOJO = function () {
        var e_5, _b;
        var res = {};
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
                // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
                res[typeof key === "symbol" ? key : stringifyKey(key)] = value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return res;
    };
    /**
     * Returns a shallow non observable object clone of this map.
     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
     */
    ObservableMap.prototype.toJS = function () {
        return new Map(this);
    };
    ObservableMap.prototype.toJSON = function () {
        // Used by JSON.stringify
        return this.toPOJO();
    };
    ObservableMap.prototype.toString = function () {
        var _this = this;
        return (this.name +
            "[{ " +
            Array.from(this.keys())
                .map(function (key) { return stringifyKey(key) + ": " + ("" + _this.get(key)); })
                .join(", ") +
            " }]");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableMap.prototype.observe = function (listener, fireImmediately) {
         true &&
            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
        return registerListener(this, listener);
    };
    ObservableMap.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    return ObservableMap;
}());
/* 'var' fixes small-build issue */
var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

var _a$1;
var ObservableSetMarker = {};
var ObservableSet = /** @class */ (function () {
    function ObservableSet(initialData, enhancer, name) {
        if (enhancer === void 0) { enhancer = deepEnhancer; }
        if (name === void 0) { name = "ObservableSet@" + getNextId(); }
        this.name = name;
        this[_a$1] = ObservableSetMarker;
        this._data = new Set();
        this._atom = createAtom(this.name);
        this[Symbol.toStringTag] = "Set";
        if (typeof Set !== "function") {
            throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
        }
        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
        if (initialData) {
            this.replace(initialData);
        }
    }
    ObservableSet.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableSet.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                var e_1, _b;
                try {
                    for (var _c = __values(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var value = _d.value;
                        _this.delete(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
        });
    };
    ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
        var e_2, _b;
        try {
            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
                var value = _d.value;
                callbackFn.call(thisArg, value, value, this);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    Object.defineProperty(ObservableSet.prototype, "size", {
        get: function () {
            this._atom.reportObserved();
            return this._data.size;
        },
        enumerable: true,
        configurable: true
    });
    ObservableSet.prototype.add = function (value) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this._atom);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "add",
                object: this,
                newValue: value
            });
            if (!change)
                return this;
            // TODO: ideally, value = change.value would be done here, so that values can be
            // changed by interceptor. Same applies for other Set and Map api's.
        }
        if (!this.has(value)) {
            transaction(function () {
                _this._data.add(_this.enhancer(value, undefined));
                _this._atom.reportChanged();
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "add",
                    object: this,
                    newValue: value
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(change);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
        }
        return this;
    };
    ObservableSet.prototype.delete = function (value) {
        var _this = this;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                oldValue: value
            });
            if (!change)
                return false;
        }
        if (this.has(value)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy
                ? {
                    type: "delete",
                    object: this,
                    oldValue: value
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name }));
            transaction(function () {
                _this._atom.reportChanged();
                _this._data.delete(value);
            });
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableSet.prototype.has = function (value) {
        this._atom.reportObserved();
        return this._data.has(this.dehanceValue(value));
    };
    ObservableSet.prototype.entries = function () {
        var nextIndex = 0;
        var keys = Array.from(this.keys());
        var values = Array.from(this.values());
        return makeIterable({
            next: function () {
                var index = nextIndex;
                nextIndex += 1;
                return index < values.length
                    ? { value: [keys[index], values[index]], done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.keys = function () {
        return this.values();
    };
    ObservableSet.prototype.values = function () {
        this._atom.reportObserved();
        var self = this;
        var nextIndex = 0;
        var observableValues = Array.from(this._data.values());
        return makeIterable({
            next: function () {
                return nextIndex < observableValues.length
                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
                    : { done: true };
            }
        });
    };
    ObservableSet.prototype.replace = function (other) {
        var _this = this;
        if (isObservableSet(other)) {
            other = other.toJS();
        }
        transaction(function () {
            var prev = allowStateChangesStart(true);
            try {
                if (Array.isArray(other)) {
                    _this.clear();
                    other.forEach(function (value) { return _this.add(value); });
                }
                else if (isES6Set(other)) {
                    _this.clear();
                    other.forEach(function (value) { return _this.add(value); });
                }
                else if (other !== null && other !== undefined) {
                    fail("Cannot initialize set from " + other);
                }
            }
            finally {
                allowStateChangesEnd(prev);
            }
        });
        return this;
    };
    ObservableSet.prototype.observe = function (listener, fireImmediately) {
        // TODO 'fireImmediately' can be true?
         true &&
            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with sets.");
        return registerListener(this, listener);
    };
    ObservableSet.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableSet.prototype.toJS = function () {
        return new Set(this);
    };
    ObservableSet.prototype.toString = function () {
        return this.name + "[ " + Array.from(this).join(", ") + " ]";
    };
    ObservableSet.prototype[(_a$1 = $mobx, Symbol.iterator)] = function () {
        return this.values();
    };
    return ObservableSet;
}());
var isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet);

var ObservableObjectAdministration = /** @class */ (function () {
    function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
        if (values === void 0) { values = new Map(); }
        this.target = target;
        this.values = values;
        this.name = name;
        this.defaultEnhancer = defaultEnhancer;
        this.keysAtom = new Atom(name + ".keys");
    }
    ObservableObjectAdministration.prototype.read = function (key) {
        return this.values.get(key).get();
    };
    ObservableObjectAdministration.prototype.write = function (key, newValue) {
        var instance = this.target;
        var observable = this.values.get(key);
        if (observable instanceof ComputedValue) {
            observable.set(newValue);
            return;
        }
        // intercept
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "update",
                object: this.proxy || instance,
                name: key,
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        newValue = observable.prepareNewValue(newValue);
        // notify spy & observers
        if (newValue !== globalState.UNCHANGED) {
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var change = notify || notifySpy
                ? {
                    type: "update",
                    object: this.proxy || instance,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            observable.setNewValue(newValue);
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
        }
    };
    ObservableObjectAdministration.prototype.has = function (key) {
        var map = this.pendingKeys || (this.pendingKeys = new Map());
        var entry = map.get(key);
        if (entry)
            return entry.get();
        else {
            var exists = !!this.values.get(key);
            // Possible optimization: Don't have a separate map for non existing keys,
            // but store them in the values map instead, using a special symbol to denote "not existing"
            entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
            map.set(key, entry);
            return entry.get(); // read to subscribe
        }
    };
    ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
        if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
        var target = this.target;
        assertPropertyConfigurable(target, propName);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change)
                return;
            newValue = change.newValue;
        }
        var observable = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
        this.values.set(propName, observable);
        newValue = observable.value; // observableValue might have changed it
        Object.defineProperty(target, propName, generateObservablePropConfig(propName));
        this.notifyPropertyAddition(propName, newValue);
    };
    ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
    propName, options) {
        var target = this.target;
        options.name = options.name || this.name + "." + stringifyKey(propName);
        this.values.set(propName, new ComputedValue(options));
        if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))
            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName));
    };
    ObservableObjectAdministration.prototype.remove = function (key) {
        if (!this.values.has(key))
            return;
        var target = this.target;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.proxy || target,
                name: key,
                type: "remove"
            });
            if (!change)
                return;
        }
        try {
            startBatch();
            var notify = hasListeners(this);
            var notifySpy = isSpyEnabled();
            var oldObservable = this.values.get(key);
            var oldValue = oldObservable && oldObservable.get();
            oldObservable && oldObservable.set(undefined);
            // notify key and keyset listeners
            this.keysAtom.reportChanged();
            this.values.delete(key);
            if (this.pendingKeys) {
                var entry = this.pendingKeys.get(key);
                if (entry)
                    entry.set(false);
            }
            // delete the prop
            delete this.target[key];
            var change = notify || notifySpy
                ? {
                    type: "remove",
                    object: this.proxy || target,
                    oldValue: oldValue,
                    name: key
                }
                : null;
            if (notifySpy && "development" !== "production")
                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
            if (notify)
                notifyListeners(this, change);
            if (notifySpy && "development" !== "production")
                spyReportEnd();
        }
        finally {
            endBatch();
        }
    };
    ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
        /**
         * This happens if a property is accessed through the prototype chain, but the property was
         * declared directly as own property on the prototype.
         *
         * E.g.:
         * class A {
         * }
         * extendObservable(A.prototype, { x: 1 })
         *
         * classB extens A {
         * }
         * console.log(new B().x)
         *
         * It is unclear whether the property should be considered 'static' or inherited.
         * Either use `console.log(A.x)`
         * or: decorate(A, { x: observable })
         *
         * When using decorate, the property will always be redeclared as own property on the actual instance
         */
        console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
         true &&
            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
        return registerListener(this, callback);
    };
    ObservableObjectAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy
            ? {
                type: "add",
                object: this.proxy || this.target,
                name: key,
                newValue: newValue
            }
            : null;
        if (notifySpy && "development" !== "production")
            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
        if (notify)
            notifyListeners(this, change);
        if (notifySpy && "development" !== "production")
            spyReportEnd();
        if (this.pendingKeys) {
            var entry = this.pendingKeys.get(key);
            if (entry)
                entry.set(true);
        }
        this.keysAtom.reportChanged();
    };
    ObservableObjectAdministration.prototype.getKeys = function () {
        var e_1, _a;
        this.keysAtom.reportObserved();
        // return Reflect.ownKeys(this.values) as any
        var res = [];
        try {
            for (var _b = __values(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                if (value instanceof ObservableValue)
                    res.push(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return res;
    };
    return ObservableObjectAdministration;
}());
function asObservableObject(target, name, defaultEnhancer) {
    if (name === void 0) { name = ""; }
    if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer; }
    if (Object.prototype.hasOwnProperty.call(target, $mobx))
        return target[$mobx];
     true &&
        invariant(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
    if (!isPlainObject(target))
        name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
    if (!name)
        name = "ObservableObject@" + getNextId();
    var adm = new ObservableObjectAdministration(target, new Map(), stringifyKey(name), defaultEnhancer);
    addHiddenProp(target, $mobx, adm);
    return adm;
}
var observablePropertyConfigs = Object.create(null);
var computedPropertyConfigs = Object.create(null);
function generateObservablePropConfig(propName) {
    return (observablePropertyConfigs[propName] ||
        (observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function () {
                return this[$mobx].read(propName);
            },
            set: function (v) {
                this[$mobx].write(propName, v);
            }
        }));
}
function getAdministrationForComputedPropOwner(owner) {
    var adm = owner[$mobx];
    if (!adm) {
        // because computed props are declared on proty,
        // the current instance might not have been initialized yet
        initializeInstance(owner);
        return owner[$mobx];
    }
    return adm;
}
function generateComputedPropConfig(propName) {
    return (computedPropertyConfigs[propName] ||
        (computedPropertyConfigs[propName] = {
            configurable: globalState.computedConfigurable,
            enumerable: false,
            get: function () {
                return getAdministrationForComputedPropOwner(this).read(propName);
            },
            set: function (v) {
                getAdministrationForComputedPropOwner(this).write(propName, v);
            }
        }));
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
    if (isObject(thing)) {
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        return isObservableObjectAdministration(thing[$mobx]);
    }
    return false;
}

function getAtom(thing, property) {
    if (typeof thing === "object" && thing !== null) {
        if (isObservableArray(thing)) {
            if (property !== undefined)
                fail( true &&
                    "It is not possible to get index atoms from arrays");
            return thing[$mobx].atom;
        }
        if (isObservableSet(thing)) {
            return thing[$mobx];
        }
        if (isObservableMap(thing)) {
            var anyThing = thing;
            if (property === undefined)
                return anyThing._keysAtom;
            var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
            if (!observable)
                fail( true &&
                    "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
            return observable;
        }
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        initializeInstance(thing);
        if (property && !thing[$mobx])
            thing[property]; // See #1072
        if (isObservableObject(thing)) {
            if (!property)
                return fail( true && "please specify a property");
            var observable = thing[$mobx].values.get(property);
            if (!observable)
                fail( true &&
                    "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
            return observable;
        }
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
            return thing;
        }
    }
    else if (typeof thing === "function") {
        if (isReaction(thing[$mobx])) {
            // disposer function
            return thing[$mobx];
        }
    }
    return fail( true && "Cannot obtain atom from " + thing);
}
function getAdministration(thing, property) {
    if (!thing)
        fail("Expecting some object");
    if (property !== undefined)
        return getAdministration(getAtom(thing, property));
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
        return thing;
    if (isObservableMap(thing) || isObservableSet(thing))
        return thing;
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    initializeInstance(thing);
    if (thing[$mobx])
        return thing[$mobx];
    fail( true && "Cannot obtain administration from " + thing);
}
function getDebugName(thing, property) {
    var named;
    if (property !== undefined)
        named = getAtom(thing, property);
    else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))
        named = getAdministration(thing);
    else
        named = getAtom(thing); // valid for arrays as well
    return named.name;
}

var toString = Object.prototype.toString;
function deepEqual(a, b, depth) {
    if (depth === void 0) { depth = -1; }
    return eq(a, b, depth);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function eq(a, b, depth, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b)
        return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null)
        return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a)
        return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== "function" && type !== "object" && typeof b != "object")
        return false;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b))
        return false;
    switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case "[object RegExp]":
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case "[object String]":
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return "" + a === "" + b;
        case "[object Number]":
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a)
                return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        case "[object Symbol]":
            return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
        case "[object Map]":
        case "[object Set]":
            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
            // Hide this extra level by increasing the depth.
            if (depth >= 0) {
                depth++;
            }
            break;
    }
    // Unwrap any wrapped objects.
    a = unwrap(a);
    b = unwrap(b);
    var areArrays = className === "[object Array]";
    if (!areArrays) {
        if (typeof a != "object" || typeof b != "object")
            return false;
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor &&
            !(typeof aCtor === "function" &&
                aCtor instanceof aCtor &&
                typeof bCtor === "function" &&
                bCtor instanceof bCtor) &&
            ("constructor" in a && "constructor" in b)) {
            return false;
        }
    }
    if (depth === 0) {
        return false;
    }
    else if (depth < 0) {
        depth = -1;
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a)
            return bStack[length] === b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    // Recursively compare objects and arrays.
    if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length)
            return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
            if (!eq(a[length], b[length], depth - 1, aStack, bStack))
                return false;
        }
    }
    else {
        // Deep compare objects.
        var keys = Object.keys(a);
        var key = void 0;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (Object.keys(b).length !== length)
            return false;
        while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has$1(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack)))
                return false;
        }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
}
function unwrap(a) {
    if (isObservableArray(a))
        return a.slice();
    if (isES6Map(a) || isObservableMap(a))
        return Array.from(a.entries());
    if (isES6Set(a) || isObservableSet(a))
        return Array.from(a.entries());
    return a;
}
function has$1(a, key) {
    return Object.prototype.hasOwnProperty.call(a, key);
}

function makeIterable(iterator) {
    iterator[Symbol.iterator] = getSelf;
    return iterator;
}
function getSelf() {
    return this;
}

/**
 * (c) Michel Weststrate 2015 - 2018
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
    throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
}
try {
    // define process.env if needed
    // if this is not a production build in the first place
    // (in which case the expression below would be substituted with 'production')
    "development";
}
catch (e) {
    var g = getGlobal();
    if (typeof process === "undefined")
        g.process = {};
    g.process.env = {};
}
(function () {
    function testCodeMinification() { }
    if (testCodeMinification.name !== "testCodeMinification" &&
        "development" !== "production" &&
        typeof process !== 'undefined' && ({"NODE_ENV":"development","STEAM_BUILD":"dev"}).IGNORE_MOBX_MINIFY_WARNING !== "true") {
        // trick so it doesn't get replaced
        var varName = ["process", "env", "NODE_ENV"].join(".");
        console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
    }
})();
if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
    // See: https://github.com/andykog/mobx-devtools/
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
        spy: spy,
        extras: {
            getDebugName: getDebugName
        },
        $mobx: $mobx
    });
}




/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) { /**/ }
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/** @license React v16.11.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

if (!React) {
  {
    throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
  }
}

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }

    if (condition) {
      return;
    }

    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610

      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}
/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */



/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */


var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
    }
  }

  return listener;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */

function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?


var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var phase = null;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }

  return '';
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}
function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

function endsWith(subject, search) {
  var length = subject.length;
  return subject.substring(length - search.length, length) === search;
}

var PLUGIN_EVENT_SYSTEM = 1;
var RESPONDER_EVENT_SYSTEM = 1 << 1;
var IS_PASSIVE = 1 << 2;
var IS_ACTIVE = 1 << 3;
var PASSIVE_NOT_SUPPORTED = 1 << 4;
var IS_REPLAYED = 1 << 5;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableUserTimingAPI = true; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:

var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

var warnAboutDeprecatedLifecycles = true; // Gather advanced timing metrics for Profiler subtrees.

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments

var enableSuspenseServerRenderer = false;
var enableSelectiveHydration = false; // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

var disableJavaScriptURLs = false; // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

var exposeConcurrentModeAPIs = false;
var warnAboutShorthandPropertyCollision = false; // Experimental React Flare event system and event components support.

var enableFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.

var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

var warnAboutUnmockedScheduler = false; // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

var flushSuspenseFallbacksInTests = true; // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

var enableSuspenseCallback = false; // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var warnAboutDefaultPropsOnFunctionComponents = false;
var warnAboutStringRefs = false;
var disableLegacyContext = false;
var disableSchedulerTimeoutBasedOnReactExpirationTime = false;
var enableTrustedTypesIntegration = false;

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c) {
  return fn(a, b, c);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system

function executeUserEventHandler(fn, value) {
  var previouslyInEventHandler = isInsideEventHandler;

  try {
    isInsideEventHandler = true;
    var type = typeof value === 'object' && value !== null ? value.type : '';
    invokeGuardedCallbackAndCatchFirstError(type, fn, undefined, value);
  } finally {
    isInsideEventHandler = previouslyInEventHandler;
  }
}
function discreteUpdates(fn, a, b, c) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
var lastFlushedEventTimeStamp = 0;
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableFlareAPI || timeStamp === 0 || lastFlushedEventTimeStamp !== timeStamp)) {
    lastFlushedEventTimeStamp = timeStamp;
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// CommonJS interop named imports.

var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var runWithPriority = Scheduler.unstable_runWithPriority;
var listenToResponderEventTypesImpl;
function setListenToResponderEventTypes(_listenToResponderEventTypesImpl) {
  listenToResponderEventTypesImpl = _listenToResponderEventTypesImpl;
}
var rootEventTypesToEventResponderInstances = new Map();
var DoNotPropagateToNextResponder = 0;
var PropagateToNextResponder = 1;
var currentTimeStamp = 0;
var currentInstance = null;
var currentDocument = null;
var currentPropagationBehavior = DoNotPropagateToNextResponder;
var eventResponderContext = {
  dispatchEvent: function (eventValue, eventListener, eventPriority) {
    validateResponderContext();
    validateEventValue(eventValue);

    switch (eventPriority) {
      case DiscreteEvent:
        {
          flushDiscreteUpdatesIfNeeded(currentTimeStamp);
          discreteUpdates(function () {
            return executeUserEventHandler(eventListener, eventValue);
          });
          break;
        }

      case UserBlockingEvent:
        {
          runWithPriority(UserBlockingPriority, function () {
            return executeUserEventHandler(eventListener, eventValue);
          });
          break;
        }

      case ContinuousEvent:
        {
          executeUserEventHandler(eventListener, eventValue);
          break;
        }
    }
  },
  isTargetWithinResponder: function (target) {
    validateResponderContext();

    if (target != null) {
      var fiber = getClosestInstanceFromNode(target);
      var responderFiber = currentInstance.fiber;

      while (fiber !== null) {
        if (fiber === responderFiber || fiber.alternate === responderFiber) {
          return true;
        }

        fiber = fiber.return;
      }
    }

    return false;
  },
  isTargetWithinResponderScope: function (target) {
    validateResponderContext();
    var componentInstance = currentInstance;
    var responder = componentInstance.responder;

    if (target != null) {
      var fiber = getClosestInstanceFromNode(target);
      var responderFiber = currentInstance.fiber;

      while (fiber !== null) {
        if (fiber === responderFiber || fiber.alternate === responderFiber) {
          return true;
        }

        if (doesFiberHaveResponder(fiber, responder)) {
          return false;
        }

        fiber = fiber.return;
      }
    }

    return false;
  },
  isTargetWithinNode: function (childTarget, parentTarget) {
    validateResponderContext();
    var childFiber = getClosestInstanceFromNode(childTarget);
    var parentFiber = getClosestInstanceFromNode(parentTarget);

    if (childFiber != null && parentFiber != null) {
      var parentAlternateFiber = parentFiber.alternate;
      var node = childFiber;

      while (node !== null) {
        if (node === parentFiber || node === parentAlternateFiber) {
          return true;
        }

        node = node.return;
      }

      return false;
    } // Fallback to DOM APIs


    return parentTarget.contains(childTarget);
  },
  addRootEventTypes: function (rootEventTypes) {
    validateResponderContext();
    listenToResponderEventTypesImpl(rootEventTypes, currentDocument);

    for (var i = 0; i < rootEventTypes.length; i++) {
      var rootEventType = rootEventTypes[i];
      var eventResponderInstance = currentInstance;
      registerRootEventType(rootEventType, eventResponderInstance);
    }
  },
  removeRootEventTypes: function (rootEventTypes) {
    validateResponderContext();

    for (var i = 0; i < rootEventTypes.length; i++) {
      var rootEventType = rootEventTypes[i];
      var rootEventResponders = rootEventTypesToEventResponderInstances.get(rootEventType);
      var rootEventTypesSet = currentInstance.rootEventTypes;

      if (rootEventTypesSet !== null) {
        rootEventTypesSet.delete(rootEventType);
      }

      if (rootEventResponders !== undefined) {
        rootEventResponders.delete(currentInstance);
      }
    }
  },
  getActiveDocument: getActiveDocument,
  objectAssign: _assign,
  getTimeStamp: function () {
    validateResponderContext();
    return currentTimeStamp;
  },
  isTargetWithinHostComponent: function (target, elementType) {
    validateResponderContext();
    var fiber = getClosestInstanceFromNode(target);

    while (fiber !== null) {
      if (fiber.tag === HostComponent && fiber.type === elementType) {
        return true;
      }

      fiber = fiber.return;
    }

    return false;
  },
  continuePropagation: function () {
    currentPropagationBehavior = PropagateToNextResponder;
  },
  enqueueStateRestore: enqueueStateRestore,
  getResponderNode: function () {
    validateResponderContext();
    var responderFiber = currentInstance.fiber;

    if (responderFiber.tag === ScopeComponent) {
      return null;
    }

    return responderFiber.stateNode;
  }
};

function validateEventValue(eventValue) {
  if (typeof eventValue === 'object' && eventValue !== null) {
    var target = eventValue.target,
        type = eventValue.type,
        timeStamp = eventValue.timeStamp;

    if (target == null || type == null || timeStamp == null) {
      throw new Error('context.dispatchEvent: "target", "timeStamp", and "type" fields on event object are required.');
    }

    var showWarning = function (name) {
      {
        warning$1(false, '%s is not available on event objects created from event responder modules (React Flare). ' + 'Try wrapping in a conditional, i.e. `if (event.type !== "press") { event.%s }`', name, name);
      }
    };

    eventValue.isDefaultPrevented = function () {
      {
        showWarning('isDefaultPrevented()');
      }
    };

    eventValue.isPropagationStopped = function () {
      {
        showWarning('isPropagationStopped()');
      }
    }; // $FlowFixMe: we don't need value, Flow thinks we do


    Object.defineProperty(eventValue, 'nativeEvent', {
      get: function () {
        {
          showWarning('nativeEvent');
        }
      }
    });
  }
}

function doesFiberHaveResponder(fiber, responder) {
  var tag = fiber.tag;

  if (tag === HostComponent || tag === ScopeComponent) {
    var dependencies = fiber.dependencies;

    if (dependencies !== null) {
      var respondersMap = dependencies.responders;

      if (respondersMap !== null && respondersMap.has(responder)) {
        return true;
      }
    }
  }

  return false;
}

function getActiveDocument() {
  return currentDocument;
}

function createDOMResponderEvent(topLevelType, nativeEvent, nativeEventTarget, passive, passiveSupported) {
  var _ref = nativeEvent,
      buttons = _ref.buttons,
      pointerType = _ref.pointerType;
  var eventPointerType = '';

  if (pointerType !== undefined) {
    eventPointerType = pointerType;
  } else if (nativeEvent.key !== undefined) {
    eventPointerType = 'keyboard';
  } else if (buttons !== undefined) {
    eventPointerType = 'mouse';
  } else if (nativeEvent.changedTouches !== undefined) {
    eventPointerType = 'touch';
  }

  return {
    nativeEvent: nativeEvent,
    passive: passive,
    passiveSupported: passiveSupported,
    pointerType: eventPointerType,
    target: nativeEventTarget,
    type: topLevelType
  };
}

function responderEventTypesContainType(eventTypes, type) {
  for (var i = 0, len = eventTypes.length; i < len; i++) {
    if (eventTypes[i] === type) {
      return true;
    }
  }

  return false;
}

function validateResponderTargetEventTypes(eventType, responder) {
  var targetEventTypes = responder.targetEventTypes; // Validate the target event type exists on the responder

  if (targetEventTypes !== null) {
    return responderEventTypesContainType(targetEventTypes, eventType);
  }

  return false;
}

function traverseAndHandleEventResponderInstances(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var isPassiveEvent = (eventSystemFlags & IS_PASSIVE) !== 0;
  var isPassiveSupported = (eventSystemFlags & PASSIVE_NOT_SUPPORTED) === 0;
  var isPassive = isPassiveEvent || !isPassiveSupported;
  var eventType = isPassive ? topLevelType : topLevelType + '_active'; // Trigger event responders in this order:
  // - Bubble target responder phase
  // - Root responder phase

  var visitedResponders = new Set();
  var responderEvent = createDOMResponderEvent(topLevelType, nativeEvent, nativeEventTarget, isPassiveEvent, isPassiveSupported);
  var node = targetFiber;
  var insidePortal = false;

  while (node !== null) {
    var _node = node,
        dependencies = _node.dependencies,
        tag = _node.tag;

    if (tag === HostPortal) {
      insidePortal = true;
    } else if ((tag === HostComponent || tag === ScopeComponent) && dependencies !== null) {
      var respondersMap = dependencies.responders;

      if (respondersMap !== null) {
        var responderInstances = Array.from(respondersMap.values());

        for (var i = 0, length = responderInstances.length; i < length; i++) {
          var responderInstance = responderInstances[i];
          var props = responderInstance.props,
              responder = responderInstance.responder,
              state = responderInstance.state;

          if (!visitedResponders.has(responder) && validateResponderTargetEventTypes(eventType, responder) && (!insidePortal || responder.targetPortalPropagation)) {
            visitedResponders.add(responder);
            var onEvent = responder.onEvent;

            if (onEvent !== null) {
              currentInstance = responderInstance;
              onEvent(responderEvent, eventResponderContext, props, state);

              if (currentPropagationBehavior === PropagateToNextResponder) {
                visitedResponders.delete(responder);
                currentPropagationBehavior = DoNotPropagateToNextResponder;
              }
            }
          }
        }
      }
    }

    node = node.return;
  } // Root phase


  var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(eventType);

  if (rootEventResponderInstances !== undefined) {
    var _responderInstances = Array.from(rootEventResponderInstances);

    for (var _i = 0; _i < _responderInstances.length; _i++) {
      var _responderInstance = _responderInstances[_i];
      var props = _responderInstance.props,
          responder = _responderInstance.responder,
          state = _responderInstance.state;
      var onRootEvent = responder.onRootEvent;

      if (onRootEvent !== null) {
        currentInstance = _responderInstance;
        onRootEvent(responderEvent, eventResponderContext, props, state);
      }
    }
  }
}

function mountEventResponder(responder, responderInstance, props, state) {
  var onMount = responder.onMount;

  if (onMount !== null) {
    var previousInstance = currentInstance;
    currentInstance = responderInstance;

    try {
      batchedEventUpdates(function () {
        onMount(eventResponderContext, props, state);
      });
    } finally {
      currentInstance = previousInstance;
    }
  }
}
function unmountEventResponder(responderInstance) {
  var responder = responderInstance.responder;
  var onUnmount = responder.onUnmount;

  if (onUnmount !== null) {
    var props = responderInstance.props,
        state = responderInstance.state;
    var previousInstance = currentInstance;
    currentInstance = responderInstance;

    try {
      batchedEventUpdates(function () {
        onUnmount(eventResponderContext, props, state);
      });
    } finally {
      currentInstance = previousInstance;
    }
  }

  var rootEventTypesSet = responderInstance.rootEventTypes;

  if (rootEventTypesSet !== null) {
    var rootEventTypes = Array.from(rootEventTypesSet);

    for (var i = 0; i < rootEventTypes.length; i++) {
      var topLevelEventType = rootEventTypes[i];
      var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(topLevelEventType);

      if (rootEventResponderInstances !== undefined) {
        rootEventResponderInstances.delete(responderInstance);
      }
    }
  }
}

function validateResponderContext() {
  if (!(currentInstance !== null)) {
    {
      throw Error("An event responder context was used outside of an event cycle.");
    }
  }
}

function dispatchEventForResponderEventSystem(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags) {
  if (enableFlareAPI) {
    var previousInstance = currentInstance;
    var previousTimeStamp = currentTimeStamp;
    var previousDocument = currentDocument;
    var previousPropagationBehavior = currentPropagationBehavior;
    currentPropagationBehavior = DoNotPropagateToNextResponder; // nodeType 9 is DOCUMENT_NODE

    currentDocument = nativeEventTarget.nodeType === 9 ? nativeEventTarget : nativeEventTarget.ownerDocument; // We might want to control timeStamp another way here

    currentTimeStamp = nativeEvent.timeStamp;

    try {
      batchedEventUpdates(function () {
        traverseAndHandleEventResponderInstances(topLevelType, targetFiber, nativeEvent, nativeEventTarget, eventSystemFlags);
      });
    } finally {
      currentInstance = previousInstance;
      currentTimeStamp = previousTimeStamp;
      currentDocument = previousDocument;
      currentPropagationBehavior = previousPropagationBehavior;
    }
  }
}
function addRootEventTypesForResponderInstance(responderInstance, rootEventTypes) {
  for (var i = 0; i < rootEventTypes.length; i++) {
    var rootEventType = rootEventTypes[i];
    registerRootEventType(rootEventType, responderInstance);
  }
}

function registerRootEventType(rootEventType, eventResponderInstance) {
  var rootEventResponderInstances = rootEventTypesToEventResponderInstances.get(rootEventType);

  if (rootEventResponderInstances === undefined) {
    rootEventResponderInstances = new Set();
    rootEventTypesToEventResponderInstances.set(rootEventType, rootEventResponderInstances);
  }

  var rootEventTypesSet = eventResponderInstance.rootEventTypes;

  if (rootEventTypesSet === null) {
    rootEventTypesSet = eventResponderInstance.rootEventTypes = new Set();
  }

  if (!!rootEventTypesSet.has(rootEventType)) {
    {
      throw Error("addRootEventTypes() found a duplicate root event type of \"" + rootEventType + "\". This might be because the event type exists in the event responder \"rootEventTypes\" array or because of a previous addRootEventTypes() using this root event type.");
    }
  }

  rootEventTypesSet.add(rootEventType);
  rootEventResponderInstances.add(eventResponderInstance);
}

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";

var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame$1 = null;

{
  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  if (disableJavaScriptURLs) {
    if (!!isJavaScriptProtocol.test(url)) {
      {
        throw Error("React has blocked a javascript: URL as a security precaution." + (ReactDebugCurrentFrame$1.getStackAddendum()));
      }
    }
  } else if ( true && !didWarn && isJavaScriptProtocol.test(url)) {
    didWarn = true;
    warning$1(false, 'A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}
/** Trusted value is a wrapper for "safe" values which can be assigned to DOM execution sinks. */

/**
 * We allow passing objects with toString method as element attributes or in dangerouslySetInnerHTML
 * and we do validations that the value is safe. Once we do validation we want to use the validated
 * value instead of the object (because object.toString may return something else on next call).
 *
 * If application uses Trusted Types we don't stringify trusted values, but preserve them as objects.
 */
var toStringOrTrustedType = toString;

if (enableTrustedTypesIntegration && typeof trustedTypes !== 'undefined') {
  toStringOrTrustedType = function (value) {
    if (typeof value === 'object' && (trustedTypes.isHTML(value) || trustedTypes.isScript(value) || trustedTypes.isScriptURL(value) ||
    /* TrustedURLs are deprecated and will be removed soon: https://github.com/WICG/trusted-types/pull/204 */
    trustedTypes.isURL && trustedTypes.isURL(value))) {
      // Pass Trusted Types through.
      return value;
    }

    return toString(value);
  };
}

/**
 * Set attribute for a node. The attribute value can be either string or
 * Trusted value (if application uses Trusted Types).
 */
function setAttribute(node, attributeName, attributeValue) {
  node.setAttribute(attributeName, attributeValue);
}
/**
 * Set attribute with namespace for a node. The attribute value can be either string or
 * Trusted value (if application uses Trusted Types).
 */

function setAttributeNS(node, attributeNamespace, attributeName, attributeValue) {
  node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if (!disableJavaScriptURLs && propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        setAttribute(node, _attributeName, toStringOrTrustedType(value));
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = toStringOrTrustedType(value);

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      setAttributeNS(node, attributeNamespace, attributeName, attributeValue);
    } else {
      setAttribute(node, attributeName, attributeValue);
    }
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableFlareAPI && props.listeners) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the value attribute, React only assigns a new value
    // whenever the defaultValue React prop has changed. When not present,
    // React does nothing
    if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  } else {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the attribute is directly
    // controllable from the defaultValue React property. It needs to be
    // updated as new props come in.
    if (props.defaultChecked == null) {
      node.removeAttribute('checked');
    } else {
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      if (disableInputAttributeSyncing) {
        var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
        // directly to the React prop. Only assign it if it exists.

        if (value != null) {
          // Always assign on buttons so that it is possible to assign an
          // empty string to clear button text.
          //
          // Otherwise, do not re-assign the value property if is empty. This
          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
          // prematurely marking required inputs as invalid. Equality is compared
          // to the current value in case the browser provided value is not an
          // empty string.
          if (isButton || value !== node.value) {
            node.value = toString(value);
          }
        }
      } else {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    if (disableInputAttributeSyncing) {
      // When not syncing the value attribute, assign the value attribute
      // directly from the defaultValue React property (when present)
      var defaultValue = getToStringValue(props.defaultValue);

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    } else {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the checked property
    // never gets assigned. It must be manually set. We don't want
    // to do this when hydrating so that existing user input isn't
    // modified
    if (!isHydrating) {
      updateChecked(element, props);
    } // Only assign the checked attribute if it is defined. This saves
    // a DOM write when controlling the checked attribute isn't needed
    // (text inputs, submit/reset)


    if (props.hasOwnProperty('defaultChecked')) {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;
          warning$1(false, 'Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];

    if (props[propName] == null) {
      continue;
    }

    var isArray = Array.isArray(props[propName]);

    if (props.multiple && !isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

    var children = props.children;

    if (children != null) {
      {
        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      if (!(defaultValue == null)) {
        {
          throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
        }
      }

      if (Array.isArray(children)) {
        if (!(children.length <= 1)) {
          {
            throw Error("<textarea> can only have at most one child.");
          }
        }

        children = children[0];
      }

      defaultValue = children;
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE$1;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {
    {
      if (enableTrustedTypesIntegration) {
        // TODO: reconsider the text of this warning and when it should show
        // before enabling the feature flag.
        !(typeof trustedTypes === 'undefined') ? warning$1(false, "Using 'dangerouslySetInnerHTML' in an svg element with " + 'Trusted Types enabled in an Internet Explorer will cause ' + 'the trusted value to be converted to string. Assigning string ' + "to 'innerHTML' will throw an error if Trusted Types are enforced. " + "You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' " + 'on the enclosing div instead.') : void 0;
      }
    }

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */

function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner$1.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error("Unable to find node on an unmounted component.");
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error("Unable to find node on an unmounted component.");
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI && node.tag === FundamentalComponent) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

var attemptSynchronousHydration;
function setAttemptSynchronousHydration(fn) {
  attemptSynchronousHydration = fn;
}
var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.

var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.

// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}

var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEvent(topLevelType, document, listeningSet) {
  listenToTopLevel(topLevelType, document, listeningSet);

  if (enableFlareAPI) {
    // Trap events for the responder system.
    var passiveEventKey = unsafeCastDOMTopLevelTypeToString(topLevelType) + '_passive';

    if (!listeningSet.has(passiveEventKey)) {
      trapEventForResponderEventSystem(document, topLevelType, true);
      listeningSet.add(passiveEventKey);
    } // TODO: This listens to all events as active which might have
    // undesirable effects. It's also unnecessary to have both
    // passive and active listeners. Instead, we could start with
    // a passive and upgrade it to an active one if needed.
    // For replaying purposes the active is never needed since we
    // currently don't preventDefault.


    var activeEventKey = unsafeCastDOMTopLevelTypeToString(topLevelType) + '_active';

    if (!listeningSet.has(activeEventKey)) {
      trapEventForResponderEventSystem(document, topLevelType, false);
      listeningSet.add(activeEventKey);
    }
  }
}

function eagerlyTrapReplayableEvents(document) {
  var listeningSet = getListeningSetForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEvent(topLevelType, document, listeningSet);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEvent(topLevelType, document, listeningSet);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);

  if (enableSelectiveHydration) {
    if (queuedDiscreteEvents.length === 1) {
      // If this was the first discrete event, we might be able to
      // synchronously unblock it so that preventDefault still works.
      while (queuedEvent.blockedOn !== null) {
        var _fiber = getInstanceFromNode$1(queuedEvent.blockedOn);

        if (_fiber === null) {
          break;
        }

        attemptSynchronousHydration(_fiber);

        if (queuedEvent.blockedOn === null) {
          // We got unblocked by hydration. Let's try again.
          replayUnblockedEvents(); // If we're reblocked, on an inner boundary, we might need
          // to attempt hydrating that one.

          continue;
        } else {
          // We're still blocked from hydation, we have to give up
          // and replay later.
          break;
        }
      }
    }
  }
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function queueExplicitHydrationTarget(target) {
  if (enableSelectiveHydration) {
    var priority = Scheduler.unstable_getCurrentPriorityLevel();
    var queuedTarget = {
      blockedOn: null,
      target: target,
      priority: priority
    };
    var i = 0;

    for (; i < queuedExplicitHydrationTargets.length; i++) {
      if (priority <= queuedExplicitHydrationTargets[i].priority) {
        break;
      }
    }

    queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

    if (i === 0) {
      attemptExplicitHydrationTarget(queuedTarget);
    }
  }
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}
function addEventCaptureListenerWithPassiveFlag(element, eventType, listener, passive) {
  element.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/* eslint valid-typeof: 0 */
var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error("Trying to release an event instance into a pool of a different type.");
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var eventTuples = [// Discrete events
[TOP_BLUR, 'blur', DiscreteEvent], [TOP_CANCEL, 'cancel', DiscreteEvent], [TOP_CLICK, 'click', DiscreteEvent], [TOP_CLOSE, 'close', DiscreteEvent], [TOP_CONTEXT_MENU, 'contextMenu', DiscreteEvent], [TOP_COPY, 'copy', DiscreteEvent], [TOP_CUT, 'cut', DiscreteEvent], [TOP_AUX_CLICK, 'auxClick', DiscreteEvent], [TOP_DOUBLE_CLICK, 'doubleClick', DiscreteEvent], [TOP_DRAG_END, 'dragEnd', DiscreteEvent], [TOP_DRAG_START, 'dragStart', DiscreteEvent], [TOP_DROP, 'drop', DiscreteEvent], [TOP_FOCUS, 'focus', DiscreteEvent], [TOP_INPUT, 'input', DiscreteEvent], [TOP_INVALID, 'invalid', DiscreteEvent], [TOP_KEY_DOWN, 'keyDown', DiscreteEvent], [TOP_KEY_PRESS, 'keyPress', DiscreteEvent], [TOP_KEY_UP, 'keyUp', DiscreteEvent], [TOP_MOUSE_DOWN, 'mouseDown', DiscreteEvent], [TOP_MOUSE_UP, 'mouseUp', DiscreteEvent], [TOP_PASTE, 'paste', DiscreteEvent], [TOP_PAUSE, 'pause', DiscreteEvent], [TOP_PLAY, 'play', DiscreteEvent], [TOP_POINTER_CANCEL, 'pointerCancel', DiscreteEvent], [TOP_POINTER_DOWN, 'pointerDown', DiscreteEvent], [TOP_POINTER_UP, 'pointerUp', DiscreteEvent], [TOP_RATE_CHANGE, 'rateChange', DiscreteEvent], [TOP_RESET, 'reset', DiscreteEvent], [TOP_SEEKED, 'seeked', DiscreteEvent], [TOP_SUBMIT, 'submit', DiscreteEvent], [TOP_TOUCH_CANCEL, 'touchCancel', DiscreteEvent], [TOP_TOUCH_END, 'touchEnd', DiscreteEvent], [TOP_TOUCH_START, 'touchStart', DiscreteEvent], [TOP_VOLUME_CHANGE, 'volumeChange', DiscreteEvent], // User-blocking events
[TOP_DRAG, 'drag', UserBlockingEvent], [TOP_DRAG_ENTER, 'dragEnter', UserBlockingEvent], [TOP_DRAG_EXIT, 'dragExit', UserBlockingEvent], [TOP_DRAG_LEAVE, 'dragLeave', UserBlockingEvent], [TOP_DRAG_OVER, 'dragOver', UserBlockingEvent], [TOP_MOUSE_MOVE, 'mouseMove', UserBlockingEvent], [TOP_MOUSE_OUT, 'mouseOut', UserBlockingEvent], [TOP_MOUSE_OVER, 'mouseOver', UserBlockingEvent], [TOP_POINTER_MOVE, 'pointerMove', UserBlockingEvent], [TOP_POINTER_OUT, 'pointerOut', UserBlockingEvent], [TOP_POINTER_OVER, 'pointerOver', UserBlockingEvent], [TOP_SCROLL, 'scroll', UserBlockingEvent], [TOP_TOGGLE, 'toggle', UserBlockingEvent], [TOP_TOUCH_MOVE, 'touchMove', UserBlockingEvent], [TOP_WHEEL, 'wheel', UserBlockingEvent], // Continuous events
[TOP_ABORT, 'abort', ContinuousEvent], [TOP_ANIMATION_END, 'animationEnd', ContinuousEvent], [TOP_ANIMATION_ITERATION, 'animationIteration', ContinuousEvent], [TOP_ANIMATION_START, 'animationStart', ContinuousEvent], [TOP_CAN_PLAY, 'canPlay', ContinuousEvent], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough', ContinuousEvent], [TOP_DURATION_CHANGE, 'durationChange', ContinuousEvent], [TOP_EMPTIED, 'emptied', ContinuousEvent], [TOP_ENCRYPTED, 'encrypted', ContinuousEvent], [TOP_ENDED, 'ended', ContinuousEvent], [TOP_ERROR, 'error', ContinuousEvent], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', ContinuousEvent], [TOP_LOAD, 'load', ContinuousEvent], [TOP_LOADED_DATA, 'loadedData', ContinuousEvent], [TOP_LOADED_METADATA, 'loadedMetadata', ContinuousEvent], [TOP_LOAD_START, 'loadStart', ContinuousEvent], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', ContinuousEvent], [TOP_PLAYING, 'playing', ContinuousEvent], [TOP_PROGRESS, 'progress', ContinuousEvent], [TOP_SEEKING, 'seeking', ContinuousEvent], [TOP_STALLED, 'stalled', ContinuousEvent], [TOP_SUSPEND, 'suspend', ContinuousEvent], [TOP_TIME_UPDATE, 'timeUpdate', ContinuousEvent], [TOP_TRANSITION_END, 'transitionEnd', ContinuousEvent], [TOP_WAITING, 'waiting', ContinuousEvent]];
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};

for (var i = 0; i < eventTuples.length; i++) {
  var eventTuple = eventTuples[i];
  var topEvent = eventTuple[0];
  var event = eventTuple[1];
  var eventPriority = eventTuple[2];
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var config = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    eventPriority: eventPriority
  };
  eventTypes[event] = config;
  topLevelEventsToDispatchConfig[topEvent] = config;
} // Only used in DEV for exhaustiveness validation.


var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  eventTypes: eventTypes,
  getEventPriority: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined ? config.eventPriority : ContinuousEvent;
  },
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (enableFlareAPI && canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
// CommonJS interop named imports.
var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority;
var runWithPriority$1 = Scheduler.unstable_runWithPriority;
var getEventPriority = SimpleEventPlugin.getEventPriority;
var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, bookKeeping.eventSystemFlags);
  }
} // TODO: can we stop exporting these?


var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}
function trapEventForResponderEventSystem(element, topLevelType, passive) {
  if (enableFlareAPI) {
    var rawEventName = getRawEventName(topLevelType);
    var eventFlags = RESPONDER_EVENT_SYSTEM; // If passive option is not supported, then the event will be
    // active and not passive, but we flag it as using not being
    // supported too. This way the responder event plugins know,
    // and can provide polyfills if needed.

    if (passive) {
      if (passiveBrowserEventsSupported) {
        eventFlags |= IS_PASSIVE;
      } else {
        eventFlags |= IS_ACTIVE;
        eventFlags |= PASSIVE_NOT_SUPPORTED;
        passive = false;
      }
    } else {
      eventFlags |= IS_ACTIVE;
    } // Check if interactive and wrap in discreteUpdates


    var listener = dispatchEvent.bind(null, topLevelType, eventFlags);

    if (passiveBrowserEventsSupported) {
      addEventCaptureListenerWithPassiveFlag(element, rawEventName, listener, passive);
    } else {
      addEventCaptureListener(element, rawEventName, listener);
    }
  }
}

function trapEventForPluginEventSystem(element, topLevelType, capture) {
  var listener;

  switch (getEventPriority(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(element, rawEventName, listener);
  } else {
    addEventBubbleListener(element, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, nativeEvent) {
  runWithPriority$1(UserBlockingPriority$1, dispatchEvent.bind(null, topLevelType, eventSystemFlags, nativeEvent));
}

function dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

function dispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  if (enableFlareAPI) {
    if (eventSystemFlags & PLUGIN_EVENT_SYSTEM) {
      dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
    }

    if (eventSystemFlags & RESPONDER_EVENT_SYSTEM) {
      // React Flare event system
      dispatchEventForResponderEventSystem(topLevelType, null, nativeEvent, getEventTarget(nativeEvent), eventSystemFlags);
    }
  } else {
    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  if (enableFlareAPI) {
    if (eventSystemFlags & PLUGIN_EVENT_SYSTEM) {
      dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
    }

    if (eventSystemFlags & RESPONDER_EVENT_SYSTEM) {
      // React Flare event system
      dispatchEventForResponderEventSystem(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    }
  } else {
    dispatchEventForPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
var elementListeningSets = new PossiblyWeakMap();
function getListeningSetForElement(element) {
  var listeningSet = elementListeningSets.get(element);

  if (listeningSet === undefined) {
    listeningSet = new Set();
    elementListeningSets.set(element, listeningSet);
  }

  return listeningSet;
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function listenTo(registrationName, mountAt) {
  var listeningSet = getListeningSetForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    listenToTopLevel(dependency, mountAt, listeningSet);
  }
}
function listenToTopLevel(topLevelType, mountAt, listeningSet) {
  if (!listeningSet.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listeningSet.add(TOP_BLUR);
        listeningSet.add(TOP_FOCUS);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listeningSet.add(topLevelType);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listeningSet = getListeningSetForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listeningSet.has(dependency)) {
      return false;
    }
  }

  return true;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  if (!warnAboutShorthandPropertyCollision) {
    return;
  }

  if (!nextStyles) {
    return;
  }

  var expandedUpdates = expandShorthandMap(styleUpdates);
  var expandedStyles = expandShorthandMap(nextStyles);
  var warnedAbout = {};

  for (var key in expandedUpdates) {
    var originalKey = expandedUpdates[key];
    var correctOriginalKey = expandedStyles[key];

    if (correctOriginalKey && originalKey !== correctOriginalKey) {
      var warningKey = originalKey + ',' + correctOriginalKey;

      if (warnedAbout[warningKey]) {
        continue;
      }

      warnedAbout[warningKey] = true;
      warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// or add stack by default to invariants where possible.

var HTML$1 = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + (ReactDebugCurrentFrame$3.getStackAddendum()));
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML)) {
      {
        throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
      }
    }
  }

  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + (ReactDebugCurrentFrame$3.getStackAddendum()));
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.

    if (correctName == null) {
      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
      warnedProperties[name] = true;
      return true;
    } // aria-* attributes should be lowercase; suggest the lowercase version.


    if (name !== correctName) {
      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.

    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    } // aria-* attributes should be lowercase; suggest the lowercase version.


    if (name !== standardName) {
      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);

    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  } else if (invalidProps.length > 1) {
    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;

    if (type === 'select' && props.multiple) {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
    } else {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];

  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  } else if (unknownProps.length > 1) {
    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;
var didWarnScriptTags = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE$1 = 'style';
var HTML = '__html';
var LISTENERS = 'listeners';
var HTML_NAMESPACE = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
      // We could have excluded it in the property list instead of
      // adding a special case here, but then it wouldn't be emitted
      // on server rendering (but we *do* want to emit it in SSR).
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE$1) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      {
        if (enableTrustedTypesIntegration && !didWarnScriptTags) {
          warning$1(false, 'Encountered a script tag while rendering React component. ' + 'Scripts inside React components are never executed when rendering ' + 'on the client. Consider using template tag instead ' + '(https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template).');
          didWarnScriptTags = true;
        }
      }

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);

    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE$1) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE$1) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, toStringOrTrustedType(nextHtml));
        }
      } else {// TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
    }

    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }

  return null;
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);

    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if ( true && // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
      } else if (enableFlareAPI && propKey === LISTENERS || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE$1) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState$1(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;

    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}
function listenToEventResponderEventTypes(eventTypes, element) {
  if (enableFlareAPI) {
    // Get the listening Set for this element. We use this to track
    // what events we're listening to.
    var listeningSet = getListeningSetForElement(element); // Go through each target event type of the event responder

    for (var i = 0, length = eventTypes.length; i < length; ++i) {
      var eventType = eventTypes[i];
      var isPassive = !endsWith(eventType, '_active');
      var eventKey = isPassive ? eventType + '_passive' : eventType;
      var targetEventType = isPassive ? eventType : eventType.substring(0, eventType.length - 7);

      if (!listeningSet.has(eventKey)) {
        trapEventForResponderEventSystem(element, targetEventType, isPassive);
        listeningSet.add(eventKey);
      }
    }
  }
} // We can remove this once the event API is stable and out of a flag

if (enableFlareAPI) {
  setListenToResponderEventTypes(listenToEventResponderEventTypes);
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };
}

// can re-export everything from this module.

function shim() {
  {
    {
      throw Error("The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.");
    }
  }
} // Persistence (when unsupported)


var supportsPersistence = false;
var cloneInstance = shim;
var cloneFundamentalInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;
var cloneHiddenInstance = shim;
var cloneHiddenTextInstance = shim;

var SUPPRESS_HYDRATION_WARNING;

{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }

  return namespace;
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }

  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
var isPrimaryRenderer = true;
var warnsIfNotActing = true; // This initialization code may run even on server environments
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
//     Mutation
// -------------------

var supportsMutation = true;
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}
function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);

    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
      var data = nextNode.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

          retryIfBlockedOn(suspenseInstance);
          return;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
        depth++;
      }
    }

    node = nextNode;
  } while (node); // TODO: Warn, we didn't find the end comment boundary.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(suspenseInstance);
}
function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
  if (container.nodeType === COMMENT_NODE) {
    clearSuspenseBoundary(container.parentNode, suspenseInstance);
  } else if (container.nodeType === ELEMENT_NODE) {
    clearSuspenseBoundary(container, suspenseInstance);
  } else {} // Document nodes should never contain suspense boundaries.
  // Retry if any event replaying was blocked on this.


  retryIfBlockedOn(container);
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
//     Hydration
// -------------------

var supportsHydration = true;
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function canHydrateSuspenseInstance(instance) {
  if (instance.nodeType !== COMMENT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a suspense node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}
function registerSuspenseInstanceRetry(instance, callback) {
  instance._reactRetry = callback;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }

    if (enableSuspenseServerRenderer) {
      if (nodeType === COMMENT_NODE) {
        var nodeData = node.data;

        if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
          break;
        }
      }
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, suspenseInstance);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}

function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {// TODO: warnForInsertedHydratedSuspense(parentInstance);
  }
}
function mountResponderInstance(responder, responderInstance, responderProps, responderState, instance) {
  // Listen to events
  var doc = instance.ownerDocument;
  var _ref = responder,
      rootEventTypes = _ref.rootEventTypes,
      targetEventTypes = _ref.targetEventTypes;

  if (targetEventTypes !== null) {
    listenToEventResponderEventTypes(targetEventTypes, doc);
  }

  if (rootEventTypes !== null) {
    addRootEventTypesForResponderInstance(responderInstance, rootEventTypes);
    listenToEventResponderEventTypes(rootEventTypes, doc);
  }

  mountEventResponder(responder, responderInstance, responderProps, responderState);
  return responderInstance;
}
function unmountResponderInstance(responderInstance) {
  if (enableFlareAPI) {
    // TODO stop listening to targetEventTypes
    unmountEventResponder(responderInstance);
  }
}
function getFundamentalComponentInstance(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var currentFiber = fundamentalInstance.currentFiber,
        impl = fundamentalInstance.impl,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var instance = impl.getInstance(null, props, state);
    precacheFiberNode(currentFiber, instance);
    return instance;
  } // Because of the flag above, this gets around the Flow error;


  return null;
}
function mountFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onMount = impl.onMount;

    if (onMount !== undefined) {
      onMount(null, instance, props, state);
    }
  }
}
function shouldUpdateFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        prevProps = fundamentalInstance.prevProps,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var shouldUpdate = impl.shouldUpdate;

    if (shouldUpdate !== undefined) {
      return shouldUpdate(null, prevProps, props, state);
    }
  }

  return true;
}
function updateFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        prevProps = fundamentalInstance.prevProps,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onUpdate = impl.onUpdate;

    if (onUpdate !== undefined) {
      onUpdate(null, instance, prevProps, props, state);
    }
  }
}
function unmountFundamentalComponent(fundamentalInstance) {
  if (enableFundamentalAPI) {
    var impl = fundamentalInstance.impl,
        instance = fundamentalInstance.instance,
        props = fundamentalInstance.props,
        state = fundamentalInstance.state;
    var onUnmount = impl.onUnmount;

    if (onUnmount !== undefined) {
      onUnmount(null, instance, props, state);
    }
  }
}
function getInstanceFromNode$2(node) {
  return getClosestInstanceFromNode(node) || null;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you wiill not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error("getNodeFromInstance: Invalid argument.");
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes$1 = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes$1.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes$1.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes$1.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes$1.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes$1.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes$1.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes$1.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes$1.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes$1,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$2 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$2.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  if (!disableInputAttributeSyncing) {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$2,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var eventTypes$3 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
}; // We track the lastNativeEvent to ensure that when we encounter
// cases where we process the same nativeEvent multiple times,
// which can happen when have multiple ancestors, that we don't
// duplicate enter

var lastNativeEvent;
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$3,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$3.mouseLeave;
      enterEventType = eventTypes$3.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$3.pointerLeave;
      enterEventType = eventTypes$3.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to);

    if (nativeEvent === lastNativeEvent) {
      lastNativeEvent = null;
      return [leave];
    }

    lastNativeEvent = nativeEvent;
    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var is$1 = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (is$1(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$4 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$4.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$4,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injection.injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}


function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  if (disableLegacyContext) {
    return false;
  } else {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  if (disableLegacyContext) {
    return false;
  } else {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  if (disableLegacyContext) {
    return;
  } else {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  if (disableLegacyContext) {
    return parentContext;
  } else {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;
          warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;

    {
      setCurrentPhase('getChildContext');
    }

    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    {
      setCurrentPhase(null);
    }

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  if (disableLegacyContext) {
    return false;
  } else {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  if (disableLegacyContext) {
    return;
  } else {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  if (disableLegacyContext) {
    return emptyContextObject;
  } else {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }
}

var LegacyRoot = 0;
var BatchedRoot = 1;
var ConcurrentRoot = 2;

// Intentionally not named imports because Rollup would use dynamic dispatch for
// CommonJS interop named imports.
var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
var Scheduler_now = Scheduler.unstable_now;
var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$2 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$2;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$2:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error("Unknown priority level.");
        }
      }

  }
}

function runWithPriority$2(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$2(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BatchedMode and ConcurrentMode by reading from the root
// tag instead

var BatchedMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is a moving priority. It is slightly higher than Idle
// and is used to increase priority of hover targets. It is increasing with
// each usage so that last always wins.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function computeContinuousHydrationExpiration(currentTime) {
  // Each time we ask for a new one of these we increase the priority.
  // This ensures that the last one always wins since we can't deprioritize
  // once we've scheduled work already.
  return ContinuousHydration++;
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$2;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
      warningWithoutStack$1(false, 'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      warningWithoutStack$1(false, 'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      lowPriorityWarningWithoutStack$1(false, 'componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, strictRootComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;

      default:
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;

    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (is$1(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedFragment) {
      // If a dehydrated suspense bounudary is in this subtree, we don't know
      // if it will have any context consumers in it. The best we can do is
      // mark it as having updates.
      var parentSuspense = fiber.return;

      if (!(parentSuspense !== null)) {
        {
          throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        }
      }

      if (parentSuspense.expirationTime < renderExpirationTime) {
        parentSuspense.expirationTime = renderExpirationTime;
      }

      var _alternate = parentSuspense.alternate;

      if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
        _alternate.expirationTime = renderExpirationTime;
      } // This is intentionally passing this fiber as the parent
      // because we want to schedule this fiber as having work
      // on its children. We'll use the childExpirationTime on
      // this fiber to indicate that a context has changed.


      scheduleWorkOnParentPath(parentSuspense, renderExpirationTime);
      nextFiber = fiber.sibling;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
  }

  if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
  } else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which can be
// mutated and processed asynchronously before it is committed — a form of
// double buffering. If a work-in-progress render is discarded before finishing,
// we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;


{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;

  
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,
    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null,
    nextEffect: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1;
  var queue2;

  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;

    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;

    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {// Both owners have an update queue.
      }
    }
  }

  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

      queue2.lastUpdate = update;
    }
  }

  {
    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;

  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  } // Append the update to the end of the list.


  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }

  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;
  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  } // These values may change as we process the queue.


  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

  var update = queue.firstUpdate;
  var resultState = newBaseState;

  while (update !== null) {
    var updateExpirationTime = update.expirationTime;

    if (updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update; // Since this is the first update that was skipped, the current result
        // is the new base state.

        newBaseState = resultState;
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority.
      // Mark the event time of this update as relevant to this render pass.
      // TODO: This should ideally use the true event time of this update rather than
      // its priority which is a derived and not reverseable value.
      // TODO: We should skip this update if it was already committed but currently
      // we have no way of detecting the difference between a committed and suspended
      // update here.
      markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process it and compute a new result.

      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var callback = update.callback;

      if (callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    } // Continue to the next update.


    update = update.next;
  } // Separately, iterate though the list of captured updates.


  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;

  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;

    if (_updateExpirationTime < renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
        // the new base state.

        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      } // Since this update will remain in the list, update the remaining
      // expiration time.


      if (newExpirationTime < _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;

      if (_callback !== null) {
        workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

        update.nextEffect = null;

        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }

    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }

  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }

  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.

  markUnprocessedUpdateTime(newExpirationTime);
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    } // Clear the list of captured updates.


    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  } // Commit the effects


  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;
  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var callback = effect.callback;

    if (callback !== null) {
      effect.callback = null;
      callCallback(callback, instance);
    }

    effect = effect.nextEffect;
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback$1;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextType = !instance.contextType;
    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;

    if (disableLegacyContext) {
      if (ctor.childContextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy childContextTypes API which is no longer supported. ' + 'Use React.createContext() instead.', name);
      }

      if (ctor.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with static contextType instead.', name);
      }
    } else {
      var noInstanceContextTypes = !instance.contextTypes;
      !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);
        warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else if (!disableLegacyContext) {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else if (disableLegacyContext) {
    instance.context = emptyContextObject;
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    updateQueue = workInProgress.updateQueue;

    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else if (!disableLegacyContext) {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;

  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          if (warnAboutStringRefs) {
            warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
          } else {
            warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error("Function components cannot have refs. Did you mean to use React.forwardRef()?");
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
        }
      }

      if (!element._owner) {
        {
          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum);
      }
    }
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current$$1 = newFiber.alternate;

    if (current$$1 !== null) {
      var oldIndex = current$$1.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && (current$$1.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
    isCompatibleFamilyForHotReloading(current$$1, element)))) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;

      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }

      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;

        default:
          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error("An iterable object provided no iterator.");
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
        isCompatibleFamilyForHotReloading(child, element))) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;

          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }

          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error((Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current$$1, workInProgress) {
  if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
    {
      throw Error("Resuming work not yet implemented.");
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var emptyObject = {};
var isArray$2 = Array.isArray;
function createResponderInstance(responder, responderProps, responderState, fiber) {
  return {
    fiber: fiber,
    props: responderProps,
    responder: responder,
    rootEventTypes: null,
    state: responderState
  };
}

function mountEventResponder$1(responder, responderProps, fiber, respondersMap, rootContainerInstance) {
  var responderState = emptyObject;
  var getInitialState = responder.getInitialState;

  if (getInitialState !== null) {
    responderState = getInitialState(responderProps);
  }

  var responderInstance = createResponderInstance(responder, responderProps, responderState, fiber);

  if (!rootContainerInstance) {
    var node = fiber;

    while (node !== null) {
      var tag = node.tag;

      if (tag === HostComponent) {
        rootContainerInstance = node.stateNode;
        break;
      } else if (tag === HostRoot) {
        rootContainerInstance = node.stateNode.containerInfo;
        break;
      }

      node = node.return;
    }
  }

  mountResponderInstance(responder, responderInstance, responderProps, responderState, rootContainerInstance);
  respondersMap.set(responder, responderInstance);
}

function updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance) {
  var responder;
  var props;

  if (listener) {
    responder = listener.responder;
    props = listener.props;
  }

  if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
    {
      throw Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponder().");
    }
  }

  var listenerProps = props;

  if (visistedResponders.has(responder)) {
    // show warning
    {
      warning$1(false, 'Duplicate event responder "%s" found in event listeners. ' + 'Event listeners passed to elements cannot use the same event responder more than once.', responder.displayName);
    }

    return;
  }

  visistedResponders.add(responder);
  var responderInstance = respondersMap.get(responder);

  if (responderInstance === undefined) {
    // Mount (happens in either complete or commit phase)
    mountEventResponder$1(responder, listenerProps, fiber, respondersMap, rootContainerInstance);
  } else {
    // Update (happens during commit phase only)
    responderInstance.props = listenerProps;
    responderInstance.fiber = fiber;
  }
}

function updateEventListeners(listeners, fiber, rootContainerInstance) {
  var visistedResponders = new Set();
  var dependencies = fiber.dependencies;

  if (listeners != null) {
    if (dependencies === null) {
      dependencies = fiber.dependencies = {
        expirationTime: NoWork,
        firstContext: null,
        responders: new Map()
      };
    }

    var respondersMap = dependencies.responders;

    if (respondersMap === null) {
      respondersMap = new Map();
    }

    if (isArray$2(listeners)) {
      for (var i = 0, length = listeners.length; i < length; i++) {
        var listener = listeners[i];
        updateEventListener(listener, fiber, visistedResponders, respondersMap, rootContainerInstance);
      }
    } else {
      updateEventListener(listeners, fiber, visistedResponders, respondersMap, rootContainerInstance);
    }
  }

  if (dependencies !== null) {
    var _respondersMap = dependencies.responders;

    if (_respondersMap !== null) {
      // Unmount
      var mountedResponders = Array.from(_respondersMap.keys());

      for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
        var mountedResponder = mountedResponders[_i];

        if (!visistedResponders.has(mountedResponder)) {
          var responderInstance = _respondersMap.get(mountedResponder);

          unmountResponderInstance(responderInstance);

          _respondersMap.delete(mountedResponder);
        }
      }
    }
  }
}
function createResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var NoEffect$1 =
/*             */
0;
var UnmountSnapshot =
/*      */
2;
var UnmountMutation =
/*      */
4;
var MountMutation =
/*        */
8;
var UnmountLayout =
/*        */
16;
var MountLayout =
/*          */
32;
var MountPassive =
/*         */
64;
var UnmountPassive =
/*       */
128;

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime$1 = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var nextCurrentHook = null;
var firstWorkInProgressHook = null;
var workInProgressHook = null;
var nextWorkInProgressHook = null;
var remainingExpirationTime = NoWork;
var componentUpdateQueue = null;
var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
// end of the current pass. We can't store these updates on the normal queue,
// because if the work is aborted, they should be discarded. Because this is
// a relatively rare case, we also don't want to add an additional field to
// either the hook or queue object types. So we store them in a lazily create
// map of queue -> render-phase updates, which are discarded once the component
// completes without re-rendering.
// Whether an update was scheduled during the currently executing render pass.

var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

var renderPhaseUpdates = null; // Counter to prevent infinite loops.

var numberOfReRenders = 0;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      warning$1(false, '%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (is$1(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
  renderExpirationTime$1 = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;
  nextCurrentHook = current !== null ? current.memoizedState : null;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  } // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // remainingExpirationTime = NoWork;
  // componentUpdateQueue = null;
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;
  // sideEffectTag = 0;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because nextCurrentHook === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so nextCurrentHook would be null during updates and mounts.


  {
    if (nextCurrentHook !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, refOrContext);

  if (didScheduleRenderPhaseUpdate) {
    do {
      didScheduleRenderPhaseUpdate = false;
      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      nextCurrentHook = current !== null ? current.memoizedState : null;
      nextWorkInProgressHook = firstWorkInProgressHook;
      currentHook = null;
      workInProgressHook = null;
      componentUpdateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
      children = Component(props, refOrContext);
    } while (didScheduleRenderPhaseUpdate);

    renderPhaseUpdates = null;
    numberOfReRenders = 0;
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
  var renderedWork = currentlyRenderingFiber$1;
  renderedWork.memoizedState = firstWorkInProgressHook;
  renderedWork.expirationTime = remainingExpirationTime;
  renderedWork.updateQueue = componentUpdateQueue;
  renderedWork.effectTag |= sideEffectTag;

  {
    renderedWork._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0; // These were reset above
  // didScheduleRenderPhaseUpdate = false;
  // renderPhaseUpdates = null;
  // numberOfReRenders = 0;

  if (!!didRenderTooFewHooks) {
    {
      throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooks() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
  // It's also called inside mountIndeterminateComponent if we determine the
  // component is a module-style component.

  renderExpirationTime$1 = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  nextCurrentHook = null;
  firstWorkInProgressHook = null;
  workInProgressHook = null;
  nextWorkInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  remainingExpirationTime = NoWork;
  componentUpdateQueue = null;
  sideEffectTag = 0;
  didScheduleRenderPhaseUpdate = false;
  renderPhaseUpdates = null;
  numberOfReRenders = 0;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    queue: null,
    baseUpdate: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    firstWorkInProgressHook = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
    nextCurrentHook = currentHook !== null ? currentHook.next : null;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error("Rendered more hooks than during the previous render.");
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      queue: currentHook.queue,
      baseUpdate: currentHook.baseUpdate,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      workInProgressHook = firstWorkInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }

    nextCurrentHook = currentHook.next;
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
    }
  }

  queue.lastRenderedReducer = reducer;

  if (numberOfReRenders > 0) {
    // This is a re-render. Apply the new render phase updates to the previous
    // work-in-progress hook.
    var _dispatch = queue.dispatch;

    if (renderPhaseUpdates !== null) {
      // Render phase updates are stored in a map of queue -> linked list
      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

      if (firstRenderPhaseUpdate !== undefined) {
        renderPhaseUpdates.delete(queue);
        var newState = hook.memoizedState;
        var update = firstRenderPhaseUpdate;

        do {
          // Process this render phase update. We don't have to check the
          // priority because it will always be the same as the current
          // render's.
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== null); // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is$1(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
        // the base state unless the queue is empty.
        // TODO: Not sure if this is the desired semantics, but it's what we
        // do for gDSFP. I can't remember why.

        if (hook.baseUpdate === queue.last) {
          hook.baseState = newState;
        }

        queue.lastRenderedState = newState;
        return [newState, _dispatch];
      }
    }

    return [hook.memoizedState, _dispatch];
  } // The last update in the entire queue


  var last = queue.last; // The last update that is part of the base state.

  var baseUpdate = hook.baseUpdate;
  var baseState = hook.baseState; // Find the first unprocessed update.

  var first;

  if (baseUpdate !== null) {
    if (last !== null) {
      // For the first update, the queue is a circular linked list where
      // `queue.last.next = queue.first`. Once the first update commits, and
      // the `baseUpdate` is no longer empty, we can unravel the list.
      last.next = null;
    }

    first = baseUpdate.next;
  } else {
    first = last !== null ? last.next : null;
  }

  if (first !== null) {
    var _newState = baseState;
    var newBaseState = null;
    var newBaseUpdate = null;
    var prevUpdate = baseUpdate;
    var _update = first;
    var didSkip = false;

    do {
      var updateExpirationTime = _update.expirationTime;

      if (updateExpirationTime < renderExpirationTime$1) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        if (!didSkip) {
          didSkip = true;
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > remainingExpirationTime) {
          remainingExpirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(remainingExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.
        markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig); // Process this update.

        if (_update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          _newState = _update.eagerState;
        } else {
          var _action = _update.action;
          _newState = reducer(_newState, _action);
        }
      }

      prevUpdate = _update;
      _update = _update.next;
    } while (_update !== null && _update !== first);

    if (!didSkip) {
      newBaseUpdate = prevUpdate;
      newBaseState = _newState;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!is$1(_newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = _newState;
    hook.baseUpdate = newBaseUpdate;
    hook.baseState = newBaseState;
    queue.lastRenderedState = _newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
  currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer, initialState);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(NoEffect$1, create, destroy, nextDeps);
        return;
      }
    }
  }

  sideEffectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(value),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [value, config]);
  return prevValue;
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var startTransition = mountCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(false),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var startTransition = updateCallback(function (callback) {
    setPending(true);
    Scheduler.unstable_next(function () {
      var previousConfig = ReactCurrentBatchConfig$1.suspense;
      ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.suspense = previousConfig;
      }
    });
  }, [config, isPending]);
  return [startTransition, isPending];
}

function dispatchAction(fiber, queue, action) {
  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
    {
      throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
    }
  }

  {
    !(typeof arguments[3] !== 'function') ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
  }

  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime$1,
      suspenseConfig: null,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      update.priority = getCurrentPriorityLevel();
    }

    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }

    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }

      lastRenderPhaseUpdate.next = update;
    }
  } else {
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var _update2 = {
      expirationTime: expirationTime,
      suspenseConfig: suspenseConfig,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    {
      _update2.priority = getCurrentPriorityLevel();
    } // Append the update to the end of the list.


    var last = queue.last;

    if (last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = last.next;

      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }

      last.next = _update2;
    }

    queue.last = _update2;

    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          _update2.eagerReducer = lastRenderedReducer;
          _update2.eagerState = eagerState;

          if (is$1(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

{
  var warnInvalidContextAccess = function () {
    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue(value, formatterFn);
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
}

// CommonJS interop named imports.

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }

  commitTime = now$1();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function warnIfHydrating() {
  {
    !!isHydrating ? warning$1(false, 'We should not be hydrating here. This is a bug in React. Please file a bug.') : void 0;
  }
}

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance) {
  if (!supportsHydration) {
    return false;
  }

  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
  popToNextHostParent(fiber);
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;

            case SuspenseComponent:
              
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {
        if (enableSuspenseServerRenderer) {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              retryTime: Never
            };
            fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
            // This simplifies the code for getHostSibling and deleting nodes,
            // since it doesn't have to consider all Suspense boundaries and
            // check if they're dehydrated ones or not.

            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            return true;
          }
        }

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function prepareToHydrateHostSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  hydrateSuspenseInstance(suspenseInstance, fiber);
}

function skipPastDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutMaxDuration;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;
var didWarnAboutDefaultPropsOnFunctionComponent;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutMaxDuration = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
  didWarnAboutDefaultPropsOnFunctionComponent = {};
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their their
  // identity matches.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current$$1 === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current$$1, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current$$1.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current$$1 !== null) {
    var prevProps = current$$1.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload:
    workInProgress.type === current$$1.type)) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;

  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setCurrentPhase(null);
  }

  if (current$$1 !== null && !didReceiveUpdate) {
    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current$$1 !== null) {
      // An class component without an instance only mounts if it suspended
      // inside a non- concurrent tree, in an inconsistent state. We want to
      // tree it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current$$1.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current$$1 === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$3.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();

      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }

      setCurrentPhase(null);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(updateQueue !== null)) {
    {
      throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // An lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        break;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        break;
      }

    default:
      {
        var hint = '';

        {
          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = ' Did you wrap a component in React.lazy() more than once?';
          }
        } // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.


        {
          {
            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
          }
        }
      }
  }

  return child;
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  if (!disableLegacyContext) {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$3.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        warningWithoutStack$1(false, 'The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);
        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    resetHooks(); // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {
      if (disableLegacyContext && Component.contextTypes) {
        warningWithoutStack$1(false, '%s uses the legacy contextTypes API which is no longer supported. ' + 'Use React.createContext() with React.useContext() instead.', getComponentName(Component) || 'Unknown');
      }

      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  if (Component) {
    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
  }

  if (workInProgress.ref !== null) {
    var info = '';
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

    if (ownerName) {
      info += '\n\nCheck the render method of `' + ownerName + '`.';
    }

    var warningKey = ownerName || workInProgress._debugID || '';
    var debugSource = workInProgress._debugSource;

    if (debugSource) {
      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
    }

    if (!didWarnAboutFunctionRefs[warningKey]) {
      didWarnAboutFunctionRefs[warningKey] = true;
      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
    }
  }

  if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== undefined) {
    var componentName = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
      warningWithoutStack$1(false, '%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);
      didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
    }
  }

  if (typeof Component.getDerivedStateFromProps === 'function') {
    var _componentName2 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName2);
      didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
    }
  }

  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
    var _componentName3 = getComponentName(Component) || 'Unknown';

    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName3);
      didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
}

function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current$$1 === null || current$$1.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext);

  {
    if ('maxDuration' in nextProps) {
      if (!didWarnAboutMaxDuration) {
        didWarnAboutMaxDuration = true;
        warning$1(false, 'maxDuration has been removed from React. ' + 'Remove the maxDuration prop.');
      }
    }
  } // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.


  if (current$$1 === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

      if (enableSuspenseServerRenderer) {
        var suspenseState = workInProgress.memoizedState;

        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;

          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress, dehydrated, renderExpirationTime);
          }
        }
      }
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BatchedMode) === NoMode) {
        // Outside of batched mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current$$1.memoizedState;

    if (prevState !== null) {
      if (enableSuspenseServerRenderer) {
        var _dehydrated = prevState.dehydrated;

        if (_dehydrated !== null) {
          if (!didSuspend) {
            return updateDehydratedSuspenseComponent(current$$1, workInProgress, _dehydrated, prevState, renderExpirationTime);
          } else if (workInProgress.memoizedState !== null) {
            // Something suspended and we should still be in dehydrated mode.
            // Leave the existing child in place.
            workInProgress.child = current$$1.child; // The dehydrated completion pass expects this flag to be there
            // but the normal suspense pass doesn't.

            workInProgress.effectTag |= DidCapture;
            return null;
          } else {
            // Suspended but we should no longer be in dehydrated mode.
            // Therefore we now have to render the fallback. Wrap the children
            // in a fragment fiber to keep them separate from the fallback
            // children.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment.return = workInProgress; // This is always null since we never want the previous child
            // that we're not going to hydrate.

            _primaryChildFragment.child = null;

            if ((workInProgress.mode & BatchedMode) === NoMode) {
              // Outside of batched mode, we commit the effects from the
              // partially completed, timed-out tree, too.
              var _progressedChild = _primaryChildFragment.child = workInProgress.child;

              while (_progressedChild !== null) {
                _progressedChild.return = _primaryChildFragment;
                _progressedChild = _progressedChild.sibling;
              }
            } else {
              // We will have dropped the effect list which contains the deletion.
              // We need to reconcile to delete the current child.
              reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment = createFiberFromFragment(_nextFallbackChildren, mode, renderExpirationTime, null);

            _fallbackChildFragment.return = workInProgress;
            _primaryChildFragment.sibling = _fallbackChildFragment;
            _fallbackChildFragment.effectTag |= Placement;
            _primaryChildFragment.childExpirationTime = NoWork;
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.child = _primaryChildFragment; // Skip the primary children, and continue working on the
            // fallback children.

            return _fallbackChildFragment;
          }
        }
      } // The current tree already timed out. That means each child set is
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current$$1.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BatchedMode) === NoMode) {
          // Outside of batched mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2, currentFallbackChildFragment.expirationTime);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current$$1.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BatchedMode) === NoMode) {
          // Outside of batched mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out.  Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime) {
  // We're now not suspended nor dehydrated.
  workInProgress.memoizedState = null; // Retry with the full children.

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children; // This will ensure that the children get Placement effects and
  // that the old child gets a Deletion effect.
  // We could also call forceUnmountCurrentAndReconcile.

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderExpirationTime) {
  // During the first pass, we'll bail out and not drill into the children.
  // Instead, we'll leave the content in place and try to hydrate it later.
  if ((workInProgress.mode & BatchedMode) === NoMode) {
    {
      warning$1(false, 'Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOM.createSyncRoot(container, { hydrate: true })' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
    }

    workInProgress.expirationTime = Sync;
  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This is a client-only boundary. Since we won't get any content from the server
    // for this, we need to schedule that at a higher priority based on when it would
    // have timed out. In theory we could render it in this pass but it would have the
    // wrong priority associated with it and will prevent hydration of parent path.
    // Instead, we'll leave work left on it to render it in a separate commit.
    // TODO This time should be the time at which the server rendered response that is
    // a parent to this boundary was displayed. However, since we currently don't have
    // a protocol to transfer that time, we'll just estimate it by using the current
    // time. This will mean that Suspense timeouts are slightly shifted to later than
    // they should be.
    var serverDisplayTime = requestCurrentTimeForUpdate(); // Schedule a normal pri update to render this content.

    var newExpirationTime = computeAsyncExpiration(serverDisplayTime);

    if (enableSchedulerTracing) {
      markSpawnedWork(newExpirationTime);
    }

    workInProgress.expirationTime = newExpirationTime;
  } else {
    // We'll continue hydrating the rest at offscreen priority since we'll already
    // be showing the right content coming from the server, it is no rush.
    workInProgress.expirationTime = Never;

    if (enableSchedulerTracing) {
      markSpawnedWork(Never);
    }
  }

  return null;
}

function updateDehydratedSuspenseComponent(current$$1, workInProgress, suspenseInstance, suspenseState, renderExpirationTime) {
  // We should never be hydrating at this point because it is the first pass,
  // but after we've already committed once.
  warnIfHydrating();

  if ((workInProgress.mode & BatchedMode) === NoMode) {
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  }

  if (isSuspenseInstanceFallback(suspenseInstance)) {
    // This boundary is in a permanent fallback state. In this case, we'll never
    // get an update and we'll never be able to hydrate the final content. Let's just try the
    // client side render instead.
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } // We use childExpirationTime to indicate that a child might depend on context, so if
  // any context has changed, we need to treat is as if the input might have changed.


  var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

  if (didReceiveUpdate || hasContextChanged$$1) {
    // This boundary has changed since the first render. This means that we are now unable to
    // hydrate it. We might still be able to hydrate it using an earlier expiration time, if
    // we are rendering at lower expiration than sync.
    if (renderExpirationTime < Sync) {
      if (suspenseState.retryTime <= renderExpirationTime) {
        // This render is even higher pri than we've seen before, let's try again
        // at even higher pri.
        var attemptHydrationAtExpirationTime = renderExpirationTime + 1;
        suspenseState.retryTime = attemptHydrationAtExpirationTime;
        scheduleWork(current$$1, attemptHydrationAtExpirationTime); // TODO: Early abort this render.
      } else {// We have already tried to ping at a higher priority than we're rendering with
          // so if we got here, we must have failed to hydrate at those levels. We must
          // now give up. Instead, we're going to delete the whole subtree and instead inject
          // a new real Suspense boundary to take its place, which may render content
          // or fallback. This might suspend for a while and if it does we might still have
          // an opportunity to hydrate before this pass commits.
        }
    } // If we have scheduled higher pri work above, this will probably just abort the render
    // since we now have higher priority work, but in case it doesn't, we need to prepare to
    // render something, if we time out. Even if that requires us to delete everything and
    // skip hydration.
    // Delay having to do this as long as the suspense timeout allows us.


    renderDidSuspendDelayIfPossible();
    return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
  } else if (isSuspenseInstancePending(suspenseInstance)) {
    // This component is still pending more data from the server, so we can't hydrate its
    // content. We treat it as if this component suspended itself. It might seem as if
    // we could just try to render it client-side instead. However, this will perform a
    // lot of unnecessary work and is unlikely to complete since it often will suspend
    // on missing data anyway. Additionally, the server might be able to render more
    // than we can on the client yet. In that case we'd end up with more fallback states
    // on the client than if we just leave it alone. If the server times out or errors
    // these should update this boundary to the permanent Fallback state instead.
    // Mark it as having captured (i.e. suspended).
    workInProgress.effectTag |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

    workInProgress.child = current$$1.child; // Register a callback to retry this boundary once the server has sent the result.

    registerSuspenseInstanceRetry(suspenseInstance, retryDehydratedSuspenseBoundary.bind(null, current$$1));
    return null;
  } else {
    // This is the first attempt.
    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance);
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag |= Hydrating;
      node = node.sibling;
    }

    workInProgress.child = child;
    return workInProgress.child;
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          case 'forward':
          case 'backward':
            {
              warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            }

          default:
            warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            break;
        }
      } else {
        warning$1(false, '%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;
        warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';
      warning$1(false, 'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);
      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BatchedMode) === NoMode) {
    // Outside of batched mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;
          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime) {
  var fundamentalImpl = workInProgress.type.impl;

  if (fundamentalImpl.reconcileChildren === false) {
    return null;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateScopeComponent(current$$1, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current$$1.dependencies;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current$$1.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current$$1;
      returnFiber.lastEffect = current$$1;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
    }

    current$$1.nextEffect = null;
    current$$1.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current$$1 !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current$$1, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current$$1 !== null) {
    var oldProps = current$$1.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
    workInProgress.type !== current$$1.type)) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            if (enableSchedulerTracing) {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          if (enableProfilerTimer) {
            workInProgress.effectTag |= Update;
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              if (enableSuspenseServerRenderer) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a resolved Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.

                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              } // If this boundary is currently timed out, we need to decide
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear the expiration time.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current$$1, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current$$1, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          return updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          return updateScopeComponent(current$$1, workInProgress, renderExpirationTime);
        }

        break;
      }
  }

  {
    {
      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function createFundamentalStateInstance(currentFiber, props, impl, state) {
  return {
    currentFiber: currentFiber,
    impl: impl,
    instance: null,
    prevProps: null,
    props: props,
    state: state
  };
}

function isFiberSuspenseAndTimedOut(fiber) {
  return fiber.tag === SuspenseComponent && fiber.memoizedState !== null;
}

function getSuspenseFallbackChild(fiber) {
  return fiber.child.sibling.child;
}

function collectScopedNodes(node, fn, scopedNodes) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type = node.type,
          memoizedProps = node.memoizedProps;

      if (fn(_type, memoizedProps) === true) {
        scopedNodes.push(getPublicInstance(node.stateNode));
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectScopedNodesFromChildren(child, fn, scopedNodes);
    }
  }
}

function collectFirstScopedNode(node, fn) {
  if (enableScopeAPI) {
    if (node.tag === HostComponent) {
      var _type2 = node.type,
          memoizedProps = node.memoizedProps;

      if (fn(_type2, memoizedProps) === true) {
        return getPublicInstance(node.stateNode);
      }
    }

    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      return collectFirstScopedNodeFromChildren(child, fn);
    }
  }

  return null;
}

function collectScopedNodesFromChildren(startingChild, fn, scopedNodes) {
  var child = startingChild;

  while (child !== null) {
    collectScopedNodes(child, fn, scopedNodes);
    child = child.sibling;
  }
}

function collectFirstScopedNodeFromChildren(startingChild, fn) {
  var child = startingChild;

  while (child !== null) {
    var scopedNode = collectFirstScopedNode(child, fn);

    if (scopedNode !== null) {
      return scopedNode;
    }

    child = child.sibling;
  }

  return null;
}

function collectNearestScopeMethods(node, scope, childrenScopes) {
  if (isValidScopeNode(node, scope)) {
    childrenScopes.push(node.stateNode.methods);
  } else {
    var child = node.child;

    if (isFiberSuspenseAndTimedOut(node)) {
      child = getSuspenseFallbackChild(node);
    }

    if (child !== null) {
      collectNearestChildScopeMethods(child, scope, childrenScopes);
    }
  }
}

function collectNearestChildScopeMethods(startingChild, scope, childrenScopes) {
  var child = startingChild;

  while (child !== null) {
    collectNearestScopeMethods(child, scope, childrenScopes);
    child = child.sibling;
  }
}

function isValidScopeNode(node, scope) {
  return node.tag === ScopeComponent && node.type === scope && node.stateNode !== null;
}

function createScopeMethods(scope, instance) {
  return {
    getChildren: function () {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var childrenScopes = [];

      if (child !== null) {
        collectNearestChildScopeMethods(child, scope, childrenScopes);
      }

      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getChildrenFromRoot: function () {
      var currentFiber = instance.fiber;
      var node = currentFiber;

      while (node !== null) {
        var parent = node.return;

        if (parent === null) {
          break;
        }

        node = parent;

        if (node.tag === ScopeComponent && node.type === scope) {
          break;
        }
      }

      var childrenScopes = [];
      collectNearestChildScopeMethods(node.child, scope, childrenScopes);
      return childrenScopes.length === 0 ? null : childrenScopes;
    },
    getParent: function () {
      var node = instance.fiber.return;

      while (node !== null) {
        if (node.tag === ScopeComponent && node.type === scope) {
          return node.stateNode.methods;
        }

        node = node.return;
      }

      return null;
    },
    getProps: function () {
      var currentFiber = instance.fiber;
      return currentFiber.memoizedProps;
    },
    queryAllNodes: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;
      var scopedNodes = [];

      if (child !== null) {
        collectScopedNodesFromChildren(child, fn, scopedNodes);
      }

      return scopedNodes.length === 0 ? null : scopedNodes;
    },
    queryFirstNode: function (fn) {
      var currentFiber = instance.fiber;
      var child = currentFiber.child;

      if (child !== null) {
        return collectFirstScopedNodeFromChildren(child, fn);
      }

      return null;
    },
    containsNode: function (node) {
      var fiber = getInstanceFromNode$2(node);

      while (fiber !== null) {
        if (fiber.tag === ScopeComponent && fiber.type === scope && fiber.stateNode === instance) {
          return true;
        }

        fiber = fiber.return;
      }

      return false;
    }
  };
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

if (supportsMutation) {
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        appendInitialChild(parent, node.stateNode.instance);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendInitialChild(parent, instance);
      } else if (node.tag === HostText) {
        var _instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance = cloneHiddenTextInstance(_instance, text, node);
        }

        appendInitialChild(parent, _instance);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance2 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props = node.memoizedProps;
          var _type = node.type;
          _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
        }

        appendInitialChild(parent, _instance2);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
      branches: if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendChildToContainerChildSet(containerChildSet, instance);
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance3 = cloneHiddenTextInstance(_instance3, text, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance3);
      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
        var _instance4 = node.stateNode.instance;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var _props2 = node.memoizedProps;
          var _type2 = node.type;
          _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance4);
      } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged) {// No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.

    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;

    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }

    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }

    workInProgress.stateNode = newInstance;

    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress, false, false);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.

      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      break;

    case LazyComponent:
      break;

    case SimpleMemoComponent:
    case FunctionComponent:
      break;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        break;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (enableFlareAPI) {
            var prevListeners = current.memoizedProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              markUpdate(workInProgress);
            }
          }

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.


            break;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }

            if (enableFlareAPI) {
              var listeners = newProps.listeners;

              if (listeners != null) {
                updateEventListeners(listeners, workInProgress, rootContainerInstance);
              }
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;

            if (enableFlareAPI) {
              var _listeners = newProps.listeners;

              if (_listeners != null) {
                updateEventListeners(_listeners, workInProgress, rootContainerInstance);
              }
            } // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        break;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        break;
      }

    case ForwardRef:
      break;

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if (enableSuspenseServerRenderer) {
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current === null) {
              var _wasHydrated3 = popHydrationState(workInProgress);

              if (!_wasHydrated3) {
                {
                  throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
              }

              prepareToHydrateHostSuspenseInstance(workInProgress);

              if (enableSchedulerTracing) {
                markSpawnedWork(Never);
              }

              return null;
            } else {
              // We should never have been in a hydration state if we didn't have a current.
              // However, in some of those paths, we might have reentered a hydration state
              // and then we might be inside a hydration state. In that case, we'll need to
              // exit out of it.
              resetHydrationState();

              if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
              } // If nothing suspended, we need to schedule an effect to mark this boundary
              // as having hydrated so events know that they're free be invoked.
              // It's also a signal to replay events and the suspense callback.
              // If something suspended, schedule an effect to attach retry listeners.
              // So we might as well always mark this.


              workInProgress.effectTag |= Update;
              return null;
            }
          }
        }

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in batched mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BatchedMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        if (supportsPersistence) {
          // TODO: Only schedule updates if not prevDidTimeout.
          if (nextDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children.
            workInProgress.effectTag |= Update;
          }
        }

        if (supportsMutation) {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the proimse. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if the
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        if (enableSuspenseCallback && workInProgress.updateQueue !== null && workInProgress.memoizedProps.suspenseCallback != null) {
          // Always notify the callback
          workInProgress.effectTag |= Update;
        }

        break;
      }

    case Fragment:
      break;

    case Mode:
      break;

    case Profiler:
      break;

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;

    case ContextConsumer:
      break;

    case MemoComponent:
      break;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        break;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode. We don't do anything
          // in this mode.
          break;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden') {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it w as before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if (now() > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              if (enableSchedulerTracing) {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        break;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalImpl = workInProgress.type.impl;
          var fundamentalInstance = workInProgress.stateNode;

          if (fundamentalInstance === null) {
            var getInitialState = fundamentalImpl.getInitialState;
            var fundamentalState;

            if (getInitialState !== undefined) {
              fundamentalState = getInitialState(newProps);
            }

            fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(workInProgress, newProps, fundamentalImpl, fundamentalState || {});

            var _instance5 = getFundamentalComponentInstance(fundamentalInstance);

            fundamentalInstance.instance = _instance5;

            if (fundamentalImpl.reconcileChildren === false) {
              return null;
            }

            appendAllChildren(_instance5, workInProgress, false, false);
            mountFundamentalComponent(fundamentalInstance);
          } else {
            // We fire update in commit phase
            var prevProps = fundamentalInstance.props;
            fundamentalInstance.prevProps = prevProps;
            fundamentalInstance.props = newProps;
            fundamentalInstance.currentFiber = workInProgress;

            if (supportsPersistence) {
              var _instance6 = cloneFundamentalInstance(fundamentalInstance);

              fundamentalInstance.instance = _instance6;
              appendAllChildren(_instance6, workInProgress, false, false);
            }

            var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);

            if (shouldUpdate) {
              markUpdate(workInProgress);
            }
          }
        }

        break;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          if (current === null) {
            var _type3 = workInProgress.type;
            var scopeInstance = {
              fiber: workInProgress,
              methods: null
            };
            workInProgress.stateNode = scopeInstance;
            scopeInstance.methods = createScopeMethods(_type3, scopeInstance);

            if (enableFlareAPI) {
              var _listeners2 = newProps.listeners;

              if (_listeners2 != null) {
                var _rootContainerInstance2 = getRootHostContainer();

                updateEventListeners(_listeners2, workInProgress, _rootContainerInstance2);
              }
            }

            if (workInProgress.ref !== null) {
              markRef$1(workInProgress);
              markUpdate(workInProgress);
            }
          } else {
            if (enableFlareAPI) {
              var _prevListeners = current.memoizedProps.listeners;
              var _nextListeners = newProps.listeners;

              if (_prevListeners !== _nextListeners || workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            } else {
              if (workInProgress.ref !== null) {
                markUpdate(workInProgress);
              }
            }

            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          }
        }

        break;
      }

    default:
      {
        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  return null;
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        if (enableSuspenseServerRenderer) {
          var suspenseState = workInProgress.memoizedState;

          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (!(workInProgress.alternate !== null)) {
              {
                throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
            }

            resetHydrationState();
          }
        }

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;

    default:
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.

  if (logError === false) {
    return;
  }

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console.error(error); // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console.error(combinedMessage);
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current$$1, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current$$1, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitHookEffectList(unmountTag, mountTag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & unmountTag) !== NoEffect$1) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      if ((effect.tag & mountTag) !== NoEffect$1) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var _destroy = effect.destroy;

          if (_destroy !== undefined && typeof _destroy !== 'function') {
            var addendum = void 0;

            if (_destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof _destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + _destroy;
            }

            warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
        {
          commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
          commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
          break;
        }

      default:
        break;
    }
  }
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
      {
        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
        break;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            if (enableSchedulerTracing) {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            } else {
              onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  if (supportsMutation) {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag


    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {
      instanceToUse = instance.methods;
    }

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current$$1, renderPriorityLevel) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        var updateQueue = current$$1.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next; // When the owner fiber is deleted, the destroy function of a passive
            // effect hook is called during the synchronous commit phase. This is
            // a concession to implementation complexity. Calling it in the
            // passive effect phase (like they usually are, when dependencies
            // change during an update) would require either traversing the
            // children of the deleted fiber again, or including unmount effects
            // as part of the fiber effect list.
            //
            // Because this is during the sync commit phase, we need to change
            // the priority.
            //
            // TODO: Reconsider this implementation trade off.

            var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
            runWithPriority$2(priorityLevel, function () {
              var effect = firstEffect;

              do {
                var destroy = effect.destroy;

                if (destroy !== undefined) {
                  safelyCallDestroy(current$$1, destroy);
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            });
          }
        }

        break;
      }

    case ClassComponent:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }

        return;
      }

    case HostComponent:
      {
        if (enableFlareAPI) {
          var dependencies = current$$1.dependencies;

          if (dependencies !== null) {
            var respondersMap = dependencies.responders;

            if (respondersMap !== null) {
              var responderInstances = Array.from(respondersMap.values());

              for (var i = 0, length = responderInstances.length; i < length; i++) {
                var responderInstance = responderInstances[i];
                unmountResponderInstance(responderInstance);
              }

              dependencies.responders = null;
            }
          }
        }

        safelyDetachRef(current$$1);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }

        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = current$$1.stateNode;

          if (fundamentalInstance !== null) {
            unmountFundamentalComponent(fundamentalInstance);
            current$$1.stateNode = null;
          }
        }

        return;
      }

    case DehydratedFragment:
      {
        if (enableSuspenseCallback) {
          var hydrationCallbacks = finishedRoot.hydrationCallbacks;

          if (hydrationCallbacks !== null) {
            var onDeleted = hydrationCallbacks.onDeleted;

            if (onDeleted) {
              onDeleted(current$$1.stateNode);
            }
          }
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          safelyDetachRef(current$$1);
        }
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  var alternate = current$$1.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current$$1.return = null;
  current$$1.child = null;
  current$$1.memoizedState = null;
  current$$1.updateQueue = null;
  current$$1.dependencies = null;
  current$$1.alternate = null;
  current$$1.firstEffect = null;
  current$$1.lastEffect = null;
  current$$1.pendingProps = null;
  current$$1.memoizedProps = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;
  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case HostComponent:
    case HostText:
    case FundamentalComponent:
      {
        return;
      }

    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            pendingChildren = portalOrRoot.pendingChildren;
        replaceContainerChildren(containerInfo, pendingChildren);
        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  } // Recursively insert all host nodes into the parent.


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:
      if (enableFundamentalAPI) {
        parent = parentStateNode.instance;
        isContainer = false;
      }

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  var node = finishedWork;

  while (true) {
    var isHost = node.tag === HostComponent || node.tag === HostText;

    if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          insertBefore(parent, stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, stateNode);
        } else {
          appendChild(parent, stateNode);
        }
      }
    } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === finishedWork) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case FundamentalComponent:
            if (enableFundamentalAPI) {
              currentParent = parentStateNode.instance;
              currentParentIsContainer = false;
            }

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
      var fundamentalNode = node.stateNode.instance;
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, fundamentalNode);
      } else {
        removeChild(currentParent, fundamentalNode);
      }
    } else if (enableSuspenseServerRenderer && node.tag === DehydratedFragment) {
      if (enableSuspenseCallback) {
        var hydrationCallbacks = finishedRoot.hydrationCallbacks;

        if (hydrationCallbacks !== null) {
          var onDeleted = hydrationCallbacks.onDeleted;

          if (onDeleted) {
            onDeleted(node.stateNode);
          }
        }
      } // Delete the dehydrated suspense boundary and all of its content.


      if (currentParentIsContainer) {
        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
      } else {
        clearSuspenseBoundary(currentParent, node.stateNode);
      }
    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current$$1) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current$$1, renderPriorityLevel) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current$$1, renderPriorityLevel);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(finishedRoot, current$$1, renderPriorityLevel);
  }

  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
        {
          // Note: We currently never use MountMutation, but useLayout uses
          // UnmountMutation.
          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
          return;
        }

      case Profiler:
        {
          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case HostRoot:
        {
          if (supportsHydration) {
            var root = finishedWork.stateNode;

            if (root.hydrate) {
              // We've just hydrated. No need to hydrate again.
              root.hydrate = false;
              commitHydratedContainer(root.containerInfo);
            }
          }

          break;
        }
    }

    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
      {
        // Note: We currently never use MountMutation, but useLayout uses
        // UnmountMutation.
        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }

          if (enableFlareAPI) {
            var prevListeners = oldProps.listeners;
            var nextListeners = newProps.listeners;

            if (prevListeners !== nextListeners) {
              updateEventListeners(nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        if (supportsHydration) {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }

    case FundamentalComponent:
      {
        if (enableFundamentalAPI) {
          var fundamentalInstance = finishedWork.stateNode;
          updateFundamentalComponent(fundamentalInstance);
        }

        return;
      }

    case ScopeComponent:
      {
        if (enableScopeAPI) {
          var scopeInstance = finishedWork.stateNode;
          scopeInstance.fiber = finishedWork;

          if (enableFlareAPI) {
            var _newProps = finishedWork.memoizedProps;

            var _oldProps = current$$1 !== null ? current$$1.memoizedProps : _newProps;

            var _prevListeners = _oldProps.listeners;
            var _nextListeners = _newProps.listeners;

            if (_prevListeners !== _nextListeners) {
              updateEventListeners(_nextListeners, finishedWork, null);
            }
          }
        }

        return;
      }

    default:
      {
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if (supportsMutation && primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }

  if (enableSuspenseCallback && newState !== null) {
    var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;

    if (typeof suspenseCallback === 'function') {
      var thenables = finishedWork.updateQueue;

      if (thenables !== null) {
        suspenseCallback(new Set(thenables));
      }
    } else {
      if (suspenseCallback !== undefined) {
        warning$1(false, 'Unexpected type for suspenseCallback.');
      }
    }
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (!supportsHydration) {
    return;
  }

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current$$1 = finishedWork.alternate;

    if (current$$1 !== null) {
      var prevState = current$$1.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);

          if (enableSuspenseCallback) {
            var hydrationCallbacks = finishedRoot.hydrationCallbacks;

            if (hydrationCallbacks !== null) {
              var onHydrated = hydrationCallbacks.onHydrated;

              if (onHydrated) {
                onHydrated(suspenseInstance);
              }
            }
          }
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        if (enableSchedulerTracing) {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }

  resetTextContent(current$$1.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;
    checkForWrongSuspensePriorityInDEV(sourceFiber);
    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of batched mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a batched mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BatchedMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;

      default:
        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BatchedMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$2:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error("Expected a valid priority level");
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of sync mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  return lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else if (disableSchedulerTimeoutBasedOnReactExpirationTime) {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error("Root did not complete. This is a bug in React.");
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV(); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.

        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        flushSuspensePriorityWarningInDEV();

        if ( // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( true && flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error("Unknown root exit status.");
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (root.finishedExpirationTime === expirationTime) {
    // There's already a pending commit at this expiration time.
    // TODO: This is poorly factored. This case only exists for the
    // batch.commit() API.
    commitRoot(root);
  } else {
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error("Should not already be working.");
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher(root);
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      if (enableSchedulerTracing) {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // This is a sync render, so we should have finished the whole tree.
        {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      } else {
        // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        stopFinishedWorkLoopTimer();
        root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishSyncRender(root, workInProgressRootExitStatus, expirationTime);
      } // Before exiting, make sure there's a callback scheduled for the next
      // pending level.


      ensureRootIsScheduled(root);
    }
  }

  return null;
}

function finishSyncRender(root, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  {
    if (exitStatus === RootSuspended || exitStatus === RootSuspendedWithDelay) {
      flushSuspensePriorityWarningInDEV();
    }
  }

  commitRoot(root);
}

function flushRoot(root, expirationTime) {
  markRootExpiredAtTime(root, expirationTime);
  ensureRootIsScheduled(root);

  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushSyncCallbackQueue();
  }
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    if ( true && (executionContext & RenderContext) !== NoContext) {
      warning$1(false, 'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}

function syncUpdates(fn, a, b, c) {
  return runWithPriority$2(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$2(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}
function flushControlled(fn) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    runWithPriority$2(ImmediatePriority, fn);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null, expirationTime);
  renderExpirationTime = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  if (enableSchedulerTracing) {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    componentsThatTriggeredHighPriSuspend = null;
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooks();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher.current;
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher.current = prevDispatcher;
}

function pushInteractions(root) {
  if (enableSchedulerTracing) {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }

  return null;
}

function popInteractions(prevInteractions) {
  if (enableSchedulerTracing) {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current$$1 = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current$$1 = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current$$1, workInProgress, renderExpirationTime);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current$$1, workInProgress, renderExpirationTime); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, renderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.


      if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$2(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  flushPassiveEffects();
  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Should not already be working.");
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime = NoWork;
  } else {} // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error("Should be working on an effect.");
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    if (enableSchedulerTracing) {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    if (enableProfilerTimer) {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    if (enableSchedulerTracing) {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  if (enableSchedulerTracing) {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;

      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$2(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error("Cannot flush passive effects while already rendering.");
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root); // Note: This currently assumes there are no passive effects on the root
  // fiber, because the root is not part of its own effect list. This could
  // change in the future.

  var effect = root.current.firstEffect;

  while (effect !== null) {
    {
      setCurrentFiber(effect);
      invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

      if (hasCaughtError()) {
        if (!(effect !== null)) {
          {
            throw Error("Should be working on an effect.");
          }
        }

        var error = clearCaughtError();
        captureCommitPhaseError(effect, error);
      }

      resetCurrentFiber();
    }

    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

    effect.nextEffect = null;
    effect = nextNextEffect;
  }

  if (enableSchedulerTracing) {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  if (root.finishedExpirationTime === suspendedTime) {
    // If there's a pending fallback waiting to commit, throw it away.
    root.finishedExpirationTime = NoWork;
    root.finishedWork = null;
  }

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}

function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState;
  var retryTime = NoWork;

  if (suspenseState !== null) {
    retryTime = suspenseState.retryTime;
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  if (enableSuspenseServerRenderer) {
    switch (boundaryFiber.tag) {
      case SuspenseComponent:
        retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;

        if (suspenseState !== null) {
          retryTime = suspenseState.retryTime;
        }

        break;

      case SuspenseListComponent:
        retryCache = boundaryFiber.stateNode;
        break;

      default:
        {
          {
            throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
        }

    }
  } else {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;
      warning$1(false, 'Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$$1;

if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  var dummyFiber = null;

  beginWork$$1 = function (current$$1, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork$1(current$$1, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooks(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
} else {
  beginWork$$1 = beginWork$1;
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInGetChildContext = false;

function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
  {
    if (fiber.tag === ClassComponent) {
      switch (phase) {
        case 'getChildContext':
          if (didWarnAboutUpdateInGetChildContext) {
            return;
          }

          warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
          didWarnAboutUpdateInGetChildContext = true;
          break;

        case 'render':
          if (didWarnAboutUpdateInRender) {
            return;
          }

          warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure function of ' + 'props and state.');
          didWarnAboutUpdateInRender = true;
          break;
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BatchedMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      } else if (warnAboutUnmockedScheduler === true) {
        didWarnAboutUnmockedScheduler = true;
        warningWithoutStack$1(false, 'Starting from React v17, the "scheduler" module will need to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}
var componentsThatTriggeredHighPriSuspend = null;
function checkForWrongSuspensePriorityInDEV(sourceFiber) {
  {
    var currentPriorityLevel = getCurrentPriorityLevel();

    if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority$2 || currentPriorityLevel === ImmediatePriority)) {
      var workInProgressNode = sourceFiber;

      while (workInProgressNode !== null) {
        // Add the component that triggered the suspense
        var current$$1 = workInProgressNode.alternate;

        if (current$$1 !== null) {
          // TODO: warn component that triggers the high priority
          // suspend is the HostRoot
          switch (workInProgressNode.tag) {
            case ClassComponent:
              // Loop through the component's update queue and see whether the component
              // has triggered any high priority updates
              var updateQueue = current$$1.updateQueue;

              if (updateQueue !== null) {
                var update = updateQueue.firstUpdate;

                while (update !== null) {
                  var priorityLevel = update.priority;

                  if (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  update = update.next;
                }
              }

              break;

            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                var _update = workInProgressNode.memoizedState.baseUpdate; // Loop through the functional component's memoized state to see whether
                // the component has triggered any high pri updates

                while (_update !== null) {
                  var priority = _update.priority;

                  if (priority === UserBlockingPriority$2 || priority === ImmediatePriority) {
                    if (componentsThatTriggeredHighPriSuspend === null) {
                      componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                    } else {
                      componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                    }

                    break;
                  }

                  if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                    break;
                  }

                  _update = _update.next;
                }
              }

              break;

            default:
              break;
          }
        }

        workInProgressNode = workInProgressNode.return;
      }
    }
  }
}

function flushSuspensePriorityWarningInDEV() {
  {
    if (componentsThatTriggeredHighPriSuspend !== null) {
      var componentNames = [];
      componentsThatTriggeredHighPriSuspend.forEach(function (name) {
        return componentNames.push(name);
      });
      componentsThatTriggeredHighPriSuspend = null;

      if (componentNames.length > 0) {
        warningWithoutStack$1(false, '%s triggered a user-blocking update that suspended.' + '\n\n' + 'The fix is to split the update into multiple parts: a user-blocking ' + 'update to provide immediate feedback, and another update that ' + 'triggers the bulk of the changes.' + '\n\n' + 'Refer to the documentation for useTransition to learn how ' + 'to implement this pattern.', // TODO: Add link to React docs with more information, once it exists
        componentNames.sort().join(', '));
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {
  if (!enableSchedulerTracing) {
    return;
  }

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {
  // This is called when work is scheduled on a root.
  // It associates the current interactions with the newly-scheduled expiration.
  // They will be restored when that expiration is later committed.
  if (!enableSchedulerTracing) {
    return;
  }

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // This is called when new work is started on a root.
  if (!enableSchedulerTracing) {
    return;
  } // Determine which interactions this batch of work currently includes, So that
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {
  if (!enableSchedulerTracing) {
    return;
  }

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if ( true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if ( true && !hasLoggedError) {
          hasLoggedError = true;
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  if (enableProfilerTimer) {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  if (enableUserTimingAPI) {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;

      default:
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    if (enableProfilerTimer) {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BatchedMode | StrictMode;
  } else if (tag === BatchedRoot) {
    mode = BatchedMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BatchedMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_FUNDAMENTAL_TYPE:
                if (enableFundamentalAPI) {
                  return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                }

                break;

              case REACT_SCOPE_TYPE:
                if (enableScopeAPI) {
                  return createFiberFromScope(type, pendingProps, mode, expirationTime, key);
                }

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
  fiber.elementType = fundamentalComponent;
  fiber.type = fundamentalComponent;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromScope(scope, pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(ScopeComponent, pendingProps, key, mode);
  fiber.type = scope;
  fiber.elementType = scope;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromDehydratedFragment(dehydratedNode) {
  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
  fiber.stateNode = dehydratedNode;
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  if (enableSchedulerTracing) {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }

  if (enableSuspenseCallback) {
    this.hydrationCallbacks = null;
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);

  if (enableSuspenseCallback) {
    root.hydrationCallbacks = hydrationCallbacks;
  } // Cyclic construction. This cheats the type system right now because
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};
var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstance(component) {
  var fiber = get(component);

  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      {
        {
          throw Error("Unable to find node on an unmounted component.");
        }
      }
    } else {
      {
        {
          throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
      }
    }
  }

  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      } else {
        {
          {
            throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }

  return findHostInstance(component);
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);
}
function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$$1);
      warnIfNotScopedWithMatchingAct(current$$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }

  enqueueUpdate(current$$1, update);
  scheduleWork(current$$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration$1(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      var root = fiber.stateNode;

      if (root.hydrate) {
        // Flush the first scheduled "update".
        flushRoot(root, root.firstPendingTime);
      }

      break;

    case SuspenseComponent:
      flushSync(function () {
        return scheduleWork(fiber, Sync);
      }); // If we're still blocked after this, we need to increase
      // the priority of any promises resolving within this
      // boundary so that they next attempt also has higher pri.

      var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
      markRetryTimeIfNotHydrated(fiber, retryExpTime);
      break;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeContinuousHydrationExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh: findHostInstancesForRefresh,
    scheduleRefresh: scheduleRefresh,
    scheduleRoot: scheduleRoot,
    setRefreshHandler: setRefreshHandler,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber: function () {
      return current;
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.

function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.11.0';

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
setAttemptSynchronousHydration(attemptSynchronousHydration$1);
setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnOnInvalidCallback;
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }

  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };

  warnOnInvalidCallback = function (callback, callerName) {
    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  };
}

setRestoreImplementation(restoreControlledState$$1);

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate, hydrationCallbacks);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(doc);
  }

  return root;
}

function ReactSyncRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

function ReactRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

ReactRoot.prototype.render = ReactSyncRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  callback = callback === undefined ? null : callback;

  {
    warnOnInvalidCallback(callback, 'render');
  }

  updateContainer(children, root, null, callback);
};

ReactRoot.prototype.unmount = ReactSyncRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  callback = callback === undefined ? null : callback;

  {
    warnOnInvalidCallback(callback, 'render');
  }

  updateContainer(null, root, null, callback);
};
/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */


function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
var warnedAboutHydrateAPI = false;

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarningWithoutStack$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  } // Legacy roots are not batched.


  return new ReactSyncRoot(container, LegacyRoot, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function createPortal$$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error("Target container is not a DOM element.");
    }
  } // TODO: pass ReactDOM portal implementation as third argument


  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal$$1,
  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;

      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }

    if (componentOrElement == null) {
      return null;
    }

    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    {
      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }

    return findHostInstance(componentOrElement);
  },
  hydrate: function (element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }

    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?') : void 0;
    } // TODO: throw or warn if we couldn't hydrate?


    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }

    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?') : void 0;
    }

    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    if (!isValidContainer(containerNode)) {
      {
        throw Error("Target container is not a DOM element.");
      }
    }

    if (!(parentComponent != null && has(parentComponent))) {
      {
        throw Error("parentComponent must be a valid React Component");
      }
    }

    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    if (!isValidContainer(container)) {
      {
        throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
    }

    {
      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?') : void 0;
    }

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
      } // Unmount should not be batched.


      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      }); // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?

      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);

        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
  },
  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarningWithoutStack$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }

    return createPortal$$1.apply(void 0, arguments);
  },
  unstable_batchedUpdates: batchedUpdates$1,
  flushSync: flushSync,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // Keep in sync with ReactDOMUnstableNativeDependencies.js
    // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
  }
};

function createRoot(container, options) {
  if (!isValidContainer(container)) {
    {
      throw Error("createRoot(...): Target container is not a DOM element.");
    }
  }

  warnIfReactDOMContainerInDEV(container);
  return new ReactRoot(container, options);
}

function createSyncRoot(container, options) {
  if (!isValidContainer(container)) {
    {
      throw Error("createRoot(...): Target container is not a DOM element.");
    }
  }

  warnIfReactDOMContainerInDEV(container);
  return new ReactSyncRoot(container, BatchedRoot, options);
}

function warnIfReactDOMContainerInDEV(container) {
  {
    !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.') : void 0;
    container._reactHasBeenPassedToCreateRootDEV = true;
  }
}

if (exposeConcurrentModeAPIs) {
  ReactDOM.createRoot = createRoot;
  ReactDOM.createSyncRoot = createSyncRoot;
  ReactDOM.unstable_discreteUpdates = discreteUpdates$1;
  ReactDOM.unstable_flushDiscreteUpdates = flushDiscreteUpdates;
  ReactDOM.unstable_flushControlled = flushControlled;

  ReactDOM.unstable_scheduleHydration = function (target) {
    if (target) {
      queueExplicitHydrationTarget(target);
    }
  };
}

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        //console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
		// fuck this
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var reactDom = ReactDOM$3.default || ReactDOM$3;

module.exports = reactDom;
  })();
}


/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/** @license React v16.11.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.11.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?


var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var lowPriorityWarningWithoutStack = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.warn(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarningWithoutStack = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(void 0, [format].concat(args));
    }
  };
}

var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }

    if (condition) {
      return;
    }

    if (typeof console !== 'undefined') {
      var argsWithFormat = args.map(function (item) {
        return '' + item;
      });
      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610

      Function.prototype.apply.call(console.error, console, argsWithFormat);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

var Resolved = 1;

function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */



/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null; // Currently, key can be spread in as a prop. This causes a potential
  // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
  // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
  // but as an intermediary step, we will use jsxDEV for everything except
  // <div {...props} key="Hi" />, because we aren't currently able to tell if
  // key is explicitly declared to be undefined or not.

  if (maybeKey !== undefined) {
    key = '' + maybeKey;
  }

  if (hasValidKey(config)) {
    key = '' + config.key;
  }

  if (hasValidRef(config)) {
    ref = config.ref;
  } // Remaining properties are added to a new props object


  for (propName in config) {
    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
      props[propName] = config[propName];
    }
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  if (key || ref) {
    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

    if (key) {
      defineKeyPropWarningGetter(props, displayName);
    }

    if (ref) {
      defineRefPropWarningGetter(props, displayName);
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum);
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error("React.Children.only expected to receive a single React element child.");
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;
            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;
            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
    }

    if (render != null) {
      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, inputs);
}
function useLayoutEffect(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, inputs);
}
function useCallback(callback, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, inputs);
}
function useMemo(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, inputs);
}
function useImperativeHandle(ref, create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, inputs);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}
var emptyObject$1 = {};
function useResponder(responder, listenerProps) {
  var dispatcher = resolveDispatcher();

  {
    if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {
      warning$1(false, 'useResponder: invalid first argument. Expected an event responder, but instead got %s', responder);
      return;
    }
  }

  return dispatcher.useResponder(responder, listenerProps || emptyObject$1);
}
function useTransition(config) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useTransition(config);
}
function useDeferredValue(value, config) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useDeferredValue(value, config);
}

function withSuspenseConfig(scope, config) {
  var previousConfig = ReactCurrentBatchConfig.suspense;
  ReactCurrentBatchConfig.suspense = config === undefined ? null : config;

  try {
    scope();
  } finally {
    ReactCurrentBatchConfig.suspense = previousConfig;
  }
}

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */
var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  var type = element.type;

  if (type === null || type === undefined || typeof type === 'string') {
    return;
  }

  var name = getComponentName(type);
  var propTypes;

  if (typeof type === 'function') {
    propTypes = type.propTypes;
  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
  // Inner props are checked in the reconciler.
  type.$$typeof === REACT_MEMO_TYPE)) {
    propTypes = type.propTypes;
  } else {
    return;
  }

  if (propTypes) {
    setCurrentlyValidatingElement(element);
    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
    setCurrentlyValidatingElement(null);
  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }

  if (typeof type.getDefaultProps === 'function') {
    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  setCurrentlyValidatingElement(fragment);
  var keys = Object.keys(fragment.props);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    if (key !== 'children' && key !== 'key') {
      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
      break;
    }
  }

  if (fragment.ref !== null) {
    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
  }

  setCurrentlyValidatingElement(null);
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(source);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    var children = props.children;

    if (children !== undefined) {
      if (isStaticChildren) {
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            validateChildKeys(children[i], type);
          }

          if (Object.freeze) {
            Object.freeze(children);
          }
        } else {
          warning$1(false, 'React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
        }
      } else {
        validateChildKeys(children, type);
      }
    }
  }

  if (hasOwnProperty$1.call(props, 'key')) {
    warning$1(false, 'React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <ComponentName {...props} key={key} />');
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
} // These two functions exist to still get child warnings in dev
// even with the prod transform. This means that jsxDEV is purely
// opt-in behavior for better messages but that we won't stop
// giving you warnings if you use production apis.

function jsxWithValidationStatic(type, props, key) {
  return jsxWithValidation(type, props, key, true);
}
function jsxWithValidationDynamic(type, props, key) {
  return jsxWithValidation(type, props, key, false);
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type; // Legacy hook: remove it

  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

function createFundamentalComponent(impl) {
  // We use responder as a Map key later on. When we have a bad
  // polyfill, then we can't use it as a key as the polyfill tries
  // to add a property to the object.
  if ( true && !hasBadMapPolyfill) {
    Object.freeze(impl);
  }

  var fundamantalComponent = {
    $$typeof: REACT_FUNDAMENTAL_TYPE,
    impl: impl
  };

  {
    Object.freeze(fundamantalComponent);
  }

  return fundamantalComponent;
}

function createEventResponder(displayName, responderConfig) {
  var getInitialState = responderConfig.getInitialState,
      onEvent = responderConfig.onEvent,
      onMount = responderConfig.onMount,
      onUnmount = responderConfig.onUnmount,
      onRootEvent = responderConfig.onRootEvent,
      rootEventTypes = responderConfig.rootEventTypes,
      targetEventTypes = responderConfig.targetEventTypes,
      targetPortalPropagation = responderConfig.targetPortalPropagation;
  var eventResponder = {
    $$typeof: REACT_RESPONDER_TYPE,
    displayName: displayName,
    getInitialState: getInitialState || null,
    onEvent: onEvent || null,
    onMount: onMount || null,
    onRootEvent: onRootEvent || null,
    onUnmount: onUnmount || null,
    rootEventTypes: rootEventTypes || null,
    targetEventTypes: targetEventTypes || null,
    targetPortalPropagation: targetPortalPropagation || false
  }; // We use responder as a Map key later on. When we have a bad
  // polyfill, then we can't use it as a key as the polyfill tries
  // to add a property to the object.

  if ( true && !hasBadMapPolyfill) {
    Object.freeze(eventResponder);
  }

  return eventResponder;
}

function createScope() {
  var scopeComponent = {
    $$typeof: REACT_SCOPE_TYPE
  };

  {
    Object.freeze(scopeComponent);
  }

  return scopeComponent;
}

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

 // In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

 // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

var exposeConcurrentModeAPIs = false;
 // Experimental React Flare event system and event components support.

var enableFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.

var enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

var enableJSXTransformAPI = false; // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },
  createRef: createRef,
  Component: Component,
  PureComponent: PureComponent,
  createContext: createContext,
  forwardRef: forwardRef,
  lazy: lazy,
  memo: memo,
  useCallback: useCallback,
  useContext: useContext,
  useEffect: useEffect,
  useImperativeHandle: useImperativeHandle,
  useDebugValue: useDebugValue,
  useLayoutEffect: useLayoutEffect,
  useMemo: useMemo,
  useReducer: useReducer,
  useRef: useRef,
  useState: useState,
  Fragment: REACT_FRAGMENT_TYPE,
  Profiler: REACT_PROFILER_TYPE,
  StrictMode: REACT_STRICT_MODE_TYPE,
  Suspense: REACT_SUSPENSE_TYPE,
  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,
  version: ReactVersion,
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
};

if (exposeConcurrentModeAPIs) {
  React.useTransition = useTransition;
  React.useDeferredValue = useDeferredValue;
  React.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
  React.unstable_withSuspenseConfig = withSuspenseConfig;
}

if (enableFlareAPI) {
  React.unstable_useResponder = useResponder;
  React.unstable_createResponder = createEventResponder;
}

if (enableFundamentalAPI) {
  React.unstable_createFundamental = createFundamentalComponent;
}

if (enableScopeAPI) {
  React.unstable_createScope = createScope;
} // Note: some APIs are added with feature flags.
// Make sure that stable builds for open source
// don't modify the React object to avoid deopts.
// Also let's not expose their names in stable builds.


if (enableJSXTransformAPI) {
  {
    React.jsxDEV = jsxWithValidation;
    React.jsx = jsxWithValidationDynamic;
    React.jsxs = jsxWithValidationStatic;
  }
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var react = React$3.default || React$3;

module.exports = react;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.17.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, "__esModule", ({ value: true }));

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

 // In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


 // Experimental React Flare event system and event components support.

 // Experimental Host Component support.

 // Experimental Scope support.

 // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a sync mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

if (enableSchedulerTracing) {
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_trace = unstable_trace;
exports.unstable_wrap = unstable_wrap;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.17.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

Object.defineProperty(exports, "__esModule", ({ value: true }));

var enableSchedulerDebugging = false;
var enableIsInputPending = false;
var enableMessageLoopImplementation = true;
var enableProfiling = true;

// works by scheduling a requestAnimationFrame, storing the time for the start
// of the frame, then scheduling a postMessage which gets scheduled after paint.
// Within the postMessage handler do as much work as possible until time + frame
// rate. By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

var requestHostCallback;

var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;



if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;
  var requestAnimationFrame = window.requestAnimationFrame;
  var cancelAnimationFrame = window.cancelAnimationFrame;

  if (typeof console !== 'undefined') {
    // TODO: Remove fb.me link
    if (typeof requestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isRAFLoopRunning = false;
  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var rAFTimeoutID = -1;
  var taskTimeoutID = -1;
  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple
  // times per frame, often enough to keep it responsive even at really
  // high frame rates > 120.
  5 : // Use a heuristic to measure the frame rate and yield at the end of the
  // frame. We start out assuming that we run at 30fps but then the
  // heuristic tracking will adjust this value to a faster fps if we get
  // more frequent animation frames.
  33.33;
  var prevRAFTime = -1;
  var prevRAFInterval = -1;
  var frameDeadline = 0;
  var fpsLocked = false; // TODO: Make this configurable
  // TODO: Adjust this based on priority?

  var maxFrameLength = 300;
  var needsPaint = false;

  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {
    var scheduling = navigator.scheduling;

    shouldYieldToHost = function () {
      var currentTime = exports.unstable_now();

      if (currentTime >= frameDeadline) {
        // There's no time left in the frame. We may want to yield control of
        // the main thread, so the browser can perform high priority tasks. The
        // main ones are painting and user input. If there's a pending paint or
        // a pending input, then we should yield. But if there's neither, then
        // we can yield less often while remaining responsive. We'll eventually
        // yield regardless, since there could be a pending paint that wasn't
        // accompanied by a call to `requestPaint`, or other main thread tasks
        // like network events.
        if (needsPaint || scheduling.isInputPending()) {
          // There is either a pending paint or a pending input.
          return true;
        } // There's no pending input. Only yield if we've reached the max
        // frame length.


        return currentTime >= frameDeadline + maxFrameLength;
      } else {
        // There's still time left in the frame.
        return false;
      }
    };

    requestPaint = function () {
      needsPaint = true;
    };
  } else {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= frameDeadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      frameLength = Math.floor(1000 / fps);
      fpsLocked = true;
    } else {
      // reset the framerate
      frameLength = 33.33;
      fpsLocked = false;
    }
  };

  var performWorkUntilDeadline = function () {
    if (enableMessageLoopImplementation) {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync
        // cycle. This means there's always time remaining at the beginning of
        // the message event.

        frameDeadline = currentTime + frameLength;
        var hasTimeRemaining = true;

        try {
          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

          if (!hasMoreWork) {
            isMessageLoopRunning = false;
            scheduledHostCallback = null;
          } else {
            // If there's more work, schedule the next message event at the end
            // of the preceding one.
            port.postMessage(null);
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed.
          port.postMessage(null);
          throw error;
        }
      } else {
        isMessageLoopRunning = false;
      } // Yielding to the browser will give it a chance to paint, so we can
      // reset this.


      needsPaint = false;
    } else {
      if (scheduledHostCallback !== null) {
        var _currentTime = exports.unstable_now();

        var _hasTimeRemaining = frameDeadline - _currentTime > 0;

        try {
          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);

          if (!_hasMoreWork) {
            scheduledHostCallback = null;
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed, and post a new task as soon as possible
          // so we can continue where we left off.
          port.postMessage(null);
          throw error;
        }
      } // Yielding to the browser will give it a chance to paint, so we can
      // reset this.


      needsPaint = false;
    }
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  var onAnimationFrame = function (rAFTime) {
    if (scheduledHostCallback === null) {
      // No scheduled work. Exit.
      prevRAFTime = -1;
      prevRAFInterval = -1;
      isRAFLoopRunning = false;
      return;
    } // Eagerly schedule the next animation callback at the beginning of the
    // frame. If the scheduler queue is not empty at the end of the frame, it
    // will continue flushing inside that callback. If the queue *is* empty,
    // then it will exit immediately. Posting the callback at the start of the
    // frame ensures it's fired within the earliest possible frame. If we
    // waited until the end of the frame to post the callback, we risk the
    // browser skipping a frame and not firing the callback until the frame
    // after that.


    isRAFLoopRunning = true;
    requestAnimationFrame(function (nextRAFTime) {
      _clearTimeout(rAFTimeoutID);

      onAnimationFrame(nextRAFTime);
    }); // requestAnimationFrame is throttled when the tab is backgrounded. We
    // don't want to stop working entirely. So we'll fallback to a timeout loop.
    // TODO: Need a better heuristic for backgrounded work.

    var onTimeout = function () {
      frameDeadline = exports.unstable_now() + frameLength / 2;
      performWorkUntilDeadline();
      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);
    };

    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);

    if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check
    // could fail if two rAFs fire in the same frame.
    rAFTime - prevRAFTime > 0.1) {
      var rAFInterval = rAFTime - prevRAFTime;

      if (!fpsLocked && prevRAFInterval !== -1) {
        // We've observed two consecutive frame intervals. We'll use this to
        // dynamically adjust the frame rate.
        //
        // If one frame goes long, then the next one can be short to catch up.
        // If two frames are short in a row, then that's an indication that we
        // actually have a higher frame rate than what we're currently
        // optimizing. For example, if we're running on 120hz display or 90hz VR
        // display. Take the max of the two in case one of them was an anomaly
        // due to missed frame deadlines.
        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {
          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;

          if (frameLength < 8.33) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame length gets lower than 8, it is probably
            // a bug.
            frameLength = 8.33;
          }
        }
      }

      prevRAFInterval = rAFInterval;
    }

    prevRAFTime = rAFTime;
    frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.

    port.postMessage(null);
  };

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (enableMessageLoopImplementation) {
      if (!isMessageLoopRunning) {
        isMessageLoopRunning = true;
        port.postMessage(null);
      }
    } else {
      if (!isRAFLoopRunning) {
        // Start a rAF loop.
        isRAFLoopRunning = true;
        requestAnimationFrame(function (rAFTime) {
          onAnimationFrame(rAFTime);
        });
      }
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = Math.floor((index - 1) / 2);
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
: null;
var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

if (enableProfiling) {
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  if (enableProfiling) {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  if (enableProfiling) {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  if (enableProfiling) {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

var isSchedulerPaused = false;
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      if (enableProfiling) {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  if (enableProfiling) {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    if (enableProfiling) {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        if (enableProfiling) {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (enableProfiling) {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    if (enableProfiling) {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
  isSchedulerPaused = true;
}

function unstable_continueExecution() {
  isSchedulerPaused = false;

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  if (enableProfiling) {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling = enableProfiling ? {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} : null;

exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_IdlePriority = IdlePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_next = unstable_next;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_Profiling = unstable_Profiling;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./src/js/common/mainwindow.tsx":
/*!**************************************!*\
  !*** ./src/js/common/mainwindow.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InitLocalization": () => (/* binding */ InitLocalization),
/* harmony export */   "RegisterForStyleSheetChanges": () => (/* binding */ RegisterForStyleSheetChanges),
/* harmony export */   "onComponentMounted": () => (/* binding */ onComponentMounted)
/* harmony export */ });
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var shared_utils_localization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/utils/localization */ "../../../web_src/shared/js/utils/localization.ts");



function onComponentMounted(component) {
    if (!component)
        return;
    if (!component._reactInternalInstance._currentElement || !component._reactInternalInstance._currentElement._source) {
        return;
    }
    let node = react_dom__WEBPACK_IMPORTED_MODULE_0__.findDOMNode(component);
    if (!node)
        return;
    // for function components, need to look at react. For classes, could use constructor.name
    let strName = '';
    if (component._reactInternalInstance._currentElement.type && component._reactInternalInstance._currentElement.type.name)
        strName = component._reactInternalInstance._currentElement.type.name;
    else if (component && component.constructor && component.constructor.name)
        strName = component.constructor.name;
    else
        strName = 'unknown';
    node.setAttribute('data-react-type', strName);
    let source = component._reactInternalInstance._renderedComponent._currentElement._source;
    if (source != undefined) {
        node.setAttribute('data-react-file', source.fileName);
        node.setAttribute('data-react-line', source.lineNumber);
    }
}
function ReplaceStyleSheet(strURL, elBefore) {
    var link = document.createElement('link');
    link.href = strURL;
    link.type = "text/css";
    link.rel = "stylesheet";
    let parent = elBefore.parentElement;
    parent.insertBefore(link, elBefore);
    parent.removeChild(elBefore);
}
function RegisterForStyleSheetChanges() {
    let fnOnStyleSheetChanged = function (vecChanged) {
        const strLocalPath = 'https://steamloopback.host/';
        let vecReload = [];
        let vecStyleSheets = document.querySelectorAll('link[rel="stylesheet"]');
        for (let i = 0; i < vecStyleSheets.length; i++) {
            let sheet = vecStyleSheets[i];
            // get relative path
            let strSheetURL = sheet.href;
            let strRelativeURL = '';
            if (strSheetURL.startsWith(strLocalPath))
                strRelativeURL = strSheetURL.substr(strLocalPath.length);
            // strip get params
            let iParams = strRelativeURL.indexOf('?');
            if (iParams >= 0)
                strRelativeURL = strRelativeURL.substr(0, iParams);
            for (let strChanged of vecChanged) {
                if (strRelativeURL != strChanged)
                    continue;
                vecReload.push({ sheet: sheet, newRelative: strChanged });
                break;
            }
        }
        for (let reload of vecReload) {
            ReplaceStyleSheet(reload.newRelative, reload.sheet);
        }
    };
    SteamClient._internal.RegisterForStyleChanges(fnOnStyleSheetChanged);
}
function InitLocalization(strLanguage) {
    let rgPromises = [];
    let fnGetDictionary = (type, language, fnAssignDict) => {
        return axios__WEBPACK_IMPORTED_MODULE_1___default().get(`https://steamloopback.host/localization/${type}_${language}.json`).then((response) => {
            fnAssignDict(response.data);
        }).catch((error) => {
            // Since we're using Promise.all below, we want to resolve this axios promise even if we failed to load,
            // otherwise we load nothing if any of the fetches fail.
            Promise.resolve();
        });
    };
    let dictPrimary, dictFallback;
    let dictSharedPrimary, dictSharedFallback;
    rgPromises.push(fnGetDictionary('clientui', strLanguage, (dict) => { dictPrimary = dict; }));
    rgPromises.push(fnGetDictionary('shared', strLanguage, (dict) => { dictSharedPrimary = dict; }));
    let strFallback = shared_utils_localization__WEBPACK_IMPORTED_MODULE_2__.CLocalizationManager.GetLanguageFallback(strLanguage);
    if (strLanguage != strFallback) {
        rgPromises.push(fnGetDictionary('clientui', strFallback, (dict) => { dictFallback = dict; }));
        rgPromises.push(fnGetDictionary('shared', strFallback, (dict) => { dictSharedFallback = dict; }));
    }
    return Promise.all(rgPromises).then(() => {
        // these should have been assigned in the closures above
        shared_utils_localization__WEBPACK_IMPORTED_MODULE_2__.LocalizationManager.InitFromObjects(dictPrimary, dictFallback, dictSharedPrimary, dictSharedFallback);
    });
}


/***/ }),

/***/ "./src/js/components/friends.tsx":
/*!***************************************!*\
  !*** ./src/js/components/friends.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CFriendsListLoaderPopup": () => (/* binding */ CFriendsListLoaderPopup),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/ui/shared_svg_library */ "../../../web_src/shared/js/ui/shared_svg_library.tsx");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! mobx-react */ "./node_modules/mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var shared_domutil_popupmanager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/domutil/popupmanager */ "../../../web_src/shared/js/domutil/popupmanager.ts");
/* harmony import */ var shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/utils/localization */ "../../../web_src/shared/js/utils/localization.ts");
/* harmony import */ var shared_ui_windowresizegrip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/ui/windowresizegrip */ "../../../web_src/shared/js/ui/windowresizegrip.tsx");
/* harmony import */ var shared_utils_reactutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/utils/reactutils */ "../../../web_src/shared/js/utils/reactutils/index.ts");
/* harmony import */ var shared_ui_titlebar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/ui/titlebar */ "../../../web_src/shared/js/ui/titlebar.tsx");
/* harmony import */ var shared_ui_throbber__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! shared/ui/throbber */ "../../../web_src/shared/js/ui/throbber.tsx");
/* harmony import */ var js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! js/stores/offlinefriendsstore */ "./src/js/stores/offlinefriendsstore.ts");













/**
 * Offline version of friends list
 */
let FriendsWindowLoader = class FriendsWindowLoader extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    ContextMenu(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    componentDidMount() {
        SteamClient.WebChat.GetLocalPersonaName().then((personaname) => {
            this.m_strPersonaName = personaname;
        });
        SteamClient.WebChat.GetLocalAvatarBase64().then((avatardataurl) => {
            this.m_strAvatarSource = avatardataurl;
        });
    }
    render() {
        let eLoadingState = this.props.offlineStore.loadingState;
        let personaname = this.m_strPersonaName;
        let avatarsrc = this.m_strAvatarSource;
        let avatarClasses = 'currentUserAvatar';
        if (avatarsrc == '')
            avatarClasses += ' noAvatarImg';
        // add focus if in a popup
        let strClasses = "chat_main fullheight responsive_friends friends_loading_error";
        if (this.props.popup && this.props.popup.focused)
            strClasses += ' focused';
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: strClasses, onContextMenu: this.ContextMenu },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "friendsListContainer fullheight" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "friendlist" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_titlebar__WEBPACK_IMPORTED_MODULE_8__.TitleBar, { popup: this.props.popup.window }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "currentUserContainer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "AvatarAndUser" },
                            avatarsrc != '' &&
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("img", { className: avatarClasses, src: avatarsrc }),
                            avatarsrc == '' &&
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: avatarClasses }),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "labelHolder" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "statusAndName" },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "playerName" }, personaname)),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "richPresenceContainer" },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "gameName richPresenceLabel" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)("#FriendsList_Offline_Disconnected")))))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "FriendsFailureContainer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "friendsListInsetShadowCtn" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "frienListInsetShadowTop" })),
                        eLoadingState == js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_10__.EFriendLoadingState.SignIn && react__WEBPACK_IMPORTED_MODULE_0__.createElement(SignInState, null),
                        eLoadingState == js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_10__.EFriendLoadingState.Loading && react__WEBPACK_IMPORTED_MODULE_0__.createElement(LoadingState, null),
                        eLoadingState == js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_10__.EFriendLoadingState.FailRetry && react__WEBPACK_IMPORTED_MODULE_0__.createElement(RetryState, null),
                        eLoadingState == js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_10__.EFriendLoadingState.OfflineMode && react__WEBPACK_IMPORTED_MODULE_0__.createElement(OfflineModeState, null))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_windowresizegrip__WEBPACK_IMPORTED_MODULE_6__.WindowResizeGrip, { popup: this.props.popup.window }))));
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    mobx__WEBPACK_IMPORTED_MODULE_3__.observable
], FriendsWindowLoader.prototype, "m_strPersonaName", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    mobx__WEBPACK_IMPORTED_MODULE_3__.observable
], FriendsWindowLoader.prototype, "m_strAvatarSource", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    shared_utils_reactutils__WEBPACK_IMPORTED_MODULE_7__.bind
], FriendsWindowLoader.prototype, "ContextMenu", null);
FriendsWindowLoader = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    mobx_react__WEBPACK_IMPORTED_MODULE_12__.observer
], FriendsWindowLoader);
/**
 * Loading state ui
 */
function LoadingState() {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_throbber__WEBPACK_IMPORTED_MODULE_9__.Throbber, { className: "friendsThrobber", size: "large", string: (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_StillLoadingSummary'), position: "center" })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "summaryText" }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "detailText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_StillLoadingDetail'))));
}
/**
 * Retry state ui
 */
function RetryState() {
    let fnRetry = () => {
        console.log("OnRetryClick");
        if (PATCH_ENABLE && TfusionPatch_RootConfig_GetValueOrFallback("OuterFrame.RetryConnectionButtonStrongerReload", true))
        {
            Cookies.remove("IframeErrorInducedReloadCount", {path: ""} );
            window.location.reload();
        }
        else
        {
            window.parent.postMessage({ message: 'ChatReloadRequest', state: undefined }, 'https://steamloopback.host');
        }
    };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "cautionIcon" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__.Caution, null)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "summaryText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_OfflineOrFailure')),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "detailText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_OfflineDetail')),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "retryButton", onClick: fnRetry }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)("#Friends_RetryLoading")))));
}
/**
 * Sign In state ui
 */
function SignInState() {
    let fnSignIn = () => {
        window.parent.postMessage({ message: 'SignInRequest', state: undefined }, 'https://steamloopback.host');
    };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "summaryText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_SignedOut')),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "detailText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_SignedOut_Detail')),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "retryButton", onClick: fnSignIn }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)("#Friends_SignIn")))));
}
/**
 * Offline Mode state ui
 */
function OfflineModeState() {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "summaryText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_OfflineMode')),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "detailText" }, (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#FriendsList_OfflineMode_Detail'))));
}
/**
 * Friends list wrapped in a popup window, used in client.  This is the popup class that manages the popup window
 * lifecycle.
 */
class CFriendsListLoaderPopup extends shared_domutil_popupmanager__WEBPACK_IMPORTED_MODULE_4__.CSavedDimensionsPopup {
    constructor(offlineStore, browserContext) {
        let rgParams = {
            dimensions: { width: 300, height: 650 },
            minWidth: 226,
            minHeight: 400,
            title: (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_5__.Localize)('#WindowTitle_FriendsList'),
            html_class: 'friendsui-container client_chat_frame fullheight SavedDimensionsPopup',
            body_class: 'fullheight',
            eCreationFlags: shared_domutil_popupmanager__WEBPACK_IMPORTED_MODULE_4__.EPopupCreationFlags.Resizable,
            target_browser: browserContext
        };
        super('offlinefriendslist', 'PopupFriendsListDimensions', rgParams, false);
        this.m_offlineStore = offlineStore;
    }
    GetSavedDimensionsKey() {
        return this.m_strSavedDimensionsKey;
    }
    OnResizeComplete(strNewRestoreDetails) {
        // Tell the iframe that we've moved, which will record it and tell the contents of the iframe later so the
        // friends list will be in the same place
        window.parent.postMessage({ message: 'ErrorPopupRestoreDetailsChanged', data: strNewRestoreDetails }, 'https://steamloopback.host');
    }
    Render(popup, element) {
        element.setAttribute('class', 'fullheight popup_chat_frame');
        react_dom__WEBPACK_IMPORTED_MODULE_1__.render(react__WEBPACK_IMPORTED_MODULE_0__.createElement(FriendsWindowLoader, { popup: this, offlineStore: this.m_offlineStore }), element);
    }
    OnClose() {
        super.OnClose();
        react_dom__WEBPACK_IMPORTED_MODULE_1__.unmountComponentAtNode(this.m_element);
        window.parent.postMessage({ message: 'ErrorPopupClosed' }, 'https://steamloopback.host');
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FriendsWindowLoader);


/***/ }),

/***/ "./src/js/stores/offlinefriendsstore.ts":
/*!**********************************************!*\
  !*** ./src/js/stores/offlinefriendsstore.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "COfflineChatStore": () => (/* binding */ COfflineChatStore),
/* harmony export */   "EFriendLoadingState": () => (/* binding */ EFriendLoadingState)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");


/**
 * Loading states
 */
var EFriendLoadingState;
(function (EFriendLoadingState) {
    EFriendLoadingState[EFriendLoadingState["SignIn"] = 0] = "SignIn";
    EFriendLoadingState[EFriendLoadingState["Loading"] = 1] = "Loading";
    EFriendLoadingState[EFriendLoadingState["Loaded"] = 2] = "Loaded";
    EFriendLoadingState[EFriendLoadingState["FailRetry"] = 3] = "FailRetry";
    EFriendLoadingState[EFriendLoadingState["OfflineMode"] = 4] = "OfflineMode";
})(EFriendLoadingState || (EFriendLoadingState = {}));
/**
 * all code and data should move into here when not in such a short beta.
 * For the moment, just using to pass an observable
 */
class COfflineChatStore {
    constructor() {
        this.m_eState = EFriendLoadingState.SignIn;
    }
    Init() {
        this.m_eState = EFriendLoadingState.SignIn;
    }
    get loadingState() {
        return this.m_eState;
    }
    // temporary till we move data into here
    SetLoadingState(eLoadingState) {
        this.m_eState = eLoadingState;
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    mobx__WEBPACK_IMPORTED_MODULE_0__.observable
], COfflineChatStore.prototype, "m_eState", void 0);


/***/ }),

/***/ "../../../web_src/shared/js/clientenums.ts":
/*!*************************************************!*\
  !*** ../../../web_src/shared/js/clientenums.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BIsChinaLauncher": () => (/* binding */ BIsChinaLauncher),
/* harmony export */   "BIsControllerConfigGameID": () => (/* binding */ BIsControllerConfigGameID),
/* harmony export */   "BIsEFriendRelationshipBlocked": () => (/* binding */ BIsEFriendRelationshipBlocked),
/* harmony export */   "BIsEFriendRelationshipFriend": () => (/* binding */ BIsEFriendRelationshipFriend),
/* harmony export */   "BIsReducedUILauncher": () => (/* binding */ BIsReducedUILauncher),
/* harmony export */   "EAccountType": () => (/* binding */ EAccountType),
/* harmony export */   "EActivateGameOverlayToWebPageMode": () => (/* binding */ EActivateGameOverlayToWebPageMode),
/* harmony export */   "EAppReleaseState": () => (/* binding */ EAppReleaseState),
/* harmony export */   "EAppUpdateContentType": () => (/* binding */ EAppUpdateContentType),
/* harmony export */   "EAppUpdateError": () => (/* binding */ EAppUpdateError),
/* harmony export */   "EAvatarFriendState": () => (/* binding */ EAvatarFriendState),
/* harmony export */   "EBackpackContext": () => (/* binding */ EBackpackContext),
/* harmony export */   "EChatEntryType": () => (/* binding */ EChatEntryType),
/* harmony export */   "EClanEventType": () => (/* binding */ EClanEventType),
/* harmony export */   "EClanEventTypeArray": () => (/* binding */ EClanEventTypeArray),
/* harmony export */   "EClanRelationship": () => (/* binding */ EClanRelationship),
/* harmony export */   "ECommunityPrivacyState": () => (/* binding */ ECommunityPrivacyState),
/* harmony export */   "ECommunityProfileItemProperty": () => (/* binding */ ECommunityProfileItemProperty),
/* harmony export */   "EConnectivityTestResult": () => (/* binding */ EConnectivityTestResult),
/* harmony export */   "EEconTradeResponse": () => (/* binding */ EEconTradeResponse),
/* harmony export */   "EFileIteratorType": () => (/* binding */ EFileIteratorType),
/* harmony export */   "EFloatingGamepadTextInputMode": () => (/* binding */ EFloatingGamepadTextInputMode),
/* harmony export */   "EFriendRelationship": () => (/* binding */ EFriendRelationship),
/* harmony export */   "EGamingDeviceType": () => (/* binding */ EGamingDeviceType),
/* harmony export */   "EInstallManagerState": () => (/* binding */ EInstallManagerState),
/* harmony export */   "ELanguage": () => (/* binding */ ELanguage),
/* harmony export */   "ELanguagePchLanguage": () => (/* binding */ ELanguagePchLanguage),
/* harmony export */   "ELanguagePchWebLanguageCode": () => (/* binding */ ELanguagePchWebLanguageCode),
/* harmony export */   "ELaunchSource": () => (/* binding */ ELaunchSource),
/* harmony export */   "ELauncherType": () => (/* binding */ ELauncherType),
/* harmony export */   "ELibraryAssetType": () => (/* binding */ ELibraryAssetType),
/* harmony export */   "ELoginProgressType": () => (/* binding */ ELoginProgressType),
/* harmony export */   "ELoginState": () => (/* binding */ ELoginState),
/* harmony export */   "ELoginUIStyle": () => (/* binding */ ELoginUIStyle),
/* harmony export */   "ENetFakeLocalSystemState": () => (/* binding */ ENetFakeLocalSystemState),
/* harmony export */   "ENotificationPosition": () => (/* binding */ ENotificationPosition),
/* harmony export */   "EOverlayToStoreFlag": () => (/* binding */ EOverlayToStoreFlag),
/* harmony export */   "EPersonaState": () => (/* binding */ EPersonaState),
/* harmony export */   "EPostGameSummaryType": () => (/* binding */ EPostGameSummaryType),
/* harmony export */   "EPublishedFileInfoMatchingFileType": () => (/* binding */ EPublishedFileInfoMatchingFileType),
/* harmony export */   "ERaiseGameWindowResult": () => (/* binding */ ERaiseGameWindowResult),
/* harmony export */   "ERecommendationIgnoreReason": () => (/* binding */ ERecommendationIgnoreReason),
/* harmony export */   "ERemoteStoragePublishedFileVisibility": () => (/* binding */ ERemoteStoragePublishedFileVisibility),
/* harmony export */   "EResult": () => (/* binding */ EResult),
/* harmony export */   "EServerType": () => (/* binding */ EServerType),
/* harmony export */   "EShutdownStep": () => (/* binding */ EShutdownStep),
/* harmony export */   "EStoreCategory": () => (/* binding */ EStoreCategory),
/* harmony export */   "EStoreCuratorRecommendationState": () => (/* binding */ EStoreCuratorRecommendationState),
/* harmony export */   "ESuspendResumeProgressState": () => (/* binding */ ESuspendResumeProgressState),
/* harmony export */   "ETransportError": () => (/* binding */ ETransportError),
/* harmony export */   "EUCMFilePrivacyState": () => (/* binding */ EUCMFilePrivacyState),
/* harmony export */   "EUCMListType": () => (/* binding */ EUCMListType),
/* harmony export */   "EUIMode": () => (/* binding */ EUIMode),
/* harmony export */   "EUniverse": () => (/* binding */ EUniverse),
/* harmony export */   "EWorkshopFileType": () => (/* binding */ EWorkshopFileType),
/* harmony export */   "MapKoreanaToKorean": () => (/* binding */ MapKoreanaToKorean),
/* harmony export */   "PchLanguageToELanguage": () => (/* binding */ PchLanguageToELanguage),
/* harmony export */   "PchNameFromELauncherType": () => (/* binding */ PchNameFromELauncherType),
/* harmony export */   "k_GIDNil": () => (/* binding */ k_GIDNil),
/* harmony export */   "k_RTime32Infinite": () => (/* binding */ k_RTime32Infinite),
/* harmony export */   "k_RTime32Nil": () => (/* binding */ k_RTime32Nil),
/* harmony export */   "k_nGameIDControllerConfigs": () => (/* binding */ k_nGameIDControllerConfigs),
/* harmony export */   "k_nGameIDControllerConfigs_BigPicture": () => (/* binding */ k_nGameIDControllerConfigs_BigPicture),
/* harmony export */   "k_nGameIDControllerConfigs_Desktop": () => (/* binding */ k_nGameIDControllerConfigs_Desktop),
/* harmony export */   "k_nGameIDControllerConfigs_GuideChord": () => (/* binding */ k_nGameIDControllerConfigs_GuideChord),
/* harmony export */   "k_nGameIDGamepadUIStandaloneWindow": () => (/* binding */ k_nGameIDGamepadUIStandaloneWindow),
/* harmony export */   "k_nGameIDServiceAppFirst": () => (/* binding */ k_nGameIDServiceAppFirst),
/* harmony export */   "k_nGameIDServiceAppLast": () => (/* binding */ k_nGameIDServiceAppLast),
/* harmony export */   "k_nGameIDSteamBackpack": () => (/* binding */ k_nGameIDSteamBackpack),
/* harmony export */   "k_nGameIDSteamEconomy": () => (/* binding */ k_nGameIDSteamEconomy),
/* harmony export */   "k_nGameIDSteamVR": () => (/* binding */ k_nGameIDSteamVR),
/* harmony export */   "k_nGameIDSteamVRMain": () => (/* binding */ k_nGameIDSteamVRMain),
/* harmony export */   "k_nGameIDSteamVRMonitor": () => (/* binding */ k_nGameIDSteamVRMonitor),
/* harmony export */   "k_nGameIDSteamVRMonitorMain": () => (/* binding */ k_nGameIDSteamVRMonitorMain),
/* harmony export */   "k_nGameIDSteamWebHelper": () => (/* binding */ k_nGameIDSteamWebHelper),
/* harmony export */   "k_nGameIDWinUI": () => (/* binding */ k_nGameIDWinUI),
/* harmony export */   "k_unSteamUserConsoleInstance": () => (/* binding */ k_unSteamUserConsoleInstance),
/* harmony export */   "k_unSteamUserDesktopInstance": () => (/* binding */ k_unSteamUserDesktopInstance),
/* harmony export */   "k_unSteamUserWebInstance": () => (/* binding */ k_unSteamUserWebInstance)
/* harmony export */ });
var EResult;
(function (EResult) {
    EResult[EResult["k_EResultOK"] = 1] = "k_EResultOK";
    EResult[EResult["k_EResultFail"] = 2] = "k_EResultFail";
    EResult[EResult["k_EResultNoConnection"] = 3] = "k_EResultNoConnection";
    //	k_EResultNoConnectionRetry = 4,				// OBSOLETE - removed
    EResult[EResult["k_EResultInvalidPassword"] = 5] = "k_EResultInvalidPassword";
    EResult[EResult["k_EResultLoggedInElsewhere"] = 6] = "k_EResultLoggedInElsewhere";
    EResult[EResult["k_EResultInvalidProtocolVer"] = 7] = "k_EResultInvalidProtocolVer";
    EResult[EResult["k_EResultInvalidParam"] = 8] = "k_EResultInvalidParam";
    EResult[EResult["k_EResultFileNotFound"] = 9] = "k_EResultFileNotFound";
    EResult[EResult["k_EResultBusy"] = 10] = "k_EResultBusy";
    EResult[EResult["k_EResultInvalidState"] = 11] = "k_EResultInvalidState";
    EResult[EResult["k_EResultInvalidName"] = 12] = "k_EResultInvalidName";
    EResult[EResult["k_EResultInvalidEmail"] = 13] = "k_EResultInvalidEmail";
    EResult[EResult["k_EResultDuplicateName"] = 14] = "k_EResultDuplicateName";
    EResult[EResult["k_EResultAccessDenied"] = 15] = "k_EResultAccessDenied";
    EResult[EResult["k_EResultTimeout"] = 16] = "k_EResultTimeout";
    EResult[EResult["k_EResultBanned"] = 17] = "k_EResultBanned";
    EResult[EResult["k_EResultAccountNotFound"] = 18] = "k_EResultAccountNotFound";
    EResult[EResult["k_EResultInvalidSteamID"] = 19] = "k_EResultInvalidSteamID";
    EResult[EResult["k_EResultServiceUnavailable"] = 20] = "k_EResultServiceUnavailable";
    EResult[EResult["k_EResultNotLoggedOn"] = 21] = "k_EResultNotLoggedOn";
    EResult[EResult["k_EResultPending"] = 22] = "k_EResultPending";
    EResult[EResult["k_EResultEncryptionFailure"] = 23] = "k_EResultEncryptionFailure";
    EResult[EResult["k_EResultInsufficientPrivilege"] = 24] = "k_EResultInsufficientPrivilege";
    EResult[EResult["k_EResultLimitExceeded"] = 25] = "k_EResultLimitExceeded";
    EResult[EResult["k_EResultRevoked"] = 26] = "k_EResultRevoked";
    EResult[EResult["k_EResultExpired"] = 27] = "k_EResultExpired";
    EResult[EResult["k_EResultAlreadyRedeemed"] = 28] = "k_EResultAlreadyRedeemed";
    EResult[EResult["k_EResultDuplicateRequest"] = 29] = "k_EResultDuplicateRequest";
    EResult[EResult["k_EResultAlreadyOwned"] = 30] = "k_EResultAlreadyOwned";
    EResult[EResult["k_EResultIPNotFound"] = 31] = "k_EResultIPNotFound";
    EResult[EResult["k_EResultPersistFailed"] = 32] = "k_EResultPersistFailed";
    EResult[EResult["k_EResultLockingFailed"] = 33] = "k_EResultLockingFailed";
    EResult[EResult["k_EResultLogonSessionReplaced"] = 34] = "k_EResultLogonSessionReplaced";
    EResult[EResult["k_EResultConnectFailed"] = 35] = "k_EResultConnectFailed";
    EResult[EResult["k_EResultHandshakeFailed"] = 36] = "k_EResultHandshakeFailed";
    EResult[EResult["k_EResultIOFailure"] = 37] = "k_EResultIOFailure";
    EResult[EResult["k_EResultRemoteDisconnect"] = 38] = "k_EResultRemoteDisconnect";
    EResult[EResult["k_EResultShoppingCartNotFound"] = 39] = "k_EResultShoppingCartNotFound";
    EResult[EResult["k_EResultBlocked"] = 40] = "k_EResultBlocked";
    EResult[EResult["k_EResultIgnored"] = 41] = "k_EResultIgnored";
    EResult[EResult["k_EResultNoMatch"] = 42] = "k_EResultNoMatch";
    EResult[EResult["k_EResultAccountDisabled"] = 43] = "k_EResultAccountDisabled";
    EResult[EResult["k_EResultServiceReadOnly"] = 44] = "k_EResultServiceReadOnly";
    EResult[EResult["k_EResultAccountNotFeatured"] = 45] = "k_EResultAccountNotFeatured";
    EResult[EResult["k_EResultAdministratorOK"] = 46] = "k_EResultAdministratorOK";
    EResult[EResult["k_EResultContentVersion"] = 47] = "k_EResultContentVersion";
    EResult[EResult["k_EResultTryAnotherCM"] = 48] = "k_EResultTryAnotherCM";
    EResult[EResult["k_EResultPasswordRequiredToKickSession"] = 49] = "k_EResultPasswordRequiredToKickSession";
    EResult[EResult["k_EResultAlreadyLoggedInElsewhere"] = 50] = "k_EResultAlreadyLoggedInElsewhere";
    EResult[EResult["k_EResultSuspended"] = 51] = "k_EResultSuspended";
    EResult[EResult["k_EResultCancelled"] = 52] = "k_EResultCancelled";
    EResult[EResult["k_EResultDataCorruption"] = 53] = "k_EResultDataCorruption";
    EResult[EResult["k_EResultDiskFull"] = 54] = "k_EResultDiskFull";
    EResult[EResult["k_EResultRemoteCallFailed"] = 55] = "k_EResultRemoteCallFailed";
    EResult[EResult["k_EResultPasswordUnset"] = 56] = "k_EResultPasswordUnset";
    EResult[EResult["k_EResultExternalAccountUnlinked"] = 57] = "k_EResultExternalAccountUnlinked";
    EResult[EResult["k_EResultPSNTicketInvalid"] = 58] = "k_EResultPSNTicketInvalid";
    EResult[EResult["k_EResultExternalAccountAlreadyLinked"] = 59] = "k_EResultExternalAccountAlreadyLinked";
    EResult[EResult["k_EResultRemoteFileConflict"] = 60] = "k_EResultRemoteFileConflict";
    EResult[EResult["k_EResultIllegalPassword"] = 61] = "k_EResultIllegalPassword";
    EResult[EResult["k_EResultSameAsPreviousValue"] = 62] = "k_EResultSameAsPreviousValue";
    EResult[EResult["k_EResultAccountLogonDenied"] = 63] = "k_EResultAccountLogonDenied";
    EResult[EResult["k_EResultCannotUseOldPassword"] = 64] = "k_EResultCannotUseOldPassword";
    EResult[EResult["k_EResultInvalidLoginAuthCode"] = 65] = "k_EResultInvalidLoginAuthCode";
    EResult[EResult["k_EResultAccountLogonDeniedNoMail"] = 66] = "k_EResultAccountLogonDeniedNoMail";
    EResult[EResult["k_EResultHardwareNotCapableOfIPT"] = 67] = "k_EResultHardwareNotCapableOfIPT";
    EResult[EResult["k_EResultIPTInitError"] = 68] = "k_EResultIPTInitError";
    EResult[EResult["k_EResultParentalControlRestricted"] = 69] = "k_EResultParentalControlRestricted";
    EResult[EResult["k_EResultFacebookQueryError"] = 70] = "k_EResultFacebookQueryError";
    EResult[EResult["k_EResultExpiredLoginAuthCode"] = 71] = "k_EResultExpiredLoginAuthCode";
    EResult[EResult["k_EResultIPLoginRestrictionFailed"] = 72] = "k_EResultIPLoginRestrictionFailed";
    EResult[EResult["k_EResultAccountLockedDown"] = 73] = "k_EResultAccountLockedDown";
    EResult[EResult["k_EResultAccountLogonDeniedVerifiedEmailRequired"] = 74] = "k_EResultAccountLogonDeniedVerifiedEmailRequired";
    EResult[EResult["k_EResultNoMatchingURL"] = 75] = "k_EResultNoMatchingURL";
    EResult[EResult["k_EResultBadResponse"] = 76] = "k_EResultBadResponse";
    EResult[EResult["k_EResultRequirePasswordReEntry"] = 77] = "k_EResultRequirePasswordReEntry";
    EResult[EResult["k_EResultValueOutOfRange"] = 78] = "k_EResultValueOutOfRange";
    EResult[EResult["k_EResultUnexpectedError"] = 79] = "k_EResultUnexpectedError";
    EResult[EResult["k_EResultDisabled"] = 80] = "k_EResultDisabled";
    EResult[EResult["k_EResultInvalidCEGSubmission"] = 81] = "k_EResultInvalidCEGSubmission";
    EResult[EResult["k_EResultRestrictedDevice"] = 82] = "k_EResultRestrictedDevice";
    EResult[EResult["k_EResultRegionLocked"] = 83] = "k_EResultRegionLocked";
    EResult[EResult["k_EResultRateLimitExceeded"] = 84] = "k_EResultRateLimitExceeded";
    EResult[EResult["k_EResultAccountLoginDeniedNeedTwoFactor"] = 85] = "k_EResultAccountLoginDeniedNeedTwoFactor";
    EResult[EResult["k_EResultItemDeleted"] = 86] = "k_EResultItemDeleted";
    EResult[EResult["k_EResultAccountLoginDeniedThrottle"] = 87] = "k_EResultAccountLoginDeniedThrottle";
    EResult[EResult["k_EResultTwoFactorCodeMismatch"] = 88] = "k_EResultTwoFactorCodeMismatch";
    EResult[EResult["k_EResultTwoFactorActivationCodeMismatch"] = 89] = "k_EResultTwoFactorActivationCodeMismatch";
    EResult[EResult["k_EResultAccountAssociatedToMultiplePartners"] = 90] = "k_EResultAccountAssociatedToMultiplePartners";
    EResult[EResult["k_EResultNotModified"] = 91] = "k_EResultNotModified";
    EResult[EResult["k_EResultNoMobileDevice"] = 92] = "k_EResultNoMobileDevice";
    EResult[EResult["k_EResultTimeNotSynced"] = 93] = "k_EResultTimeNotSynced";
    EResult[EResult["k_EResultSmsCodeFailed"] = 94] = "k_EResultSmsCodeFailed";
    EResult[EResult["k_EResultAccountLimitExceeded"] = 95] = "k_EResultAccountLimitExceeded";
    EResult[EResult["k_EResultAccountActivityLimitExceeded"] = 96] = "k_EResultAccountActivityLimitExceeded";
    EResult[EResult["k_EResultPhoneActivityLimitExceeded"] = 97] = "k_EResultPhoneActivityLimitExceeded";
    EResult[EResult["k_EResultRefundToWallet"] = 98] = "k_EResultRefundToWallet";
    EResult[EResult["k_EResultEmailSendFailure"] = 99] = "k_EResultEmailSendFailure";
    EResult[EResult["k_EResultNotSettled"] = 100] = "k_EResultNotSettled";
    EResult[EResult["k_EResultNeedCaptcha"] = 101] = "k_EResultNeedCaptcha";
    EResult[EResult["k_EResultGSLTDenied"] = 102] = "k_EResultGSLTDenied";
    EResult[EResult["k_EResultGSOwnerDenied"] = 103] = "k_EResultGSOwnerDenied";
    EResult[EResult["k_EResultInvalidItemType"] = 104] = "k_EResultInvalidItemType";
    EResult[EResult["k_EResultIPBanned"] = 105] = "k_EResultIPBanned";
    EResult[EResult["k_EResultGSLTExpired"] = 106] = "k_EResultGSLTExpired";
    EResult[EResult["k_EResultInsufficientFunds"] = 107] = "k_EResultInsufficientFunds";
    EResult[EResult["k_EResultTooManyPending"] = 108] = "k_EResultTooManyPending";
    EResult[EResult["k_EResultNoSiteLicensesFound"] = 109] = "k_EResultNoSiteLicensesFound";
    EResult[EResult["k_EResultWGNetworkSendExceeded"] = 110] = "k_EResultWGNetworkSendExceeded";
    EResult[EResult["k_EResultAccountNotFriends"] = 111] = "k_EResultAccountNotFriends";
    EResult[EResult["k_EResultLimitedUserAccount"] = 112] = "k_EResultLimitedUserAccount";
    EResult[EResult["k_EResultCantRemoveItem"] = 113] = "k_EResultCantRemoveItem";
    EResult[EResult["k_EResultAccountDeleted"] = 114] = "k_EResultAccountDeleted";
    EResult[EResult["k_EResultExistingUserCancelledLicense"] = 115] = "k_EResultExistingUserCancelledLicense";
    EResult[EResult["k_EResultCommunityCooldown"] = 116] = "k_EResultCommunityCooldown";
    EResult[EResult["k_EResultNoLauncherSpecified"] = 117] = "k_EResultNoLauncherSpecified";
    EResult[EResult["k_EResultMustAgreeToSSA"] = 118] = "k_EResultMustAgreeToSSA";
    EResult[EResult["k_EResultLauncherMigrated"] = 119] = "k_EResultLauncherMigrated";
    EResult[EResult["k_EResultSteamRealmMismatch"] = 120] = "k_EResultSteamRealmMismatch";
    EResult[EResult["k_EResultInvalidSignature"] = 121] = "k_EResultInvalidSignature";
    EResult[EResult["k_EResultParseFailure"] = 122] = "k_EResultParseFailure";
    EResult[EResult["k_EResultNoVerifiedPhone"] = 123] = "k_EResultNoVerifiedPhone";
    EResult[EResult["k_EResultInsufficientBattery"] = 124] = "k_EResultInsufficientBattery";
    EResult[EResult["k_EResultChargerRequired"] = 125] = "k_EResultChargerRequired";
    EResult[EResult["k_EResultCachedCredentialInvalid"] = 126] = "k_EResultCachedCredentialInvalid";
    EResult[EResult["K_EResultPhoneNumberIsVOIP"] = 127] = "K_EResultPhoneNumberIsVOIP";
})(EResult || (EResult = {}));
//-----------------------------------------------------------------------------
// Purpose: list of errors generated by the transport.
//-----------------------------------------------------------------------------
var ETransportError;
(function (ETransportError) {
    ETransportError[ETransportError["k_ETransportOK"] = 1] = "k_ETransportOK";
    // This value matches k_EResultOK.
    ETransportError[ETransportError["k_ETransportRequestNotSent"] = 2] = "k_ETransportRequestNotSent";
    ETransportError[ETransportError["k_ETransportResponseNotReceived"] = 3] = "k_ETransportResponseNotReceived";
    ETransportError[ETransportError["k_ETransportIncorrectParameter"] = 4] = "k_ETransportIncorrectParameter";
    // These errors are uncommon, especially when using generated code.
    ETransportError[ETransportError["k_ETransportMethodNotFound"] = 100] = "k_ETransportMethodNotFound";
    ETransportError[ETransportError["k_ETransportCallMismatch"] = 101] = "k_ETransportCallMismatch";
    // For example, mismatch between one and two way message.
    // Of for batched messages, if there is issue with message ID (collision or could not find it).
    ETransportError[ETransportError["k_ETransportSetupError"] = 102] = "k_ETransportSetupError";
    // For example, availability or server type is not set, or routing does not match privilege.
    ETransportError[ETransportError["k_ETransportInternalError"] = 103] = "k_ETransportInternalError";
    ETransportError[ETransportError["k_ETransportNotSupported"] = 104] = "k_ETransportNotSupported";
})(ETransportError || (ETransportError = {}));
var EAppUpdateError;
(function (EAppUpdateError) {
    EAppUpdateError[EAppUpdateError["k_EAppErrorNone"] = 0] = "k_EAppErrorNone";
    EAppUpdateError[EAppUpdateError["k_EAppErrorUnspecified"] = 1] = "k_EAppErrorUnspecified";
    EAppUpdateError[EAppUpdateError["k_EAppErrorPaused"] = 2] = "k_EAppErrorPaused";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCanceled"] = 3] = "k_EAppErrorCanceled";
    EAppUpdateError[EAppUpdateError["k_EAppErrorSuspended"] = 4] = "k_EAppErrorSuspended";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNoSubscription"] = 5] = "k_EAppErrorNoSubscription";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNoConnection"] = 6] = "k_EAppErrorNoConnection";
    EAppUpdateError[EAppUpdateError["k_EAppErrorTimeout"] = 7] = "k_EAppErrorTimeout";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingKey"] = 8] = "k_EAppErrorMissingKey";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingConfig"] = 9] = "k_EAppErrorMissingConfig";
    EAppUpdateError[EAppUpdateError["k_EAppErrorDiskReadFailure"] = 10] = "k_EAppErrorDiskReadFailure";
    EAppUpdateError[EAppUpdateError["k_EAppErrorDiskWriteFailure"] = 11] = "k_EAppErrorDiskWriteFailure";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNotEnoughDiskSpace"] = 12] = "k_EAppErrorNotEnoughDiskSpace";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptGameFiles"] = 13] = "k_EAppErrorCorruptGameFiles";
    EAppUpdateError[EAppUpdateError["k_EAppErrorWaitingForNextDisk"] = 14] = "k_EAppErrorWaitingForNextDisk";
    EAppUpdateError[EAppUpdateError["k_EAppErrorInvalidInstallPath"] = 15] = "k_EAppErrorInvalidInstallPath";
    EAppUpdateError[EAppUpdateError["k_EAppErrorAppRunning"] = 16] = "k_EAppErrorAppRunning";
    EAppUpdateError[EAppUpdateError["k_EAppErrorDependencyFailure"] = 17] = "k_EAppErrorDependencyFailure";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNotInstalled"] = 18] = "k_EAppErrorNotInstalled";
    EAppUpdateError[EAppUpdateError["k_EAppErrorUpdateRequired"] = 19] = "k_EAppErrorUpdateRequired";
    EAppUpdateError[EAppUpdateError["k_EAppErrorBusy"] = 20] = "k_EAppErrorBusy";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNoDownloadSources"] = 21] = "k_EAppErrorNoDownloadSources";
    EAppUpdateError[EAppUpdateError["k_EAppErrorInvalidAppConfig"] = 22] = "k_EAppErrorInvalidAppConfig";
    EAppUpdateError[EAppUpdateError["k_EAppErrorInvalidDepotConfig"] = 23] = "k_EAppErrorInvalidDepotConfig";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingManifest"] = 24] = "k_EAppErrorMissingManifest";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNotReleased"] = 25] = "k_EAppErrorNotReleased";
    EAppUpdateError[EAppUpdateError["k_EAppErrorRegionRestricted"] = 26] = "k_EAppErrorRegionRestricted";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptDepotCache"] = 27] = "k_EAppErrorCorruptDepotCache";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingExecutable"] = 28] = "k_EAppErrorMissingExecutable";
    EAppUpdateError[EAppUpdateError["k_EAppErrorInvalidPlatform"] = 29] = "k_EAppErrorInvalidPlatform";
    EAppUpdateError[EAppUpdateError["k_EAppErrorInvalidFileSystem"] = 30] = "k_EAppErrorInvalidFileSystem";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptUpdateFiles"] = 31] = "k_EAppErrorCorruptUpdateFiles";
    EAppUpdateError[EAppUpdateError["k_EAppErrorDownloadDisabled"] = 32] = "k_EAppErrorDownloadDisabled";
    EAppUpdateError[EAppUpdateError["k_EAppErrorSharedLibraryLocked"] = 33] = "k_EAppErrorSharedLibraryLocked";
    EAppUpdateError[EAppUpdateError["k_EAppErrorPendingLicense"] = 34] = "k_EAppErrorPendingLicense";
    EAppUpdateError[EAppUpdateError["k_EAppErrorOtherSessionPlaying"] = 35] = "k_EAppErrorOtherSessionPlaying";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptDownload"] = 36] = "k_EAppErrorCorruptDownload";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptDisk"] = 37] = "k_EAppErrorCorruptDisk";
    EAppUpdateError[EAppUpdateError["k_EAppErrorFilePermissions"] = 38] = "k_EAppErrorFilePermissions";
    EAppUpdateError[EAppUpdateError["k_EAppErrorFileLocked"] = 39] = "k_EAppErrorFileLocked";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingContent"] = 40] = "k_EAppErrorMissingContent";
    EAppUpdateError[EAppUpdateError["k_EAppErrorRequires64BitOS"] = 41] = "k_EAppErrorRequires64BitOS";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingUpdateFiles"] = 42] = "k_EAppErrorMissingUpdateFiles";
    EAppUpdateError[EAppUpdateError["k_EAppErrorNotEnoughDiskQuota"] = 43] = "k_EAppErrorNotEnoughDiskQuota";
    EAppUpdateError[EAppUpdateError["k_EAppErrorLockedSiteLicense"] = 44] = "k_EAppErrorLockedSiteLicense";
    EAppUpdateError[EAppUpdateError["k_EAppErrorParentalBlocked"] = 45] = "k_EAppErrorParentalBlocked";
    EAppUpdateError[EAppUpdateError["k_EAppErrorSpawnProcess"] = 46] = "k_EAppErrorSpawnProcess";
    EAppUpdateError[EAppUpdateError["k_EAppErrorClientOutOfDate"] = 47] = "k_EAppErrorClientOutOfDate";
    EAppUpdateError[EAppUpdateError["k_EAppErrorPlaytimeExceeded"] = 48] = "k_EAppErrorPlaytimeExceeded";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCorruptFileSignature"] = 49] = "k_EAppErrorCorruptFileSignature";
    EAppUpdateError[EAppUpdateError["k_EAppErrorMissingGameFiles"] = 50] = "k_EAppErrorMissingGameFiles";
    EAppUpdateError[EAppUpdateError["k_EAppErrorCompatToolFailed"] = 51] = "k_EAppErrorCompatToolFailed";
    EAppUpdateError[EAppUpdateError["k_EAppErrorRemovedInstallPath"] = 52] = "k_EAppErrorRemovedInstallPath";
    // if you add new enums, update localization for Steam_AppUpdateError_
    EAppUpdateError[EAppUpdateError["k_EAppErrorMax"] = 53] = "k_EAppErrorMax";
})(EAppUpdateError || (EAppUpdateError = {}));
var EAvatarFriendState;
(function (EAvatarFriendState) {
    EAvatarFriendState[EAvatarFriendState["k_EAvatarFriendStateOffline"] = 0] = "k_EAvatarFriendStateOffline";
    EAvatarFriendState[EAvatarFriendState["k_EAvatarFriendStateOnline"] = 1] = "k_EAvatarFriendStateOnline";
    EAvatarFriendState[EAvatarFriendState["k_EAvatarFriendStateInGame"] = 2] = "k_EAvatarFriendStateInGame";
})(EAvatarFriendState || (EAvatarFriendState = {}));
var EPostGameSummaryType;
(function (EPostGameSummaryType) {
    EPostGameSummaryType[EPostGameSummaryType["k_EScreenshot"] = 0] = "k_EScreenshot";
    EPostGameSummaryType[EPostGameSummaryType["k_ETradingCard"] = 1] = "k_ETradingCard";
    EPostGameSummaryType[EPostGameSummaryType["k_EAchievement"] = 2] = "k_EAchievement";
})(EPostGameSummaryType || (EPostGameSummaryType = {}));
var EPersonaState;
(function (EPersonaState) {
    EPersonaState[EPersonaState["k_EPersonaStateOffline"] = 0] = "k_EPersonaStateOffline";
    EPersonaState[EPersonaState["k_EPersonaStateOnline"] = 1] = "k_EPersonaStateOnline";
    EPersonaState[EPersonaState["k_EPersonaStateBusy"] = 2] = "k_EPersonaStateBusy";
    EPersonaState[EPersonaState["k_EPersonaStateAway"] = 3] = "k_EPersonaStateAway";
    EPersonaState[EPersonaState["k_EPersonaStateSnooze"] = 4] = "k_EPersonaStateSnooze";
    EPersonaState[EPersonaState["k_EPersonaStateLookingToTrade"] = 5] = "k_EPersonaStateLookingToTrade";
    EPersonaState[EPersonaState["k_EPersonaStateLookingToPlay"] = 6] = "k_EPersonaStateLookingToPlay";
    EPersonaState[EPersonaState["k_EPersonaStateInvisible"] = 7] = "k_EPersonaStateInvisible";
    EPersonaState[EPersonaState["k_EPersonaStateMax"] = 8] = "k_EPersonaStateMax";
})(EPersonaState || (EPersonaState = {}));
var EWorkshopFileType;
(function (EWorkshopFileType) {
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeInvalid"] = -1] = "k_EWorkshopFileTypeInvalid";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeCommunity"] = 0] = "k_EWorkshopFileTypeCommunity";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeMicrotransaction"] = 1] = "k_EWorkshopFileTypeMicrotransaction";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeCollection"] = 2] = "k_EWorkshopFileTypeCollection";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeArt"] = 3] = "k_EWorkshopFileTypeArt";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeVideo"] = 4] = "k_EWorkshopFileTypeVideo";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeScreenshot"] = 5] = "k_EWorkshopFileTypeScreenshot";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeGame"] = 6] = "k_EWorkshopFileTypeGame";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeSoftware"] = 7] = "k_EWorkshopFileTypeSoftware";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeConcept"] = 8] = "k_EWorkshopFileTypeConcept";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeWebGuide"] = 9] = "k_EWorkshopFileTypeWebGuide";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeIntegratedGuide"] = 10] = "k_EWorkshopFileTypeIntegratedGuide";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeMerch"] = 11] = "k_EWorkshopFileTypeMerch";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeControllerBinding"] = 12] = "k_EWorkshopFileTypeControllerBinding";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeSteamworksAccessInvite"] = 13] = "k_EWorkshopFileTypeSteamworksAccessInvite";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeSteamVideo"] = 14] = "k_EWorkshopFileTypeSteamVideo";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeGameManagedItem"] = 15] = "k_EWorkshopFileTypeGameManagedItem";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeFirst"] = 0] = "k_EWorkshopFileTypeFirst";
    EWorkshopFileType[EWorkshopFileType["k_EWorkshopFileTypeMax"] = 16] = "k_EWorkshopFileTypeMax";
})(EWorkshopFileType || (EWorkshopFileType = {}));
var ELoginState;
(function (ELoginState) {
    ELoginState[ELoginState["k_ELoginState_None"] = 0] = "k_ELoginState_None";
    ELoginState[ELoginState["k_ELoginState_WelcomeDialog"] = 1] = "k_ELoginState_WelcomeDialog";
    ELoginState[ELoginState["k_ELoginState_WaitingForCreateUser"] = 2] = "k_ELoginState_WaitingForCreateUser";
    ELoginState[ELoginState["k_ELoginState_WaitingForCredentials"] = 3] = "k_ELoginState_WaitingForCredentials";
    ELoginState[ELoginState["k_ELoginState_WaitingForNetwork"] = 4] = "k_ELoginState_WaitingForNetwork";
    ELoginState[ELoginState["k_ELoginState_WaitingForServerResponse"] = 5] = "k_ELoginState_WaitingForServerResponse";
    ELoginState[ELoginState["k_ELoginState_WaitingForLibraryReady"] = 6] = "k_ELoginState_WaitingForLibraryReady";
    ELoginState[ELoginState["k_ELoginState_Success"] = 7] = "k_ELoginState_Success";
    ELoginState[ELoginState["k_ELoginState_Quit"] = 8] = "k_ELoginState_Quit";
})(ELoginState || (ELoginState = {}));
var ELoginProgressType;
(function (ELoginProgressType) {
    ELoginProgressType[ELoginProgressType["k_EProgressType_None"] = 0] = "k_EProgressType_None";
    ELoginProgressType[ELoginProgressType["k_EProgressType_UpdatingSteamInformation"] = 1] = "k_EProgressType_UpdatingSteamInformation";
    ELoginProgressType[ELoginProgressType["k_EProgressType_UpdatingUserConfiguration"] = 2] = "k_EProgressType_UpdatingUserConfiguration";
    ELoginProgressType[ELoginProgressType["k_EProgressType_LoggingIn"] = 3] = "k_EProgressType_LoggingIn";
})(ELoginProgressType || (ELoginProgressType = {}));
var EShutdownStep;
(function (EShutdownStep) {
    EShutdownStep[EShutdownStep["k_EShutdownStep_None"] = 0] = "k_EShutdownStep_None";
    EShutdownStep[EShutdownStep["k_EShutdownStep_Start"] = 1] = "k_EShutdownStep_Start";
    EShutdownStep[EShutdownStep["k_EShutdownStep_WaitingForGames"] = 2] = "k_EShutdownStep_WaitingForGames";
    EShutdownStep[EShutdownStep["k_EShutdownStep_SynchronizingCloud"] = 3] = "k_EShutdownStep_SynchronizingCloud";
    EShutdownStep[EShutdownStep["k_EShutdownStep_FinishingDownload"] = 4] = "k_EShutdownStep_FinishingDownload";
    EShutdownStep[EShutdownStep["k_EShutdownStep_StoppingDownload"] = 5] = "k_EShutdownStep_StoppingDownload";
    EShutdownStep[EShutdownStep["k_EShutdownStep_StoppingServiceApps"] = 6] = "k_EShutdownStep_StoppingServiceApps";
    EShutdownStep[EShutdownStep["k_EShutdownStep_LogginOff"] = 7] = "k_EShutdownStep_LogginOff";
    EShutdownStep[EShutdownStep["k_EShutdownStep_Done"] = 8] = "k_EShutdownStep_Done";
})(EShutdownStep || (EShutdownStep = {}));
var EFileIteratorType;
(function (EFileIteratorType) {
    EFileIteratorType[EFileIteratorType["k_EIteratorTypeNone"] = 0] = "k_EIteratorTypeNone";
    EFileIteratorType[EFileIteratorType["k_EIteratorTypeFolder"] = 1] = "k_EIteratorTypeFolder";
    EFileIteratorType[EFileIteratorType["k_EIteratorTypeExecutables"] = 2] = "k_EIteratorTypeExecutables";
    EFileIteratorType[EFileIteratorType["k_EIteratorTypeImages"] = 3] = "k_EIteratorTypeImages";
})(EFileIteratorType || (EFileIteratorType = {}));
var EUniverse;
(function (EUniverse) {
    EUniverse[EUniverse["k_EUniverseInvalid"] = 0] = "k_EUniverseInvalid";
    EUniverse[EUniverse["k_EUniversePublic"] = 1] = "k_EUniversePublic";
    EUniverse[EUniverse["k_EUniverseBeta"] = 2] = "k_EUniverseBeta";
    EUniverse[EUniverse["k_EUniverseInternal"] = 3] = "k_EUniverseInternal";
    EUniverse[EUniverse["k_EUniverseDev"] = 4] = "k_EUniverseDev";
    EUniverse[EUniverse["k_EUniverseMax"] = 5] = "k_EUniverseMax";
})(EUniverse || (EUniverse = {}));
var EAccountType;
(function (EAccountType) {
    EAccountType[EAccountType["k_EAccountTypeInvalid"] = 0] = "k_EAccountTypeInvalid";
    EAccountType[EAccountType["k_EAccountTypeIndividual"] = 1] = "k_EAccountTypeIndividual";
    EAccountType[EAccountType["k_EAccountTypeMultiseat"] = 2] = "k_EAccountTypeMultiseat";
    EAccountType[EAccountType["k_EAccountTypeGameServer"] = 3] = "k_EAccountTypeGameServer";
    EAccountType[EAccountType["k_EAccountTypeAnonGameServer"] = 4] = "k_EAccountTypeAnonGameServer";
    EAccountType[EAccountType["k_EAccountTypePending"] = 5] = "k_EAccountTypePending";
    EAccountType[EAccountType["k_EAccountTypeContentServer"] = 6] = "k_EAccountTypeContentServer";
    EAccountType[EAccountType["k_EAccountTypeClan"] = 7] = "k_EAccountTypeClan";
    EAccountType[EAccountType["k_EAccountTypeChat"] = 8] = "k_EAccountTypeChat";
    EAccountType[EAccountType["k_EAccountTypeConsoleUser"] = 9] = "k_EAccountTypeConsoleUser";
    EAccountType[EAccountType["k_EAccountTypeAnonUser"] = 10] = "k_EAccountTypeAnonUser";
    // Max of 16 items in this field
    EAccountType[EAccountType["k_EAccountTypeMax"] = 11] = "k_EAccountTypeMax";
})(EAccountType || (EAccountType = {}));
var EFriendRelationship;
(function (EFriendRelationship) {
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipNone"] = 0] = "k_EFriendRelationshipNone";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipBlocked"] = 1] = "k_EFriendRelationshipBlocked";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipRequestRecipient"] = 2] = "k_EFriendRelationshipRequestRecipient";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipFriend"] = 3] = "k_EFriendRelationshipFriend";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipRequestInitiator"] = 4] = "k_EFriendRelationshipRequestInitiator";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipIgnored"] = 5] = "k_EFriendRelationshipIgnored";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipIgnoredFriend"] = 6] = "k_EFriendRelationshipIgnoredFriend";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipSuggested_DEPRECATED"] = 7] = "k_EFriendRelationshipSuggested_DEPRECATED";
    EFriendRelationship[EFriendRelationship["k_EFriendRelationshipMax"] = 8] = "k_EFriendRelationshipMax";
})(EFriendRelationship || (EFriendRelationship = {}));
function BIsEFriendRelationshipFriend(relationship) {
    return relationship == EFriendRelationship.k_EFriendRelationshipFriend || relationship == EFriendRelationship.k_EFriendRelationshipIgnoredFriend;
}
function BIsEFriendRelationshipBlocked(relationship) {
    return relationship == EFriendRelationship.k_EFriendRelationshipIgnored || relationship == EFriendRelationship.k_EFriendRelationshipIgnoredFriend;
}
var EClanRelationship;
(function (EClanRelationship) {
    EClanRelationship[EClanRelationship["k_EClanRelationshipNone"] = 0] = "k_EClanRelationshipNone";
    EClanRelationship[EClanRelationship["k_EClanRelationshipBlocked"] = 1] = "k_EClanRelationshipBlocked";
    EClanRelationship[EClanRelationship["k_EClanRelationshipInvited"] = 2] = "k_EClanRelationshipInvited";
    EClanRelationship[EClanRelationship["k_EClanRelationshipMember"] = 3] = "k_EClanRelationshipMember";
    EClanRelationship[EClanRelationship["k_EClanRelationshipKicked"] = 4] = "k_EClanRelationshipKicked";
    EClanRelationship[EClanRelationship["k_EClanRelationshipKickAcknowledged"] = 5] = "k_EClanRelationshipKickAcknowledged";
    EClanRelationship[EClanRelationship["k_EClanRelationshipPendingApproval"] = 6] = "k_EClanRelationshipPendingApproval";
    EClanRelationship[EClanRelationship["k_EClanRelationshipRequestDenied"] = 7] = "k_EClanRelationshipRequestDenied";
})(EClanRelationship || (EClanRelationship = {}));
const k_unSteamUserDesktopInstance = 1;
const k_unSteamUserConsoleInstance = 2;
const k_unSteamUserWebInstance = 4; // actually UMQ
var EChatEntryType;
(function (EChatEntryType) {
    EChatEntryType[EChatEntryType["k_EChatEntryTypeInvalid"] = 0] = "k_EChatEntryTypeInvalid";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeChatMsg"] = 1] = "k_EChatEntryTypeChatMsg";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeTyping"] = 2] = "k_EChatEntryTypeTyping";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeInviteGame"] = 3] = "k_EChatEntryTypeInviteGame";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeEmote"] = 4] = "k_EChatEntryTypeEmote";
    //k_EChatEntryTypeLobbyGameStart = 5,	// lobby game is starting (dead - listen for LobbyGameCreated_t callback instead)
    EChatEntryType[EChatEntryType["k_EChatEntryTypeLeftConversation"] = 6] = "k_EChatEntryTypeLeftConversation";
    // Above are previous FriendMsgType entries, now merged into more generic chat entry types
    EChatEntryType[EChatEntryType["k_EChatEntryTypeEntered"] = 7] = "k_EChatEntryTypeEntered";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeWasKicked"] = 8] = "k_EChatEntryTypeWasKicked";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeWasBanned"] = 9] = "k_EChatEntryTypeWasBanned";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeDisconnected"] = 10] = "k_EChatEntryTypeDisconnected";
    EChatEntryType[EChatEntryType["k_EChatEntryTypeHistoricalChat"] = 11] = "k_EChatEntryTypeHistoricalChat";
    //k_EChatEntryTypeReserved1 = 12, // No longer used
    //k_EChatEntryTypeReserved2 = 13, // No longer used
    EChatEntryType[EChatEntryType["k_EChatEntryTypeLinkBlocked"] = 14] = "k_EChatEntryTypeLinkBlocked";
})(EChatEntryType || (EChatEntryType = {}));
var EEconTradeResponse;
(function (EEconTradeResponse) {
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Accepted"] = 0] = "k_EEconTradeResponse_Accepted";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Declined"] = 1] = "k_EEconTradeResponse_Declined";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_TradeBanned_Initiator"] = 2] = "k_EEconTradeResponse_TradeBanned_Initiator";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_TradeBanned_Target"] = 3] = "k_EEconTradeResponse_TradeBanned_Target";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Target_Already_Trading"] = 4] = "k_EEconTradeResponse_Target_Already_Trading";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Disabled"] = 5] = "k_EEconTradeResponse_Disabled";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_NotLoggedIn"] = 6] = "k_EEconTradeResponse_NotLoggedIn";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Cancel"] = 7] = "k_EEconTradeResponse_Cancel";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_TooSoon"] = 8] = "k_EEconTradeResponse_TooSoon";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_TooSoonPenalty"] = 9] = "k_EEconTradeResponse_TooSoonPenalty";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_ConnectionFailed"] = 10] = "k_EEconTradeResponse_ConnectionFailed";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Already_Trading"] = 11] = "k_EEconTradeResponse_Already_Trading";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Already_Has_Trade_Request"] = 12] = "k_EEconTradeResponse_Already_Has_Trade_Request";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_NoResponse"] = 13] = "k_EEconTradeResponse_NoResponse";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_CyberCafe_Initiator"] = 14] = "k_EEconTradeResponse_CyberCafe_Initiator";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_CyberCafe_Target"] = 15] = "k_EEconTradeResponse_CyberCafe_Target";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_SchoolLab_Initiator"] = 16] = "k_EEconTradeResponse_SchoolLab_Initiator";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_SchoolLab_Target"] = 17] = "k_EEconTradeResponse_SchoolLab_Target";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Blocked_Target"] = 18] = "k_EEconTradeResponse_Initiator_Blocked_Target";
    //k_EEconTradeResponse_Target_Blocked_Initiator					= 19, // Use k_EEconTradeResponse_Target_Account_Cannot_Trade instead.
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Needs_Verified_Email"] = 20] = "k_EEconTradeResponse_Initiator_Needs_Verified_Email";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Needs_Steam_Guard"] = 21] = "k_EEconTradeResponse_Initiator_Needs_Steam_Guard";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Target_Account_Cannot_Trade"] = 22] = "k_EEconTradeResponse_Target_Account_Cannot_Trade";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Steam_Guard_Duration"] = 23] = "k_EEconTradeResponse_Initiator_Steam_Guard_Duration";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Recent_Password_Reset"] = 24] = "k_EEconTradeResponse_Initiator_Recent_Password_Reset";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Using_New_Device"] = 25] = "k_EEconTradeResponse_Initiator_Using_New_Device";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Sent_Invalid_Cookie"] = 26] = "k_EEconTradeResponse_Initiator_Sent_Invalid_Cookie";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_NeedsEmailConfirmation"] = 27] = "k_EEconTradeResponse_NeedsEmailConfirmation";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_Initiator_Recent_Email_Change"] = 28] = "k_EEconTradeResponse_Initiator_Recent_Email_Change";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_NeedsMobileConfirmation"] = 29] = "k_EEconTradeResponse_NeedsMobileConfirmation";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_TradingHoldForClearedTradeOffers_Initiator"] = 30] = "k_EEconTradeResponse_TradingHoldForClearedTradeOffers_Initiator";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_WouldExceedMaxAssetCount"] = 31] = "k_EEconTradeResponse_WouldExceedMaxAssetCount";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_DisabledInRegion"] = 32] = "k_EEconTradeResponse_DisabledInRegion";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_DisabledInPartnerRegion"] = 33] = "k_EEconTradeResponse_DisabledInPartnerRegion";
    EEconTradeResponse[EEconTradeResponse["k_EEconTradeResponse_OKToDeliver"] = 50] = "k_EEconTradeResponse_OKToDeliver";
})(EEconTradeResponse || (EEconTradeResponse = {}));
//-----------------------------------------------------------------------------
// Server types
//-----------------------------------------------------------------------------
// EServerType
// Specifies the type of a specific server
var EServerType;
(function (EServerType) {
    // These special enum values are used for message routing and spew tracking only.
    // It is invalid to instantiate or query the directory for servers of these types.
    EServerType[EServerType["k_EServerTypeOther_Util"] = -2] = "k_EServerTypeOther_Util";
    EServerType[EServerType["k_EServerTypeOther_Client"] = -3] = "k_EServerTypeOther_Client";
    EServerType[EServerType["k_EServerTypeOther_CServer"] = -4] = "k_EServerTypeOther_CServer";
    EServerType[EServerType["k_EServerTypeOther_CEconBase"] = -5] = "k_EServerTypeOther_CEconBase";
    // k_EServerTypeInvalid is used as a generic error value. Must be negative.
    EServerType[EServerType["k_EServerTypeInvalid"] = -1] = "k_EServerTypeInvalid";
    // NOTE: CShell does not derive from CServer! this special snowflake value must be 0
    EServerType[EServerType["k_EServerTypeShell"] = 0] = "k_EServerTypeShell";
    // Actual CServer-derived concrete types start here.
    // NOTE: database-persisted, do not reclaim old values unless marked otherwise
    EServerType[EServerType["k_EServerTypeGM"] = 1] = "k_EServerTypeGM";
    //k_EServerTypeBUMOBSOLETE			   = 2,
    EServerType[EServerType["k_EServerTypeAM"] = 3] = "k_EServerTypeAM";
    EServerType[EServerType["k_EServerTypeBS"] = 4] = "k_EServerTypeBS";
    EServerType[EServerType["k_EServerTypeVS"] = 5] = "k_EServerTypeVS";
    EServerType[EServerType["k_EServerTypeATS"] = 6] = "k_EServerTypeATS";
    EServerType[EServerType["k_EServerTypeCM"] = 7] = "k_EServerTypeCM";
    EServerType[EServerType["k_EServerTypeFBS"] = 8] = "k_EServerTypeFBS";
    EServerType[EServerType["k_EServerTypeBoxMonitor"] = 9] = "k_EServerTypeBoxMonitor";
    EServerType[EServerType["k_EServerTypeSS"] = 10] = "k_EServerTypeSS";
    EServerType[EServerType["k_EServerTypeDRMS"] = 11] = "k_EServerTypeDRMS";
    //k_EServerTypeHubOBSOLETE			   = 12,		//	- obsolete
    EServerType[EServerType["k_EServerTypeConsole"] = 13] = "k_EServerTypeConsole";
    EServerType[EServerType["k_EServerTypePICS"] = 14] = "k_EServerTypePICS";
    //hole - never used, can be claimed!   = 15,
    EServerType[EServerType["k_EServerTypeContentStats"] = 16] = "k_EServerTypeContentStats";
    EServerType[EServerType["k_EServerTypeDP"] = 17] = "k_EServerTypeDP";
    EServerType[EServerType["k_EServerTypeWG"] = 18] = "k_EServerTypeWG";
    EServerType[EServerType["k_EServerTypeSM"] = 19] = "k_EServerTypeSM";
    EServerType[EServerType["k_EServerTypeSLC"] = 20] = "k_EServerTypeSLC";
    EServerType[EServerType["k_EServerTypeUFS"] = 21] = "k_EServerTypeUFS";
    //k_EServerTypeP2PSuperSeederOBSOLETE  = 22,   // obsolete
    //hole - never used, can be claimed!   = 23,				// Server type used for logging utility methods not associated with any particular server
    EServerType[EServerType["k_EServerTypeCommunity"] = 24] = "k_EServerTypeCommunity";
    EServerType[EServerType["k_EServerTypeP2PRelayOBSOLETE"] = 25] = "k_EServerTypeP2PRelayOBSOLETE";
    EServerType[EServerType["k_EServerTypeAppInformation"] = 26] = "k_EServerTypeAppInformation";
    EServerType[EServerType["k_EServerTypeSpare"] = 27] = "k_EServerTypeSpare";
    EServerType[EServerType["k_EServerTypeFTS"] = 28] = "k_EServerTypeFTS";
    EServerType[EServerType["k_EServerTypeSiteLicense"] = 29] = "k_EServerTypeSiteLicense";
    EServerType[EServerType["k_EServerTypePS"] = 30] = "k_EServerTypePS";
    EServerType[EServerType["k_EServerTypeIS"] = 31] = "k_EServerTypeIS";
    EServerType[EServerType["k_EServerTypeCCS"] = 32] = "k_EServerTypeCCS";
    EServerType[EServerType["k_EServerTypeDFS"] = 33] = "k_EServerTypeDFS";
    EServerType[EServerType["k_EServerTypeLBS"] = 34] = "k_EServerTypeLBS";
    EServerType[EServerType["k_EServerTypeMDS"] = 35] = "k_EServerTypeMDS";
    EServerType[EServerType["k_EServerTypeCS"] = 36] = "k_EServerTypeCS";
    EServerType[EServerType["k_EServerTypeGC"] = 37] = "k_EServerTypeGC";
    EServerType[EServerType["k_EServerTypeNS"] = 38] = "k_EServerTypeNS";
    EServerType[EServerType["k_EServerTypeOGS"] = 39] = "k_EServerTypeOGS";
    EServerType[EServerType["k_EServerTypeWebAPI"] = 40] = "k_EServerTypeWebAPI";
    EServerType[EServerType["k_EServerTypeUDS"] = 41] = "k_EServerTypeUDS";
    EServerType[EServerType["k_EServerTypeMMS"] = 42] = "k_EServerTypeMMS";
    EServerType[EServerType["k_EServerTypeGMS"] = 43] = "k_EServerTypeGMS";
    EServerType[EServerType["k_EServerTypeKGS"] = 44] = "k_EServerTypeKGS";
    EServerType[EServerType["k_EServerTypeUCM"] = 45] = "k_EServerTypeUCM";
    EServerType[EServerType["k_EServerTypeRM"] = 46] = "k_EServerTypeRM";
    EServerType[EServerType["k_EServerTypeFS"] = 47] = "k_EServerTypeFS";
    EServerType[EServerType["k_EServerTypeEcon"] = 48] = "k_EServerTypeEcon";
    EServerType[EServerType["k_EServerTypeBackpack"] = 49] = "k_EServerTypeBackpack";
    EServerType[EServerType["k_EServerTypeUGS"] = 50] = "k_EServerTypeUGS";
    EServerType[EServerType["k_EServerTypeStoreFeature"] = 51] = "k_EServerTypeStoreFeature";
    EServerType[EServerType["k_EServerTypeMoneyStats"] = 52] = "k_EServerTypeMoneyStats";
    EServerType[EServerType["k_EServerTypeCRE"] = 53] = "k_EServerTypeCRE";
    EServerType[EServerType["k_EServerTypeUMQ"] = 54] = "k_EServerTypeUMQ";
    EServerType[EServerType["k_EServerTypeWorkshop"] = 55] = "k_EServerTypeWorkshop";
    EServerType[EServerType["k_EServerTypeBRP"] = 56] = "k_EServerTypeBRP";
    EServerType[EServerType["k_EServerTypeGCH"] = 57] = "k_EServerTypeGCH";
    EServerType[EServerType["k_EServerTypeMPAS"] = 58] = "k_EServerTypeMPAS";
    EServerType[EServerType["k_EServerTypeTrade"] = 59] = "k_EServerTypeTrade";
    EServerType[EServerType["k_EServerTypeSecrets"] = 60] = "k_EServerTypeSecrets";
    EServerType[EServerType["k_EServerTypeLogsink"] = 61] = "k_EServerTypeLogsink";
    EServerType[EServerType["k_EServerTypeMarket"] = 62] = "k_EServerTypeMarket";
    EServerType[EServerType["k_EServerTypeQuest"] = 63] = "k_EServerTypeQuest";
    EServerType[EServerType["k_EServerTypeWDS"] = 64] = "k_EServerTypeWDS";
    EServerType[EServerType["k_EServerTypeACS"] = 65] = "k_EServerTypeACS";
    EServerType[EServerType["k_EServerTypePNP"] = 66] = "k_EServerTypePNP";
    EServerType[EServerType["k_EServerTypeTaxForm"] = 67] = "k_EServerTypeTaxForm";
    EServerType[EServerType["k_EServerTypeExternalMonitor"] = 68] = "k_EServerTypeExternalMonitor";
    EServerType[EServerType["k_EServerTypeParental"] = 69] = "k_EServerTypeParental";
    EServerType[EServerType["k_EServerTypePartnerUpload"] = 70] = "k_EServerTypePartnerUpload";
    EServerType[EServerType["k_EServerTypePartner"] = 71] = "k_EServerTypePartner";
    EServerType[EServerType["k_EServerTypeES"] = 72] = "k_EServerTypeES";
    EServerType[EServerType["k_EServerTypeDepotWebContent"] = 73] = "k_EServerTypeDepotWebContent";
    EServerType[EServerType["k_EServerTypeExternalConfig"] = 74] = "k_EServerTypeExternalConfig";
    EServerType[EServerType["k_EServerTypeGameNotifications"] = 75] = "k_EServerTypeGameNotifications";
    EServerType[EServerType["k_EServerTypeMarketRepl"] = 76] = "k_EServerTypeMarketRepl";
    EServerType[EServerType["k_EServerTypeMarketSearch"] = 77] = "k_EServerTypeMarketSearch";
    EServerType[EServerType["k_EServerTypeLocalization"] = 78] = "k_EServerTypeLocalization";
    EServerType[EServerType["k_EServerTypeSteam2Emulator"] = 79] = "k_EServerTypeSteam2Emulator";
    EServerType[EServerType["k_EServerTypePublicTest"] = 80] = "k_EServerTypePublicTest";
    EServerType[EServerType["k_EServerTypeSolrMgr"] = 81] = "k_EServerTypeSolrMgr";
    EServerType[EServerType["k_EServerTypeBroadcastIngester"] = 82] = "k_EServerTypeBroadcastIngester";
    EServerType[EServerType["k_EServerTypeBroadcastDirectory"] = 83] = "k_EServerTypeBroadcastDirectory";
    EServerType[EServerType["k_EServerTypeVideoManager"] = 84] = "k_EServerTypeVideoManager";
    EServerType[EServerType["k_EServerTypeTradeOffer"] = 85] = "k_EServerTypeTradeOffer";
    EServerType[EServerType["k_EServerTypeBroadcastChat"] = 86] = "k_EServerTypeBroadcastChat";
    EServerType[EServerType["k_EServerTypePhone"] = 87] = "k_EServerTypePhone";
    EServerType[EServerType["k_EServerTypeAccountScore"] = 88] = "k_EServerTypeAccountScore";
    EServerType[EServerType["k_EServerTypeSupport"] = 89] = "k_EServerTypeSupport";
    EServerType[EServerType["k_EServerTypeLogRequest"] = 90] = "k_EServerTypeLogRequest";
    EServerType[EServerType["k_EServerTypeLogWorker"] = 91] = "k_EServerTypeLogWorker";
    EServerType[EServerType["k_EServerTypeEmailDelivery"] = 92] = "k_EServerTypeEmailDelivery";
    EServerType[EServerType["k_EServerTypeInventoryManagement"] = 93] = "k_EServerTypeInventoryManagement";
    EServerType[EServerType["k_EServerTypeAuth"] = 94] = "k_EServerTypeAuth";
    EServerType[EServerType["k_EServerTypeStoreCatalog"] = 95] = "k_EServerTypeStoreCatalog";
    EServerType[EServerType["k_EServerTypeHLTVRelay"] = 96] = "k_EServerTypeHLTVRelay";
    EServerType[EServerType["k_EServerTypeIDLS"] = 97] = "k_EServerTypeIDLS";
    EServerType[EServerType["k_EServerTypePerf"] = 98] = "k_EServerTypePerf";
    EServerType[EServerType["k_EServerTypeItemInventory"] = 99] = "k_EServerTypeItemInventory";
    EServerType[EServerType["k_EServerTypeWatchdog"] = 100] = "k_EServerTypeWatchdog";
    EServerType[EServerType["k_EServerTypeAccountHistory"] = 101] = "k_EServerTypeAccountHistory";
    EServerType[EServerType["k_EServerTypeChat"] = 102] = "k_EServerTypeChat";
    EServerType[EServerType["k_EServerTypeShader"] = 103] = "k_EServerTypeShader";
    EServerType[EServerType["k_EServerTypeAccountHardware"] = 104] = "k_EServerTypeAccountHardware";
    EServerType[EServerType["k_EServerTypeWebRTC"] = 105] = "k_EServerTypeWebRTC";
    EServerType[EServerType["k_EServerTypeGiveaway"] = 106] = "k_EServerTypeGiveaway";
    EServerType[EServerType["k_EServerTypeChatRoom"] = 107] = "k_EServerTypeChatRoom";
    EServerType[EServerType["k_EServerTypeVoiceChat"] = 108] = "k_EServerTypeVoiceChat";
    EServerType[EServerType["k_EServerTypeQMS"] = 109] = "k_EServerTypeQMS";
    EServerType[EServerType["k_EServerTypeTrust"] = 110] = "k_EServerTypeTrust";
    EServerType[EServerType["k_EServerTypeTimeMachine"] = 111] = "k_EServerTypeTimeMachine";
    EServerType[EServerType["k_EServerTypeVACDBMaster"] = 112] = "k_EServerTypeVACDBMaster";
    EServerType[EServerType["k_EServerTypeContentServerConfig"] = 113] = "k_EServerTypeContentServerConfig";
    EServerType[EServerType["k_EServerTypeMinigame"] = 114] = "k_EServerTypeMinigame";
    EServerType[EServerType["k_EServerTypeMLTrain"] = 115] = "k_EServerTypeMLTrain";
    EServerType[EServerType["k_EServerTypeVACTest"] = 116] = "k_EServerTypeVACTest";
    EServerType[EServerType["k_EServerTypeTaxService"] = 117] = "k_EServerTypeTaxService";
    EServerType[EServerType["k_EServerTypeMLInference"] = 118] = "k_EServerTypeMLInference";
    EServerType[EServerType["k_EServerTypeUGSAggregate"] = 119] = "k_EServerTypeUGSAggregate";
    EServerType[EServerType["k_EServerTypeTURN"] = 120] = "k_EServerTypeTURN";
    EServerType[EServerType["k_EServerTypeRemoteClient"] = 121] = "k_EServerTypeRemoteClient";
    EServerType[EServerType["k_EServerTypeBroadcastOrigin"] = 122] = "k_EServerTypeBroadcastOrigin";
    EServerType[EServerType["k_EServerTypeBroadcastChannel"] = 123] = "k_EServerTypeBroadcastChannel";
    EServerType[EServerType["k_EServerTypeSteamAR"] = 124] = "k_EServerTypeSteamAR";
    EServerType[EServerType["k_EServerTypeChina"] = 125] = "k_EServerTypeChina";
    EServerType[EServerType["k_EServerTypeCrashDump"] = 126] = "k_EServerTypeCrashDump";
    // Must be last!!!
    EServerType[EServerType["k_EServerTypeMax"] = 127] = "k_EServerTypeMax";
})(EServerType || (EServerType = {}));
// Known appids
const k_nGameIDWinUI = 7;
const k_nGameIDServiceAppFirst = 750;
const k_nGameIDSteamBackpack = 753;
const k_nGameIDSteamEconomy = 754;
const k_nGameIDSteamWebHelper = 769;
const k_nGameIDServiceAppLast = 799;
const k_nGameIDControllerConfigs = 241100;
const k_nGameIDSteamVR = 250820;
const k_nGameIDSteamVRMain = 330050;
const k_nGameIDSteamVRMonitorMain = 358510;
const k_nGameIDSteamVRMonitor = 366490;
const k_nGameIDControllerConfigs_Desktop = 413080;
const k_nGameIDControllerConfigs_BigPicture = 413090;
const k_nGameIDControllerConfigs_GuideChord = 443510;
const k_nGameIDGamepadUIStandaloneWindow = 1;
function BIsControllerConfigGameID(appid) {
    return appid == k_nGameIDControllerConfigs_Desktop || appid == k_nGameIDControllerConfigs_BigPicture || appid == k_nGameIDControllerConfigs_GuideChord || appid == k_nGameIDSteamWebHelper;
}
const k_GIDNil = '18446744073709551615';
const k_RTime32Nil = 0;
const k_RTime32Infinite = 0x7FFFFFFF; //01-18-2038
// Languages
var ELanguage;
(function (ELanguage) {
    ELanguage[ELanguage["k_Lang_None"] = -1] = "k_Lang_None";
    ELanguage[ELanguage["k_Lang_English"] = 0] = "k_Lang_English";
    ELanguage[ELanguage["k_Lang_German"] = 1] = "k_Lang_German";
    ELanguage[ELanguage["k_Lang_French"] = 2] = "k_Lang_French";
    ELanguage[ELanguage["k_Lang_Italian"] = 3] = "k_Lang_Italian";
    ELanguage[ELanguage["k_Lang_Korean"] = 4] = "k_Lang_Korean";
    ELanguage[ELanguage["k_Lang_Spanish"] = 5] = "k_Lang_Spanish";
    ELanguage[ELanguage["k_Lang_Simplified_Chinese"] = 6] = "k_Lang_Simplified_Chinese";
    ELanguage[ELanguage["k_Lang_Traditional_Chinese"] = 7] = "k_Lang_Traditional_Chinese";
    ELanguage[ELanguage["k_Lang_Russian"] = 8] = "k_Lang_Russian";
    ELanguage[ELanguage["k_Lang_Thai"] = 9] = "k_Lang_Thai";
    ELanguage[ELanguage["k_Lang_Japanese"] = 10] = "k_Lang_Japanese";
    ELanguage[ELanguage["k_Lang_Portuguese"] = 11] = "k_Lang_Portuguese";
    ELanguage[ELanguage["k_Lang_Polish"] = 12] = "k_Lang_Polish";
    ELanguage[ELanguage["k_Lang_Danish"] = 13] = "k_Lang_Danish";
    ELanguage[ELanguage["k_Lang_Dutch"] = 14] = "k_Lang_Dutch";
    ELanguage[ELanguage["k_Lang_Finnish"] = 15] = "k_Lang_Finnish";
    ELanguage[ELanguage["k_Lang_Norwegian"] = 16] = "k_Lang_Norwegian";
    ELanguage[ELanguage["k_Lang_Swedish"] = 17] = "k_Lang_Swedish";
    ELanguage[ELanguage["k_Lang_Hungarian"] = 18] = "k_Lang_Hungarian";
    ELanguage[ELanguage["k_Lang_Czech"] = 19] = "k_Lang_Czech";
    ELanguage[ELanguage["k_Lang_Romanian"] = 20] = "k_Lang_Romanian";
    ELanguage[ELanguage["k_Lang_Turkish"] = 21] = "k_Lang_Turkish";
    ELanguage[ELanguage["k_Lang_Brazilian"] = 22] = "k_Lang_Brazilian";
    ELanguage[ELanguage["k_Lang_Bulgarian"] = 23] = "k_Lang_Bulgarian";
    ELanguage[ELanguage["k_Lang_Greek"] = 24] = "k_Lang_Greek";
    ELanguage[ELanguage["k_Lang_Arabic"] = 25] = "k_Lang_Arabic";
    ELanguage[ELanguage["k_Lang_Ukrainian"] = 26] = "k_Lang_Ukrainian";
    ELanguage[ELanguage["k_Lang_Latam_Spanish"] = 27] = "k_Lang_Latam_Spanish";
    ELanguage[ELanguage["k_Lang_Vietnamese"] = 28] = "k_Lang_Vietnamese";
    ELanguage[ELanguage["k_Lang_SteamChina_SChinese"] = 29] = "k_Lang_SteamChina_SChinese";
    ELanguage[ELanguage["k_Lang_MAX"] = 30] = "k_Lang_MAX";
})(ELanguage || (ELanguage = {}));
// Steam's Web API Language codes - https://partner.steamgames.com/doc/store/localization#supported_languages
function ELanguagePchWebLanguageCode(eLanguage, eDefault = 'en') {
    switch (eLanguage) {
        case ELanguage.k_Lang_English:
            return 'en';
        case ELanguage.k_Lang_German:
            return 'de';
        case ELanguage.k_Lang_French:
            return 'fr';
        case ELanguage.k_Lang_Italian:
            return 'it';
        case ELanguage.k_Lang_Korean:
            return 'ko';
        case ELanguage.k_Lang_Spanish:
            return 'es';
        case ELanguage.k_Lang_Simplified_Chinese:
            return 'zh-cn';
        case ELanguage.k_Lang_Traditional_Chinese:
            return 'zh-tw';
        case ELanguage.k_Lang_Russian:
            return 'ru';
        case ELanguage.k_Lang_Thai:
            return 'th';
        case ELanguage.k_Lang_Japanese:
            return 'ja';
        case ELanguage.k_Lang_Portuguese:
            return 'pt';
        case ELanguage.k_Lang_Polish:
            return 'pl';
        case ELanguage.k_Lang_Danish:
            return 'da';
        case ELanguage.k_Lang_Dutch:
            return 'nl';
        case ELanguage.k_Lang_Finnish:
            return 'fi';
        case ELanguage.k_Lang_Norwegian:
            return 'no';
        case ELanguage.k_Lang_Swedish:
            return 'sv';
        case ELanguage.k_Lang_Hungarian:
            return 'hu';
        case ELanguage.k_Lang_Czech:
            return 'cs';
        case ELanguage.k_Lang_Romanian:
            return 'ro';
        case ELanguage.k_Lang_Turkish:
            return 'tr';
        case ELanguage.k_Lang_Arabic:
            return 'ar';
        case ELanguage.k_Lang_Brazilian:
            return 'pt-br';
        case ELanguage.k_Lang_Bulgarian:
            return 'bg';
        case ELanguage.k_Lang_Greek:
            return 'el';
        case ELanguage.k_Lang_Ukrainian:
            return 'uk';
        case ELanguage.k_Lang_Latam_Spanish:
            return 'es-419';
        case ELanguage.k_Lang_Vietnamese:
            return 'vi';
        case ELanguage.k_Lang_SteamChina_SChinese:
            return 'sc-sc';
        default:
            return eDefault;
    }
}
/** @return 'korean' instead of 'koreana' where we exporting languages externally like file names */
const MapKoreanaToKorean = (strLanguage) => strLanguage === 'koreana' ? 'korean' : strLanguage;
function ELanguagePchLanguage(eLanguage, eDefault = '') {
    switch (eLanguage) {
        case ELanguage.k_Lang_English:
            return 'english';
        case ELanguage.k_Lang_German:
            return 'german';
        case ELanguage.k_Lang_French:
            return 'french';
        case ELanguage.k_Lang_Italian:
            return 'italian';
        // We use 'koreana' everywhere on the web and server, so return koreana here
        case ELanguage.k_Lang_Korean:
            return 'koreana';
        case ELanguage.k_Lang_Spanish:
            return 'spanish';
        case ELanguage.k_Lang_Simplified_Chinese:
            return 'schinese';
        case ELanguage.k_Lang_Traditional_Chinese:
            return 'tchinese';
        case ELanguage.k_Lang_Russian:
            return 'russian';
        case ELanguage.k_Lang_Thai:
            return 'thai';
        case ELanguage.k_Lang_Japanese:
            return 'japanese';
        case ELanguage.k_Lang_Portuguese:
            return 'portuguese';
        case ELanguage.k_Lang_Polish:
            return 'polish';
        case ELanguage.k_Lang_Danish:
            return 'danish';
        case ELanguage.k_Lang_Dutch:
            return 'dutch';
        case ELanguage.k_Lang_Finnish:
            return 'finnish';
        case ELanguage.k_Lang_Norwegian:
            return 'norwegian';
        case ELanguage.k_Lang_Swedish:
            return 'swedish';
        case ELanguage.k_Lang_Hungarian:
            return 'hungarian';
        case ELanguage.k_Lang_Czech:
            return 'czech';
        case ELanguage.k_Lang_Romanian:
            return 'romanian';
        case ELanguage.k_Lang_Turkish:
            return 'turkish';
        case ELanguage.k_Lang_Arabic:
            return 'arabic';
        case ELanguage.k_Lang_Brazilian:
            return 'brazilian';
        case ELanguage.k_Lang_Bulgarian:
            return 'bulgarian';
        case ELanguage.k_Lang_Greek:
            return 'greek';
        case ELanguage.k_Lang_Ukrainian:
            return 'ukrainian';
        case ELanguage.k_Lang_Latam_Spanish:
            return 'latam';
        case ELanguage.k_Lang_Vietnamese:
            return 'vietnamese';
        case ELanguage.k_Lang_SteamChina_SChinese:
            return 'sc_schinese';
        default:
            return eDefault;
    }
}
function PchLanguageToELanguage(strLanguage, eDefault = ELanguage.k_Lang_English) {
    switch (strLanguage) {
        case 'english':
            return ELanguage.k_Lang_English;
        case 'german':
            return ELanguage.k_Lang_German;
        case 'french':
            return ELanguage.k_Lang_French;
        case 'italian':
            return ELanguage.k_Lang_Italian;
        case 'korean':
        case 'koreana':
            return ELanguage.k_Lang_Korean;
        case 'spanish':
            return ELanguage.k_Lang_Spanish;
        case 'schinese':
            return ELanguage.k_Lang_Simplified_Chinese;
        case 'tchinese':
            return ELanguage.k_Lang_Traditional_Chinese;
        case 'russian':
            return ELanguage.k_Lang_Russian;
        case 'thai':
            return ELanguage.k_Lang_Thai;
        case 'japanese':
            return ELanguage.k_Lang_Japanese;
        case 'portuguese':
            return ELanguage.k_Lang_Portuguese;
        case 'polish':
            return ELanguage.k_Lang_Polish;
        case 'danish':
            return ELanguage.k_Lang_Danish;
        case 'dutch':
            return ELanguage.k_Lang_Dutch;
        case 'finnish':
            return ELanguage.k_Lang_Finnish;
        case 'norwegian':
            return ELanguage.k_Lang_Norwegian;
        case 'swedish':
            return ELanguage.k_Lang_Swedish;
        case 'hungarian':
            return ELanguage.k_Lang_Hungarian;
        case 'czech':
            return ELanguage.k_Lang_Czech;
        case 'romanian':
            return ELanguage.k_Lang_Romanian;
        case 'turkish':
            return ELanguage.k_Lang_Turkish;
        case 'arabic':
            return ELanguage.k_Lang_Arabic;
        case 'brazilian':
            return ELanguage.k_Lang_Brazilian;
        case 'bulgarian':
            return ELanguage.k_Lang_Bulgarian;
        case 'greek':
            return ELanguage.k_Lang_Greek;
        case 'ukrainian':
            return ELanguage.k_Lang_Ukrainian;
        case 'latam':
            return ELanguage.k_Lang_Latam_Spanish;
        case 'vietnamese':
            return ELanguage.k_Lang_Vietnamese;
        case 'sc_schinese':
            return ELanguage.k_Lang_SteamChina_SChinese;
        default:
            return eDefault;
    }
}
//-----------------------------------------------------------------------------
// types of events for use in the Clan Event Type table
// WARNING: DO NOT RENUMBER EXISTING VALUES - STORED IN DATABASE (see clientenums.h)
//-----------------------------------------------------------------------------
var EClanEventType;
(function (EClanEventType) {
    EClanEventType[EClanEventType["k_EOtherEvent"] = 1] = "k_EOtherEvent";
    EClanEventType[EClanEventType["k_EGameEvent"] = 2] = "k_EGameEvent";
    EClanEventType[EClanEventType["k_EPartyEvent"] = 3] = "k_EPartyEvent";
    EClanEventType[EClanEventType["k_EMeetingEvent"] = 4] = "k_EMeetingEvent";
    EClanEventType[EClanEventType["k_ESpecialCauseEvent"] = 5] = "k_ESpecialCauseEvent";
    EClanEventType[EClanEventType["k_EMusicAndArtsEvent"] = 6] = "k_EMusicAndArtsEvent";
    EClanEventType[EClanEventType["k_ESportsEvent"] = 7] = "k_ESportsEvent";
    EClanEventType[EClanEventType["k_ETripEvent"] = 8] = "k_ETripEvent";
    EClanEventType[EClanEventType["k_EChatEvent"] = 9] = "k_EChatEvent";
    EClanEventType[EClanEventType["k_EGameReleaseEvent"] = 10] = "k_EGameReleaseEvent";
    EClanEventType[EClanEventType["k_EBroadcastEvent"] = 11] = "k_EBroadcastEvent";
    EClanEventType[EClanEventType["k_ESmallUpdateEvent"] = 12] = "k_ESmallUpdateEvent";
    EClanEventType[EClanEventType["k_ERegularUpdateEvent"] = 13] = "k_ERegularUpdateEvent";
    EClanEventType[EClanEventType["k_EMajorUpdateEvent"] = 14] = "k_EMajorUpdateEvent";
    EClanEventType[EClanEventType["k_EDLCReleaseEvent"] = 15] = "k_EDLCReleaseEvent";
    EClanEventType[EClanEventType["k_EFutureReleaseEvent"] = 16] = "k_EFutureReleaseEvent";
    EClanEventType[EClanEventType["k_EESportTournamentStreamEvent"] = 17] = "k_EESportTournamentStreamEvent";
    EClanEventType[EClanEventType["k_EDevStreamEvent"] = 18] = "k_EDevStreamEvent";
    EClanEventType[EClanEventType["k_EFamousStreamEvent"] = 19] = "k_EFamousStreamEvent";
    EClanEventType[EClanEventType["k_EGameSalesEvent"] = 20] = "k_EGameSalesEvent";
    EClanEventType[EClanEventType["k_EGameItemSalesEvent"] = 21] = "k_EGameItemSalesEvent";
    EClanEventType[EClanEventType["k_EInGameBonusXPEvent"] = 22] = "k_EInGameBonusXPEvent";
    EClanEventType[EClanEventType["k_EInGameLootEvent"] = 23] = "k_EInGameLootEvent";
    EClanEventType[EClanEventType["k_EInGamePerksEvent"] = 24] = "k_EInGamePerksEvent";
    EClanEventType[EClanEventType["k_EInGameChallengeEvent"] = 25] = "k_EInGameChallengeEvent";
    EClanEventType[EClanEventType["k_EInGameContestEvent"] = 26] = "k_EInGameContestEvent";
    EClanEventType[EClanEventType["k_EIRLEvent"] = 27] = "k_EIRLEvent";
    EClanEventType[EClanEventType["k_ENewsEvent"] = 28] = "k_ENewsEvent";
    EClanEventType[EClanEventType["k_EBetaReleaseEvent"] = 29] = "k_EBetaReleaseEvent";
    //k_EInGameContentReleaseEvent = 30,   // No longer assigned to new Partner Events
    EClanEventType[EClanEventType["k_EFreeTrial"] = 31] = "k_EFreeTrial";
    EClanEventType[EClanEventType["k_ESeasonRelease"] = 32] = "k_ESeasonRelease";
    //k_ESeasonUpdate = 33, 			   // No longer assigned to new Partner Events
    EClanEventType[EClanEventType["k_ECrosspostEvent"] = 34] = "k_ECrosspostEvent";
    EClanEventType[EClanEventType["k_EInGameEventGeneral"] = 35] = "k_EInGameEventGeneral";
})(EClanEventType || (EClanEventType = {}));
const EClanEventTypeArray = [
    EClanEventType.k_EOtherEvent, EClanEventType.k_EGameEvent, EClanEventType.k_EPartyEvent, EClanEventType.k_EMeetingEvent, EClanEventType.k_ESpecialCauseEvent,
    EClanEventType.k_EMusicAndArtsEvent, EClanEventType.k_ESportsEvent, EClanEventType.k_ETripEvent, EClanEventType.k_EChatEvent, EClanEventType.k_EGameReleaseEvent,
    EClanEventType.k_EBroadcastEvent, EClanEventType.k_ESmallUpdateEvent, EClanEventType.k_ERegularUpdateEvent, EClanEventType.k_EMajorUpdateEvent,
    EClanEventType.k_EDLCReleaseEvent, EClanEventType.k_EFutureReleaseEvent, EClanEventType.k_EESportTournamentStreamEvent, EClanEventType.k_EDevStreamEvent, EClanEventType.k_EFamousStreamEvent,
    EClanEventType.k_EGameSalesEvent, EClanEventType.k_EGameItemSalesEvent, EClanEventType.k_EInGameBonusXPEvent, EClanEventType.k_EInGameLootEvent,
    EClanEventType.k_EInGamePerksEvent, EClanEventType.k_EInGameChallengeEvent, EClanEventType.k_EInGameContestEvent, EClanEventType.k_EIRLEvent,
    EClanEventType.k_ENewsEvent, EClanEventType.k_EBetaReleaseEvent, EClanEventType.k_EFreeTrial, EClanEventType.k_ESeasonRelease, EClanEventType.k_ECrosspostEvent,
    EClanEventType.k_EInGameEventGeneral,
];
var ELaunchSource;
(function (ELaunchSource) {
    ELaunchSource[ELaunchSource["k_ELaunchSource_None"] = 0] = "k_ELaunchSource_None";
    ELaunchSource[ELaunchSource["k_ELaunchSource_2ftLibraryDetails"] = 100] = "k_ELaunchSource_2ftLibraryDetails";
    ELaunchSource[ELaunchSource["k_ELaunchSource_2ftLibraryListView"] = 101] = "k_ELaunchSource_2ftLibraryListView";
    ELaunchSource[ELaunchSource["k_ELaunchSource_2ftLibraryGrid"] = 103] = "k_ELaunchSource_2ftLibraryGrid";
    ELaunchSource[ELaunchSource["k_ELaunchSource_InstallSubComplete"] = 104] = "k_ELaunchSource_InstallSubComplete";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DownloadsPage"] = 105] = "k_ELaunchSource_DownloadsPage";
    ELaunchSource[ELaunchSource["k_ELaunchSource_RemoteClientStartStreaming"] = 106] = "k_ELaunchSource_RemoteClientStartStreaming";
    ELaunchSource[ELaunchSource["k_ELaunchSource_2ftMiniModeList"] = 107] = "k_ELaunchSource_2ftMiniModeList";
    ELaunchSource[ELaunchSource["k_ELaunchSource_10ft"] = 200] = "k_ELaunchSource_10ft";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DashAppLaunchCmdLine"] = 300] = "k_ELaunchSource_DashAppLaunchCmdLine";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DashGameIdLaunchCmdLine"] = 301] = "k_ELaunchSource_DashGameIdLaunchCmdLine";
    ELaunchSource[ELaunchSource["k_ELaunchSource_RunByGameDir"] = 302] = "k_ELaunchSource_RunByGameDir";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SubCmdRunDashGame"] = 303] = "k_ELaunchSource_SubCmdRunDashGame";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_Launch"] = 400] = "k_ELaunchSource_SteamURL_Launch";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_Run"] = 401] = "k_ELaunchSource_SteamURL_Run";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_JoinLobby"] = 402] = "k_ELaunchSource_SteamURL_JoinLobby";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_RunGame"] = 403] = "k_ELaunchSource_SteamURL_RunGame";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_RunGameIdOrJumplist"] = 404] = "k_ELaunchSource_SteamURL_RunGameIdOrJumplist";
    ELaunchSource[ELaunchSource["k_ELaunchSource_SteamURL_RunSafe"] = 405] = "k_ELaunchSource_SteamURL_RunSafe";
    ELaunchSource[ELaunchSource["k_ELaunchSource_TrayIcon"] = 500] = "k_ELaunchSource_TrayIcon";
    ELaunchSource[ELaunchSource["k_ELaunchSource_LibraryLeftColumnContextMenu"] = 600] = "k_ELaunchSource_LibraryLeftColumnContextMenu";
    ELaunchSource[ELaunchSource["k_ELaunchSource_LibraryLeftColumnDoubleClick"] = 601] = "k_ELaunchSource_LibraryLeftColumnDoubleClick";
    ELaunchSource[ELaunchSource["k_ELaunchSource_Dota2Launcher"] = 700] = "k_ELaunchSource_Dota2Launcher";
    ELaunchSource[ELaunchSource["k_ELaunchSource_IRunGameEngine"] = 800] = "k_ELaunchSource_IRunGameEngine";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DRMFailureResponse"] = 801] = "k_ELaunchSource_DRMFailureResponse";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DRMDataRequest"] = 802] = "k_ELaunchSource_DRMDataRequest";
    ELaunchSource[ELaunchSource["k_ELaunchSource_CloudFilePanel"] = 803] = "k_ELaunchSource_CloudFilePanel";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DiscoveredAlreadyRunning"] = 804] = "k_ELaunchSource_DiscoveredAlreadyRunning";
    ELaunchSource[ELaunchSource["k_ELaunchSource_GameActionJoinParty"] = 900] = "k_ELaunchSource_GameActionJoinParty";
    ELaunchSource[ELaunchSource["k_ELaunchSource_AppPortraitContextMenu"] = 1000] = "k_ELaunchSource_AppPortraitContextMenu";
    ELaunchSource[ELaunchSource["k_ELaunchSource_DownloadItem"] = 1001] = "k_ELaunchSource_DownloadItem";
})(ELaunchSource || (ELaunchSource = {}));
var ECommunityPrivacyState;
(function (ECommunityPrivacyState) {
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyInvalid"] = 0] = "k_ECommunityPrivacyInvalid";
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyPrivate"] = 1] = "k_ECommunityPrivacyPrivate";
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyFriendsOnly"] = 2] = "k_ECommunityPrivacyFriendsOnly";
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyPublic"] = 3] = "k_ECommunityPrivacyPublic";
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyUsersOnly_DEPRECATED"] = 4] = "k_ECommunityPrivacyUsersOnly_DEPRECATED";
    ECommunityPrivacyState[ECommunityPrivacyState["k_ECommunityPrivacyFriendsFriendsOnly_DEPRECATED"] = 5] = "k_ECommunityPrivacyFriendsFriendsOnly_DEPRECATED";
})(ECommunityPrivacyState || (ECommunityPrivacyState = {}));
var EBackpackContext;
(function (EBackpackContext) {
    EBackpackContext[EBackpackContext["k_EEconContextRoot"] = 0] = "k_EEconContextRoot";
    EBackpackContext[EBackpackContext["k_EBackpackContextGiftPasses"] = 1] = "k_EBackpackContextGiftPasses";
    EBackpackContext[EBackpackContext["k_EBackpackContextProfile"] = 2] = "k_EBackpackContextProfile";
    EBackpackContext[EBackpackContext["k_EBackpackContextCoupons"] = 3] = "k_EBackpackContextCoupons";
    EBackpackContext[EBackpackContext["k_EBackpackContextWallet"] = 4] = "k_EBackpackContextWallet";
    // k_EBackpackContextPromotion		= 5, // used for Winter sale 2011, deleted for GDPR
    EBackpackContext[EBackpackContext["k_EBackpackContextCommunity"] = 6] = "k_EBackpackContextCommunity";
    EBackpackContext[EBackpackContext["k_EBackpackContextItemRewards"] = 7] = "k_EBackpackContextItemRewards";
    EBackpackContext[EBackpackContext["k_EEConContextMax"] = 999] = "k_EEConContextMax";
})(EBackpackContext || (EBackpackContext = {}));
var ERemoteStoragePublishedFileVisibility;
(function (ERemoteStoragePublishedFileVisibility) {
    ERemoteStoragePublishedFileVisibility[ERemoteStoragePublishedFileVisibility["k_ERemoteStoragePublishedFileVisibilityPublic"] = 0] = "k_ERemoteStoragePublishedFileVisibilityPublic";
    ERemoteStoragePublishedFileVisibility[ERemoteStoragePublishedFileVisibility["k_ERemoteStoragePublishedFileVisibilityFriendsOnly"] = 1] = "k_ERemoteStoragePublishedFileVisibilityFriendsOnly";
    ERemoteStoragePublishedFileVisibility[ERemoteStoragePublishedFileVisibility["k_ERemoteStoragePublishedFileVisibilityPrivate"] = 2] = "k_ERemoteStoragePublishedFileVisibilityPrivate";
    ERemoteStoragePublishedFileVisibility[ERemoteStoragePublishedFileVisibility["k_ERemoteStoragePublishedFileVisibilityUnlisted"] = 3] = "k_ERemoteStoragePublishedFileVisibilityUnlisted";
})(ERemoteStoragePublishedFileVisibility || (ERemoteStoragePublishedFileVisibility = {}));
var EUCMListType;
(function (EUCMListType) {
    EUCMListType[EUCMListType["k_EUCMListTypeSubscribed"] = 1] = "k_EUCMListTypeSubscribed";
    EUCMListType[EUCMListType["k_EUCMListTypeFavorites"] = 2] = "k_EUCMListTypeFavorites";
    EUCMListType[EUCMListType["k_EUCMListTypePlayed"] = 3] = "k_EUCMListTypePlayed";
    EUCMListType[EUCMListType["k_EUCMListTypeCompleted"] = 4] = "k_EUCMListTypeCompleted";
    EUCMListType[EUCMListType["k_EUCMListTypeShortcutFavorites"] = 5] = "k_EUCMListTypeShortcutFavorites";
    EUCMListType[EUCMListType["k_EUCMListTypeFollowed"] = 6] = "k_EUCMListTypeFollowed";
})(EUCMListType || (EUCMListType = {}));
var ELibraryAssetType;
(function (ELibraryAssetType) {
    ELibraryAssetType[ELibraryAssetType["k_ELibraryAssetType_Capsule"] = 0] = "k_ELibraryAssetType_Capsule";
    ELibraryAssetType[ELibraryAssetType["k_ELibraryAssetType_Hero"] = 1] = "k_ELibraryAssetType_Hero";
    ELibraryAssetType[ELibraryAssetType["k_ELibraryAssetType_Logo"] = 2] = "k_ELibraryAssetType_Logo";
    ELibraryAssetType[ELibraryAssetType["k_ELibraryAssetType_Header"] = 3] = "k_ELibraryAssetType_Header";
    ELibraryAssetType[ELibraryAssetType["k_ELibraryAssetType_Icon"] = 4] = "k_ELibraryAssetType_Icon";
    ELibraryAssetType[ELibraryAssetType["k_ELibaryAssetType_HeroBlur"] = 5] = "k_ELibaryAssetType_HeroBlur";
})(ELibraryAssetType || (ELibraryAssetType = {}));
var ERecommendationIgnoreReason;
(function (ERecommendationIgnoreReason) {
    ERecommendationIgnoreReason[ERecommendationIgnoreReason["k_ERecommendationIgnoreReasonNotInterested"] = 0] = "k_ERecommendationIgnoreReasonNotInterested";
    ERecommendationIgnoreReason[ERecommendationIgnoreReason["k_ERecommendationIgnoreReasonBlocked"] = 1] = "k_ERecommendationIgnoreReasonBlocked";
    ERecommendationIgnoreReason[ERecommendationIgnoreReason["k_ERecommendationIgnoreReasonOwnedElsewhere"] = 2] = "k_ERecommendationIgnoreReasonOwnedElsewhere";
})(ERecommendationIgnoreReason || (ERecommendationIgnoreReason = {}));
var ELauncherType;
(function (ELauncherType) {
    ELauncherType[ELauncherType["k_ELauncherTypeDefault"] = 0] = "k_ELauncherTypeDefault";
    ELauncherType[ELauncherType["k_ELauncherTypePerfectWorld"] = 1] = "k_ELauncherTypePerfectWorld";
    ELauncherType[ELauncherType["k_ELauncherTypeNexon"] = 2] = "k_ELauncherTypeNexon";
    ELauncherType[ELauncherType["k_ELauncherTypeCmdLine"] = 3] = "k_ELauncherTypeCmdLine";
    ELauncherType[ELauncherType["k_ELauncherTypeCSGO"] = 4] = "k_ELauncherTypeCSGO";
    ELauncherType[ELauncherType["k_ELauncherTypeClientUI"] = 5] = "k_ELauncherTypeClientUI";
    ELauncherType[ELauncherType["k_ELauncherTypeHeadless"] = 6] = "k_ELauncherTypeHeadless";
    ELauncherType[ELauncherType["k_ELauncherTypeSteamChina"] = 7] = "k_ELauncherTypeSteamChina";
    ELauncherType[ELauncherType["k_ELauncherTypeSingleApp"] = 8] = "k_ELauncherTypeSingleApp";
    ELauncherType[ELauncherType["k_ELauncherTypeGameServer"] = 9] = "k_ELauncherTypeGameServer";
    ELauncherType[ELauncherType["k_ELauncherTypeMax"] = 10] = "k_ELauncherTypeMax";
})(ELauncherType || (ELauncherType = {}));
function PchNameFromELauncherType(launcherType) {
    switch (launcherType) {
        case ELauncherType.k_ELauncherTypeDefault:
        default:
            return "default";
        case ELauncherType.k_ELauncherTypePerfectWorld:
            return "pw_dota2";
        case ELauncherType.k_ELauncherTypeNexon:
            return "nexon_dota2";
        case ELauncherType.k_ELauncherTypeCmdLine:
            return "steamcmd";
        case ELauncherType.k_ELauncherTypeCSGO:
            return "pw_csgo";
        case ELauncherType.k_ELauncherTypeClientUI:
            return "clientui";
        case ELauncherType.k_ELauncherTypeHeadless:
            return "steamhdl";
        case ELauncherType.k_ELauncherTypeSteamChina:
            return "steamchina";
        case ELauncherType.k_ELauncherTypeSingleApp:
            return "singleapp";
        case ELauncherType.k_ELauncherTypeGameServer:
            return "gameserver";
    }
}
//
// Returns whether the specified launchr type is a "china launcher" for the purposes of
// features like anti addiction. This includes steam china, the steam china government review
// launcher, and the pw csgo and pw dota2 launchers.
//
function BIsChinaLauncher(launcherType) {
    switch (launcherType) {
        default:
            break;
        case ELauncherType.k_ELauncherTypeCSGO:
        case ELauncherType.k_ELauncherTypePerfectWorld:
        case ELauncherType.k_ELauncherTypeSteamChina:
        case ELauncherType.k_ELauncherTypeSingleApp:
            return true;
    }
    return false;
}
//
// Returns whether the specified launchr type is a "reduced ui" launcher. These are
// launchers that are missing the bulk of the client UI, used to launch a single game.
// either pw csgo / pw dota2, or a cn government employee using our review launcher
// that launches a single app for govt testing / approval.
//
function BIsReducedUILauncher(launcherType) {
    switch (launcherType) {
        default:
            break;
        case ELauncherType.k_ELauncherTypeCSGO:
        case ELauncherType.k_ELauncherTypePerfectWorld:
        case ELauncherType.k_ELauncherTypeSingleApp:
            return true;
    }
    return false;
}
var EStoreCuratorRecommendationState;
(function (EStoreCuratorRecommendationState) {
    EStoreCuratorRecommendationState[EStoreCuratorRecommendationState["k_EStoreCuratorRecommendationState_Recommended"] = 0] = "k_EStoreCuratorRecommendationState_Recommended";
    EStoreCuratorRecommendationState[EStoreCuratorRecommendationState["k_EStoreCuratorRecommendationState_NotRecommended"] = 1] = "k_EStoreCuratorRecommendationState_NotRecommended";
    EStoreCuratorRecommendationState[EStoreCuratorRecommendationState["k_EStoreCuratorRecommendationState_Informative"] = 2] = "k_EStoreCuratorRecommendationState_Informative";
    EStoreCuratorRecommendationState[EStoreCuratorRecommendationState["k_EStoreCuratorRecommendationState_CreatedApp"] = 3] = "k_EStoreCuratorRecommendationState_CreatedApp";
})(EStoreCuratorRecommendationState || (EStoreCuratorRecommendationState = {}));
var EUCMFilePrivacyState;
(function (EUCMFilePrivacyState) {
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStateInvalid"] = -1] = "k_EUCMFilePrivacyStateInvalid";
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStatePrivate"] = 2] = "k_EUCMFilePrivacyStatePrivate";
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStateFriendsOnly"] = 4] = "k_EUCMFilePrivacyStateFriendsOnly";
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStatePublic"] = 8] = "k_EUCMFilePrivacyStatePublic";
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStateUnlisted"] = 16] = "k_EUCMFilePrivacyStateUnlisted";
    EUCMFilePrivacyState[EUCMFilePrivacyState["k_EUCMFilePrivacyStateAll"] = 30] = "k_EUCMFilePrivacyStateAll";
})(EUCMFilePrivacyState || (EUCMFilePrivacyState = {}));
//-----------------------------------------------------------------------------
// Purpose: UI modes for a connected client, stored on the AMUserSession for that client
//-----------------------------------------------------------------------------
var EUIMode;
(function (EUIMode) {
    EUIMode[EUIMode["k_EUIMode_Unknown"] = -1] = "k_EUIMode_Unknown";
    EUIMode[EUIMode["k_EUIMode_VGUI"] = 0] = "k_EUIMode_VGUI";
    EUIMode[EUIMode["k_EUIMode_Tenfoot"] = 1] = "k_EUIMode_Tenfoot";
    EUIMode[EUIMode["k_EUIMode_Mobile"] = 2] = "k_EUIMode_Mobile";
    EUIMode[EUIMode["k_EUIMode_Web"] = 3] = "k_EUIMode_Web";
    EUIMode[EUIMode["k_EUIMode_GamePadUI"] = 4] = "k_EUIMode_GamePadUI";
    EUIMode[EUIMode["k_EUIMode_MobileChat"] = 5] = "k_EUIMode_MobileChat";
    EUIMode[EUIMode["k_EUIMode_EmbeddedClient"] = 6] = "k_EUIMode_EmbeddedClient";
    EUIMode[EUIMode["k_EUIMode_DesktopUI"] = 7] = "k_EUIMode_DesktopUI";
    EUIMode[EUIMode["k_EUIMode_MAX"] = 8] = "k_EUIMode_MAX";
})(EUIMode || (EUIMode = {}));
//-----------------------------------------------------------------------------
// EStoreCategory
//-----------------------------------------------------------------------------
var EStoreCategory;
(function (EStoreCategory) {
    EStoreCategory[EStoreCategory["k_EStoreCategoryMultiplayer"] = 1] = "k_EStoreCategoryMultiplayer";
    EStoreCategory[EStoreCategory["k_EStoreCategorySingleplayer"] = 2] = "k_EStoreCategorySingleplayer";
    EStoreCategory[EStoreCategory["k_EStoreCategoryModHL2"] = 6] = "k_EStoreCategoryModHL2";
    EStoreCategory[EStoreCategory["k_EStoreCategoryModHL"] = 7] = "k_EStoreCategoryModHL";
    EStoreCategory[EStoreCategory["k_EStoreCategoryVAC"] = 8] = "k_EStoreCategoryVAC";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCoop"] = 9] = "k_EStoreCategoryCoop";
    EStoreCategory[EStoreCategory["k_EStoreCategoryDemo"] = 10] = "k_EStoreCategoryDemo";
    EStoreCategory[EStoreCategory["k_EStoreCategoryFriends"] = 11] = "k_EStoreCategoryFriends";
    EStoreCategory[EStoreCategory["k_EStoreCategoryHDR"] = 12] = "k_EStoreCategoryHDR";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCC"] = 13] = "k_EStoreCategoryCC";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCommentary"] = 14] = "k_EStoreCategoryCommentary";
    EStoreCategory[EStoreCategory["k_EStoreCategoryStats"] = 15] = "k_EStoreCategoryStats";
    EStoreCategory[EStoreCategory["k_EStoreCategorySDK"] = 16] = "k_EStoreCategorySDK";
    EStoreCategory[EStoreCategory["k_EStoreCategoryEditor"] = 17] = "k_EStoreCategoryEditor";
    EStoreCategory[EStoreCategory["k_EStoreCategoryPartialController"] = 18] = "k_EStoreCategoryPartialController";
    EStoreCategory[EStoreCategory["k_EStoreCategoryMod"] = 19] = "k_EStoreCategoryMod";
    EStoreCategory[EStoreCategory["k_EStoreCategoryMMO"] = 20] = "k_EStoreCategoryMMO";
    EStoreCategory[EStoreCategory["k_EStoreCategoryDLC"] = 21] = "k_EStoreCategoryDLC";
    EStoreCategory[EStoreCategory["k_EStoreCategoryAchievements"] = 22] = "k_EStoreCategoryAchievements";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCloud"] = 23] = "k_EStoreCategoryCloud";
    EStoreCategory[EStoreCategory["k_EStoreCategorySharedSplitscreen"] = 24] = "k_EStoreCategorySharedSplitscreen";
    EStoreCategory[EStoreCategory["k_EStoreCategoryLeaderboards"] = 25] = "k_EStoreCategoryLeaderboards";
    EStoreCategory[EStoreCategory["k_EStoreCategoryGuide"] = 26] = "k_EStoreCategoryGuide";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCrossPlatMultiplayer"] = 27] = "k_EStoreCategoryCrossPlatMultiplayer";
    EStoreCategory[EStoreCategory["k_EStoreCategoryFullController"] = 28] = "k_EStoreCategoryFullController";
    EStoreCategory[EStoreCategory["k_EStoreCategoryTradingCard"] = 29] = "k_EStoreCategoryTradingCard";
    EStoreCategory[EStoreCategory["k_EStoreCategoryWorkshop"] = 30] = "k_EStoreCategoryWorkshop";
    EStoreCategory[EStoreCategory["k_EStoreCategoryVRThirdParty"] = 31] = "k_EStoreCategoryVRThirdParty";
    EStoreCategory[EStoreCategory["k_EStoreCategoryAsyncGameNotifications"] = 32] = "k_EStoreCategoryAsyncGameNotifications";
    EStoreCategory[EStoreCategory["k_EStoreCategorySteamController"] = 33] = "k_EStoreCategorySteamController";
    EStoreCategory[EStoreCategory["k_EStoreCategoryVRSteam"] = 34] = "k_EStoreCategoryVRSteam";
    EStoreCategory[EStoreCategory["k_EStoreCategoryInAppPurchases"] = 35] = "k_EStoreCategoryInAppPurchases";
    EStoreCategory[EStoreCategory["k_EStoreCategoryOnlinePvP"] = 36] = "k_EStoreCategoryOnlinePvP";
    EStoreCategory[EStoreCategory["k_EStoreCategoryLocalPvP"] = 37] = "k_EStoreCategoryLocalPvP";
    EStoreCategory[EStoreCategory["k_EStoreCategoryOnlineCoop"] = 38] = "k_EStoreCategoryOnlineCoop";
    EStoreCategory[EStoreCategory["k_EStoreCategoryLocalCoop"] = 39] = "k_EStoreCategoryLocalCoop";
    EStoreCategory[EStoreCategory["k_EStoreCategorySteamVRCollectibles"] = 40] = "k_EStoreCategorySteamVRCollectibles";
    EStoreCategory[EStoreCategory["k_EStoreCategoryRemotePlayToPhone"] = 41] = "k_EStoreCategoryRemotePlayToPhone";
    EStoreCategory[EStoreCategory["k_EStoreCategoryRemotePlayToTablet"] = 42] = "k_EStoreCategoryRemotePlayToTablet";
    EStoreCategory[EStoreCategory["k_EStoreCategoryRemotePlayToTV"] = 43] = "k_EStoreCategoryRemotePlayToTV";
    EStoreCategory[EStoreCategory["k_EStoreCategoryRemotePlayTogether"] = 44] = "k_EStoreCategoryRemotePlayTogether";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCloudGaming"] = 45] = "k_EStoreCategoryCloudGaming";
    EStoreCategory[EStoreCategory["k_EStoreCategoryCloudGamingNVIDIA"] = 46] = "k_EStoreCategoryCloudGamingNVIDIA";
    EStoreCategory[EStoreCategory["k_EStoreCategoryLANPvP"] = 47] = "k_EStoreCategoryLANPvP";
    EStoreCategory[EStoreCategory["k_EStoreCategoryLANCoop"] = 48] = "k_EStoreCategoryLANCoop";
    EStoreCategory[EStoreCategory["k_EStoreCategoryPvP"] = 49] = "k_EStoreCategoryPvP";
    EStoreCategory[EStoreCategory["k_EStoreCategoryHighQualitySoundtrackAudio"] = 50] = "k_EStoreCategoryHighQualitySoundtrackAudio";
    EStoreCategory[EStoreCategory["k_EStoreCategorySteamChinaWorkshop"] = 51] = "k_EStoreCategorySteamChinaWorkshop";
})(EStoreCategory || (EStoreCategory = {}));
var EPublishedFileInfoMatchingFileType;
(function (EPublishedFileInfoMatchingFileType) {
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Items"] = 0] = "k_PFI_MatchingFileType_Items";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Collections"] = 1] = "k_PFI_MatchingFileType_Collections";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Art"] = 2] = "k_PFI_MatchingFileType_Art";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Videos"] = 3] = "k_PFI_MatchingFileType_Videos";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Screenshots"] = 4] = "k_PFI_MatchingFileType_Screenshots";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_CollectionEligible"] = 5] = "k_PFI_MatchingFileType_CollectionEligible";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Games"] = 6] = "k_PFI_MatchingFileType_Games";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Software"] = 7] = "k_PFI_MatchingFileType_Software";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Concepts"] = 8] = "k_PFI_MatchingFileType_Concepts";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_GreenlightItems"] = 9] = "k_PFI_MatchingFileType_GreenlightItems";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_AllGuides"] = 10] = "k_PFI_MatchingFileType_AllGuides";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_WebGuides"] = 11] = "k_PFI_MatchingFileType_WebGuides";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_IntegratedGuides"] = 12] = "k_PFI_MatchingFileType_IntegratedGuides";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_UsableInGame"] = 13] = "k_PFI_MatchingFileType_UsableInGame";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Merch"] = 14] = "k_PFI_MatchingFileType_Merch";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_ControllerBindings"] = 15] = "k_PFI_MatchingFileType_ControllerBindings";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_SteamworksAccessInvites"] = 16] = "k_PFI_MatchingFileType_SteamworksAccessInvites";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Items_Mtx"] = 17] = "k_PFI_MatchingFileType_Items_Mtx";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_Items_ReadyToUse"] = 18] = "k_PFI_MatchingFileType_Items_ReadyToUse";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_WorkshopShowcase"] = 19] = "k_PFI_MatchingFileType_WorkshopShowcase";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_GameManagedItems"] = 20] = "k_PFI_MatchingFileType_GameManagedItems";
    EPublishedFileInfoMatchingFileType[EPublishedFileInfoMatchingFileType["k_PFI_MatchingFileType_All"] = -1] = "k_PFI_MatchingFileType_All";
})(EPublishedFileInfoMatchingFileType || (EPublishedFileInfoMatchingFileType = {}));
// Result from checking for a captive portal (gogoinflight, starbucks, etc)
var EConnectivityTestResult;
(function (EConnectivityTestResult) {
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_Unknown"] = 0] = "k_EConnectivityTestResult_Unknown";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_Connected"] = 1] = "k_EConnectivityTestResult_Connected";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_CaptivePortal"] = 2] = "k_EConnectivityTestResult_CaptivePortal";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_TimedOut"] = 3] = "k_EConnectivityTestResult_TimedOut";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_Failed"] = 4] = "k_EConnectivityTestResult_Failed";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_WifiDisabled"] = 5] = "k_EConnectivityTestResult_WifiDisabled";
    EConnectivityTestResult[EConnectivityTestResult["k_EConnectivityTestResult_NoLAN"] = 6] = "k_EConnectivityTestResult_NoLAN";
})(EConnectivityTestResult || (EConnectivityTestResult = {}));
// Simulate network conditions
var ENetFakeLocalSystemState;
(function (ENetFakeLocalSystemState) {
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_Normal"] = 0] = "k_ENetFakeLocalSystemState_Normal";
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_NoLAN"] = 1] = "k_ENetFakeLocalSystemState_NoLAN";
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_CaptivePortal_Redirected"] = 2] = "k_ENetFakeLocalSystemState_CaptivePortal_Redirected";
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_CaptivePortal_InPlace"] = 3] = "k_ENetFakeLocalSystemState_CaptivePortal_InPlace";
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_NoInternet"] = 4] = "k_ENetFakeLocalSystemState_NoInternet";
    ENetFakeLocalSystemState[ENetFakeLocalSystemState["k_ENetFakeLocalSystemState_NoSteam"] = 5] = "k_ENetFakeLocalSystemState_NoSteam";
})(ENetFakeLocalSystemState || (ENetFakeLocalSystemState = {}));
// Used in PrepareForSuspendProgress and ResumeSuspendedGamesProgress callbacks
var ESuspendResumeProgressState;
(function (ESuspendResumeProgressState) {
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_Invalid"] = 0] = "k_ESuspendResumeProgressState_Invalid";
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_Complete"] = 1] = "k_ESuspendResumeProgressState_Complete";
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_CloudSync"] = 2] = "k_ESuspendResumeProgressState_CloudSync";
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_LoggingIn"] = 3] = "k_ESuspendResumeProgressState_LoggingIn";
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_WaitingForApp"] = 4] = "k_ESuspendResumeProgressState_WaitingForApp";
    ESuspendResumeProgressState[ESuspendResumeProgressState["k_ESuspendResumeProgressState_Working"] = 5] = "k_ESuspendResumeProgressState_Working";
})(ESuspendResumeProgressState || (ESuspendResumeProgressState = {}));
var EFloatingGamepadTextInputMode;
(function (EFloatingGamepadTextInputMode) {
    EFloatingGamepadTextInputMode[EFloatingGamepadTextInputMode["k_EFloatingGamepadTextInputModeModeSingleLine"] = 0] = "k_EFloatingGamepadTextInputModeModeSingleLine";
    EFloatingGamepadTextInputMode[EFloatingGamepadTextInputMode["k_EFloatingGamepadTextInputModeModeMultipleLines"] = 1] = "k_EFloatingGamepadTextInputModeModeMultipleLines";
    EFloatingGamepadTextInputMode[EFloatingGamepadTextInputMode["k_EFloatingGamepadTextInputModeModeEmail"] = 2] = "k_EFloatingGamepadTextInputModeModeEmail";
    EFloatingGamepadTextInputMode[EFloatingGamepadTextInputMode["k_EFloatingGamepadTextInputModeModeNumeric"] = 3] = "k_EFloatingGamepadTextInputModeModeNumeric";
})(EFloatingGamepadTextInputMode || (EFloatingGamepadTextInputMode = {}));
var EAppUpdateContentType;
(function (EAppUpdateContentType) {
    EAppUpdateContentType[EAppUpdateContentType["k_EAppUpdateContentType_Content"] = 0] = "k_EAppUpdateContentType_Content";
    EAppUpdateContentType[EAppUpdateContentType["k_EAppUpdateContentType_Workshop"] = 1] = "k_EAppUpdateContentType_Workshop";
    EAppUpdateContentType[EAppUpdateContentType["k_EAppUpdateContentType_Shader"] = 2] = "k_EAppUpdateContentType_Shader";
    EAppUpdateContentType[EAppUpdateContentType["k_EAppUpdateContentType_Max"] = 3] = "k_EAppUpdateContentType_Max";
})(EAppUpdateContentType || (EAppUpdateContentType = {}));
var EOverlayToStoreFlag;
(function (EOverlayToStoreFlag) {
    EOverlayToStoreFlag[EOverlayToStoreFlag["k_EOverlayToStoreFlag_None"] = 0] = "k_EOverlayToStoreFlag_None";
    EOverlayToStoreFlag[EOverlayToStoreFlag["k_EOverlayToStoreFlag_AddToCart"] = 1] = "k_EOverlayToStoreFlag_AddToCart";
    EOverlayToStoreFlag[EOverlayToStoreFlag["k_EOverlayToStoreFlag_AddToCartAndShow"] = 2] = "k_EOverlayToStoreFlag_AddToCartAndShow";
})(EOverlayToStoreFlag || (EOverlayToStoreFlag = {}));
var EActivateGameOverlayToWebPageMode;
(function (EActivateGameOverlayToWebPageMode) {
    EActivateGameOverlayToWebPageMode[EActivateGameOverlayToWebPageMode["k_EActivateGameOverlayToWebPageMode_Default"] = 0] = "k_EActivateGameOverlayToWebPageMode_Default";
    // The window will remain open, even if the user closes then re-opens the overlay.
    EActivateGameOverlayToWebPageMode[EActivateGameOverlayToWebPageMode["k_EActivateGameOverlayToWebPageMode_Modal"] = 1] = "k_EActivateGameOverlayToWebPageMode_Modal"; // Browser will be opened in a special overlay configuration which hides all other windows
    // that the user has open in the overlay. When the user closes the overlay, the browser window
    // will also close. When the user closes the browser window, the overlay will automatically close.
})(EActivateGameOverlayToWebPageMode || (EActivateGameOverlayToWebPageMode = {}));
var EGamingDeviceType;
(function (EGamingDeviceType) {
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_Unknown"] = 0] = "k_EGamingDeviceType_Unknown";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_StandardPC"] = 1] = "k_EGamingDeviceType_StandardPC";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_Console"] = 256] = "k_EGamingDeviceType_Console";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_PS3"] = 272] = "k_EGamingDeviceType_PS3";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_Steambox"] = 288] = "k_EGamingDeviceType_Steambox";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_Handheld"] = 512] = "k_EGamingDeviceType_Handheld";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_Phone"] = 528] = "k_EGamingDeviceType_Phone";
    EGamingDeviceType[EGamingDeviceType["k_EGamingDeviceType_SteamDeck"] = 544] = "k_EGamingDeviceType_SteamDeck";
})(EGamingDeviceType || (EGamingDeviceType = {}));
var ELoginUIStyle;
(function (ELoginUIStyle) {
    ELoginUIStyle[ELoginUIStyle["k_ELoginUIStyleOld"] = 0] = "k_ELoginUIStyleOld";
    ELoginUIStyle[ELoginUIStyle["k_ELoginUIStyleNewWithoutQRCode"] = 1] = "k_ELoginUIStyleNewWithoutQRCode";
    ELoginUIStyle[ELoginUIStyle["k_ELoginUIStyleNew"] = 2] = "k_ELoginUIStyleNew";
})(ELoginUIStyle || (ELoginUIStyle = {}));
var ECommunityProfileItemProperty;
(function (ECommunityProfileItemProperty) {
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_ImageSmall"] = 0] = "k_ECommunityProfileItemProperty_ImageSmall";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_ImageLarge"] = 1] = "k_ECommunityProfileItemProperty_ImageLarge";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_InternalName"] = 2] = "k_ECommunityProfileItemProperty_InternalName";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_Title"] = 3] = "k_ECommunityProfileItemProperty_Title";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_Description"] = 4] = "k_ECommunityProfileItemProperty_Description";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_AppID"] = 5] = "k_ECommunityProfileItemProperty_AppID";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_TypeID"] = 6] = "k_ECommunityProfileItemProperty_TypeID";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_Class"] = 7] = "k_ECommunityProfileItemProperty_Class";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_MovieWebM"] = 8] = "k_ECommunityProfileItemProperty_MovieWebM";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_MovieMP4"] = 9] = "k_ECommunityProfileItemProperty_MovieMP4";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_MovieWebMSmall"] = 10] = "k_ECommunityProfileItemProperty_MovieWebMSmall";
    ECommunityProfileItemProperty[ECommunityProfileItemProperty["k_ECommunityProfileItemProperty_MovieMP4Small"] = 11] = "k_ECommunityProfileItemProperty_MovieMP4Small";
})(ECommunityProfileItemProperty || (ECommunityProfileItemProperty = {}));
var ERaiseGameWindowResult;
(function (ERaiseGameWindowResult) {
    ERaiseGameWindowResult[ERaiseGameWindowResult["k_ERaiseGameWindowResult_NotRunning"] = 1] = "k_ERaiseGameWindowResult_NotRunning";
    ERaiseGameWindowResult[ERaiseGameWindowResult["k_ERaiseGameWindowResult_Success"] = 2] = "k_ERaiseGameWindowResult_Success";
    ERaiseGameWindowResult[ERaiseGameWindowResult["k_ERaiseGameWindowResult_Failure"] = 3] = "k_ERaiseGameWindowResult_Failure";
})(ERaiseGameWindowResult || (ERaiseGameWindowResult = {}));
var ENotificationPosition;
(function (ENotificationPosition) {
    ENotificationPosition[ENotificationPosition["k_EPositionInvalid"] = -1] = "k_EPositionInvalid";
    ENotificationPosition[ENotificationPosition["k_EPositionTopLeft"] = 0] = "k_EPositionTopLeft";
    ENotificationPosition[ENotificationPosition["k_EPositionTopRight"] = 1] = "k_EPositionTopRight";
    ENotificationPosition[ENotificationPosition["k_EPositionBottomLeft"] = 2] = "k_EPositionBottomLeft";
    ENotificationPosition[ENotificationPosition["k_EPositionBottomRight"] = 3] = "k_EPositionBottomRight";
})(ENotificationPosition || (ENotificationPosition = {}));
var EAppReleaseState;
(function (EAppReleaseState) {
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_Unknown"] = 0] = "k_EAppReleaseState_Unknown";
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_Unavailable"] = 1] = "k_EAppReleaseState_Unavailable";
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_Prerelease"] = 2] = "k_EAppReleaseState_Prerelease";
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_PreloadOnly"] = 3] = "k_EAppReleaseState_PreloadOnly";
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_Released"] = 4] = "k_EAppReleaseState_Released";
    EAppReleaseState[EAppReleaseState["k_EAppReleaseState_Disabled"] = 5] = "k_EAppReleaseState_Disabled";
})(EAppReleaseState || (EAppReleaseState = {}));
var EInstallManagerState;
(function (EInstallManagerState) {
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateNone"] = 0] = "k_EInstallMgrStateNone";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateSetup"] = 1] = "k_EInstallMgrStateSetup";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateWaitLicense"] = 2] = "k_EInstallMgrStateWaitLicense";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateFreeLicense"] = 3] = "k_EInstallMgrStateFreeLicense";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowCDKey"] = 4] = "k_EInstallMgrStateShowCDKey";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateWaitAppInfo"] = 5] = "k_EInstallMgrStateWaitAppInfo";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowPassword"] = 6] = "k_EInstallMgrStateShowPassword";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowConfig"] = 7] = "k_EInstallMgrStateShowConfig";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowEULAs"] = 8] = "k_EInstallMgrStateShowEULAs";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateCreateApps"] = 9] = "k_EInstallMgrStateCreateApps";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateReadFromMedia"] = 10] = "k_EInstallMgrStateReadFromMedia";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowChangeMedia"] = 11] = "k_EInstallMgrStateShowChangeMedia";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateWaitLegacyCDKeys"] = 12] = "k_EInstallMgrStateWaitLegacyCDKeys";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateShowSignup"] = 13] = "k_EInstallMgrStateShowSignup";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateComplete"] = 14] = "k_EInstallMgrStateComplete";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateFailed"] = 15] = "k_EInstallMgrStateFailed";
    EInstallManagerState[EInstallManagerState["k_EInstallMgrStateCanceled"] = 16] = "k_EInstallMgrStateCanceled";
})(EInstallManagerState || (EInstallManagerState = {}));
;


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/appdetailstypes.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/appdetailstypes.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppDetails": () => (/* binding */ AppDetails),
/* harmony export */   "AppDetailsBeta": () => (/* binding */ AppDetailsBeta),
/* harmony export */   "AppDetailsDLC": () => (/* binding */ AppDetailsDLC),
/* harmony export */   "AppLegacyCDKey": () => (/* binding */ AppLegacyCDKey),
/* harmony export */   "AppLibraryAssets": () => (/* binding */ AppLibraryAssets),
/* harmony export */   "AppTag": () => (/* binding */ AppTag),
/* harmony export */   "EAppAction": () => (/* binding */ EAppAction),
/* harmony export */   "EAppAllowDownloadsWhileRunningBehavior": () => (/* binding */ EAppAllowDownloadsWhileRunningBehavior),
/* harmony export */   "EAppAutoUpdateBehavior": () => (/* binding */ EAppAutoUpdateBehavior),
/* harmony export */   "EAppOwnershipFlags": () => (/* binding */ EAppOwnershipFlags),
/* harmony export */   "ECompatPriority": () => (/* binding */ ECompatPriority),
/* harmony export */   "ELogoPinnedPosition": () => (/* binding */ ELogoPinnedPosition)
/* harmony export */ });
class AppTag {
    constructor() {
        this.tagName = "";
        this.vecTagIds = [];
    }
}
/** Possible actions one can take for an app. */
var EAppAction;
(function (EAppAction) {
    EAppAction["k_EAppActionPlayGame"] = "Play";
    EAppAction["k_EAppActionLaunchApp"] = "Launch";
    EAppAction["k_EAppActionCancelLaunch"] = "Cancel";
    EAppAction["k_EAppActionShutdownApp"] = "Stop";
    EAppAction["k_EAppActionPause"] = "Pause";
    EAppAction["k_EAppActionResume"] = "Resume";
    EAppAction["k_EAppActionDownload"] = "Download";
    EAppAction["k_EAppActionUpdate"] = "Update";
    EAppAction["k_EAppActionPreload"] = "PreLoad";
    EAppAction["k_EAppActionInstall"] = "Install";
    EAppAction["k_EAppActionUninstall"] = "Uninstall";
    EAppAction["k_EAppActionRemoveShortcut"] = "RemoveShortcut";
    EAppAction["k_EAppActionBorrowApp"] = "BorrowApp";
    EAppAction["k_EAppActionShowStore"] = "PurchaseApp";
    EAppAction["k_EAppActionShowProperties"] = "GameProperties";
    EAppAction["k_EAppActionCreateDesktopShortcut"] = "CreateDesktopShortcut";
    EAppAction["k_EAppActionBackUpFiles"] = "BackUpFiles";
    EAppAction["k_EAppActionStreamGame"] = "Stream";
    EAppAction["k_EAppActionConnectToGame"] = "Connect";
    EAppAction["k_EAppActionPlayMusic"] = "PlayMusic";
    EAppAction["k_EAppActionBrowseLocalFiles"] = "BrowseLocalFiles";
    EAppAction["k_EAppActionLaunching"] = "Launching";
    EAppAction["k_EAppActionTerminating"] = "Terminating";
    EAppAction["k_EAppActionResumeGameInProgress"] = "ResumeGameInProgress";
})(EAppAction || (EAppAction = {}));
var ECompatPriority;
(function (ECompatPriority) {
    ECompatPriority[ECompatPriority["k_nAppMappingPriorityLow"] = 75] = "k_nAppMappingPriorityLow";
    ECompatPriority[ECompatPriority["k_nAppMappingPriorityDefault"] = 100] = "k_nAppMappingPriorityDefault";
    ECompatPriority[ECompatPriority["k_nAppMappingPriorityUserSpecified"] = 250] = "k_nAppMappingPriorityUserSpecified";
})(ECompatPriority || (ECompatPriority = {}));
var EAppAutoUpdateBehavior;
(function (EAppAutoUpdateBehavior) {
    EAppAutoUpdateBehavior[EAppAutoUpdateBehavior["k_EAppAutoUpdateBehaviorDefault"] = 0] = "k_EAppAutoUpdateBehaviorDefault";
    EAppAutoUpdateBehavior[EAppAutoUpdateBehavior["k_EAppAutoUpdateBehaviorDoNotUpdate"] = 1] = "k_EAppAutoUpdateBehaviorDoNotUpdate";
    EAppAutoUpdateBehavior[EAppAutoUpdateBehavior["k_EAppAutoUpdateBehaviorHighPriority"] = 2] = "k_EAppAutoUpdateBehaviorHighPriority";
})(EAppAutoUpdateBehavior || (EAppAutoUpdateBehavior = {}));
var EAppAllowDownloadsWhileRunningBehavior;
(function (EAppAllowDownloadsWhileRunningBehavior) {
    EAppAllowDownloadsWhileRunningBehavior[EAppAllowDownloadsWhileRunningBehavior["k_EAppAllowDownloadsWhileRunningBehaviorUseGlobal"] = 0] = "k_EAppAllowDownloadsWhileRunningBehaviorUseGlobal";
    EAppAllowDownloadsWhileRunningBehavior[EAppAllowDownloadsWhileRunningBehavior["k_EAppAllowDownloadsWhileRunningBehaviorAlwaysAllow"] = 1] = "k_EAppAllowDownloadsWhileRunningBehaviorAlwaysAllow";
    EAppAllowDownloadsWhileRunningBehavior[EAppAllowDownloadsWhileRunningBehavior["k_EAppAllowDownloadsWhileRunningBehaviorNeverAllow"] = 2] = "k_EAppAllowDownloadsWhileRunningBehaviorNeverAllow";
})(EAppAllowDownloadsWhileRunningBehavior || (EAppAllowDownloadsWhileRunningBehavior = {}));
var EAppOwnershipFlags;
(function (EAppOwnershipFlags) {
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_None"] = 0] = "k_EAppOwnershipFlags_None";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_OwnsLicense"] = 1] = "k_EAppOwnershipFlags_OwnsLicense";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_FreeLicense"] = 2] = "k_EAppOwnershipFlags_FreeLicense";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_RegionRestricted"] = 4] = "k_EAppOwnershipFlags_RegionRestricted";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LowViolence"] = 8] = "k_EAppOwnershipFlags_LowViolence";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_InvalidPlatform"] = 16] = "k_EAppOwnershipFlags_InvalidPlatform";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_SharedLicense"] = 32] = "k_EAppOwnershipFlags_SharedLicense";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_FreeWeekend"] = 64] = "k_EAppOwnershipFlags_FreeWeekend";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_RetailLicense"] = 128] = "k_EAppOwnershipFlags_RetailLicense";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicenseLocked"] = 256] = "k_EAppOwnershipFlags_LicenseLocked";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicensePending"] = 512] = "k_EAppOwnershipFlags_LicensePending";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicenseExpired"] = 1024] = "k_EAppOwnershipFlags_LicenseExpired";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicensePermanent"] = 2048] = "k_EAppOwnershipFlags_LicensePermanent";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicenseRecurring"] = 4096] = "k_EAppOwnershipFlags_LicenseRecurring";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LicenseCanceled"] = 8192] = "k_EAppOwnershipFlags_LicenseCanceled";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_AutoGrant"] = 16384] = "k_EAppOwnershipFlags_AutoGrant";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_PendingGift"] = 32768] = "k_EAppOwnershipFlags_PendingGift";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_RentalNotActivated"] = 65536] = "k_EAppOwnershipFlags_RentalNotActivated";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_Rental"] = 131072] = "k_EAppOwnershipFlags_Rental";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_SiteLicense"] = 262144] = "k_EAppOwnershipFlags_SiteLicense";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_LegacyFreeSub"] = 524288] = "k_EAppOwnershipFlags_LegacyFreeSub";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_InvalidOSType"] = 1048576] = "k_EAppOwnershipFlags_InvalidOSType";
    EAppOwnershipFlags[EAppOwnershipFlags["k_EAppOwnershipFlags_TimedTrial"] = 2097152] = "k_EAppOwnershipFlags_TimedTrial";
})(EAppOwnershipFlags || (EAppOwnershipFlags = {}));
class AppDetailsBeta {
}
class AppDetailsDLC {
}
class AppLegacyCDKey {
}
var ELogoPinnedPosition;
(function (ELogoPinnedPosition) {
    ELogoPinnedPosition["UpperLeft"] = "UpperLeft";
    ELogoPinnedPosition["BottomLeft"] = "BottomLeft";
    ELogoPinnedPosition["UpperCenter"] = "UpperCenter";
    ELogoPinnedPosition["CenterCenter"] = "CenterCenter";
    ELogoPinnedPosition["BottomCenter"] = "BottomCenter";
})(ELogoPinnedPosition || (ELogoPinnedPosition = {}));
class AppLibraryAssets {
}
class AppDetails {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/audiotypes.ts":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/audiotypes.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AudioDevice": () => (/* binding */ AudioDevice),
/* harmony export */   "AudioDevices": () => (/* binding */ AudioDevices),
/* harmony export */   "EAudioChannel": () => (/* binding */ EAudioChannel),
/* harmony export */   "EAudioDirection": () => (/* binding */ EAudioDirection),
/* harmony export */   "InvalidAudioDeviceId": () => (/* binding */ InvalidAudioDeviceId)
/* harmony export */ });
const InvalidAudioDeviceId = 0xFFFFFFFF;
var EAudioDirection;
(function (EAudioDirection) {
    EAudioDirection[EAudioDirection["Input"] = 0] = "Input";
    EAudioDirection[EAudioDirection["Output"] = 1] = "Output";
})(EAudioDirection || (EAudioDirection = {}));
var EAudioChannel;
(function (EAudioChannel) {
    EAudioChannel[EAudioChannel["Input"] = 0] = "Input";
    EAudioChannel[EAudioChannel["AllOutput"] = 1] = "AllOutput";
    EAudioChannel[EAudioChannel["Left"] = 2] = "Left";
    EAudioChannel[EAudioChannel["Right"] = 3] = "Right";
    EAudioChannel[EAudioChannel["Sub"] = 4] = "Sub";
    EAudioChannel[EAudioChannel["BackLeft"] = 5] = "BackLeft";
    EAudioChannel[EAudioChannel["BackRight"] = 6] = "BackRight";
})(EAudioChannel || (EAudioChannel = {}));
class AudioDevice {
}
class AudioDevices {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/authtypes.ts":
/*!***********************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/authtypes.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");



/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/basetypes.ts":
/*!***********************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/basetypes.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BIsChinaRealm": () => (/* binding */ BIsChinaRealm),
/* harmony export */   "CallbackHandleDisposer": () => (/* binding */ CallbackHandleDisposer),
/* harmony export */   "DragDropPosition": () => (/* binding */ DragDropPosition),
/* harmony export */   "ESteamRealm": () => (/* binding */ ESteamRealm)
/* harmony export */ });
// Client Realm - from clientenums.h
var ESteamRealm;
(function (ESteamRealm) {
    ESteamRealm[ESteamRealm["k_ESteamRealmUnknown"] = 0] = "k_ESteamRealmUnknown";
    ESteamRealm[ESteamRealm["k_ESteamRealmGlobal"] = 1] = "k_ESteamRealmGlobal";
    ESteamRealm[ESteamRealm["k_ESteamRealmChina"] = 2] = "k_ESteamRealmChina";
})(ESteamRealm || (ESteamRealm = {}));
function BIsChinaRealm(eRealm) {
    return eRealm === ESteamRealm.k_ESteamRealmChina;
}
class DragDropPosition {
    constructor() {
        this.x = 0;
        this.y = 0;
        this.height = 0;
        this.width = 0;
    }
}
/**
 * Helper to hold an array of handles and dispose all at once
 */
class CallbackHandleDisposer {
    constructor() {
        this.m_rgHandles = [];
    }
    Add(handle) {
        if (handle)
            this.m_rgHandles.push(handle);
    }
    Unregister() {
        let rgHandles = this.m_rgHandles;
        this.m_rgHandles = [];
        for (let handle of rgHandles) {
            if (handle)
                handle.unregister();
        }
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/bluetoothtypes.ts":
/*!****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/bluetoothtypes.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BluetoothAdapter_t": () => (/* binding */ BluetoothAdapter_t),
/* harmony export */   "BluetoothDevice_t": () => (/* binding */ BluetoothDevice_t),
/* harmony export */   "BluetoothState_t": () => (/* binding */ BluetoothState_t),
/* harmony export */   "EBluetoothDeviceType": () => (/* binding */ EBluetoothDeviceType),
/* harmony export */   "InvalidBluetoothAdapterId": () => (/* binding */ InvalidBluetoothAdapterId),
/* harmony export */   "InvalidBluetoothDeviceId": () => (/* binding */ InvalidBluetoothDeviceId)
/* harmony export */ });
const InvalidBluetoothAdapterId = 0x0;
const InvalidBluetoothDeviceId = 0x0;
// TODO(andresr): re-do enum generation from windows
var EBluetoothDeviceType;
(function (EBluetoothDeviceType) {
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Invalid"] = 0] = "k_BluetoothDeviceType_Invalid";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Unknown"] = 1] = "k_BluetoothDeviceType_Unknown";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Phone"] = 2] = "k_BluetoothDeviceType_Phone";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Computer"] = 3] = "k_BluetoothDeviceType_Computer";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Headset"] = 4] = "k_BluetoothDeviceType_Headset";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Headphones"] = 5] = "k_BluetoothDeviceType_Headphones";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Speakers"] = 6] = "k_BluetoothDeviceType_Speakers";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_OtherAudio"] = 7] = "k_BluetoothDeviceType_OtherAudio";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Mouse"] = 8] = "k_BluetoothDeviceType_Mouse";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Joystick"] = 9] = "k_BluetoothDeviceType_Joystick";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Gamepad"] = 10] = "k_BluetoothDeviceType_Gamepad";
    EBluetoothDeviceType[EBluetoothDeviceType["k_BluetoothDeviceType_Keyboard"] = 11] = "k_BluetoothDeviceType_Keyboard";
})(EBluetoothDeviceType || (EBluetoothDeviceType = {}));
class BluetoothAdapter_t {
}
class BluetoothDevice_t {
}
class BluetoothState_t {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/chattypes.ts":
/*!***********************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/chattypes.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OverlayBrowserInfo": () => (/* binding */ OverlayBrowserInfo),
/* harmony export */   "PushToTalkInfo": () => (/* binding */ PushToTalkInfo)
/* harmony export */ });
/* harmony import */ var _clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clientenums */ "../../../web_src/shared/js/clientenums.ts");
/* harmony import */ var _clientuitypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clientuitypes */ "../../../web_src/shared/js/clienttypes/clientuitypes.ts");


// @note Tom Bui: this is no longer chat specific.  maybe move to another file?
class OverlayBrowserInfo {
}
class PushToTalkInfo {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/clientuitypes.ts":
/*!***************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/clientuitypes.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BOpenVROverlayBrowser": () => (/* binding */ BOpenVROverlayBrowser),
/* harmony export */   "EBrowserType": () => (/* binding */ EBrowserType),
/* harmony export */   "EClientBetaState": () => (/* binding */ EClientBetaState),
/* harmony export */   "EJoinServerError": () => (/* binding */ EJoinServerError),
/* harmony export */   "EMatchMakingServerResponse": () => (/* binding */ EMatchMakingServerResponse),
/* harmony export */   "ESteamUIWindowType": () => (/* binding */ ESteamUIWindowType),
/* harmony export */   "ESystemUISystemKey": () => (/* binding */ ESystemUISystemKey),
/* harmony export */   "EUIComposition": () => (/* binding */ EUIComposition),
/* harmony export */   "HIDKeyboardKeys": () => (/* binding */ HIDKeyboardKeys),
/* harmony export */   "SendTextSpecialKeys": () => (/* binding */ SendTextSpecialKeys),
/* harmony export */   "SteamUIBrowserWindow_t": () => (/* binding */ SteamUIBrowserWindow_t),
/* harmony export */   "k_nSteamClientBetaNone": () => (/* binding */ k_nSteamClientBetaNone)
/* harmony export */ });
var EClientBetaState;
(function (EClientBetaState) {
    EClientBetaState[EClientBetaState["k_EClientBetaNone"] = 0] = "k_EClientBetaNone";
    EClientBetaState[EClientBetaState["k_EClientBetaNoneChosen"] = 1] = "k_EClientBetaNoneChosen";
    EClientBetaState[EClientBetaState["k_EClientBetaNoneChosenNonAdmin"] = 2] = "k_EClientBetaNoneChosenNonAdmin";
    EClientBetaState[EClientBetaState["k_EClientBetaInBeta"] = 3] = "k_EClientBetaInBeta";
    EClientBetaState[EClientBetaState["k_EClientBetaInBetaNonAdmin"] = 4] = "k_EClientBetaInBetaNonAdmin";
})(EClientBetaState || (EClientBetaState = {}));
const k_nSteamClientBetaNone = -1; // No Steam client beta selected
var EBrowserType;
(function (EBrowserType) {
    EBrowserType[EBrowserType["EBrowserType_OffScreen"] = 0] = "EBrowserType_OffScreen";
    EBrowserType[EBrowserType["EBrowserType_OpenVROverlay"] = 1] = "EBrowserType_OpenVROverlay";
    EBrowserType[EBrowserType["EBrowserType_OpenVROverlay_Dashboard"] = 2] = "EBrowserType_OpenVROverlay_Dashboard";
    EBrowserType[EBrowserType["EBrowserType_DirectHWND"] = 3] = "EBrowserType_DirectHWND";
    EBrowserType[EBrowserType["EBrowserType_DirectHWND_Borderless"] = 4] = "EBrowserType_DirectHWND_Borderless";
    EBrowserType[EBrowserType["EBrowserType_DirectHWND_Hidden"] = 5] = "EBrowserType_DirectHWND_Hidden";
    EBrowserType[EBrowserType["EBrowserType_ChildHWNDNative"] = 6] = "EBrowserType_ChildHWNDNative";
    EBrowserType[EBrowserType["EBrowserType_Transparent_Toplevel"] = 7] = "EBrowserType_Transparent_Toplevel";
    EBrowserType[EBrowserType["EBrowserType_OffScreen_SharedTexture"] = 8] = "EBrowserType_OffScreen_SharedTexture";
    EBrowserType[EBrowserType["EBrowserType_OffScreen_GameOverlay"] = 9] = "EBrowserType_OffScreen_GameOverlay";
    EBrowserType[EBrowserType["EBrowserType_OffScreen_GameOverlay_SharedTexture"] = 10] = "EBrowserType_OffScreen_GameOverlay_SharedTexture";
    EBrowserType[EBrowserType["EBrowserType_Offscreen_FriendsUI"] = 11] = "EBrowserType_Offscreen_FriendsUI";
    EBrowserType[EBrowserType["EBrowserType_Offscreen_SteamUI"] = 12] = "EBrowserType_Offscreen_SteamUI";
    EBrowserType[EBrowserType["EBrowserType_OpenVROverlay_Subview"] = 13] = "EBrowserType_OpenVROverlay_Subview";
})(EBrowserType || (EBrowserType = {}));
function BOpenVROverlayBrowser(eType) {
    return eType == EBrowserType.EBrowserType_OpenVROverlay
        || eType == EBrowserType.EBrowserType_OpenVROverlay_Dashboard;
}
/**
 * System keys the UI can be notified of.
 */
var ESystemUISystemKey;
(function (ESystemUISystemKey) {
    ESystemUISystemKey[ESystemUISystemKey["SystemKey0"] = 0] = "SystemKey0";
    ESystemUISystemKey[ESystemUISystemKey["SystemKey1"] = 1] = "SystemKey1";
})(ESystemUISystemKey || (ESystemUISystemKey = {}));
/**
 * Controls how Gamescope renders the GamepadUI window when a game is running.
 */
var EUIComposition;
(function (EUIComposition) {
    /** Steam is not rendered on the screen. */
    EUIComposition[EUIComposition["Hidden"] = 0] = "Hidden";
    /**
     * Transparent divs will allow pixels from the app behind Steam to penetrate.
     * Input goes to **the app.**
     */
    EUIComposition[EUIComposition["Notification"] = 1] = "Notification";
    /**
     * Transparent divs will allow pixels from the app behind Steam to penetrate.
     * Input goes to **Steam.**
     */
    EUIComposition[EUIComposition["Overlay"] = 2] = "Overlay";
    /** Take all of the pixels on the screen, nothing "behind" Steam is shown. */
    EUIComposition[EUIComposition["Opaque"] = 3] = "Opaque";
    /**
     * Special composition mode that matches Overlay, but forwards synthetic keyboard
     * events to the Gamescope foreground app (game) instead of Steam.
     */
    EUIComposition[EUIComposition["OverlayKeyboard"] = 4] = "OverlayKeyboard";
})(EUIComposition || (EUIComposition = {}));
/**
 * Used by SteamClient.Input.ControllerKeyboardSendText
 * defined in src\public\panorama\input\keycodes.h
 */
var SendTextSpecialKeys;
(function (SendTextSpecialKeys) {
    // special keys shouldn't match their actual ASCII codes
    // they also take the place of ASCII codes early in the table
    // and need to remain <128 so they fit into a signed char, so
    // we reserve 0x01-0x06 as unused ASCII codes that can be
    // remapped into special keys
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_NONE"] = "\0";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_ENTER"] = "\u0001";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_BACKSPACE"] = "\u0002";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_ARROW_LEFT"] = "\u0003";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_ARROW_RIGHT"] = "\u0004";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_ARROW_UP"] = "\u0005";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_ARROW_DOWN"] = "\u0006";
    SendTextSpecialKeys["SENDTEXT_SPECIALKEY_LAST"] = "\u0007";
})(SendTextSpecialKeys || (SendTextSpecialKeys = {}));
// Scan codes for HID keyboards - taken from controller_constants.h
var HIDKeyboardKeys;
(function (HIDKeyboardKeys) {
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_INVALID"] = 0] = "KEY_INVALID";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_FIRST"] = 4] = "KEY_FIRST";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_A"] = 4] = "KEY_A";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_B"] = 5] = "KEY_B";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_C"] = 6] = "KEY_C";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_D"] = 7] = "KEY_D";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_E"] = 8] = "KEY_E";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F"] = 9] = "KEY_F";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_G"] = 10] = "KEY_G";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_H"] = 11] = "KEY_H";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_I"] = 12] = "KEY_I";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_J"] = 13] = "KEY_J";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_K"] = 14] = "KEY_K";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_L"] = 15] = "KEY_L";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_M"] = 16] = "KEY_M";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_N"] = 17] = "KEY_N";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_O"] = 18] = "KEY_O";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_P"] = 19] = "KEY_P";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_Q"] = 20] = "KEY_Q";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_R"] = 21] = "KEY_R";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_S"] = 22] = "KEY_S";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_T"] = 23] = "KEY_T";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_U"] = 24] = "KEY_U";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_V"] = 25] = "KEY_V";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_W"] = 26] = "KEY_W";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_X"] = 27] = "KEY_X";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_Y"] = 28] = "KEY_Y";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_Z"] = 29] = "KEY_Z";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_1"] = 30] = "KEY_1";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_2"] = 31] = "KEY_2";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_3"] = 32] = "KEY_3";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_4"] = 33] = "KEY_4";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_5"] = 34] = "KEY_5";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_6"] = 35] = "KEY_6";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_7"] = 36] = "KEY_7";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_8"] = 37] = "KEY_8";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_9"] = 38] = "KEY_9";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_0"] = 39] = "KEY_0";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RETURN"] = 40] = "KEY_RETURN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_ESCAPE"] = 41] = "KEY_ESCAPE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_BACKSPACE"] = 42] = "KEY_BACKSPACE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_TAB"] = 43] = "KEY_TAB";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_SPACE"] = 44] = "KEY_SPACE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_DASH"] = 45] = "KEY_DASH";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_EQUALS"] = 46] = "KEY_EQUALS";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LEFT_BRACKET"] = 47] = "KEY_LEFT_BRACKET";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RIGHT_BRACKET"] = 48] = "KEY_RIGHT_BRACKET";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_BACKSLASH"] = 49] = "KEY_BACKSLASH";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_UNUSED1"] = 50] = "KEY_UNUSED1";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_SEMICOLON"] = 51] = "KEY_SEMICOLON";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_SINGLE_QUOTE"] = 52] = "KEY_SINGLE_QUOTE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_BACK_TICK"] = 53] = "KEY_BACK_TICK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_COMMA"] = 54] = "KEY_COMMA";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PERIOD"] = 55] = "KEY_PERIOD";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_FORWARD_SLASH"] = 56] = "KEY_FORWARD_SLASH";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_CAPSLOCK"] = 57] = "KEY_CAPSLOCK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F1"] = 58] = "KEY_F1";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F2"] = 59] = "KEY_F2";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F3"] = 60] = "KEY_F3";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F4"] = 61] = "KEY_F4";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F5"] = 62] = "KEY_F5";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F6"] = 63] = "KEY_F6";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F7"] = 64] = "KEY_F7";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F8"] = 65] = "KEY_F8";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F9"] = 66] = "KEY_F9";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F10"] = 67] = "KEY_F10";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F11"] = 68] = "KEY_F11";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_F12"] = 69] = "KEY_F12";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PRINT_SCREEN"] = 70] = "KEY_PRINT_SCREEN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_SCROLL_LOCK"] = 71] = "KEY_SCROLL_LOCK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_BREAK"] = 72] = "KEY_BREAK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_INSERT"] = 73] = "KEY_INSERT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_HOME"] = 74] = "KEY_HOME";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PAGE_UP"] = 75] = "KEY_PAGE_UP";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_DELETE"] = 76] = "KEY_DELETE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_END"] = 77] = "KEY_END";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PAGE_DOWN"] = 78] = "KEY_PAGE_DOWN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RIGHT_ARROW"] = 79] = "KEY_RIGHT_ARROW";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LEFT_ARROW"] = 80] = "KEY_LEFT_ARROW";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_DOWN_ARROW"] = 81] = "KEY_DOWN_ARROW";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_UP_ARROW"] = 82] = "KEY_UP_ARROW";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_NUM_LOCK"] = 83] = "KEY_NUM_LOCK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_FORWARD_SLASH"] = 84] = "KEY_KEYPAD_FORWARD_SLASH";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_ASTERISK"] = 85] = "KEY_KEYPAD_ASTERISK";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_DASH"] = 86] = "KEY_KEYPAD_DASH";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_PLUS"] = 87] = "KEY_KEYPAD_PLUS";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_ENTER"] = 88] = "KEY_KEYPAD_ENTER";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_1"] = 89] = "KEY_KEYPAD_1";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_2"] = 90] = "KEY_KEYPAD_2";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_3"] = 91] = "KEY_KEYPAD_3";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_4"] = 92] = "KEY_KEYPAD_4";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_5"] = 93] = "KEY_KEYPAD_5";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_6"] = 94] = "KEY_KEYPAD_6";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_7"] = 95] = "KEY_KEYPAD_7";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_8"] = 96] = "KEY_KEYPAD_8";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_9"] = 97] = "KEY_KEYPAD_9";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_0"] = 98] = "KEY_KEYPAD_0";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_KEYPAD_PERIOD"] = 99] = "KEY_KEYPAD_PERIOD";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LALT"] = 100] = "KEY_LALT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LSHIFT"] = 101] = "KEY_LSHIFT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LWIN"] = 102] = "KEY_LWIN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LCONTROL"] = 103] = "KEY_LCONTROL";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RALT"] = 104] = "KEY_RALT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RSHIFT"] = 105] = "KEY_RSHIFT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RWIN"] = 106] = "KEY_RWIN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_RCONTROL"] = 107] = "KEY_RCONTROL";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_VOLUP"] = 108] = "KEY_VOLUP";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_VOLDOWN"] = 109] = "KEY_VOLDOWN";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_MUTE"] = 110] = "KEY_MUTE";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PLAY"] = 111] = "KEY_PLAY";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_STOP"] = 112] = "KEY_STOP";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_NEXT"] = 113] = "KEY_NEXT";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_PREV"] = 114] = "KEY_PREV";
    HIDKeyboardKeys[HIDKeyboardKeys["KEY_LAST"] = 114] = "KEY_LAST";
})(HIDKeyboardKeys || (HIDKeyboardKeys = {}));
var ESteamUIWindowType;
(function (ESteamUIWindowType) {
    ESteamUIWindowType[ESteamUIWindowType["MainGamepadUI"] = 0] = "MainGamepadUI";
    ESteamUIWindowType[ESteamUIWindowType["OverlayGamepadUI"] = 1] = "OverlayGamepadUI";
    ESteamUIWindowType[ESteamUIWindowType["Keyboard"] = 2] = "Keyboard";
    ESteamUIWindowType[ESteamUIWindowType["ControllerConfigurator"] = 3] = "ControllerConfigurator";
    ESteamUIWindowType[ESteamUIWindowType["VR"] = 4] = "VR";
    ESteamUIWindowType[ESteamUIWindowType["SteamLibrary"] = 5] = "SteamLibrary";
    ESteamUIWindowType[ESteamUIWindowType["MainDesktopUI"] = 6] = "MainDesktopUI";
    ESteamUIWindowType[ESteamUIWindowType["DesktopLogin"] = 7] = "DesktopLogin";
    ESteamUIWindowType[ESteamUIWindowType["OverlayDesktopUI"] = 8] = "OverlayDesktopUI";
    ESteamUIWindowType[ESteamUIWindowType["SmallModeDesktopUI"] = 9] = "SmallModeDesktopUI";
})(ESteamUIWindowType || (ESteamUIWindowType = {}));
class SteamUIBrowserWindow_t {
}
var EJoinServerError;
(function (EJoinServerError) {
    EJoinServerError[EJoinServerError["k_EJoinServerError_None"] = 0] = "k_EJoinServerError_None";
    EJoinServerError[EJoinServerError["k_EJoinServerError_VACBanned"] = 1] = "k_EJoinServerError_VACBanned";
    EJoinServerError[EJoinServerError["k_EJoinServerError_ServerFull"] = 2] = "k_EJoinServerError_ServerFull";
    EJoinServerError[EJoinServerError["k_EJoinServerError_ModNotInstalled"] = 3] = "k_EJoinServerError_ModNotInstalled";
    EJoinServerError[EJoinServerError["k_EJoinServerError_AppNotFound"] = 4] = "k_EJoinServerError_AppNotFound";
    EJoinServerError[EJoinServerError["k_EJoinServerError_NotInitialized"] = 5] = "k_EJoinServerError_NotInitialized";
})(EJoinServerError || (EJoinServerError = {}));
var EMatchMakingServerResponse;
(function (EMatchMakingServerResponse) {
    EMatchMakingServerResponse[EMatchMakingServerResponse["k_EServerResponded"] = 0] = "k_EServerResponded";
    EMatchMakingServerResponse[EMatchMakingServerResponse["k_EServerFailedToRespond"] = 1] = "k_EServerFailedToRespond";
    EMatchMakingServerResponse[EMatchMakingServerResponse["k_ENoServersListedOnMasterServer"] = 2] = "k_ENoServersListedOnMasterServer";
})(EMatchMakingServerResponse || (EMatchMakingServerResponse = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/communitytypes.ts":
/*!****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/communitytypes.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BroadcastStatus": () => (/* binding */ BroadcastStatus),
/* harmony export */   "CommunityPreferences": () => (/* binding */ CommunityPreferences),
/* harmony export */   "EBroadcastViewRequestState": () => (/* binding */ EBroadcastViewRequestState),
/* harmony export */   "ESocialDropTypes": () => (/* binding */ ESocialDropTypes),
/* harmony export */   "FriendState": () => (/* binding */ FriendState),
/* harmony export */   "TextFilterPreferences": () => (/* binding */ TextFilterPreferences),
/* harmony export */   "TradingCardDetails": () => (/* binding */ TradingCardDetails),
/* harmony export */   "WorkshopItem": () => (/* binding */ WorkshopItem)
/* harmony export */ });
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");

class WorkshopItem {
}
class FriendState {
}
class BroadcastStatus {
    constructor() {
        this.broadcastid = '0';
        this.nViewers = 0;
        this.nRequests = 0;
        this.bIsBroadcasting = false;
        this.bIsRecordingDesktop = false;
        this.bBroadcastCapable = false;
    }
}
const ESocialDropTypes = {
    k_eDropTypeAnnouncement: 'annoucement',
    k_eDropTypeScreenshot: 'screenshot',
    k_eDropTypeCommunity: 'community',
    k_eDropTypeApp: 'app',
    k_eDropTypeBroadcast: 'broadcast',
    k_eDropTypeAppNews: 'appnews',
};
// all data necessary to draw a trading card
class TradingCardDetails {
}
class CommunityPreferences {
}
class TextFilterPreferences {
}
var EBroadcastViewRequestState;
(function (EBroadcastViewRequestState) {
    EBroadcastViewRequestState[EBroadcastViewRequestState["k_EPending"] = 0] = "k_EPending";
    EBroadcastViewRequestState[EBroadcastViewRequestState["k_EAccepted"] = 1] = "k_EAccepted";
    EBroadcastViewRequestState[EBroadcastViewRequestState["k_ERejected"] = 2] = "k_ERejected";
})(EBroadcastViewRequestState || (EBroadcastViewRequestState = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/controllertypes.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/controllertypes.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ControllerState": () => (/* binding */ ControllerState),
/* harmony export */   "ControllerVisualizationState": () => (/* binding */ ControllerVisualizationState),
/* harmony export */   "EConfiguratorSupportTypes": () => (/* binding */ EConfiguratorSupportTypes),
/* harmony export */   "EControllerAttribCapabilityBits": () => (/* binding */ EControllerAttribCapabilityBits),
/* harmony export */   "EControllerBindingType": () => (/* binding */ EControllerBindingType),
/* harmony export */   "EControllerConfigExportType": () => (/* binding */ EControllerConfigExportType),
/* harmony export */   "EControllerConfigFeature": () => (/* binding */ EControllerConfigFeature),
/* harmony export */   "EControllerEnableSupport": () => (/* binding */ EControllerEnableSupport),
/* harmony export */   "EControllerHapticCommandType": () => (/* binding */ EControllerHapticCommandType),
/* harmony export */   "EControllerHapticScriptID": () => (/* binding */ EControllerHapticScriptID),
/* harmony export */   "EControllerPad": () => (/* binding */ EControllerPad),
/* harmony export */   "EControllerRumbleSetting": () => (/* binding */ EControllerRumbleSetting),
/* harmony export */   "EControllerTouchMenuCursorType": () => (/* binding */ EControllerTouchMenuCursorType),
/* harmony export */   "EControllerTouchMenuQuadrants": () => (/* binding */ EControllerTouchMenuQuadrants),
/* harmony export */   "EControllerType": () => (/* binding */ EControllerType),
/* harmony export */   "EControllerVirtualMenuType": () => (/* binding */ EControllerVirtualMenuType),
/* harmony export */   "ESWGyroCalibrationWizardState": () => (/* binding */ ESWGyroCalibrationWizardState)
/* harmony export */ });
/* harmony import */ var shared_steammessages_steammessages_controllerconfiguration_enums_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/steammessages/steammessages_controllerconfiguration_enums_pb */ "../../../web_src/shared/js/steammessages/steammessages_controllerconfiguration_enums_pb.ts");

var EControllerType;
(function (EControllerType) {
    EControllerType[EControllerType["k_eControllerType_None"] = -1] = "k_eControllerType_None";
    EControllerType[EControllerType["k_eControllerType_Unknown"] = 0] = "k_eControllerType_Unknown";
    // Steam Controllers
    EControllerType[EControllerType["k_eControllerType_UnknownSteamController"] = 1] = "k_eControllerType_UnknownSteamController";
    EControllerType[EControllerType["k_eControllerType_SteamController"] = 2] = "k_eControllerType_SteamController";
    EControllerType[EControllerType["k_eControllerType_SteamControllerV2"] = 3] = "k_eControllerType_SteamControllerV2";
    EControllerType[EControllerType["k_eControllerType_SteamControllerNeptune"] = 4] = "k_eControllerType_SteamControllerNeptune";
    // IR Remote controls on Steambox
    EControllerType[EControllerType["k_eControllerType_FrontPanelBoard"] = 20] = "k_eControllerType_FrontPanelBoard";
    // Other Controllers
    EControllerType[EControllerType["k_eControllerType_UnknownNonSteamController"] = 30] = "k_eControllerType_UnknownNonSteamController";
    EControllerType[EControllerType["k_eControllerType_XBox360Controller"] = 31] = "k_eControllerType_XBox360Controller";
    EControllerType[EControllerType["k_eControllerType_XBoxOneController"] = 32] = "k_eControllerType_XBoxOneController";
    EControllerType[EControllerType["k_eControllerType_PS3Controller"] = 33] = "k_eControllerType_PS3Controller";
    EControllerType[EControllerType["k_eControllerType_PS4Controller"] = 34] = "k_eControllerType_PS4Controller";
    EControllerType[EControllerType["k_eControllerType_WiiController"] = 35] = "k_eControllerType_WiiController";
    EControllerType[EControllerType["k_eControllerType_AppleController"] = 36] = "k_eControllerType_AppleController";
    EControllerType[EControllerType["k_eControllerType_AndroidController"] = 37] = "k_eControllerType_AndroidController";
    EControllerType[EControllerType["k_eControllerType_SwitchProController"] = 38] = "k_eControllerType_SwitchProController";
    EControllerType[EControllerType["k_eControllerType_SwitchJoyConLeft"] = 39] = "k_eControllerType_SwitchJoyConLeft";
    EControllerType[EControllerType["k_eControllerType_SwitchJoyConRight"] = 40] = "k_eControllerType_SwitchJoyConRight";
    EControllerType[EControllerType["k_eControllerType_SwitchJoyConPair"] = 41] = "k_eControllerType_SwitchJoyConPair";
    EControllerType[EControllerType["k_eControllerType_SwitchInputOnlyController"] = 42] = "k_eControllerType_SwitchInputOnlyController";
    EControllerType[EControllerType["k_eControllerType_MobileTouch"] = 43] = "k_eControllerType_MobileTouch";
    EControllerType[EControllerType["k_eControllerType_XInputSwitchController"] = 44] = "k_eControllerType_XInputSwitchController";
    EControllerType[EControllerType["k_eControllerType_PS5Controller"] = 45] = "k_eControllerType_PS5Controller";
    EControllerType[EControllerType["k_eControllerType_XBoxEliteController"] = 46] = "k_eControllerType_XBoxEliteController";
    EControllerType[EControllerType["k_eControllerType_XInputPS4Controller"] = 47] = "k_eControllerType_XInputPS4Controller";
    EControllerType[EControllerType["k_eControllerType_PS5EdgeController"] = 48] = "k_eControllerType_PS5EdgeController";
    EControllerType[EControllerType["k_eControllerType_LastController"] = 49] = "k_eControllerType_LastController";
    // Keyboards and Mice
    EControllerType[EControllerType["k_eControllertype_GenericKeyboard"] = 400] = "k_eControllertype_GenericKeyboard";
    EControllerType[EControllerType["k_eControllertype_GenericMouse"] = 800] = "k_eControllertype_GenericMouse";
})(EControllerType || (EControllerType = {}));
var EControllerRumbleSetting;
(function (EControllerRumbleSetting) {
    EControllerRumbleSetting[EControllerRumbleSetting["k_EControllerRumbleSettingControllerPreference"] = -1] = "k_EControllerRumbleSettingControllerPreference";
    EControllerRumbleSetting[EControllerRumbleSetting["k_EControllerRumbleSettingOff"] = 0] = "k_EControllerRumbleSettingOff";
    EControllerRumbleSetting[EControllerRumbleSetting["k_EControllerRumbleSettingOn"] = 1] = "k_EControllerRumbleSettingOn";
})(EControllerRumbleSetting || (EControllerRumbleSetting = {}));
var EControllerEnableSupport;
(function (EControllerEnableSupport) {
    EControllerEnableSupport[EControllerEnableSupport["k_EControllerEnableSupport_ForceOff"] = 0] = "k_EControllerEnableSupport_ForceOff";
    EControllerEnableSupport[EControllerEnableSupport["k_EControllerEnableSupport_GlobalSetting"] = 1] = "k_EControllerEnableSupport_GlobalSetting";
    EControllerEnableSupport[EControllerEnableSupport["k_EControllerEnableSupport_ForceOn"] = 2] = "k_EControllerEnableSupport_ForceOn";
})(EControllerEnableSupport || (EControllerEnableSupport = {}));
var EControllerBindingType;
(function (EControllerBindingType) {
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_None"] = 0] = "k_EControllerBindingType_None";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_Key"] = 1] = "k_EControllerBindingType_Key";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_MouseButton"] = 2] = "k_EControllerBindingType_MouseButton";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_Gamepad"] = 3] = "k_EControllerBindingType_Gamepad";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_Mousewheel"] = 4] = "k_EControllerBindingType_Mousewheel";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_Modeshift"] = 5] = "k_EControllerBindingType_Modeshift";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_GameAction"] = 6] = "k_EControllerBindingType_GameAction";
    EControllerBindingType[EControllerBindingType["k_EControllerBindingType_ControllerAction"] = 7] = "k_EControllerBindingType_ControllerAction";
})(EControllerBindingType || (EControllerBindingType = {}));
var EConfiguratorSupportTypes;
(function (EConfiguratorSupportTypes) {
    EConfiguratorSupportTypes[EConfiguratorSupportTypes["k_EPad_Support_PS4"] = 1] = "k_EPad_Support_PS4";
    EConfiguratorSupportTypes[EConfiguratorSupportTypes["k_EPad_Support_XBox"] = 2] = "k_EPad_Support_XBox";
    EConfiguratorSupportTypes[EConfiguratorSupportTypes["k_EPad_Support_Generic"] = 4] = "k_EPad_Support_Generic";
    EConfiguratorSupportTypes[EConfiguratorSupportTypes["k_EPad_Support_Switch"] = 8] = "k_EPad_Support_Switch";
})(EConfiguratorSupportTypes || (EConfiguratorSupportTypes = {}));
var EControllerConfigFeature;
(function (EControllerConfigFeature) {
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_None"] = 0] = "k_EControllerConfigFeature_None";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Gamepad"] = 1] = "k_EControllerConfigFeature_Gamepad";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Keyboard"] = 2] = "k_EControllerConfigFeature_Keyboard";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Mouse"] = 3] = "k_EControllerConfigFeature_Mouse";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_MouseRegion"] = 4] = "k_EControllerConfigFeature_MouseRegion";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Gyro"] = 5] = "k_EControllerConfigFeature_Gyro";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_TouchMenu"] = 6] = "k_EControllerConfigFeature_TouchMenu";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_RadialMenu"] = 7] = "k_EControllerConfigFeature_RadialMenu";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_ModeShift"] = 8] = "k_EControllerConfigFeature_ModeShift";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_ActionSet"] = 9] = "k_EControllerConfigFeature_ActionSet";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Activator"] = 10] = "k_EControllerConfigFeature_Activator";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_LEDColors"] = 11] = "k_EControllerConfigFeature_LEDColors";
    EControllerConfigFeature[EControllerConfigFeature["k_EControllerConfigFeature_Native"] = 12] = "k_EControllerConfigFeature_Native";
})(EControllerConfigFeature || (EControllerConfigFeature = {}));
var EControllerConfigExportType;
(function (EControllerConfigExportType) {
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_Unknown"] = 0] = "k_EControllerConfigExport_Unknown";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_PersonalLocal"] = 1] = "k_EControllerConfigExport_PersonalLocal";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_PersonalCloud"] = 2] = "k_EControllerConfigExport_PersonalCloud";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_Community"] = 3] = "k_EControllerConfigExport_Community";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_Template"] = 4] = "k_EControllerConfigExport_Template";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_Official"] = 5] = "k_EControllerConfigExport_Official";
    EControllerConfigExportType[EControllerConfigExportType["k_EControllerConfigExport_OfficialDefault"] = 6] = "k_EControllerConfigExport_OfficialDefault";
})(EControllerConfigExportType || (EControllerConfigExportType = {}));
var EControllerAttribCapabilityBits;
(function (EControllerAttribCapabilityBits) {
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_DIAMOND_BUTTONS"] = 1] = "ATTRIBCAP_DIAMOND_BUTTONS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_DPAD_BUTTONS"] = 2] = "ATTRIBCAP_DPAD_BUTTONS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_LEFTSTICK"] = 4] = "ATTRIBCAP_LEFTSTICK";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_RIGHTSTICK"] = 8] = "ATTRIBCAP_RIGHTSTICK";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_THUMBSTICK_BUTTONS"] = 16] = "ATTRIBCAP_THUMBSTICK_BUTTONS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_SHOULDER_BUTTONS"] = 32] = "ATTRIBCAP_SHOULDER_BUTTONS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_ANALOG_TRIGGERS"] = 64] = "ATTRIBCAP_ANALOG_TRIGGERS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_BACK_BUTTON"] = 128] = "ATTRIBCAP_BACK_BUTTON";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_START_BUTTON"] = 256] = "ATTRIBCAP_START_BUTTON";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_GUIDE_BUTTON"] = 512] = "ATTRIBCAP_GUIDE_BUTTON";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_GRIPS"] = 1024] = "ATTRIBCAP_GRIPS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_GYRO"] = 2048] = "ATTRIBCAP_GYRO";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_TRACKPAD"] = 4096] = "ATTRIBCAP_TRACKPAD";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_HAPTICS"] = 8192] = "ATTRIBCAP_HAPTICS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_RUMBLE"] = 16384] = "ATTRIBCAP_RUMBLE";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_PRESSURE"] = 32768] = "ATTRIBCAP_PRESSURE";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_LED"] = 65536] = "ATTRIBCAP_LED";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_LEDCOLOR"] = 131072] = "ATTRIBCAP_LEDCOLOR";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_UNCALIBRATED_IMU"] = 262144] = "ATTRIBCAP_UNCALIBRATED_IMU";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_GENERATED_SERIAL_NUM"] = 524288] = "ATTRIBCAP_GENERATED_SERIAL_NUM";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_SDL_BINDINGS"] = 1048576] = "ATTRIBCAP_SDL_BINDINGS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_EMULATED_RUMBLE"] = 2097152] = "ATTRIBCAP_EMULATED_RUMBLE";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_UPPERGRIPS"] = 4194304] = "ATTRIBCAP_UPPERGRIPS";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_CAPTUREBUTTON"] = 8388608] = "ATTRIBCAP_CAPTUREBUTTON";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_CAPJOYSTICK"] = 16777216] = "ATTRIBCAP_CAPJOYSTICK";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_CENTER_TRACKPAD"] = 33554432] = "ATTRIBCAP_CENTER_TRACKPAD";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_NINTENDO_LAYOUT"] = 67108864] = "ATTRIBCAP_NINTENDO_LAYOUT";
    EControllerAttribCapabilityBits[EControllerAttribCapabilityBits["ATTRIBCAP_CANT_READ_GUIDEBUTTON"] = 134217728] = "ATTRIBCAP_CANT_READ_GUIDEBUTTON";
})(EControllerAttribCapabilityBits || (EControllerAttribCapabilityBits = {}));
var ESWGyroCalibrationWizardState;
(function (ESWGyroCalibrationWizardState) {
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["AutoCalibrating"] = 0] = "AutoCalibrating";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibratingStationaryTolerances"] = 1] = "CalibratingStationaryTolerances";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibratingAntidrift"] = 2] = "CalibratingAntidrift";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibrationComplete"] = 3] = "CalibrationComplete";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibrationFailed"] = 4] = "CalibrationFailed";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibrationPrompt"] = 5] = "CalibrationPrompt";
    ESWGyroCalibrationWizardState[ESWGyroCalibrationWizardState["CalibrationCountDown"] = 6] = "CalibrationCountDown";
})(ESWGyroCalibrationWizardState || (ESWGyroCalibrationWizardState = {}));
var EControllerPad;
(function (EControllerPad) {
    EControllerPad[EControllerPad["k_EControllerPad_Left"] = 0] = "k_EControllerPad_Left";
    EControllerPad[EControllerPad["k_EControllerPad_Right"] = 1] = "k_EControllerPad_Right";
    EControllerPad[EControllerPad["k_EControllerPad_Both"] = 2] = "k_EControllerPad_Both";
})(EControllerPad || (EControllerPad = {}));
var EControllerHapticCommandType;
(function (EControllerHapticCommandType) {
    EControllerHapticCommandType[EControllerHapticCommandType["k_Off"] = 0] = "k_Off";
    EControllerHapticCommandType[EControllerHapticCommandType["k_Tick"] = 1] = "k_Tick";
    EControllerHapticCommandType[EControllerHapticCommandType["k_Click"] = 2] = "k_Click";
    EControllerHapticCommandType[EControllerHapticCommandType["k_Script"] = 6] = "k_Script";
})(EControllerHapticCommandType || (EControllerHapticCommandType = {}));
var EControllerHapticScriptID;
(function (EControllerHapticScriptID) {
    EControllerHapticScriptID[EControllerHapticScriptID["k_None"] = 0] = "k_None";
    EControllerHapticScriptID[EControllerHapticScriptID["k_SteamStart"] = 1] = "k_SteamStart";
    EControllerHapticScriptID[EControllerHapticScriptID["k_StartupBeep"] = 2] = "k_StartupBeep";
})(EControllerHapticScriptID || (EControllerHapticScriptID = {}));
var EControllerTouchMenuCursorType;
(function (EControllerTouchMenuCursorType) {
    EControllerTouchMenuCursorType[EControllerTouchMenuCursorType["k_ECursorType_Raw"] = 0] = "k_ECursorType_Raw";
    EControllerTouchMenuCursorType[EControllerTouchMenuCursorType["k_ECursorType_DigitalNav"] = 1] = "k_ECursorType_DigitalNav";
    EControllerTouchMenuCursorType[EControllerTouchMenuCursorType["k_ECursorType_AccumulatedDelta"] = 2] = "k_ECursorType_AccumulatedDelta";
})(EControllerTouchMenuCursorType || (EControllerTouchMenuCursorType = {}));
var EControllerVirtualMenuType;
(function (EControllerVirtualMenuType) {
    EControllerVirtualMenuType[EControllerVirtualMenuType["k_EVirtualMenuType_Touch"] = 0] = "k_EVirtualMenuType_Touch";
    EControllerVirtualMenuType[EControllerVirtualMenuType["k_EVirtualMenuType_Radial"] = 1] = "k_EVirtualMenuType_Radial";
    EControllerVirtualMenuType[EControllerVirtualMenuType["k_EVirtualMenuType_Hotbar"] = 2] = "k_EVirtualMenuType_Hotbar";
})(EControllerVirtualMenuType || (EControllerVirtualMenuType = {}));
var EControllerTouchMenuQuadrants;
(function (EControllerTouchMenuQuadrants) {
    EControllerTouchMenuQuadrants[EControllerTouchMenuQuadrants["TOUCH_QUADRANT_NONE"] = 0] = "TOUCH_QUADRANT_NONE";
    EControllerTouchMenuQuadrants[EControllerTouchMenuQuadrants["TOUCH_QUADRANT_TOP"] = 1] = "TOUCH_QUADRANT_TOP";
    EControllerTouchMenuQuadrants[EControllerTouchMenuQuadrants["TOUCH_QUADRANT_BOTTOM"] = 2] = "TOUCH_QUADRANT_BOTTOM";
    EControllerTouchMenuQuadrants[EControllerTouchMenuQuadrants["TOUCH_QUADRANT_LEFT"] = 4] = "TOUCH_QUADRANT_LEFT";
    EControllerTouchMenuQuadrants[EControllerTouchMenuQuadrants["TOUCH_QUADRANT_RIGHT"] = 8] = "TOUCH_QUADRANT_RIGHT";
})(EControllerTouchMenuQuadrants || (EControllerTouchMenuQuadrants = {}));
class ControllerState {
}
class ControllerVisualizationState {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/downloadtypes.ts":
/*!***************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/downloadtypes.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DownloadItem": () => (/* binding */ DownloadItem),
/* harmony export */   "DownloadItemUpdateTypeInfo": () => (/* binding */ DownloadItemUpdateTypeInfo),
/* harmony export */   "DownloadOverview": () => (/* binding */ DownloadOverview),
/* harmony export */   "EValidationPhase": () => (/* binding */ EValidationPhase),
/* harmony export */   "MoveContentProgress": () => (/* binding */ MoveContentProgress),
/* harmony export */   "ValidateProgress": () => (/* binding */ ValidateProgress)
/* harmony export */ });
/* harmony import */ var _clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clientenums */ "../../../web_src/shared/js/clientenums.ts");

class DownloadItemUpdateTypeInfo {
    constructor() {
        /** True if this content type has or had an update */
        this.has_update = false;
        /** True if this content type had an update and it has completed */
        this.completed = false;
        /** Total bytes to download for this content type */
        this.total_bytes = 0;
        /** Bytes already downloaded for this content type */
        this.downloaded_bytes = 0;
    }
}
class DownloadItem {
    constructor() {
        /** Appid of app */
        this.appid = 0;
        /** Current build ID for the installed app, zero if the app isn't installed yet */
        this.buildid = 0;
        /** Build ID that this download is moving towards. This can be the same as buildid.*/
        this.target_buildid = 0;
        /** Total bytes to download, sum across all content types */
        this.total_bytes = 0;
        /** Bytes already downloaded, sum across all content types */
        this.downloaded_bytes = 0;
        /** True if this app is currently downloading */
        this.active = false;
        /** True if this app has been paused by the user or the system */
        this.paused = false;
        /** True if this update has been completed */
        this.completed = false;
        /** Update result, from EAppUpdateError enum */
        this.update_result = 0;
        /** Update error description, when paused and there has been an error. Unlocalized and shouldn't be displayed to the user. */
        this.update_error = '';
        /** Queue index, -1 if the item is unqueued */
        this.queue_index = 0;
        /** Scheduled time to start for a scheduled download, 0 if unscheduled */
        this.deferred_time = 0;
        /** For completed downloads, time of completion, 0 if not completed */
        this.completed_time = 0;
        /** If true, game will launch when its download completes successfully */
        this.launch_on_completion = false;
    }
}
class DownloadOverview {
    constructor() {
        /** True if all downloads are paused */
        this.paused = false;
        /** Appid of currently updating app */
        this.update_appid = 0;
        /** Time current update started */
        this.update_start_time = 0;
        /** update state strings come from CSteamAppBase::GetUpdateStateText() */
        this.update_state = 'None';
        /** Estimate of remaining time (in seconds) until download completes (not including staging) */
        this.update_seconds_remaining = 0;
        /** Total bytes to download */
        this.update_bytes_to_download = 0;
        /** Bytes already downloaded */
        this.update_bytes_downloaded = 0;
        /** Total bytes to be staged */
        this.update_bytes_to_stage = 0;
        /** Bytes already staged */
        this.update_bytes_staged = 0;
        /** Total bytes to process in current phase - resets to zero when update stage changes */
        this.update_bytes_to_process = 0;
        /** Bytes already processed in current phase - resets to zero when update stage changes */
        this.update_bytes_processed = 0;
        /** True if the current update is an initial install */
        this.update_is_install = false;
        /** True if the current update is for workshop content */
        this.update_is_workshop = false;
        /** True if the current update is for shader update */
        this.update_is_shader = false;
        /** True if download and staging sizes are prefetch estimates */
        this.update_is_prefetch_estimate = false;
        /** Current bandwidth estimate for download */
        this.update_network_bytes_per_second = 0;
        /** Peak bandwidth estimate for download */
        this.update_peak_network_bytes_per_second = 0;
        /** Current disk throughput estimate */
        this.update_disc_bytes_per_second = 0;
        /** True if download throttling has been temporarily suspended for the current download */
        this.throttling_suspended = false;
        /** Set if we are downloading from LAN peer content server */
        this.lan_peer_hostname = '';
        /** True if the client is running in peer content server mode serving other peers */
        this.update_is_upload = false;
    }
}
var EValidationPhase;
(function (EValidationPhase) {
    EValidationPhase[EValidationPhase["k_EValidationPhaseIdle"] = 0] = "k_EValidationPhaseIdle";
    EValidationPhase[EValidationPhase["k_EValidationPhaseWaitingForAppInfo"] = 1] = "k_EValidationPhaseWaitingForAppInfo";
    EValidationPhase[EValidationPhase["k_EValidationPhaseStartInstallScript"] = 2] = "k_EValidationPhaseStartInstallScript";
    EValidationPhase[EValidationPhase["k_EValidationPhaseWaitingForInstallScript"] = 3] = "k_EValidationPhaseWaitingForInstallScript";
    EValidationPhase[EValidationPhase["k_EValidationPhaseValidating"] = 4] = "k_EValidationPhaseValidating";
})(EValidationPhase || (EValidationPhase = {}));
class ValidateProgress {
}
class MoveContentProgress {
    constructor() {
        this.appid = 0;
        this.eError = _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAppUpdateError.k_EAppErrorNone;
        this.flProgress = 0;
        this.strBytesMoved = '';
        this.strTotalBytesToMove = '';
        this.nFilesMoved = 0;
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/gameactiontypes.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/gameactiontypes.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ERemoteClientLaunchResult": () => (/* binding */ ERemoteClientLaunchResult),
/* harmony export */   "GameActionDetails": () => (/* binding */ GameActionDetails),
/* harmony export */   "InstallFolderInfo": () => (/* binding */ InstallFolderInfo),
/* harmony export */   "InstalledAppInfo": () => (/* binding */ InstalledAppInfo),
/* harmony export */   "RemoteClientInputSettings": () => (/* binding */ RemoteClientInputSettings)
/* harmony export */ });
class GameActionDetails {
}
class InstalledAppInfo {
}
class InstallFolderInfo {
}
class RemoteClientInputSettings {
}
var ERemoteClientLaunchResult;
(function (ERemoteClientLaunchResult) {
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchOK"] = 1] = "k_ERemoteClientLaunchOK";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchFail"] = 2] = "k_ERemoteClientLaunchFail";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchRequiresUI"] = 3] = "k_ERemoteClientLaunchRequiresUI";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchRequiresLaunchOption"] = 4] = "k_ERemoteClientLaunchRequiresLaunchOption";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchRequiresEULA"] = 5] = "k_ERemoteClientLaunchRequiresEULA";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchTimeout"] = 6] = "k_ERemoteClientLaunchTimeout";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchStreamTimeout"] = 7] = "k_ERemoteClientLaunchStreamTimeout";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchStreamClientFail"] = 8] = "k_ERemoteClientLaunchStreamClientFail";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchOtherGameRunning"] = 9] = "k_ERemoteClientLaunchOtherGameRunning";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDownloadStarted"] = 10] = "k_ERemoteClientLaunchDownloadStarted";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDownloadNoSpace"] = 11] = "k_ERemoteClientLaunchDownloadNoSpace";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDownloadFiltered"] = 12] = "k_ERemoteClientLaunchDownloadFiltered";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDownloadRequiresUI"] = 13] = "k_ERemoteClientLaunchDownloadRequiresUI";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchAccessDenied"] = 14] = "k_ERemoteClientLaunchAccessDenied";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchNetworkError"] = 15] = "k_ERemoteClientLaunchNetworkError";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchProgress"] = 16] = "k_ERemoteClientLaunchProgress";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchParentalUnlockFailed"] = 17] = "k_ERemoteClientLaunchParentalUnlockFailed";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchScreenLocked"] = 18] = "k_ERemoteClientLaunchScreenLocked";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchUnsupported"] = 19] = "k_ERemoteClientLaunchUnsupported";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDisabledLocal"] = 20] = "k_ERemoteClientLaunchDisabledLocal";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDisabledRemote"] = 21] = "k_ERemoteClientLaunchDisabledRemote";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchBroadcasting"] = 22] = "k_ERemoteClientLaunchBroadcasting";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchBusy"] = 23] = "k_ERemoteClientLaunchBusy";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchDriversNotInstalled"] = 24] = "k_ERemoteClientLaunchDriversNotInstalled";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchTransportUnavailable"] = 25] = "k_ERemoteClientLaunchTransportUnavailable";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchCanceled"] = 26] = "k_ERemoteClientLaunchCanceled";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchInvisible"] = 27] = "k_ERemoteClientLaunchInvisible";
    ERemoteClientLaunchResult[ERemoteClientLaunchResult["k_ERemoteClientLaunchRestrictedCountry"] = 28] = "k_ERemoteClientLaunchRestrictedCountry";
})(ERemoteClientLaunchResult || (ERemoteClientLaunchResult = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/gamestatstypes.ts":
/*!****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/gamestatstypes.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppDetailsAchievements": () => (/* binding */ AppDetailsAchievements),
/* harmony export */   "AppDetailsAchievementsHighlight": () => (/* binding */ AppDetailsAchievementsHighlight),
/* harmony export */   "UserAchievementInfo": () => (/* binding */ UserAchievementInfo)
/* harmony export */ });
class UserAchievementInfo {
}
class AppDetailsAchievementsHighlight extends UserAchievementInfo {
}
class AppDetailsAchievements {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/index.ts":
/*!*******************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/index.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountSettings": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.AccountSettings),
/* harmony export */   "AchievementNotification": () => (/* reexport safe */ _notificationtypes__WEBPACK_IMPORTED_MODULE_16__.AchievementNotification),
/* harmony export */   "AppDetails": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppDetails),
/* harmony export */   "AppDetailsAchievements": () => (/* reexport safe */ _gamestatstypes__WEBPACK_IMPORTED_MODULE_12__.AppDetailsAchievements),
/* harmony export */   "AppDetailsAchievementsHighlight": () => (/* reexport safe */ _gamestatstypes__WEBPACK_IMPORTED_MODULE_12__.AppDetailsAchievementsHighlight),
/* harmony export */   "AppDetailsBeta": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppDetailsBeta),
/* harmony export */   "AppDetailsDLC": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppDetailsDLC),
/* harmony export */   "AppDetailsMusicAlbum": () => (/* reexport safe */ _musictypes__WEBPACK_IMPORTED_MODULE_14__.AppDetailsMusicAlbum),
/* harmony export */   "AppLegacyCDKey": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppLegacyCDKey),
/* harmony export */   "AppLibraryAssets": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppLibraryAssets),
/* harmony export */   "AppLifetimeNotification": () => (/* reexport safe */ _notificationtypes__WEBPACK_IMPORTED_MODULE_16__.AppLifetimeNotification),
/* harmony export */   "AppTag": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.AppTag),
/* harmony export */   "AudioDevice": () => (/* reexport safe */ _audiotypes__WEBPACK_IMPORTED_MODULE_2__.AudioDevice),
/* harmony export */   "AudioDevices": () => (/* reexport safe */ _audiotypes__WEBPACK_IMPORTED_MODULE_2__.AudioDevices),
/* harmony export */   "AudioPlayback_Status": () => (/* reexport safe */ _musictypes__WEBPACK_IMPORTED_MODULE_14__.AudioPlayback_Status),
/* harmony export */   "BDoesSaleItemTypeHaveParent": () => (/* reexport safe */ _storetypes__WEBPACK_IMPORTED_MODULE_20__.BDoesSaleItemTypeHaveParent),
/* harmony export */   "BIsChinaLauncher": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.BIsChinaLauncher),
/* harmony export */   "BIsChinaRealm": () => (/* reexport safe */ _basetypes__WEBPACK_IMPORTED_MODULE_4__.BIsChinaRealm),
/* harmony export */   "BIsControllerConfigGameID": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.BIsControllerConfigGameID),
/* harmony export */   "BIsEFriendRelationshipBlocked": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.BIsEFriendRelationshipBlocked),
/* harmony export */   "BIsEFriendRelationshipFriend": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.BIsEFriendRelationshipFriend),
/* harmony export */   "BIsReducedUILauncher": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.BIsReducedUILauncher),
/* harmony export */   "BIsSaleItemType": () => (/* reexport safe */ _storetypes__WEBPACK_IMPORTED_MODULE_20__.BIsSaleItemType),
/* harmony export */   "BIsValidStartPage": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.BIsValidStartPage),
/* harmony export */   "BOpenVROverlayBrowser": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.BOpenVROverlayBrowser),
/* harmony export */   "BatteryState_t": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.BatteryState_t),
/* harmony export */   "BluetoothAdapter_t": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.BluetoothAdapter_t),
/* harmony export */   "BluetoothDevice_t": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.BluetoothDevice_t),
/* harmony export */   "BluetoothState_t": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.BluetoothState_t),
/* harmony export */   "BroadcastStatus": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.BroadcastStatus),
/* harmony export */   "CallbackHandleDisposer": () => (/* reexport safe */ _basetypes__WEBPACK_IMPORTED_MODULE_4__.CallbackHandleDisposer),
/* harmony export */   "CommunityPreferences": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.CommunityPreferences),
/* harmony export */   "ConfiguredProxyInfo": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.ConfiguredProxyInfo),
/* harmony export */   "ContentDescriptorPreferences": () => (/* reexport safe */ _storetypes__WEBPACK_IMPORTED_MODULE_20__.ContentDescriptorPreferences),
/* harmony export */   "ControllerState": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.ControllerState),
/* harmony export */   "ControllerVisualizationState": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.ControllerVisualizationState),
/* harmony export */   "CustomNetworkDeviceWapId": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.CustomNetworkDeviceWapId),
/* harmony export */   "DefaultFriendsSettings": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.DefaultFriendsSettings),
/* harmony export */   "DownloadItem": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.DownloadItem),
/* harmony export */   "DownloadItemUpdateTypeInfo": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.DownloadItemUpdateTypeInfo),
/* harmony export */   "DownloadOverview": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.DownloadOverview),
/* harmony export */   "DragDropPosition": () => (/* reexport safe */ _basetypes__WEBPACK_IMPORTED_MODULE_4__.DragDropPosition),
/* harmony export */   "EAccountType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAccountType),
/* harmony export */   "EActivateGameOverlayToWebPageMode": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EActivateGameOverlayToWebPageMode),
/* harmony export */   "EAppAction": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.EAppAction),
/* harmony export */   "EAppAllowDownloadsWhileRunningBehavior": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.EAppAllowDownloadsWhileRunningBehavior),
/* harmony export */   "EAppAutoUpdateBehavior": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.EAppAutoUpdateBehavior),
/* harmony export */   "EAppOwnershipFlags": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.EAppOwnershipFlags),
/* harmony export */   "EAppReleaseState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAppReleaseState),
/* harmony export */   "EAppUpdateContentType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAppUpdateContentType),
/* harmony export */   "EAppUpdateError": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAppUpdateError),
/* harmony export */   "EAudioChannel": () => (/* reexport safe */ _audiotypes__WEBPACK_IMPORTED_MODULE_2__.EAudioChannel),
/* harmony export */   "EAudioDirection": () => (/* reexport safe */ _audiotypes__WEBPACK_IMPORTED_MODULE_2__.EAudioDirection),
/* harmony export */   "EAvatarFriendState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EAvatarFriendState),
/* harmony export */   "EBackpackContext": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EBackpackContext),
/* harmony export */   "EBluetoothDeviceType": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.EBluetoothDeviceType),
/* harmony export */   "EBroadcastViewRequestState": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.EBroadcastViewRequestState),
/* harmony export */   "EBrowserComposerMode": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.EBrowserComposerMode),
/* harmony export */   "EBrowserType": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.EBrowserType),
/* harmony export */   "EChatEntryType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EChatEntryType),
/* harmony export */   "EChatFlashMode": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.EChatFlashMode),
/* harmony export */   "EClanEventType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EClanEventType),
/* harmony export */   "EClanEventTypeArray": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EClanEventTypeArray),
/* harmony export */   "EClanRelationship": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EClanRelationship),
/* harmony export */   "EClientBetaState": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.EClientBetaState),
/* harmony export */   "EClientUINotificationType": () => (/* reexport safe */ _notificationtypes__WEBPACK_IMPORTED_MODULE_16__.EClientUINotificationType),
/* harmony export */   "EClientUsedInputType": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.EClientUsedInputType),
/* harmony export */   "EClientVRError": () => (/* reexport safe */ _vrtypes__WEBPACK_IMPORTED_MODULE_22__.EClientVRError),
/* harmony export */   "ECommunityPrivacyState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ECommunityPrivacyState),
/* harmony export */   "ECommunityProfileItemProperty": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ECommunityProfileItemProperty),
/* harmony export */   "ECompatPriority": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.ECompatPriority),
/* harmony export */   "EComputerActiveState": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.EComputerActiveState),
/* harmony export */   "EConfiguratorSupportTypes": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EConfiguratorSupportTypes),
/* harmony export */   "EConnectivityTestResult": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EConnectivityTestResult),
/* harmony export */   "EControllerAttribCapabilityBits": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerAttribCapabilityBits),
/* harmony export */   "EControllerBindingType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerBindingType),
/* harmony export */   "EControllerConfigExportType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerConfigExportType),
/* harmony export */   "EControllerConfigFeature": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerConfigFeature),
/* harmony export */   "EControllerEnableSupport": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerEnableSupport),
/* harmony export */   "EControllerHapticCommandType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerHapticCommandType),
/* harmony export */   "EControllerHapticScriptID": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerHapticScriptID),
/* harmony export */   "EControllerPad": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerPad),
/* harmony export */   "EControllerRumbleSetting": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerRumbleSetting),
/* harmony export */   "EControllerTouchMenuCursorType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerTouchMenuCursorType),
/* harmony export */   "EControllerTouchMenuQuadrants": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerTouchMenuQuadrants),
/* harmony export */   "EControllerType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerType),
/* harmony export */   "EControllerVirtualMenuType": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.EControllerVirtualMenuType),
/* harmony export */   "EDisplayCorner": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.EDisplayCorner),
/* harmony export */   "EEconTradeResponse": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EEconTradeResponse),
/* harmony export */   "EFileIteratorType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EFileIteratorType),
/* harmony export */   "EFloatingGamepadTextInputMode": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EFloatingGamepadTextInputMode),
/* harmony export */   "EFriendRelationship": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EFriendRelationship),
/* harmony export */   "EGamingDeviceType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EGamingDeviceType),
/* harmony export */   "EGraphicsPerfOverlayState": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.EGraphicsPerfOverlayState),
/* harmony export */   "EHTTPProxyMode": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.EHTTPProxyMode),
/* harmony export */   "EInstallManagerState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EInstallManagerState),
/* harmony export */   "EJoinServerError": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.EJoinServerError),
/* harmony export */   "ELanguage": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELanguage),
/* harmony export */   "ELanguagePchLanguage": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELanguagePchLanguage),
/* harmony export */   "ELanguagePchWebLanguageCode": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELanguagePchWebLanguageCode),
/* harmony export */   "ELaunchSource": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELaunchSource),
/* harmony export */   "ELauncherType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELauncherType),
/* harmony export */   "ELibraryAssetType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELibraryAssetType),
/* harmony export */   "ELibraryDisplaySize": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.ELibraryDisplaySize),
/* harmony export */   "ELoginProgressType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELoginProgressType),
/* harmony export */   "ELoginState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELoginState),
/* harmony export */   "ELoginUIStyle": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ELoginUIStyle),
/* harmony export */   "ELogoPinnedPosition": () => (/* reexport safe */ _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__.ELogoPinnedPosition),
/* harmony export */   "EMatchMakingServerResponse": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.EMatchMakingServerResponse),
/* harmony export */   "EMusicPlayingRepeatStatus": () => (/* reexport safe */ _musictypes__WEBPACK_IMPORTED_MODULE_14__.EMusicPlayingRepeatStatus),
/* harmony export */   "ENetFakeLocalSystemState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ENetFakeLocalSystemState),
/* harmony export */   "ENetworkDeviceState": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.ENetworkDeviceState),
/* harmony export */   "ENetworkDeviceType": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.ENetworkDeviceType),
/* harmony export */   "ENotificationPosition": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ENotificationPosition),
/* harmony export */   "EOverlayToStoreFlag": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EOverlayToStoreFlag),
/* harmony export */   "EParentalFeature": () => (/* reexport safe */ _parentaltypes__WEBPACK_IMPORTED_MODULE_17__.EParentalFeature),
/* harmony export */   "EPeerContentServerMode": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.EPeerContentServerMode),
/* harmony export */   "EPersonaState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EPersonaState),
/* harmony export */   "EPostGameSummaryType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EPostGameSummaryType),
/* harmony export */   "EPublishedFileInfoMatchingFileType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EPublishedFileInfoMatchingFileType),
/* harmony export */   "ERaiseGameWindowResult": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ERaiseGameWindowResult),
/* harmony export */   "ERecommendationIgnoreReason": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ERecommendationIgnoreReason),
/* harmony export */   "ERemoteClientLaunchResult": () => (/* reexport safe */ _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__.ERemoteClientLaunchResult),
/* harmony export */   "ERemoteStoragePublishedFileVisibility": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ERemoteStoragePublishedFileVisibility),
/* harmony export */   "EResult": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EResult),
/* harmony export */   "ESWGyroCalibrationWizardState": () => (/* reexport safe */ _controllertypes__WEBPACK_IMPORTED_MODULE_9__.ESWGyroCalibrationWizardState),
/* harmony export */   "EServerType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EServerType),
/* harmony export */   "EShutdownStep": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EShutdownStep),
/* harmony export */   "ESocialDropTypes": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.ESocialDropTypes),
/* harmony export */   "ESteamDeviceFormFactor": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.ESteamDeviceFormFactor),
/* harmony export */   "ESteamGuardState": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.ESteamGuardState),
/* harmony export */   "ESteamRealm": () => (/* reexport safe */ _basetypes__WEBPACK_IMPORTED_MODULE_4__.ESteamRealm),
/* harmony export */   "ESteamUIWindowType": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.ESteamUIWindowType),
/* harmony export */   "EStoreCategory": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EStoreCategory),
/* harmony export */   "EStoreCuratorRecommendationState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EStoreCuratorRecommendationState),
/* harmony export */   "ESuspendResumeProgressState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ESuspendResumeProgressState),
/* harmony export */   "ESystemUISystemKey": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.ESystemUISystemKey),
/* harmony export */   "ETransportError": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.ETransportError),
/* harmony export */   "EUCMFilePrivacyState": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EUCMFilePrivacyState),
/* harmony export */   "EUCMListType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EUCMListType),
/* harmony export */   "EUIComposition": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.EUIComposition),
/* harmony export */   "EUIMode": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EUIMode),
/* harmony export */   "EUniverse": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EUniverse),
/* harmony export */   "EVRInitError": () => (/* reexport safe */ _vrtypes__WEBPACK_IMPORTED_MODULE_22__.EVRInitError),
/* harmony export */   "EValidationPhase": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.EValidationPhase),
/* harmony export */   "EWirelessEndpointStrength": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.EWirelessEndpointStrength),
/* harmony export */   "EWirelessSecurityFlags": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.EWirelessSecurityFlags),
/* harmony export */   "EWorkshopFileType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.EWorkshopFileType),
/* harmony export */   "ErrorCondition": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.ErrorCondition),
/* harmony export */   "FamilySettings": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.FamilySettings),
/* harmony export */   "FamilySharingUser": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.FamilySharingUser),
/* harmony export */   "FlatpakApp": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.FlatpakApp),
/* harmony export */   "FormatStorageProgress_t": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.FormatStorageProgress_t),
/* harmony export */   "FriendState": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.FriendState),
/* harmony export */   "FriendsSettings": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.FriendsSettings),
/* harmony export */   "GameActionDetails": () => (/* reexport safe */ _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__.GameActionDetails),
/* harmony export */   "GameLaunchOption": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.GameLaunchOption),
/* harmony export */   "HIDKeyboardKeys": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.HIDKeyboardKeys),
/* harmony export */   "InstallAppAndCreateShortcutData": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.InstallAppAndCreateShortcutData),
/* harmony export */   "InstallFolderInfo": () => (/* reexport safe */ _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__.InstallFolderInfo),
/* harmony export */   "InstalledAppInfo": () => (/* reexport safe */ _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__.InstalledAppInfo),
/* harmony export */   "InvalidAudioDeviceId": () => (/* reexport safe */ _audiotypes__WEBPACK_IMPORTED_MODULE_2__.InvalidAudioDeviceId),
/* harmony export */   "InvalidBluetoothAdapterId": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.InvalidBluetoothAdapterId),
/* harmony export */   "InvalidBluetoothDeviceId": () => (/* reexport safe */ _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__.InvalidBluetoothDeviceId),
/* harmony export */   "InvalidNetworkDeviceWapId": () => (/* reexport safe */ _networktypes__WEBPACK_IMPORTED_MODULE_15__.InvalidNetworkDeviceWapId),
/* harmony export */   "InvalidStorageManagerBlockDeviceId": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.InvalidStorageManagerBlockDeviceId),
/* harmony export */   "InvalidStorageManagerDriveId": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.InvalidStorageManagerDriveId),
/* harmony export */   "IterateDrivesItem": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.IterateDrivesItem),
/* harmony export */   "IterateFolderItem": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.IterateFolderItem),
/* harmony export */   "MapKoreanaToKorean": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.MapKoreanaToKorean),
/* harmony export */   "MarketingMessage": () => (/* reexport safe */ _storetypes__WEBPACK_IMPORTED_MODULE_20__.MarketingMessage),
/* harmony export */   "MoveContentProgress": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.MoveContentProgress),
/* harmony export */   "OverlayBrowserInfo": () => (/* reexport safe */ _chattypes__WEBPACK_IMPORTED_MODULE_6__.OverlayBrowserInfo),
/* harmony export */   "PchLanguageToELanguage": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.PchLanguageToELanguage),
/* harmony export */   "PchNameFromELauncherType": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.PchNameFromELauncherType),
/* harmony export */   "PushToTalkInfo": () => (/* reexport safe */ _chattypes__WEBPACK_IMPORTED_MODULE_6__.PushToTalkInfo),
/* harmony export */   "RemoteClientInputSettings": () => (/* reexport safe */ _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__.RemoteClientInputSettings),
/* harmony export */   "RemotePlaySettings": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.RemotePlaySettings),
/* harmony export */   "ScreenshotNotification": () => (/* reexport safe */ _notificationtypes__WEBPACK_IMPORTED_MODULE_16__.ScreenshotNotification),
/* harmony export */   "SendTextSpecialKeys": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.SendTextSpecialKeys),
/* harmony export */   "SettingsDownloadRegion": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.SettingsDownloadRegion),
/* harmony export */   "SettingsKeyBinding": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.SettingsKeyBinding),
/* harmony export */   "SettingsState": () => (/* reexport safe */ _settingstypes__WEBPACK_IMPORTED_MODULE_19__.SettingsState),
/* harmony export */   "SteamUIBrowserWindow_t": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.SteamUIBrowserWindow_t),
/* harmony export */   "StorePreferences": () => (/* reexport safe */ _storetypes__WEBPACK_IMPORTED_MODULE_20__.StorePreferences),
/* harmony export */   "SurveyEntry": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.SurveyEntry),
/* harmony export */   "SurveySection": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.SurveySection),
/* harmony export */   "SystemInfo": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.SystemInfo),
/* harmony export */   "TextFilterPreferences": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.TextFilterPreferences),
/* harmony export */   "ToStorageManagerBlockDeviceId": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.ToStorageManagerBlockDeviceId),
/* harmony export */   "ToStorageManagerDriveId": () => (/* reexport safe */ _systemtypes__WEBPACK_IMPORTED_MODULE_21__.ToStorageManagerDriveId),
/* harmony export */   "TradingCardDetails": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.TradingCardDetails),
/* harmony export */   "UGCScreenShot": () => (/* reexport safe */ _screenshottypes__WEBPACK_IMPORTED_MODULE_18__.UGCScreenShot),
/* harmony export */   "UserAchievementInfo": () => (/* reexport safe */ _gamestatstypes__WEBPACK_IMPORTED_MODULE_12__.UserAchievementInfo),
/* harmony export */   "ValidateProgress": () => (/* reexport safe */ _downloadtypes__WEBPACK_IMPORTED_MODULE_10__.ValidateProgress),
/* harmony export */   "WorkshopItem": () => (/* reexport safe */ _communitytypes__WEBPACK_IMPORTED_MODULE_8__.WorkshopItem),
/* harmony export */   "k_EParentalBlockAlways": () => (/* reexport safe */ _parentaltypes__WEBPACK_IMPORTED_MODULE_17__.k_EParentalBlockAlways),
/* harmony export */   "k_EParentalBlockNever": () => (/* reexport safe */ _parentaltypes__WEBPACK_IMPORTED_MODULE_17__.k_EParentalBlockNever),
/* harmony export */   "k_GIDNil": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_GIDNil),
/* harmony export */   "k_RTime32Infinite": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_RTime32Infinite),
/* harmony export */   "k_RTime32Nil": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_RTime32Nil),
/* harmony export */   "k_nGameIDControllerConfigs": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDControllerConfigs),
/* harmony export */   "k_nGameIDControllerConfigs_BigPicture": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDControllerConfigs_BigPicture),
/* harmony export */   "k_nGameIDControllerConfigs_Desktop": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDControllerConfigs_Desktop),
/* harmony export */   "k_nGameIDControllerConfigs_GuideChord": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDControllerConfigs_GuideChord),
/* harmony export */   "k_nGameIDGamepadUIStandaloneWindow": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDGamepadUIStandaloneWindow),
/* harmony export */   "k_nGameIDServiceAppFirst": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDServiceAppFirst),
/* harmony export */   "k_nGameIDServiceAppLast": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDServiceAppLast),
/* harmony export */   "k_nGameIDSteamBackpack": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamBackpack),
/* harmony export */   "k_nGameIDSteamEconomy": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamEconomy),
/* harmony export */   "k_nGameIDSteamVR": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamVR),
/* harmony export */   "k_nGameIDSteamVRMain": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamVRMain),
/* harmony export */   "k_nGameIDSteamVRMonitor": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamVRMonitor),
/* harmony export */   "k_nGameIDSteamVRMonitorMain": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamVRMonitorMain),
/* harmony export */   "k_nGameIDSteamWebHelper": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDSteamWebHelper),
/* harmony export */   "k_nGameIDWinUI": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_nGameIDWinUI),
/* harmony export */   "k_nSteamClientBetaNone": () => (/* reexport safe */ _clientuitypes__WEBPACK_IMPORTED_MODULE_7__.k_nSteamClientBetaNone),
/* harmony export */   "k_unSteamUserConsoleInstance": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_unSteamUserConsoleInstance),
/* harmony export */   "k_unSteamUserDesktopInstance": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_unSteamUserDesktopInstance),
/* harmony export */   "k_unSteamUserWebInstance": () => (/* reexport safe */ _clientenums__WEBPACK_IMPORTED_MODULE_0__.k_unSteamUserWebInstance)
/* harmony export */ });
/* harmony import */ var _clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clientenums */ "../../../web_src/shared/js/clientenums.ts");
/* harmony import */ var _appdetailstypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./appdetailstypes */ "../../../web_src/shared/js/clienttypes/appdetailstypes.ts");
/* harmony import */ var _audiotypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audiotypes */ "../../../web_src/shared/js/clienttypes/audiotypes.ts");
/* harmony import */ var _authtypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./authtypes */ "../../../web_src/shared/js/clienttypes/authtypes.ts");
/* harmony import */ var _basetypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./basetypes */ "../../../web_src/shared/js/clienttypes/basetypes.ts");
/* harmony import */ var _bluetoothtypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bluetoothtypes */ "../../../web_src/shared/js/clienttypes/bluetoothtypes.ts");
/* harmony import */ var _chattypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chattypes */ "../../../web_src/shared/js/clienttypes/chattypes.ts");
/* harmony import */ var _clientuitypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./clientuitypes */ "../../../web_src/shared/js/clienttypes/clientuitypes.ts");
/* harmony import */ var _communitytypes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./communitytypes */ "../../../web_src/shared/js/clienttypes/communitytypes.ts");
/* harmony import */ var _controllertypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controllertypes */ "../../../web_src/shared/js/clienttypes/controllertypes.ts");
/* harmony import */ var _downloadtypes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./downloadtypes */ "../../../web_src/shared/js/clienttypes/downloadtypes.ts");
/* harmony import */ var _gameactiontypes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./gameactiontypes */ "../../../web_src/shared/js/clienttypes/gameactiontypes.ts");
/* harmony import */ var _gamestatstypes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gamestatstypes */ "../../../web_src/shared/js/clienttypes/gamestatstypes.ts");
/* harmony import */ var _logintypes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./logintypes */ "../../../web_src/shared/js/clienttypes/logintypes.ts");
/* harmony import */ var _musictypes__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./musictypes */ "../../../web_src/shared/js/clienttypes/musictypes.ts");
/* harmony import */ var _networktypes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./networktypes */ "../../../web_src/shared/js/clienttypes/networktypes.ts");
/* harmony import */ var _notificationtypes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./notificationtypes */ "../../../web_src/shared/js/clienttypes/notificationtypes.ts");
/* harmony import */ var _parentaltypes__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parentaltypes */ "../../../web_src/shared/js/clienttypes/parentaltypes.ts");
/* harmony import */ var _screenshottypes__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./screenshottypes */ "../../../web_src/shared/js/clienttypes/screenshottypes.ts");
/* harmony import */ var _settingstypes__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./settingstypes */ "../../../web_src/shared/js/clienttypes/settingstypes.ts");
/* harmony import */ var _storetypes__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./storetypes */ "../../../web_src/shared/js/clienttypes/storetypes.ts");
/* harmony import */ var _systemtypes__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./systemtypes */ "../../../web_src/shared/js/clienttypes/systemtypes.ts");
/* harmony import */ var _vrtypes__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./vrtypes */ "../../../web_src/shared/js/clienttypes/vrtypes.ts");
 // re-export to higher namespace
























/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/logintypes.ts":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/logintypes.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _notificationtypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notificationtypes */ "../../../web_src/shared/js/clienttypes/notificationtypes.ts");



/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/musictypes.ts":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/musictypes.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppDetailsMusicAlbum": () => (/* binding */ AppDetailsMusicAlbum),
/* harmony export */   "AudioPlayback_Status": () => (/* binding */ AudioPlayback_Status),
/* harmony export */   "EMusicPlayingRepeatStatus": () => (/* binding */ EMusicPlayingRepeatStatus)
/* harmony export */ });
class AppDetailsMusicAlbum {
}
var EMusicPlayingRepeatStatus;
(function (EMusicPlayingRepeatStatus) {
    EMusicPlayingRepeatStatus[EMusicPlayingRepeatStatus["PlayingRepeat_None"] = 0] = "PlayingRepeat_None";
    EMusicPlayingRepeatStatus[EMusicPlayingRepeatStatus["PlayingRepeat_All"] = 1] = "PlayingRepeat_All";
    EMusicPlayingRepeatStatus[EMusicPlayingRepeatStatus["PlayingRepeat_Once"] = 2] = "PlayingRepeat_Once";
    EMusicPlayingRepeatStatus[EMusicPlayingRepeatStatus["PlayingRepeat_Max"] = 3] = "PlayingRepeat_Max";
})(EMusicPlayingRepeatStatus || (EMusicPlayingRepeatStatus = {}));
var AudioPlayback_Status;
(function (AudioPlayback_Status) {
    AudioPlayback_Status[AudioPlayback_Status["AudioPlayback_Undefined"] = 0] = "AudioPlayback_Undefined";
    AudioPlayback_Status[AudioPlayback_Status["AudioPlayback_Playing"] = 1] = "AudioPlayback_Playing";
    AudioPlayback_Status[AudioPlayback_Status["AudioPlayback_Paused"] = 2] = "AudioPlayback_Paused";
    AudioPlayback_Status[AudioPlayback_Status["AudioPlayback_Idle"] = 3] = "AudioPlayback_Idle";
})(AudioPlayback_Status || (AudioPlayback_Status = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/networktypes.ts":
/*!**************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/networktypes.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfiguredProxyInfo": () => (/* binding */ ConfiguredProxyInfo),
/* harmony export */   "CustomNetworkDeviceWapId": () => (/* binding */ CustomNetworkDeviceWapId),
/* harmony export */   "EHTTPProxyMode": () => (/* binding */ EHTTPProxyMode),
/* harmony export */   "ENetworkDeviceState": () => (/* binding */ ENetworkDeviceState),
/* harmony export */   "ENetworkDeviceType": () => (/* binding */ ENetworkDeviceType),
/* harmony export */   "EWirelessEndpointStrength": () => (/* binding */ EWirelessEndpointStrength),
/* harmony export */   "EWirelessSecurityFlags": () => (/* binding */ EWirelessSecurityFlags),
/* harmony export */   "InvalidNetworkDeviceWapId": () => (/* binding */ InvalidNetworkDeviceWapId)
/* harmony export */ });
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");

const CustomNetworkDeviceWapId = 0xA955A2C5;
const InvalidNetworkDeviceWapId = 0x0;
/**
 * Matches enum ENetworkDeviceType declared in main\src\common\steam\iclientnetworkdevicemanager.h
 */
var ENetworkDeviceType;
(function (ENetworkDeviceType) {
    ENetworkDeviceType[ENetworkDeviceType["Unknown"] = 0] = "Unknown";
    ENetworkDeviceType[ENetworkDeviceType["Wired"] = 1] = "Wired";
    ENetworkDeviceType[ENetworkDeviceType["Wireless"] = 2] = "Wireless";
    ENetworkDeviceType[ENetworkDeviceType["Virtual"] = 3] = "Virtual";
})(ENetworkDeviceType || (ENetworkDeviceType = {}));
/**
 * Matches enum ENetworkDeviceState declared in main\src\common\steam\iclientnetworkdevicemanager.h
 */
var ENetworkDeviceState;
(function (ENetworkDeviceState) {
    ENetworkDeviceState[ENetworkDeviceState["NotPresent"] = 0] = "NotPresent";
    ENetworkDeviceState[ENetworkDeviceState["Failed"] = 1] = "Failed";
    ENetworkDeviceState[ENetworkDeviceState["Disconnected"] = 2] = "Disconnected";
    ENetworkDeviceState[ENetworkDeviceState["Disconnecting"] = 3] = "Disconnecting";
    ENetworkDeviceState[ENetworkDeviceState["Connecting"] = 4] = "Connecting";
    ENetworkDeviceState[ENetworkDeviceState["Connected"] = 5] = "Connected";
    ENetworkDeviceState[ENetworkDeviceState["Retrying"] = 6] = "Retrying";
})(ENetworkDeviceState || (ENetworkDeviceState = {}));
/**
 * Matches enum flags declared in main\src\common\steam\iclientnetworkdevicemanager.h
 */
var EWirelessEndpointStrength;
(function (EWirelessEndpointStrength) {
    EWirelessEndpointStrength[EWirelessEndpointStrength["None"] = 0] = "None";
    EWirelessEndpointStrength[EWirelessEndpointStrength["Weak"] = 1] = "Weak";
    EWirelessEndpointStrength[EWirelessEndpointStrength["Ok"] = 2] = "Ok";
    EWirelessEndpointStrength[EWirelessEndpointStrength["Good"] = 3] = "Good";
    EWirelessEndpointStrength[EWirelessEndpointStrength["Excellent"] = 4] = "Excellent";
})(EWirelessEndpointStrength || (EWirelessEndpointStrength = {}));
/**
 * Matches enum flags declared in main\src\common\steam\iclientnetworkdevicemanager.h
 */
var EWirelessSecurityFlags;
(function (EWirelessSecurityFlags) {
    EWirelessSecurityFlags[EWirelessSecurityFlags["None"] = 0] = "None";
    EWirelessSecurityFlags[EWirelessSecurityFlags["StaticWep"] = 1] = "StaticWep";
    EWirelessSecurityFlags[EWirelessSecurityFlags["DynamicWep"] = 2] = "DynamicWep";
    EWirelessSecurityFlags[EWirelessSecurityFlags["Wpa"] = 4] = "Wpa";
    EWirelessSecurityFlags[EWirelessSecurityFlags["WpaEnterprise"] = 8] = "WpaEnterprise";
    EWirelessSecurityFlags[EWirelessSecurityFlags["Wpa2"] = 16] = "Wpa2";
    EWirelessSecurityFlags[EWirelessSecurityFlags["Wpa2Enterprise"] = 32] = "Wpa2Enterprise";
    /** Special value to indicate that this platform does not support the security methods required to connect to an access point */
    EWirelessSecurityFlags[EWirelessSecurityFlags["Unsupported"] = 32768] = "Unsupported";
})(EWirelessSecurityFlags || (EWirelessSecurityFlags = {}));
/**
 * Top level setting for proxy status on devices where we control the system level proxy
 */
var EHTTPProxyMode;
(function (EHTTPProxyMode) {
    EHTTPProxyMode[EHTTPProxyMode["k_EHTTPProxyMode_Invalid"] = 0] = "k_EHTTPProxyMode_Invalid";
    EHTTPProxyMode[EHTTPProxyMode["k_EHTTPProxyMode_None"] = 1] = "k_EHTTPProxyMode_None";
    EHTTPProxyMode[EHTTPProxyMode["k_EHTTPProxyMode_Manual"] = 2] = "k_EHTTPProxyMode_Manual";
    EHTTPProxyMode[EHTTPProxyMode["k_EHTTPProxyMode_Automatic"] = 3] = "k_EHTTPProxyMode_Automatic";
})(EHTTPProxyMode || (EHTTPProxyMode = {}));
class ConfiguredProxyInfo {
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/notificationtypes.ts":
/*!*******************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/notificationtypes.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AchievementNotification": () => (/* binding */ AchievementNotification),
/* harmony export */   "AppLifetimeNotification": () => (/* binding */ AppLifetimeNotification),
/* harmony export */   "EClientUINotificationType": () => (/* binding */ EClientUINotificationType),
/* harmony export */   "ScreenshotNotification": () => (/* binding */ ScreenshotNotification)
/* harmony export */ });
class AppLifetimeNotification {
}
class ScreenshotNotification {
}
class AchievementNotification {
}
var EClientUINotificationType;
(function (EClientUINotificationType) {
    EClientUINotificationType[EClientUINotificationType["k_EClientUINotificationGroupChatMessage"] = 1] = "k_EClientUINotificationGroupChatMessage";
    EClientUINotificationType[EClientUINotificationType["k_EClientUINotificationFriendChatMessage"] = 2] = "k_EClientUINotificationFriendChatMessage";
    EClientUINotificationType[EClientUINotificationType["k_EClientUINotificationFriendPersonaState"] = 3] = "k_EClientUINotificationFriendPersonaState";
})(EClientUINotificationType || (EClientUINotificationType = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/parentaltypes.ts":
/*!***************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/parentaltypes.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EParentalFeature": () => (/* binding */ EParentalFeature),
/* harmony export */   "k_EParentalBlockAlways": () => (/* binding */ k_EParentalBlockAlways),
/* harmony export */   "k_EParentalBlockNever": () => (/* binding */ k_EParentalBlockNever)
/* harmony export */ });
var EParentalFeature;
(function (EParentalFeature) {
    EParentalFeature[EParentalFeature["k_EFeatureInvalid"] = 0] = "k_EFeatureInvalid";
    EParentalFeature[EParentalFeature["k_EFeatureStore"] = 1] = "k_EFeatureStore";
    EParentalFeature[EParentalFeature["k_EFeatureCommunity"] = 2] = "k_EFeatureCommunity";
    EParentalFeature[EParentalFeature["k_EFeatureProfile"] = 3] = "k_EFeatureProfile";
    EParentalFeature[EParentalFeature["k_EFeatureFriends"] = 4] = "k_EFeatureFriends";
    EParentalFeature[EParentalFeature["k_EFeatureNews"] = 5] = "k_EFeatureNews";
    EParentalFeature[EParentalFeature["k_EFeatureTrading"] = 6] = "k_EFeatureTrading";
    EParentalFeature[EParentalFeature["k_EFeatureSettings"] = 7] = "k_EFeatureSettings";
    EParentalFeature[EParentalFeature["k_EFeatureConsole"] = 8] = "k_EFeatureConsole";
    EParentalFeature[EParentalFeature["k_EFeatureBrowser"] = 9] = "k_EFeatureBrowser";
    EParentalFeature[EParentalFeature["k_EFeatureParentalSetup"] = 10] = "k_EFeatureParentalSetup";
    EParentalFeature[EParentalFeature["k_EFeatureLibrary"] = 11] = "k_EFeatureLibrary";
    EParentalFeature[EParentalFeature["k_EFeatureTest"] = 12] = "k_EFeatureTest";
    EParentalFeature[EParentalFeature["k_EFeatureSiteLicense"] = 13] = "k_EFeatureSiteLicense";
    EParentalFeature[EParentalFeature["k_EFeatureKioskMode"] = 14] = "k_EFeatureKioskMode";
    EParentalFeature[EParentalFeature["k_EFeatureMax"] = 15] = "k_EFeatureMax";
})(EParentalFeature || (EParentalFeature = {}));
const k_EParentalBlockAlways = true;
const k_EParentalBlockNever = false;


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/screenshottypes.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/screenshottypes.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UGCScreenShot": () => (/* binding */ UGCScreenShot)
/* harmony export */ });
class UGCScreenShot {
    constructor() {
        this.nType = 0;
        this.nCreatorappid = 0;
        this.nConsumerappid = 0;
        this.rTimeCreated = 0;
        this.rTimeUpdated = 0;
        this.eVisibility = 0;
        this.nIimageWidth = 0;
        this.nImageHeight = 0;
        this.nVotesUp = 0;
        this.nVotesDown = 0;
        this.nScore = 0;
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/settingstypes.ts":
/*!***************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/settingstypes.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountSettings": () => (/* binding */ AccountSettings),
/* harmony export */   "BIsValidStartPage": () => (/* binding */ BIsValidStartPage),
/* harmony export */   "DefaultFriendsSettings": () => (/* binding */ DefaultFriendsSettings),
/* harmony export */   "EBrowserComposerMode": () => (/* binding */ EBrowserComposerMode),
/* harmony export */   "EChatFlashMode": () => (/* binding */ EChatFlashMode),
/* harmony export */   "EDisplayCorner": () => (/* binding */ EDisplayCorner),
/* harmony export */   "EGraphicsPerfOverlayState": () => (/* binding */ EGraphicsPerfOverlayState),
/* harmony export */   "ELibraryDisplaySize": () => (/* binding */ ELibraryDisplaySize),
/* harmony export */   "EPeerContentServerMode": () => (/* binding */ EPeerContentServerMode),
/* harmony export */   "ESteamDeviceFormFactor": () => (/* binding */ ESteamDeviceFormFactor),
/* harmony export */   "ESteamGuardState": () => (/* binding */ ESteamGuardState),
/* harmony export */   "FamilySettings": () => (/* binding */ FamilySettings),
/* harmony export */   "FamilySharingUser": () => (/* binding */ FamilySharingUser),
/* harmony export */   "FriendsSettings": () => (/* binding */ FriendsSettings),
/* harmony export */   "RemotePlaySettings": () => (/* binding */ RemotePlaySettings),
/* harmony export */   "SettingsDownloadRegion": () => (/* binding */ SettingsDownloadRegion),
/* harmony export */   "SettingsKeyBinding": () => (/* binding */ SettingsKeyBinding),
/* harmony export */   "SettingsState": () => (/* binding */ SettingsState)
/* harmony export */ });
class SettingsKeyBinding {
    constructor() {
        this.nKeyCode = 0;
        this.bAltKey = false;
        this.bShiftKey = false;
        this.bCtrlKey = false;
        this.bMetaKey = false;
        this.strDisplayString = "";
    }
}
class SettingsDownloadRegion {
    constructor() {
        this.strRegionName = "";
        this.nRegionID = 0;
    }
}
var EChatFlashMode;
(function (EChatFlashMode) {
    EChatFlashMode[EChatFlashMode["EChatFlashMode_Always"] = 0] = "EChatFlashMode_Always";
    EChatFlashMode[EChatFlashMode["EChatFlashMode_Minimized"] = 1] = "EChatFlashMode_Minimized";
    EChatFlashMode[EChatFlashMode["EChatFlashMode_Never"] = 2] = "EChatFlashMode_Never";
})(EChatFlashMode || (EChatFlashMode = {}));
var ELibraryDisplaySize;
(function (ELibraryDisplaySize) {
    ELibraryDisplaySize[ELibraryDisplaySize["ELibraryDisplaySize_Automatic"] = 0] = "ELibraryDisplaySize_Automatic";
    ELibraryDisplaySize[ELibraryDisplaySize["ELibraryDisplaySize_Small"] = 1] = "ELibraryDisplaySize_Small";
    ELibraryDisplaySize[ELibraryDisplaySize["ELibraryDisplaySize_Medium"] = 2] = "ELibraryDisplaySize_Medium";
    ELibraryDisplaySize[ELibraryDisplaySize["ELibraryDisplaySize_Large"] = 3] = "ELibraryDisplaySize_Large";
})(ELibraryDisplaySize || (ELibraryDisplaySize = {}));
var EPeerContentServerMode;
(function (EPeerContentServerMode) {
    EPeerContentServerMode[EPeerContentServerMode["EPeerContentServerMode_Off"] = 0] = "EPeerContentServerMode_Off";
    EPeerContentServerMode[EPeerContentServerMode["EPeerContentServerMode_SameUser"] = 1] = "EPeerContentServerMode_SameUser";
    EPeerContentServerMode[EPeerContentServerMode["EPeerContentServerMode_Friends"] = 2] = "EPeerContentServerMode_Friends";
    EPeerContentServerMode[EPeerContentServerMode["EPeerContentServerMode_AnyUser"] = 3] = "EPeerContentServerMode_AnyUser";
})(EPeerContentServerMode || (EPeerContentServerMode = {}));
/**
 * Matches EGraphicsPerfOverlayState enum declared in src/clientdll/applicationmanager.h
 */
var EGraphicsPerfOverlayState;
(function (EGraphicsPerfOverlayState) {
    EGraphicsPerfOverlayState[EGraphicsPerfOverlayState["EGraphicsPerfOverlayState_Off"] = 0] = "EGraphicsPerfOverlayState_Off";
    EGraphicsPerfOverlayState[EGraphicsPerfOverlayState["EGraphicsPerfOverlayState_Basic"] = 1] = "EGraphicsPerfOverlayState_Basic";
    EGraphicsPerfOverlayState[EGraphicsPerfOverlayState["EGraphicsPerfOverlayState_Medium"] = 2] = "EGraphicsPerfOverlayState_Medium";
    EGraphicsPerfOverlayState[EGraphicsPerfOverlayState["EGraphicsPerfOverlayState_Full"] = 3] = "EGraphicsPerfOverlayState_Full";
    EGraphicsPerfOverlayState[EGraphicsPerfOverlayState["EGraphicsPerfOverlayState_Max"] = 3] = "EGraphicsPerfOverlayState_Max";
})(EGraphicsPerfOverlayState || (EGraphicsPerfOverlayState = {}));
/**
 * Matches EGraphicsPerfOverlayState enum declared in src/clientdll/applicationmanager.h
 */
var EBrowserComposerMode;
(function (EBrowserComposerMode) {
    EBrowserComposerMode[EBrowserComposerMode["Invalid"] = 0] = "Invalid";
    EBrowserComposerMode[EBrowserComposerMode["System"] = 1] = "System";
    EBrowserComposerMode[EBrowserComposerMode["OpenGL"] = 2] = "OpenGL";
})(EBrowserComposerMode || (EBrowserComposerMode = {}));
class FamilySharingUser {
}
const k_rgStartPages = ['store', 'library', 'friendactivity', 'community', 'news', 'console'];
function BIsValidStartPage(value) {
    return k_rgStartPages.includes(value);
}
class SettingsState {
}
var ESteamGuardState;
(function (ESteamGuardState) {
    ESteamGuardState[ESteamGuardState["k_ESteamGuardOffline"] = 0] = "k_ESteamGuardOffline";
    ESteamGuardState[ESteamGuardState["k_ESteamGuardEmailUnverified"] = 1] = "k_ESteamGuardEmailUnverified";
    ESteamGuardState[ESteamGuardState["k_ESteamGuardDisabled"] = 2] = "k_ESteamGuardDisabled";
    ESteamGuardState[ESteamGuardState["k_ESteamGuardEnabled"] = 3] = "k_ESteamGuardEnabled";
    ESteamGuardState[ESteamGuardState["k_ESteamGuardNotEnabled"] = 4] = "k_ESteamGuardNotEnabled";
    ESteamGuardState[ESteamGuardState["k_ESteamGuardInvalid"] = -1] = "k_ESteamGuardInvalid";
})(ESteamGuardState || (ESteamGuardState = {}));
class AccountSettings {
    constructor() {
        this.strEmail = '';
        this.bEmailValidated = false;
        this.bHasAnyVACBans = false;
        this.bHasTwoFactor = false;
        this.eSteamGuardState = ESteamGuardState.k_ESteamGuardInvalid;
        this.rtSteamGuardEnableTime = 0;
    }
}
class FamilySettings {
}
var ESteamDeviceFormFactor;
(function (ESteamDeviceFormFactor) {
    ESteamDeviceFormFactor[ESteamDeviceFormFactor["Unknown"] = 0] = "Unknown";
    ESteamDeviceFormFactor[ESteamDeviceFormFactor["Phone"] = 1] = "Phone";
    ESteamDeviceFormFactor[ESteamDeviceFormFactor["Tablet"] = 2] = "Tablet";
    ESteamDeviceFormFactor[ESteamDeviceFormFactor["Computer"] = 3] = "Computer";
    ESteamDeviceFormFactor[ESteamDeviceFormFactor["TV"] = 4] = "TV";
})(ESteamDeviceFormFactor || (ESteamDeviceFormFactor = {}));
class RemotePlaySettings {
}
class FriendsSettings {
}
function DefaultFriendsSettings() {
    return {
        bNotifications_ShowIngame: true,
        bNotifications_ShowOnline: false,
        bNotifications_ShowMessage: true,
        bNotifications_EventsAndAnnouncements: true,
        bSounds_PlayIngame: false,
        bSounds_PlayOnline: false,
        bSounds_PlayMessage: true,
        bSounds_EventsAndAnnouncements: false,
        bAlwaysNewChatWindow: false,
        bForceAlphabeticFriendSorting: false,
        nChatFlashMode: EChatFlashMode.EChatFlashMode_Always,
        bRememberOpenChats: true,
        bCompactQuickAccess: false,
        bCompactFriendsList: false,
        bNotifications_ShowChatRoomNotification: true,
        bSounds_PlayChatRoomNotification: true,
        bHideOfflineFriendsInTagGroups: false,
        bHideCategorizedFriends: false,
        bCategorizeInGameFriendsByGame: true,
        nChatFontSize: 2,
        b24HourClock: false,
        bDoNotDisturbMode: false,
        bDisableEmbedInlining: false,
        bSignIntoFriends: true,
        bDisableSpellcheck: false,
        bDisableRoomEffects: false,
        bAnimatedAvatars: true,
        featuresEnabled: {},
    };
}
var EDisplayCorner;
(function (EDisplayCorner) {
    EDisplayCorner[EDisplayCorner["k_None"] = 0] = "k_None";
    EDisplayCorner[EDisplayCorner["k_TopLeft"] = 1] = "k_TopLeft";
    EDisplayCorner[EDisplayCorner["k_TopRight"] = 2] = "k_TopRight";
    EDisplayCorner[EDisplayCorner["k_BottomRight"] = 3] = "k_BottomRight";
    EDisplayCorner[EDisplayCorner["k_BottomLeft"] = 4] = "k_BottomLeft";
})(EDisplayCorner || (EDisplayCorner = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/storetypes.ts":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/storetypes.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BDoesSaleItemTypeHaveParent": () => (/* binding */ BDoesSaleItemTypeHaveParent),
/* harmony export */   "BIsSaleItemType": () => (/* binding */ BIsSaleItemType),
/* harmony export */   "ContentDescriptorPreferences": () => (/* binding */ ContentDescriptorPreferences),
/* harmony export */   "MarketingMessage": () => (/* binding */ MarketingMessage),
/* harmony export */   "StorePreferences": () => (/* binding */ StorePreferences)
/* harmony export */ });
class MarketingMessage {
    constructor() {
        this.unAppID = 0;
    }
}
class ContentDescriptorPreferences {
    constructor() {
        this.content_descriptors_to_exclude = [];
    }
}
class StorePreferences {
}
// If we ever change this, make sure to update the server code -> YldExtractAppsPackagesAndBundlesFromCapsule
function BIsSaleItemType(input) {
    return input === 'game' || input === 'dlc' || input === 'software' ||
        input === 'music' || input === 'application' || input === 'demo' ||
        input === 'hardware' || input === 'mod' || input == 'video' ||
        input === 'beta' || input === 'advertising';
}
function BDoesSaleItemTypeHaveParent(input) {
    return input === 'music' || input === 'dlc';
}


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/systemtypes.ts":
/*!*************************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/systemtypes.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BatteryState_t": () => (/* binding */ BatteryState_t),
/* harmony export */   "EClientUsedInputType": () => (/* binding */ EClientUsedInputType),
/* harmony export */   "EComputerActiveState": () => (/* binding */ EComputerActiveState),
/* harmony export */   "ErrorCondition": () => (/* binding */ ErrorCondition),
/* harmony export */   "FlatpakApp": () => (/* binding */ FlatpakApp),
/* harmony export */   "FormatStorageProgress_t": () => (/* binding */ FormatStorageProgress_t),
/* harmony export */   "GameLaunchOption": () => (/* binding */ GameLaunchOption),
/* harmony export */   "InstallAppAndCreateShortcutData": () => (/* binding */ InstallAppAndCreateShortcutData),
/* harmony export */   "InvalidStorageManagerBlockDeviceId": () => (/* binding */ InvalidStorageManagerBlockDeviceId),
/* harmony export */   "InvalidStorageManagerDriveId": () => (/* binding */ InvalidStorageManagerDriveId),
/* harmony export */   "IterateDrivesItem": () => (/* binding */ IterateDrivesItem),
/* harmony export */   "IterateFolderItem": () => (/* binding */ IterateFolderItem),
/* harmony export */   "SurveyEntry": () => (/* binding */ SurveyEntry),
/* harmony export */   "SurveySection": () => (/* binding */ SurveySection),
/* harmony export */   "SystemInfo": () => (/* binding */ SystemInfo),
/* harmony export */   "ToStorageManagerBlockDeviceId": () => (/* binding */ ToStorageManagerBlockDeviceId),
/* harmony export */   "ToStorageManagerDriveId": () => (/* binding */ ToStorageManagerDriveId)
/* harmony export */ });
class SystemInfo {
}
class IterateFolderItem {
}
class IterateDrivesItem {
}
class SurveyEntry {
}
class SurveySection {
}
class GameLaunchOption {
}
class InstallAppAndCreateShortcutData {
}
class FlatpakApp {
}
class BatteryState_t {
}
class FormatStorageProgress_t {
}
const InvalidStorageManagerDriveId = 0x0;
function ToStorageManagerDriveId(nId) { return nId; }
const InvalidStorageManagerBlockDeviceId = 0x0;
function ToStorageManagerBlockDeviceId(nId) { return nId; }
var EComputerActiveState;
(function (EComputerActiveState) {
    EComputerActiveState[EComputerActiveState["k_EComputerActiveStateInvalid"] = 0] = "k_EComputerActiveStateInvalid";
    EComputerActiveState[EComputerActiveState["k_EComputerActiveStateActive"] = 1] = "k_EComputerActiveStateActive";
    EComputerActiveState[EComputerActiveState["k_EComputerActiveStateIdle"] = 2] = "k_EComputerActiveStateIdle";
})(EComputerActiveState || (EComputerActiveState = {}));
var EClientUsedInputType;
(function (EClientUsedInputType) {
    EClientUsedInputType[EClientUsedInputType["k_EClientUsedInputTypeKeyboard"] = 0] = "k_EClientUsedInputTypeKeyboard";
    EClientUsedInputType[EClientUsedInputType["k_EClientUsedInputTypeMouse"] = 1] = "k_EClientUsedInputTypeMouse";
    EClientUsedInputType[EClientUsedInputType["k_EClientUsedInputTypeController"] = 2] = "k_EClientUsedInputTypeController";
    EClientUsedInputType[EClientUsedInputType["k_EClientUsedInputTypeMax"] = 3] = "k_EClientUsedInputTypeMax";
})(EClientUsedInputType || (EClientUsedInputType = {}));
/**
 * Used when the Steam Client wants to display an error condition that the user must do something with
 */
var ErrorCondition;
(function (ErrorCondition) {
    ErrorCondition[ErrorCondition["k_ErrorCondition_Invalid"] = 0] = "k_ErrorCondition_Invalid";
    ErrorCondition[ErrorCondition["k_ErrorCondition_RefreshLogin"] = 1] = "k_ErrorCondition_RefreshLogin";
    ErrorCondition[ErrorCondition["k_ErrorCondition_LoggedInElsewhere"] = 2] = "k_ErrorCondition_LoggedInElsewhere";
    ErrorCondition[ErrorCondition["k_ErrorCondition_SteamGuardAuth"] = 3] = "k_ErrorCondition_SteamGuardAuth";
    ErrorCondition[ErrorCondition["k_ErrorCondition_AccountDisabled"] = 4] = "k_ErrorCondition_AccountDisabled";
    ErrorCondition[ErrorCondition["k_ErrorCondition_Offline"] = 5] = "k_ErrorCondition_Offline";
    ErrorCondition[ErrorCondition["k_ErrorCondition_UnhandledMailTo"] = 6] = "k_ErrorCondition_UnhandledMailTo";
})(ErrorCondition || (ErrorCondition = {}));


/***/ }),

/***/ "../../../web_src/shared/js/clienttypes/vrtypes.ts":
/*!*********************************************************!*\
  !*** ../../../web_src/shared/js/clienttypes/vrtypes.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EClientVRError": () => (/* binding */ EClientVRError),
/* harmony export */   "EVRInitError": () => (/* binding */ EVRInitError)
/* harmony export */ });
var EClientVRError;
(function (EClientVRError) {
    EClientVRError[EClientVRError["k_EVRError_None"] = 0] = "k_EVRError_None";
    EClientVRError[EClientVRError["k_EVRError_VRSkipParam"] = 1] = "k_EVRError_VRSkipParam";
    EClientVRError[EClientVRError["k_EVRError_ComponentNotInstalled"] = 2] = "k_EVRError_ComponentNotInstalled";
    EClientVRError[EClientVRError["k_EVRError_ComponentBusy"] = 3] = "k_EVRError_ComponentBusy";
    EClientVRError[EClientVRError["k_EVRError_CrashProtection"] = 4] = "k_EVRError_CrashProtection";
    EClientVRError[EClientVRError["k_EVRError_HmdError"] = 5] = "k_EVRError_HmdError";
})(EClientVRError || (EClientVRError = {}));
;
var EVRInitError;
(function (EVRInitError) {
    EVRInitError[EVRInitError["VRInitError_None"] = 0] = "VRInitError_None";
    EVRInitError[EVRInitError["VRInitError_Unknown"] = 1] = "VRInitError_Unknown";
    EVRInitError[EVRInitError["VRInitError_Init_InstallationNotFound"] = 100] = "VRInitError_Init_InstallationNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_InstallationCorrupt"] = 101] = "VRInitError_Init_InstallationCorrupt";
    EVRInitError[EVRInitError["VRInitError_Init_VRClientDLLNotFound"] = 102] = "VRInitError_Init_VRClientDLLNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_FileNotFound"] = 103] = "VRInitError_Init_FileNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_FactoryNotFound"] = 104] = "VRInitError_Init_FactoryNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_InterfaceNotFound"] = 105] = "VRInitError_Init_InterfaceNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_InvalidInterface"] = 106] = "VRInitError_Init_InvalidInterface";
    EVRInitError[EVRInitError["VRInitError_Init_UserConfigDirectoryInvalid"] = 107] = "VRInitError_Init_UserConfigDirectoryInvalid";
    EVRInitError[EVRInitError["VRInitError_Init_HmdNotFound"] = 108] = "VRInitError_Init_HmdNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_NotInitialized"] = 109] = "VRInitError_Init_NotInitialized";
    EVRInitError[EVRInitError["VRInitError_Init_PathRegistryNotFound"] = 110] = "VRInitError_Init_PathRegistryNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_NoConfigPath"] = 111] = "VRInitError_Init_NoConfigPath";
    EVRInitError[EVRInitError["VRInitError_Init_NoLogPath"] = 112] = "VRInitError_Init_NoLogPath";
    EVRInitError[EVRInitError["VRInitError_Init_PathRegistryNotWritable"] = 113] = "VRInitError_Init_PathRegistryNotWritable";
    EVRInitError[EVRInitError["VRInitError_Init_AppInfoInitFailed"] = 114] = "VRInitError_Init_AppInfoInitFailed";
    EVRInitError[EVRInitError["VRInitError_Init_Retry"] = 115] = "VRInitError_Init_Retry";
    EVRInitError[EVRInitError["VRInitError_Init_InitCanceledByUser"] = 116] = "VRInitError_Init_InitCanceledByUser";
    EVRInitError[EVRInitError["VRInitError_Init_AnotherAppLaunching"] = 117] = "VRInitError_Init_AnotherAppLaunching";
    EVRInitError[EVRInitError["VRInitError_Init_SettingsInitFailed"] = 118] = "VRInitError_Init_SettingsInitFailed";
    EVRInitError[EVRInitError["VRInitError_Init_ShuttingDown"] = 119] = "VRInitError_Init_ShuttingDown";
    EVRInitError[EVRInitError["VRInitError_Init_TooManyObjects"] = 120] = "VRInitError_Init_TooManyObjects";
    EVRInitError[EVRInitError["VRInitError_Init_NoServerForBackgroundApp"] = 121] = "VRInitError_Init_NoServerForBackgroundApp";
    EVRInitError[EVRInitError["VRInitError_Init_NotSupportedWithCompositor"] = 122] = "VRInitError_Init_NotSupportedWithCompositor";
    EVRInitError[EVRInitError["VRInitError_Init_NotAvailableToUtilityApps"] = 123] = "VRInitError_Init_NotAvailableToUtilityApps";
    EVRInitError[EVRInitError["VRInitError_Init_Internal"] = 124] = "VRInitError_Init_Internal";
    EVRInitError[EVRInitError["VRInitError_Init_HmdDriverIdIsNone"] = 125] = "VRInitError_Init_HmdDriverIdIsNone";
    EVRInitError[EVRInitError["VRInitError_Init_HmdNotFoundPresenceFailed"] = 126] = "VRInitError_Init_HmdNotFoundPresenceFailed";
    EVRInitError[EVRInitError["VRInitError_Init_VRMonitorNotFound"] = 127] = "VRInitError_Init_VRMonitorNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_VRMonitorStartupFailed"] = 128] = "VRInitError_Init_VRMonitorStartupFailed";
    EVRInitError[EVRInitError["VRInitError_Init_LowPowerWatchdogNotSupported"] = 129] = "VRInitError_Init_LowPowerWatchdogNotSupported";
    EVRInitError[EVRInitError["VRInitError_Init_InvalidApplicationType"] = 130] = "VRInitError_Init_InvalidApplicationType";
    EVRInitError[EVRInitError["VRInitError_Init_NotAvailableToWatchdogApps"] = 131] = "VRInitError_Init_NotAvailableToWatchdogApps";
    EVRInitError[EVRInitError["VRInitError_Init_WatchdogDisabledInSettings"] = 132] = "VRInitError_Init_WatchdogDisabledInSettings";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardNotFound"] = 133] = "VRInitError_Init_VRDashboardNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardStartupFailed"] = 134] = "VRInitError_Init_VRDashboardStartupFailed";
    EVRInitError[EVRInitError["VRInitError_Init_VRHomeNotFound"] = 135] = "VRInitError_Init_VRHomeNotFound";
    EVRInitError[EVRInitError["VRInitError_Init_VRHomeStartupFailed"] = 136] = "VRInitError_Init_VRHomeStartupFailed";
    EVRInitError[EVRInitError["VRInitError_Init_RebootingBusy"] = 137] = "VRInitError_Init_RebootingBusy";
    EVRInitError[EVRInitError["VRInitError_Init_FirmwareUpdateBusy"] = 138] = "VRInitError_Init_FirmwareUpdateBusy";
    EVRInitError[EVRInitError["VRInitError_Init_FirmwareRecoveryBusy"] = 139] = "VRInitError_Init_FirmwareRecoveryBusy";
    EVRInitError[EVRInitError["VRInitError_Init_USBServiceBusy"] = 140] = "VRInitError_Init_USBServiceBusy";
    EVRInitError[EVRInitError["VRInitError_Init_VRWebHelperStartupFailed"] = 141] = "VRInitError_Init_VRWebHelperStartupFailed";
    EVRInitError[EVRInitError["VRInitError_Init_TrackerManagerInitFailed"] = 142] = "VRInitError_Init_TrackerManagerInitFailed";
    EVRInitError[EVRInitError["VRInitError_Init_AlreadyRunning"] = 143] = "VRInitError_Init_AlreadyRunning";
    EVRInitError[EVRInitError["VRInitError_Init_FailedForVrMonitor"] = 144] = "VRInitError_Init_FailedForVrMonitor";
    EVRInitError[EVRInitError["VRInitError_Init_PropertyManagerInitFailed"] = 145] = "VRInitError_Init_PropertyManagerInitFailed";
    EVRInitError[EVRInitError["VRInitError_Init_WebServerFailed"] = 146] = "VRInitError_Init_WebServerFailed";
    EVRInitError[EVRInitError["VRInitError_Init_IllegalTypeTransition"] = 147] = "VRInitError_Init_IllegalTypeTransition";
    EVRInitError[EVRInitError["VRInitError_Init_MismatchedRuntimes"] = 148] = "VRInitError_Init_MismatchedRuntimes";
    EVRInitError[EVRInitError["VRInitError_Init_InvalidProcessId"] = 149] = "VRInitError_Init_InvalidProcessId";
    EVRInitError[EVRInitError["VRInitError_Init_VRServiceStartupFailed"] = 150] = "VRInitError_Init_VRServiceStartupFailed";
    EVRInitError[EVRInitError["VRInitError_Init_PrismNeedsNewDrivers"] = 151] = "VRInitError_Init_PrismNeedsNewDrivers";
    EVRInitError[EVRInitError["VRInitError_Init_PrismStartupTimedOut"] = 152] = "VRInitError_Init_PrismStartupTimedOut";
    EVRInitError[EVRInitError["VRInitError_Init_CouldNotStartPrism"] = 153] = "VRInitError_Init_CouldNotStartPrism";
    EVRInitError[EVRInitError["VRInitError_Init_PrismClientInitFailed"] = 154] = "VRInitError_Init_PrismClientInitFailed";
    EVRInitError[EVRInitError["VRInitError_Init_PrismClientStartFailed"] = 155] = "VRInitError_Init_PrismClientStartFailed";
    EVRInitError[EVRInitError["VRInitError_Init_PrismExitedUnexpectedly"] = 156] = "VRInitError_Init_PrismExitedUnexpectedly";
    EVRInitError[EVRInitError["VRInitError_Init_BadLuid"] = 157] = "VRInitError_Init_BadLuid";
    EVRInitError[EVRInitError["VRInitError_Init_NoServerForAppContainer"] = 158] = "VRInitError_Init_NoServerForAppContainer";
    EVRInitError[EVRInitError["VRInitError_Init_DuplicateBootstrapper"] = 159] = "VRInitError_Init_DuplicateBootstrapper";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardServicePending"] = 160] = "VRInitError_Init_VRDashboardServicePending";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardServiceTimeout"] = 161] = "VRInitError_Init_VRDashboardServiceTimeout";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardServiceStopped"] = 162] = "VRInitError_Init_VRDashboardServiceStopped";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardAlreadyStarted"] = 163] = "VRInitError_Init_VRDashboardAlreadyStarted";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardCopyFailed"] = 164] = "VRInitError_Init_VRDashboardCopyFailed";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardTokenFailure"] = 165] = "VRInitError_Init_VRDashboardTokenFailure";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardEnvironmentFailure"] = 166] = "VRInitError_Init_VRDashboardEnvironmentFailure";
    EVRInitError[EVRInitError["VRInitError_Init_VRDashboardPathFailure"] = 167] = "VRInitError_Init_VRDashboardPathFailure";
    EVRInitError[EVRInitError["VRInitError_Driver_Failed"] = 200] = "VRInitError_Driver_Failed";
    EVRInitError[EVRInitError["VRInitError_Driver_Unknown"] = 201] = "VRInitError_Driver_Unknown";
    EVRInitError[EVRInitError["VRInitError_Driver_HmdUnknown"] = 202] = "VRInitError_Driver_HmdUnknown";
    EVRInitError[EVRInitError["VRInitError_Driver_NotLoaded"] = 203] = "VRInitError_Driver_NotLoaded";
    EVRInitError[EVRInitError["VRInitError_Driver_RuntimeOutOfDate"] = 204] = "VRInitError_Driver_RuntimeOutOfDate";
    EVRInitError[EVRInitError["VRInitError_Driver_HmdInUse"] = 205] = "VRInitError_Driver_HmdInUse";
    EVRInitError[EVRInitError["VRInitError_Driver_NotCalibrated"] = 206] = "VRInitError_Driver_NotCalibrated";
    EVRInitError[EVRInitError["VRInitError_Driver_CalibrationInvalid"] = 207] = "VRInitError_Driver_CalibrationInvalid";
    EVRInitError[EVRInitError["VRInitError_Driver_HmdDisplayNotFound"] = 208] = "VRInitError_Driver_HmdDisplayNotFound";
    EVRInitError[EVRInitError["VRInitError_Driver_TrackedDeviceInterfaceUnknown"] = 209] = "VRInitError_Driver_TrackedDeviceInterfaceUnknown";
    // VRInitError_Driver_HmdDisplayNotFoundAfterFix = 210, // not needed: here for historic reasons
    EVRInitError[EVRInitError["VRInitError_Driver_HmdDriverIdOutOfBounds"] = 211] = "VRInitError_Driver_HmdDriverIdOutOfBounds";
    EVRInitError[EVRInitError["VRInitError_Driver_HmdDisplayMirrored"] = 212] = "VRInitError_Driver_HmdDisplayMirrored";
    EVRInitError[EVRInitError["VRInitError_Driver_HmdDisplayNotFoundLaptop"] = 213] = "VRInitError_Driver_HmdDisplayNotFoundLaptop";
    EVRInitError[EVRInitError["VRInitError_Driver_PeerDriverNotInstalled"] = 214] = "VRInitError_Driver_PeerDriverNotInstalled";
    EVRInitError[EVRInitError["VRInitError_Driver_WirelessHmdNotConnected"] = 215] = "VRInitError_Driver_WirelessHmdNotConnected";
    // Never make error 259 because we return it from main and it would conflict with STILL_ACTIVE
    EVRInitError[EVRInitError["VRInitError_IPC_ServerInitFailed"] = 300] = "VRInitError_IPC_ServerInitFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_ConnectFailed"] = 301] = "VRInitError_IPC_ConnectFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_SharedStateInitFailed"] = 302] = "VRInitError_IPC_SharedStateInitFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_CompositorInitFailed"] = 303] = "VRInitError_IPC_CompositorInitFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_MutexInitFailed"] = 304] = "VRInitError_IPC_MutexInitFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_Failed"] = 305] = "VRInitError_IPC_Failed";
    EVRInitError[EVRInitError["VRInitError_IPC_CompositorConnectFailed"] = 306] = "VRInitError_IPC_CompositorConnectFailed";
    EVRInitError[EVRInitError["VRInitError_IPC_CompositorInvalidConnectResponse"] = 307] = "VRInitError_IPC_CompositorInvalidConnectResponse";
    EVRInitError[EVRInitError["VRInitError_IPC_ConnectFailedAfterMultipleAttempts"] = 308] = "VRInitError_IPC_ConnectFailedAfterMultipleAttempts";
    EVRInitError[EVRInitError["VRInitError_IPC_ConnectFailedAfterTargetExited"] = 309] = "VRInitError_IPC_ConnectFailedAfterTargetExited";
    EVRInitError[EVRInitError["VRInitError_IPC_NamespaceUnavailable"] = 310] = "VRInitError_IPC_NamespaceUnavailable";
    EVRInitError[EVRInitError["VRInitError_Compositor_Failed"] = 400] = "VRInitError_Compositor_Failed";
    EVRInitError[EVRInitError["VRInitError_Compositor_D3D11HardwareRequired"] = 401] = "VRInitError_Compositor_D3D11HardwareRequired";
    EVRInitError[EVRInitError["VRInitError_Compositor_FirmwareRequiresUpdate"] = 402] = "VRInitError_Compositor_FirmwareRequiresUpdate";
    EVRInitError[EVRInitError["VRInitError_Compositor_OverlayInitFailed"] = 403] = "VRInitError_Compositor_OverlayInitFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_ScreenshotsInitFailed"] = 404] = "VRInitError_Compositor_ScreenshotsInitFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_UnableToCreateDevice"] = 405] = "VRInitError_Compositor_UnableToCreateDevice";
    EVRInitError[EVRInitError["VRInitError_Compositor_SharedStateIsNull"] = 406] = "VRInitError_Compositor_SharedStateIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_NotificationManagerIsNull"] = 407] = "VRInitError_Compositor_NotificationManagerIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_ResourceManagerClientIsNull"] = 408] = "VRInitError_Compositor_ResourceManagerClientIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_MessageOverlaySharedStateInitFailure"] = 409] = "VRInitError_Compositor_MessageOverlaySharedStateInitFailure";
    EVRInitError[EVRInitError["VRInitError_Compositor_PropertiesInterfaceIsNull"] = 410] = "VRInitError_Compositor_PropertiesInterfaceIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateFullscreenWindowFailed"] = 411] = "VRInitError_Compositor_CreateFullscreenWindowFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_SettingsInterfaceIsNull"] = 412] = "VRInitError_Compositor_SettingsInterfaceIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToShowWindow"] = 413] = "VRInitError_Compositor_FailedToShowWindow";
    EVRInitError[EVRInitError["VRInitError_Compositor_DistortInterfaceIsNull"] = 414] = "VRInitError_Compositor_DistortInterfaceIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_DisplayFrequencyFailure"] = 415] = "VRInitError_Compositor_DisplayFrequencyFailure";
    EVRInitError[EVRInitError["VRInitError_Compositor_RendererInitializationFailed"] = 416] = "VRInitError_Compositor_RendererInitializationFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_DXGIFactoryInterfaceIsNull"] = 417] = "VRInitError_Compositor_DXGIFactoryInterfaceIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_DXGIFactoryCreateFailed"] = 418] = "VRInitError_Compositor_DXGIFactoryCreateFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_DXGIFactoryQueryFailed"] = 419] = "VRInitError_Compositor_DXGIFactoryQueryFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_InvalidAdapterDesktop"] = 420] = "VRInitError_Compositor_InvalidAdapterDesktop";
    EVRInitError[EVRInitError["VRInitError_Compositor_InvalidHmdAttachment"] = 421] = "VRInitError_Compositor_InvalidHmdAttachment";
    EVRInitError[EVRInitError["VRInitError_Compositor_InvalidOutputDesktop"] = 422] = "VRInitError_Compositor_InvalidOutputDesktop";
    EVRInitError[EVRInitError["VRInitError_Compositor_InvalidDeviceProvided"] = 423] = "VRInitError_Compositor_InvalidDeviceProvided";
    EVRInitError[EVRInitError["VRInitError_Compositor_D3D11RendererInitializationFailed"] = 424] = "VRInitError_Compositor_D3D11RendererInitializationFailed";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToFindDisplayMode"] = 425] = "VRInitError_Compositor_FailedToFindDisplayMode";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateSwapChain"] = 426] = "VRInitError_Compositor_FailedToCreateSwapChain";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToGetBackBuffer"] = 427] = "VRInitError_Compositor_FailedToGetBackBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateRenderTarget"] = 428] = "VRInitError_Compositor_FailedToCreateRenderTarget";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateDXGI2SwapChain"] = 429] = "VRInitError_Compositor_FailedToCreateDXGI2SwapChain";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedtoGetDXGI2BackBuffer"] = 430] = "VRInitError_Compositor_FailedtoGetDXGI2BackBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateDXGI2RenderTarget"] = 431] = "VRInitError_Compositor_FailedToCreateDXGI2RenderTarget";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToGetDXGIDeviceInterface"] = 432] = "VRInitError_Compositor_FailedToGetDXGIDeviceInterface";
    EVRInitError[EVRInitError["VRInitError_Compositor_SelectDisplayMode"] = 433] = "VRInitError_Compositor_SelectDisplayMode";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateNvAPIRenderTargets"] = 434] = "VRInitError_Compositor_FailedToCreateNvAPIRenderTargets";
    EVRInitError[EVRInitError["VRInitError_Compositor_NvAPISetDisplayMode"] = 435] = "VRInitError_Compositor_NvAPISetDisplayMode";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateDirectModeDisplay"] = 436] = "VRInitError_Compositor_FailedToCreateDirectModeDisplay";
    EVRInitError[EVRInitError["VRInitError_Compositor_InvalidHmdPropertyContainer"] = 437] = "VRInitError_Compositor_InvalidHmdPropertyContainer";
    EVRInitError[EVRInitError["VRInitError_Compositor_UpdateDisplayFrequency"] = 438] = "VRInitError_Compositor_UpdateDisplayFrequency";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateRasterizerState"] = 439] = "VRInitError_Compositor_CreateRasterizerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateWireframeRasterizerState"] = 440] = "VRInitError_Compositor_CreateWireframeRasterizerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateSamplerState"] = 441] = "VRInitError_Compositor_CreateSamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateClampToBorderSamplerState"] = 442] = "VRInitError_Compositor_CreateClampToBorderSamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateAnisoSamplerState"] = 443] = "VRInitError_Compositor_CreateAnisoSamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlaySamplerState"] = 444] = "VRInitError_Compositor_CreateOverlaySamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreatePanoramaSamplerState"] = 445] = "VRInitError_Compositor_CreatePanoramaSamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateFontSamplerState"] = 446] = "VRInitError_Compositor_CreateFontSamplerState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateNoBlendState"] = 447] = "VRInitError_Compositor_CreateNoBlendState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateBlendState"] = 448] = "VRInitError_Compositor_CreateBlendState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateAlphaBlendState"] = 449] = "VRInitError_Compositor_CreateAlphaBlendState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateBlendStateMaskR"] = 450] = "VRInitError_Compositor_CreateBlendStateMaskR";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateBlendStateMaskG"] = 451] = "VRInitError_Compositor_CreateBlendStateMaskG";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateBlendStateMaskB"] = 452] = "VRInitError_Compositor_CreateBlendStateMaskB";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateDepthStencilState"] = 453] = "VRInitError_Compositor_CreateDepthStencilState";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateDepthStencilStateNoWrite"] = 454] = "VRInitError_Compositor_CreateDepthStencilStateNoWrite";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateDepthStencilStateNoDepth"] = 455] = "VRInitError_Compositor_CreateDepthStencilStateNoDepth";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateFlushTexture"] = 456] = "VRInitError_Compositor_CreateFlushTexture";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateDistortionSurfaces"] = 457] = "VRInitError_Compositor_CreateDistortionSurfaces";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateConstantBuffer"] = 458] = "VRInitError_Compositor_CreateConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateHmdPoseConstantBuffer"] = 459] = "VRInitError_Compositor_CreateHmdPoseConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer"] = 460] = "VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer"] = 461] = "VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlayConstantBuffer"] = 462] = "VRInitError_Compositor_CreateOverlayConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer"] = 463] = "VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer"] = 464] = "VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer"] = 465] = "VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer"] = 466] = "VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer"] = 467] = "VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer"] = 468] = "VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateGeomConstantBuffer"] = 469] = "VRInitError_Compositor_CreateGeomConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreatePanelMaskConstantBuffer"] = 470] = "VRInitError_Compositor_CreatePanelMaskConstantBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreatePixelSimUBO"] = 471] = "VRInitError_Compositor_CreatePixelSimUBO";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateMSAARenderTextures"] = 472] = "VRInitError_Compositor_CreateMSAARenderTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateResolveRenderTextures"] = 473] = "VRInitError_Compositor_CreateResolveRenderTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateComputeResolveRenderTextures"] = 474] = "VRInitError_Compositor_CreateComputeResolveRenderTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateDriverDirectModeResolveTextures"] = 475] = "VRInitError_Compositor_CreateDriverDirectModeResolveTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_OpenDriverDirectModeResolveTextures"] = 476] = "VRInitError_Compositor_OpenDriverDirectModeResolveTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateFallbackSyncTexture"] = 477] = "VRInitError_Compositor_CreateFallbackSyncTexture";
    EVRInitError[EVRInitError["VRInitError_Compositor_ShareFallbackSyncTexture"] = 478] = "VRInitError_Compositor_ShareFallbackSyncTexture";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlayIndexBuffer"] = 479] = "VRInitError_Compositor_CreateOverlayIndexBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlayVertexBuffer"] = 480] = "VRInitError_Compositor_CreateOverlayVertexBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateTextVertexBuffer"] = 481] = "VRInitError_Compositor_CreateTextVertexBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateTextIndexBuffer"] = 482] = "VRInitError_Compositor_CreateTextIndexBuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateMirrorTextures"] = 483] = "VRInitError_Compositor_CreateMirrorTextures";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateLastFrameRenderTexture"] = 484] = "VRInitError_Compositor_CreateLastFrameRenderTexture";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateMirrorOverlay"] = 485] = "VRInitError_Compositor_CreateMirrorOverlay";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateVirtualDisplayBackbuffer"] = 486] = "VRInitError_Compositor_FailedToCreateVirtualDisplayBackbuffer";
    EVRInitError[EVRInitError["VRInitError_Compositor_DisplayModeNotSupported"] = 487] = "VRInitError_Compositor_DisplayModeNotSupported";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlayInvalidCall"] = 488] = "VRInitError_Compositor_CreateOverlayInvalidCall";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateOverlayAlreadyInitialized"] = 489] = "VRInitError_Compositor_CreateOverlayAlreadyInitialized";
    EVRInitError[EVRInitError["VRInitError_Compositor_FailedToCreateMailbox"] = 490] = "VRInitError_Compositor_FailedToCreateMailbox";
    EVRInitError[EVRInitError["VRInitError_Compositor_WindowInterfaceIsNull"] = 491] = "VRInitError_Compositor_WindowInterfaceIsNull";
    EVRInitError[EVRInitError["VRInitError_Compositor_SystemLayerCreateInstance"] = 492] = "VRInitError_Compositor_SystemLayerCreateInstance";
    EVRInitError[EVRInitError["VRInitError_Compositor_SystemLayerCreateSession"] = 493] = "VRInitError_Compositor_SystemLayerCreateSession";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateInverseDistortUVs"] = 494] = "VRInitError_Compositor_CreateInverseDistortUVs";
    EVRInitError[EVRInitError["VRInitError_Compositor_CreateBackbufferDepth"] = 495] = "VRInitError_Compositor_CreateBackbufferDepth";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_UnableToConnectToOculusRuntime"] = 1000] = "VRInitError_VendorSpecific_UnableToConnectToOculusRuntime";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_WindowsNotInDevMode"] = 1001] = "VRInitError_VendorSpecific_WindowsNotInDevMode";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_OculusLinkNotEnabled"] = 1002] = "VRInitError_VendorSpecific_OculusLinkNotEnabled";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_CantOpenDevice"] = 1101] = "VRInitError_VendorSpecific_HmdFound_CantOpenDevice";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart"] = 1102] = "VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_NoStoredConfig"] = 1103] = "VRInitError_VendorSpecific_HmdFound_NoStoredConfig";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_ConfigTooBig"] = 1104] = "VRInitError_VendorSpecific_HmdFound_ConfigTooBig";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_ConfigTooSmall"] = 1105] = "VRInitError_VendorSpecific_HmdFound_ConfigTooSmall";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnableToInitZLib"] = 1106] = "VRInitError_VendorSpecific_HmdFound_UnableToInitZLib";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion"] = 1107] = "VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart"] = 1108] = "VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart"] = 1109] = "VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext"] = 1110] = "VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UserDataAddressRange"] = 1111] = "VRInitError_VendorSpecific_HmdFound_UserDataAddressRange";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UserDataError"] = 1112] = "VRInitError_VendorSpecific_HmdFound_UserDataError";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck"] = 1113] = "VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_OculusRuntimeBadInstall"] = 1114] = "VRInitError_VendorSpecific_OculusRuntimeBadInstall";
    EVRInitError[EVRInitError["VRInitError_VendorSpecific_HmdFound_UnexpectedConfiguration_1"] = 1115] = "VRInitError_VendorSpecific_HmdFound_UnexpectedConfiguration_1";
    EVRInitError[EVRInitError["VRInitError_Steam_SteamInstallationNotFound"] = 2000] = "VRInitError_Steam_SteamInstallationNotFound";
    // Strictly a placeholder
    EVRInitError[EVRInitError["VRInitError_LastError"] = 2001] = "VRInitError_LastError";
})(EVRInitError || (EVRInitError = {}));
;


/***/ }),

/***/ "../../../web_src/shared/js/common/ostype.ts":
/*!***************************************************!*\
  !*** ../../../web_src/shared/js/common/ostype.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EOSType": () => (/* binding */ EOSType),
/* harmony export */   "EPlatformType": () => (/* binding */ EPlatformType),
/* harmony export */   "GetNameFromOSType": () => (/* binding */ GetNameFromOSType)
/* harmony export */ });
// this enum needs to match the reference in osversion.h
var EOSType;
(function (EOSType) {
    EOSType[EOSType["k_eOSXboxOne"] = -800] = "k_eOSXboxOne";
    EOSType[EOSType["k_eOSWebClient"] = -700] = "k_eOSWebClient";
    // TODO: pull this out and teach the routing layer about per-app or per-session restrictions
    EOSType[EOSType["k_eOSEmbeddedClient"] = -675] = "k_eOSEmbeddedClient";
    EOSType[EOSType["k_eTVOSUnknown"] = -650] = "k_eTVOSUnknown";
    EOSType[EOSType["k_eTVOS9"] = -649] = "k_eTVOS9";
    EOSType[EOSType["k_eTVOS9_1"] = -648] = "k_eTVOS9_1";
    EOSType[EOSType["k_eTVOS9_2"] = -647] = "k_eTVOS9_2";
    EOSType[EOSType["k_eTVOS9_3"] = -646] = "k_eTVOS9_3";
    EOSType[EOSType["k_eTVOS10"] = -645] = "k_eTVOS10";
    EOSType[EOSType["k_eTVOS10_1"] = -644] = "k_eTVOS10_1";
    EOSType[EOSType["k_eTVOS10_2"] = -643] = "k_eTVOS10_2";
    EOSType[EOSType["k_eTVOS11"] = -642] = "k_eTVOS11";
    EOSType[EOSType["k_eTVOS11_1"] = -641] = "k_eTVOS11_1";
    EOSType[EOSType["k_eTVOS11_2"] = -640] = "k_eTVOS11_2";
    EOSType[EOSType["k_eTVOS11_3"] = -639] = "k_eTVOS11_3";
    EOSType[EOSType["k_eTVOS11_4"] = -638] = "k_eTVOS11_4";
    EOSType[EOSType["k_eTVOS12"] = -637] = "k_eTVOS12";
    EOSType[EOSType["k_eTVOS12_1"] = -636] = "k_eTVOS12_1";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    // k_eTVOSMax = -635
    EOSType[EOSType["k_eIOSUnknown"] = -600] = "k_eIOSUnknown";
    EOSType[EOSType["k_eIOS1"] = -599] = "k_eIOS1";
    EOSType[EOSType["k_eIOS2"] = -598] = "k_eIOS2";
    EOSType[EOSType["k_eIOS3"] = -597] = "k_eIOS3";
    EOSType[EOSType["k_eIOS4"] = -596] = "k_eIOS4";
    EOSType[EOSType["k_eIOS5"] = -595] = "k_eIOS5";
    EOSType[EOSType["k_eIOS6"] = -594] = "k_eIOS6";
    EOSType[EOSType["k_eIOS6_1"] = -593] = "k_eIOS6_1";
    EOSType[EOSType["k_eIOS7"] = -592] = "k_eIOS7";
    EOSType[EOSType["k_eIOS7_1"] = -591] = "k_eIOS7_1";
    EOSType[EOSType["k_eIOS8"] = -590] = "k_eIOS8";
    EOSType[EOSType["k_eIOS8_1"] = -589] = "k_eIOS8_1";
    EOSType[EOSType["k_eIOS8_2"] = -588] = "k_eIOS8_2";
    EOSType[EOSType["k_eIOS8_3"] = -587] = "k_eIOS8_3";
    EOSType[EOSType["k_eIOS8_4"] = -586] = "k_eIOS8_4";
    EOSType[EOSType["k_eIOS9"] = -585] = "k_eIOS9";
    EOSType[EOSType["k_eIOS9_1"] = -584] = "k_eIOS9_1";
    EOSType[EOSType["k_eIOS9_2"] = -583] = "k_eIOS9_2";
    EOSType[EOSType["k_eIOS9_3"] = -582] = "k_eIOS9_3";
    EOSType[EOSType["k_eIOS10"] = -581] = "k_eIOS10";
    EOSType[EOSType["k_eIOS10_1"] = -580] = "k_eIOS10_1";
    EOSType[EOSType["k_eIOS10_2"] = -579] = "k_eIOS10_2";
    EOSType[EOSType["k_eIOS10_3"] = -578] = "k_eIOS10_3";
    EOSType[EOSType["k_eIOS11"] = -577] = "k_eIOS11";
    EOSType[EOSType["k_eIOS11_1"] = -576] = "k_eIOS11_1";
    EOSType[EOSType["k_eIOS11_2"] = -575] = "k_eIOS11_2";
    EOSType[EOSType["k_eIOS11_3"] = -574] = "k_eIOS11_3";
    EOSType[EOSType["k_eIOS11_4"] = -573] = "k_eIOS11_4";
    EOSType[EOSType["k_eIOS12"] = -572] = "k_eIOS12";
    EOSType[EOSType["k_eIOS12_1"] = -571] = "k_eIOS12_1";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    EOSType[EOSType["k_eIOSMax"] = -570] = "k_eIOSMax";
    EOSType[EOSType["k_eAndroidUnknown"] = -500] = "k_eAndroidUnknown";
    // We only attempt to distinguish major versions of Android.
    EOSType[EOSType["k_eAndroid6"] = -499] = "k_eAndroid6";
    EOSType[EOSType["k_eAndroid7"] = -498] = "k_eAndroid7";
    EOSType[EOSType["k_eAndroid8"] = -497] = "k_eAndroid8";
    EOSType[EOSType["k_eAndroid9"] = -496] = "k_eAndroid9";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    EOSType[EOSType["k_eAndroidMax"] = -495] = "k_eAndroidMax";
    EOSType[EOSType["k_eOSUMQ"] = -400] = "k_eOSUMQ";
    EOSType[EOSType["k_eOSPS3"] = -300] = "k_eOSPS3";
    // k_eOSPS3Max = -299
    EOSType[EOSType["k_eLinuxUnknown"] = -203] = "k_eLinuxUnknown";
    EOSType[EOSType["k_eLinux22"] = -202] = "k_eLinux22";
    EOSType[EOSType["k_eLinux24"] = -201] = "k_eLinux24";
    EOSType[EOSType["k_eLinux26"] = -200] = "k_eLinux26";
    EOSType[EOSType["k_eLinux32"] = -199] = "k_eLinux32";
    EOSType[EOSType["k_eLinux35"] = -198] = "k_eLinux35";
    // No need to detect every kernel version. Just detect long-term stable versions.
    // This is better than bucketing everything in k_eLinuxUnknown.
    EOSType[EOSType["k_eLinux36"] = -197] = "k_eLinux36";
    EOSType[EOSType["k_eLinux310"] = -196] = "k_eLinux310";
    EOSType[EOSType["k_eLinux316"] = -195] = "k_eLinux316";
    EOSType[EOSType["k_eLinux318"] = -194] = "k_eLinux318";
    EOSType[EOSType["k_eLinux3Unknown"] = -193] = "k_eLinux3Unknown";
    EOSType[EOSType["k_eLinux4Unknown"] = -192] = "k_eLinux4Unknown";
    EOSType[EOSType["k_eLinux41"] = -191] = "k_eLinux41";
    EOSType[EOSType["k_eLinux44"] = -190] = "k_eLinux44";
    EOSType[EOSType["k_eLinux49"] = -189] = "k_eLinux49";
    EOSType[EOSType["k_eLinux414"] = -188] = "k_eLinux414";
    EOSType[EOSType["k_eLinux419"] = -187] = "k_eLinux419";
    EOSType[EOSType["k_eLinux5Unknown"] = -186] = "k_eLinux5Unknown";
    EOSType[EOSType["k_eLinux54"] = -185] = "k_eLinux54";
    EOSType[EOSType["k_eLinux6Unknown"] = -184] = "k_eLinux6Unknown";
    EOSType[EOSType["k_eLinux7Unknown"] = -183] = "k_eLinux7Unknown";
    EOSType[EOSType["k_eLinux510"] = -182] = "k_eLinux510";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    EOSType[EOSType["k_eLinuxMax"] = -103] = "k_eLinuxMax";
    EOSType[EOSType["k_eMacOSUnknown"] = -102] = "k_eMacOSUnknown";
    EOSType[EOSType["k_eMacOS104"] = -101] = "k_eMacOS104";
    EOSType[EOSType["k_eMacOS105"] = -100] = "k_eMacOS105";
    EOSType[EOSType["k_eMacOS1058"] = -99] = "k_eMacOS1058";
    EOSType[EOSType["k_eMacOS106_unused1"] = -98] = "k_eMacOS106_unused1";
    EOSType[EOSType["k_eMacOS106_unused2"] = -97] = "k_eMacOS106_unused2";
    EOSType[EOSType["k_eMacOS106_unused3"] = -96] = "k_eMacOS106_unused3";
    EOSType[EOSType["k_eMacOS106"] = -95] = "k_eMacOS106";
    EOSType[EOSType["k_eMacOS1063"] = -94] = "k_eMacOS1063";
    EOSType[EOSType["k_eMacOS1064_slgu"] = -93] = "k_eMacOS1064_slgu";
    EOSType[EOSType["k_eMacOS1067"] = -92] = "k_eMacOS1067";
    EOSType[EOSType["k_eMacOS1067_unused"] = -91] = "k_eMacOS1067_unused";
    EOSType[EOSType["k_eMacOS107"] = -90] = "k_eMacOS107";
    EOSType[EOSType["k_eMacOS108"] = -89] = "k_eMacOS108";
    EOSType[EOSType["k_eMacOS109"] = -88] = "k_eMacOS109";
    EOSType[EOSType["k_eMacOS1010"] = -87] = "k_eMacOS1010";
    EOSType[EOSType["k_eMacOS1011"] = -86] = "k_eMacOS1011";
    EOSType[EOSType["k_eMacOS1012"] = -85] = "k_eMacOS1012";
    EOSType[EOSType["k_eMacOS1013"] = -84] = "k_eMacOS1013";
    EOSType[EOSType["k_eMacOS1014"] = -83] = "k_eMacOS1014";
    EOSType[EOSType["k_eMacOS1015"] = -82] = "k_eMacOS1015";
    EOSType[EOSType["k_eMacOS1016"] = -81] = "k_eMacOS1016";
    EOSType[EOSType["k_eMacOS11"] = -80] = "k_eMacOS11";
    EOSType[EOSType["k_eMacOS11_1"] = -79] = "k_eMacOS11_1";
    EOSType[EOSType["k_eMacOS1017"] = -75] = "k_eMacOS1017";
    EOSType[EOSType["k_eMacOS12"] = -74] = "k_eMacOS12";
    EOSType[EOSType["k_eMacOS1018"] = -70] = "k_eMacOS1018";
    EOSType[EOSType["k_eMacOS13"] = -69] = "k_eMacOS13";
    EOSType[EOSType["k_eMacOS14"] = -68] = "k_eMacOS14";
    EOSType[EOSType["k_eMacOS15"] = -67] = "k_eMacOS15";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    EOSType[EOSType["k_eMacOSMax"] = -2] = "k_eMacOSMax";
    EOSType[EOSType["k_eOSUnknown"] = -1] = "k_eOSUnknown";
    EOSType[EOSType["k_eWinUnknown"] = 0] = "k_eWinUnknown";
    EOSType[EOSType["k_eWin311"] = 1] = "k_eWin311";
    EOSType[EOSType["k_eWin95"] = 2] = "k_eWin95";
    EOSType[EOSType["k_eWin98"] = 3] = "k_eWin98";
    EOSType[EOSType["k_eWinME"] = 4] = "k_eWinME";
    EOSType[EOSType["k_eWinNT"] = 5] = "k_eWinNT";
    EOSType[EOSType["k_eWin2000"] = 6] = "k_eWin2000";
    EOSType[EOSType["k_eWinXP"] = 7] = "k_eWinXP";
    EOSType[EOSType["k_eWin2003"] = 8] = "k_eWin2003";
    EOSType[EOSType["k_eWinVista"] = 9] = "k_eWinVista";
    EOSType[EOSType["k_eWindows7"] = 10] = "k_eWindows7";
    EOSType[EOSType["k_eWin2008"] = 11] = "k_eWin2008";
    EOSType[EOSType["k_eWin2012"] = 12] = "k_eWin2012";
    EOSType[EOSType["k_eWindows8"] = 13] = "k_eWindows8";
    EOSType[EOSType["k_eWindows81"] = 14] = "k_eWindows81";
    EOSType[EOSType["k_eWin2012R2"] = 15] = "k_eWin2012R2";
    EOSType[EOSType["k_eWindows10"] = 16] = "k_eWindows10";
    EOSType[EOSType["k_eWin2016"] = 17] = "k_eWin2016";
    EOSType[EOSType["k_eWin2019"] = 18] = "k_eWin2019";
    EOSType[EOSType["k_eWin2022"] = 19] = "k_eWin2022";
    EOSType[EOSType["k_eWindows11"] = 20] = "k_eWindows11";
    // NOTE: if you are about to add a new enum here, please add it to enum_names.cpp
    EOSType[EOSType["k_eWinMAX"] = 21] = "k_eWinMAX";
    EOSType[EOSType["k_eOSTypeMax"] = 32] = "k_eOSTypeMax"; // win types + other ifdef'd types
})(EOSType || (EOSType = {}));
function GetNameFromOSType(eOSType) {
    switch (eOSType) {
        case EOSType.k_eWinUnknown:
            return "Windows";
        case EOSType.k_eWin311:
            return "Windows 3.11";
        case EOSType.k_eWin95:
            return "Windows 95";
        case EOSType.k_eWin98:
            return "Windows 98";
        case EOSType.k_eWinME:
            return "Windows ME";
        case EOSType.k_eWinNT:
            return "Windows NT";
        case EOSType.k_eWin2000:
            return "Windows 2000";
        case EOSType.k_eWinXP:
            return "Windows XP";
        case EOSType.k_eWin2003:
            return "Windows 2003";
        case EOSType.k_eWinVista:
            return "Windows Vista";
        case EOSType.k_eWindows7:
            return "Windows 7";
        case EOSType.k_eWin2008:
            return "Windows 2008";
        case EOSType.k_eWin2012:
            return "Windows 2012";
        case EOSType.k_eWin2012R2:
            return "Windows 2012 R2";
        case EOSType.k_eWindows8:
            return "Windows 8";
        case EOSType.k_eWindows81:
            return "Windows 8.1";
        case EOSType.k_eWindows10:
            return "Windows 10";
        case EOSType.k_eWin2016:
            return "Windows 2016";
        case EOSType.k_eWin2019:
            return "Windows 2019";
        case EOSType.k_eWin2022:
            return "Windows 2022";
        case EOSType.k_eWindows11:
            return "Windows 11";
        case EOSType.k_eMacOSUnknown:
            return "Mac OS";
        case EOSType.k_eMacOS104:
            return "MacOS 10.4";
        case EOSType.k_eMacOS105:
            return "MacOS 10.5";
        case EOSType.k_eMacOS1058:
            return "MacOS 10.5.8";
        case EOSType.k_eMacOS106:
            return "MacOS 10.6";
        case EOSType.k_eMacOS1063:
            return "MacOS 10.6.3";
        case EOSType.k_eMacOS1064_slgu:
            return "MacOS 10.6.4 with Apple's Snow Leopard Graphics Update";
        case EOSType.k_eMacOS1067:
            return "MacOS 10.6.7";
        case EOSType.k_eMacOS107:
            return "MacOS 10.7";
        case EOSType.k_eMacOS108:
            return "MacOS 10.8";
        case EOSType.k_eMacOS109:
            return "MacOS 10.9";
        case EOSType.k_eMacOS1010:
            return "MacOS 10.10";
        case EOSType.k_eMacOS1011:
            return "MacOS 10.11";
        case EOSType.k_eMacOS1012:
            return "MacOS 10.12";
        case EOSType.k_eMacOS1013:
            return "MacOS 10.13";
        case EOSType.k_eMacOS1014:
            return "MacOS 10.14";
        case EOSType.k_eMacOS1015:
            return "MacOS 10.15";
        case EOSType.k_eMacOS1016:
            return "MacOS 11 (as 10.16)";
        case EOSType.k_eMacOS1017:
            return "MacOS 12 (as 10.17)";
        case EOSType.k_eMacOS1018:
            return "MacOS 13 (as 10.18)";
        case EOSType.k_eMacOS11:
            return "MacOS 11";
        case EOSType.k_eMacOS11_1:
            return "MacOS 11.1";
        case EOSType.k_eMacOS12:
            return "MacOS 12";
        case EOSType.k_eMacOS13:
            return "MacOS 13";
        case EOSType.k_eMacOS14:
            return "MacOS 14";
        case EOSType.k_eMacOS15:
            return "MacOS 15";
        case EOSType.k_eLinuxUnknown:
            return "Linux";
        case EOSType.k_eLinux22:
            return "Linux 2.2";
        case EOSType.k_eLinux24:
            return "Linux 2.4";
        case EOSType.k_eLinux26:
            return "Linux 2.6";
        case EOSType.k_eLinux32:
            return "Linux 3.2";
        case EOSType.k_eLinux35:
            return "Linux 3.5";
        case EOSType.k_eLinux36:
            return "Linux 3.6";
        case EOSType.k_eLinux310:
            return "Linux 3.10";
        case EOSType.k_eLinux316:
            return "Linux 3.16";
        case EOSType.k_eLinux318:
            return "Linux 3.18";
        case EOSType.k_eLinux3Unknown:
            return "Linux 3.x";
        case EOSType.k_eLinux41:
            return "Linux 4.1";
        case EOSType.k_eLinux44:
            return "Linux 4.4";
        case EOSType.k_eLinux49:
            return "Linux 4.9";
        case EOSType.k_eLinux414:
            return "Linux 4.14";
        case EOSType.k_eLinux419:
            return "Linux 4.19";
        case EOSType.k_eLinux4Unknown:
            return "Linux 4.x";
        case EOSType.k_eLinux5Unknown:
            return "Linux 5.x";
        case EOSType.k_eLinux54:
            return "Linux 5.4";
        case EOSType.k_eLinux6Unknown:
            return "Linux 6.x";
        case EOSType.k_eLinux7Unknown:
            return "Linux 7.x";
        case EOSType.k_eLinux510:
            return "Linux 5.10";
        case EOSType.k_eOSPS3:
            return "PS3";
        case EOSType.k_eOSWebClient:
            return "Web Client";
        case EOSType.k_eAndroidUnknown:
            return "Android";
        case EOSType.k_eAndroid6:
            return "Android 6.x";
        case EOSType.k_eAndroid7:
            return "Android 7.x";
        case EOSType.k_eAndroid8:
            return "Android 8.x";
        case EOSType.k_eAndroid9:
            return "Android 9.x";
        case EOSType.k_eIOSUnknown: return "iOS";
        case EOSType.k_eIOS1: return "iOS 1";
        case EOSType.k_eIOS2: return "iOS 2";
        case EOSType.k_eIOS3: return "iOS 3";
        case EOSType.k_eIOS4: return "iOS 4";
        case EOSType.k_eIOS5: return "iOS 5";
        case EOSType.k_eIOS6: return "iOS 6";
        case EOSType.k_eIOS6_1: return "iOS 6.1";
        case EOSType.k_eIOS7: return "iOS 7";
        case EOSType.k_eIOS7_1: return "iOS 7.1";
        case EOSType.k_eIOS8: return "iOS 8";
        case EOSType.k_eIOS8_1: return "iOS 8.1";
        case EOSType.k_eIOS8_2: return "iOS 8.2";
        case EOSType.k_eIOS8_3: return "iOS 8.3";
        case EOSType.k_eIOS8_4: return "iOS 8.4";
        case EOSType.k_eIOS9: return "iOS 9";
        case EOSType.k_eIOS9_1: return "iOS 9.1";
        case EOSType.k_eIOS9_2: return "iOS 9.2";
        case EOSType.k_eIOS9_3: return "iOS 9_.3";
        case EOSType.k_eIOS10: return "iOS 10";
        case EOSType.k_eIOS10_1: return "iOS 10.1";
        case EOSType.k_eIOS10_2: return "iOS 10.2";
        case EOSType.k_eIOS10_3: return "iOS 10.3";
        case EOSType.k_eIOS11: return "iOS 11";
        case EOSType.k_eIOS11_1: return "iOS 11.1";
        case EOSType.k_eIOS11_2: return "iOS 11.2";
        case EOSType.k_eIOS11_3: return "iOS 11.3";
        case EOSType.k_eIOS11_4: return "iOS 11.4";
        case EOSType.k_eIOS12: return "iOS 12";
        case EOSType.k_eIOS12_1: return "iOS 12.1";
        default:
        case EOSType.k_eOSUnknown:
            return "Unknown";
    }
}
// EPlatformType
// This enumerates the type of platform (OS) we might run on
var EPlatformType;
(function (EPlatformType) {
    EPlatformType[EPlatformType["k_EPlatformTypeUnknown"] = 0] = "k_EPlatformTypeUnknown";
    EPlatformType[EPlatformType["k_EPlatformTypeWin32"] = 1] = "k_EPlatformTypeWin32";
    EPlatformType[EPlatformType["k_EPlatformTypeWin64"] = 2] = "k_EPlatformTypeWin64";
    EPlatformType[EPlatformType["k_EPlatformTypeLinux64"] = 3] = "k_EPlatformTypeLinux64";
    EPlatformType[EPlatformType["k_EPlatformTypeOSX"] = 4] = "k_EPlatformTypeOSX";
    EPlatformType[EPlatformType["k_EPlatformTypePS3"] = 5] = "k_EPlatformTypePS3";
    EPlatformType[EPlatformType["k_EPlatformTypeLinux32"] = 6] = "k_EPlatformTypeLinux32";
    EPlatformType[EPlatformType["k_EPlatformTypeAndroid32"] = 7] = "k_EPlatformTypeAndroid32";
    EPlatformType[EPlatformType["k_EPlatformTypeAndroid64"] = 8] = "k_EPlatformTypeAndroid64";
    EPlatformType[EPlatformType["k_EPlatformTypeIOS32"] = 9] = "k_EPlatformTypeIOS32";
    EPlatformType[EPlatformType["k_EPlatformTypeIOS64"] = 10] = "k_EPlatformTypeIOS64";
    EPlatformType[EPlatformType["k_EPlatformTypeTVOS"] = 11] = "k_EPlatformTypeTVOS";
    EPlatformType[EPlatformType["k_EPlatformTypeEmbeddedClient"] = 12] = "k_EPlatformTypeEmbeddedClient";
    EPlatformType[EPlatformType["k_EPlatformTypeBrowser"] = 13] = "k_EPlatformTypeBrowser";
    EPlatformType[EPlatformType["k_EPlatformTypeMax"] = 14] = "k_EPlatformTypeMax";
})(EPlatformType || (EPlatformType = {}));
;


/***/ }),

/***/ "../../../web_src/shared/js/common/protohelpers.ts":
/*!*********************************************************!*\
  !*** ../../../web_src/shared/js/common/protohelpers.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddAccessors": () => (/* binding */ AddAccessors),
/* harmony export */   "DeserializeBinary": () => (/* binding */ DeserializeBinary),
/* harmony export */   "FromObject": () => (/* binding */ FromObject),
/* harmony export */   "ReaderProto": () => (/* binding */ ReaderProto),
/* harmony export */   "RemapMetadataByField": () => (/* binding */ RemapMetadataByField),
/* harmony export */   "SerializeBinary": () => (/* binding */ SerializeBinary),
/* harmony export */   "ToObject": () => (/* binding */ ToObject),
/* harmony export */   "WriterProto": () => (/* binding */ WriterProto)
/* harmony export */ });
/* harmony import */ var google_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
/* harmony import */ var google_protobuf__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(google_protobuf__WEBPACK_IMPORTED_MODULE_0__);

// export these aliases to reduce js bundle size; turns references from "d.BinaryReader.prototype.getFoo" to "d.a.getFoo"
const ReaderProto = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.BinaryReader.prototype;
const WriterProto = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter.prototype;
/**
 * Convert from metadata struct to one keyed off field number for binary deserialization
 */
function RemapMetadataByField(metadata) {
    let map = {};
    const { fields } = metadata;
    for (let field in fields) {
        const data = fields[field];
        map[data.n] = data;
    }
    return map;
}
/**
 * Convert JSON object to protobuf message class
 */
function FromObject(metadata, obj) {
    const { proto, fields } = metadata;
    const msg = new proto();
    for (let field in fields) {
        const { n: nFieldNumber, c: msgClass, r: bRepeated, d: defaultValue, q: bRequired } = fields[field];
        // skip any unset fields
        if (!obj.hasOwnProperty(field))
            continue;
        const objValue = obj[field];
        if (msgClass) {
            // submessage
            if (bRepeated) {
                // repeated
                google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setRepeatedWrapperField(msg, nFieldNumber, Array.isArray(objValue) ? objValue.map((innerObj) => msgClass.fromObject(innerObj)) : []);
            }
            else {
                google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setWrapperField(msg, nFieldNumber, msgClass.fromObject(objValue));
            }
        }
        else {
            // plain field.  might be array
            google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setField(msg, nFieldNumber, objValue);
        }
    }
    return msg;
}
/**
 * Convert protobuf message class to JSON object
 */
function ToObject(metadata, opt_includeInstance, msg) {
    const { proto, fields } = metadata;
    let obj = {};
    for (let field in fields) {
        const { n: nFieldNumber, c: msgClass, r: bRepeated, d: defaultValue, q: bRequired } = fields[field];
        if (msgClass) {
            if (bRepeated) {
                obj[field] = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.toObjectList(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getRepeatedWrapperField(msg, msgClass, nFieldNumber), msgClass.toObject, opt_includeInstance);
            }
            else {
                const submessage = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getWrapperField(msg, msgClass, nFieldNumber, bRequired ? 1 : 0);
                if (submessage)
                    obj[field] = msgClass.toObject(opt_includeInstance, submessage);
            }
        }
        else {
            const value = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getFieldWithDefault(msg, nFieldNumber, (defaultValue !== undefined ? defaultValue : null)); // proto internally uses "null" as default value
            if (value !== null || bRequired)
                obj[field] = value;
        }
    }
    if (opt_includeInstance)
        obj.$jspbMessageInstance = msg;
    return obj;
}
/**
 * Read protobuf message class from binary stream
 */
function DeserializeBinary(metadata, msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup())
            break;
        const field = reader.getFieldNumber();
        const data = metadata[field];
        if (data) {
            const { n: nFieldNumber, c: msgClass, r: bRepeated, d: defaultValue, q: bRequired, br: fnReader } = data;
            if (msgClass) {
                // submessage
                const value = new msgClass();
                reader.readMessage(value, msgClass.deserializeBinaryFromReader);
                if (bRepeated)
                    google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.addToRepeatedWrapperField(msg, nFieldNumber, value, msgClass);
                else
                    google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setWrapperField(msg, nFieldNumber, value);
            }
            else {
                if (fnReader) {
                    const value = fnReader.call(reader);
                    if (bRepeated)
                        google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.addToRepeatedField(msg, nFieldNumber, value);
                    else
                        google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setField(msg, nFieldNumber, value);
                }
                else {
                    console.assert(fnReader, `Reader func not set for field number ${nFieldNumber} in class ${msgClass}`);
                    reader.skipField();
                }
            }
        }
        else {
            reader.skipField();
        }
    }
    return msg;
}
/**
 * Write protobuf message class to binary stream
 */
function SerializeBinary(metadata, msg, writer) {
    const { fields } = metadata;
    for (let field in fields) {
        const { n: nFieldNumber, c: msgClass, r: bRepeated, d: defaultValue, q: bRequired, bw: fnWriter } = fields[field];
        if (msgClass) {
            if (bRepeated) {
                const value = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getRepeatedWrapperField(msg, msgClass, nFieldNumber);
                if ((value && value.length) || bRequired)
                    writer.writeRepeatedMessage(nFieldNumber, value, msgClass.serializeBinaryToWriter);
            }
            else {
                const value = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getWrapperField(msg, msgClass, nFieldNumber, bRequired ? 1 : 0);
                if (value)
                    writer.writeMessage(nFieldNumber, value, msgClass.serializeBinaryToWriter);
            }
        }
        else {
            if (fnWriter) {
                const value = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getField(msg, nFieldNumber);
                if (typeof value != 'undefined')
                    fnWriter.call(writer, nFieldNumber, value);
            }
            else {
                console.assert(fnWriter, `Writer func not set for field number ${nFieldNumber} in class ${msgClass}`);
            }
        }
    }
}
/**
 * Dynamically attaches field accessors based on message metadata
 */
function AddAccessors(metadata) {
    const msgClass = metadata.proto;
    for (const strField in metadata.fields) {
        const field = metadata.fields[strField];
        const { n: nFieldNumber, c: fieldMsgClass, r: bRepeated, d: defaultValue, q: bRequired } = field;
        // getter
        if (field.hasOwnProperty('d')) {
            msgClass.prototype[strField] = MakeBasicGetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getFieldWithDefault, nFieldNumber, defaultValue);
        }
        else if (fieldMsgClass) {
            if (bRepeated) {
                msgClass.prototype[strField] = MakeBasicGetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getRepeatedWrapperField, fieldMsgClass, nFieldNumber);
            }
            else {
                msgClass.prototype[strField] = MakeWrapperGetter(fieldMsgClass, nFieldNumber);
            }
        }
        else {
            msgClass.prototype[strField] = MakeBasicGetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getField, nFieldNumber);
        }
        // setter
        if (fieldMsgClass) {
            if (bRepeated) {
                msgClass.prototype[`set_${strField}`] = MakeSetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setRepeatedWrapperField, nFieldNumber);
            }
            else {
                msgClass.prototype[`set_${strField}`] = MakeSetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setWrapperField, nFieldNumber);
            }
        }
        else {
            msgClass.prototype[`set_${strField}`] = MakeSetter(google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.setField, nFieldNumber);
        }
        // for repeated fields, add_field_name() - appends a new field (for sub-messages, this can be called with no args to instantiate and return a new message object)
        if (bRepeated) {
            msgClass.prototype[`add_${strField}`] = MakeAdder(nFieldNumber, fieldMsgClass);
        }
    }
}
/**
 * Move underlying function definitions to their own small functions to prevent them
 * from closing over too much unnecessary scope.
 */
function MakeBasicGetter(fnGetter, ...args) {
    return function () { return fnGetter(this, ...args); };
}
function MakeWrapperGetter(fieldMsgClass, nFieldNumber) {
    return function (bCreateIfNeeded = true) { return google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.getWrapperField(this, fieldMsgClass, nFieldNumber, bCreateIfNeeded ? 1 : 0); };
}
function MakeSetter(fnSetter, nFieldNumber) {
    return function (value) { return fnSetter(this, nFieldNumber, value); };
}
function MakeAdder(nFieldNumber, fieldMsgClass) {
    return fieldMsgClass ?
        function (value, index) { return google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.addToRepeatedWrapperField(this, nFieldNumber, value, fieldMsgClass, index); } :
        function (value, index) { google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message.addToRepeatedField(this, nFieldNumber, value, index); };
}


/***/ }),

/***/ "../../../web_src/shared/js/domutil/popupmanager.ts":
/*!**********************************************************!*\
  !*** ../../../web_src/shared/js/domutil/popupmanager.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BIsVRBrowserInfo": () => (/* binding */ BIsVRBrowserInfo),
/* harmony export */   "BrowserContext": () => (/* binding */ BrowserContext),
/* harmony export */   "BrowserContextRoot": () => (/* binding */ BrowserContextRoot),
/* harmony export */   "CPopup": () => (/* binding */ CPopup),
/* harmony export */   "CSavedDimensionsPopup": () => (/* binding */ CSavedDimensionsPopup),
/* harmony export */   "EPopupCreationFlags": () => (/* binding */ EPopupCreationFlags),
/* harmony export */   "g_PopupManager": () => (/* binding */ g_PopupManager),
/* harmony export */   "useBrowserContext": () => (/* binding */ useBrowserContext)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/mobx/lib/mobx.module.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var shared_utils_domutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/utils/domutils */ "../../../web_src/shared/js/utils/domutils.ts");
/* harmony import */ var shared_utils_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/utils/decorators */ "../../../web_src/shared/js/utils/decorators.ts");
/* harmony import */ var _utils_bind__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/bind */ "../../../web_src/shared/js/utils/bind.ts");
/* harmony import */ var shared_clienttypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/clienttypes */ "../../../web_src/shared/js/clienttypes/index.ts");
/* harmony import */ var shared_utils_localization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/utils/localization */ "../../../web_src/shared/js/utils/localization.ts");
/* harmony import */ var shared_webui_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/webui/config */ "../../../web_src/shared/js/webui/config.ts");
/* harmony import */ var shared_utils_assert__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/utils/assert */ "../../../web_src/shared/js/utils/assert.ts");
/* harmony import */ var _renderwhenlinksready__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./renderwhenlinksready */ "../../../web_src/shared/js/domutil/renderwhenlinksready.ts");
/* harmony import */ var shared_steam_friendsui_friendsuiexports__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! shared/steam/friendsui/friendsuiexports */ "../../../web_src/shared/js/steam/friendsui/friendsuiexports.ts");












var EPopupCreationFlags;
(function (EPopupCreationFlags) {
    EPopupCreationFlags[EPopupCreationFlags["Minimized"] = 1] = "Minimized";
    EPopupCreationFlags[EPopupCreationFlags["Hidden"] = 2] = "Hidden";
    EPopupCreationFlags[EPopupCreationFlags["Tooltip"] = 4] = "Tooltip";
    EPopupCreationFlags[EPopupCreationFlags["NoTaskbarIcon"] = 8] = "NoTaskbarIcon";
    EPopupCreationFlags[EPopupCreationFlags["Resizable"] = 16] = "Resizable";
    EPopupCreationFlags[EPopupCreationFlags["ScalePosition"] = 32] = "ScalePosition";
    EPopupCreationFlags[EPopupCreationFlags["ScaleSize"] = 64] = "ScaleSize";
    EPopupCreationFlags[EPopupCreationFlags["Maximized"] = 128] = "Maximized";
    EPopupCreationFlags[EPopupCreationFlags["BackgroundTransparent"] = 256] = "BackgroundTransparent";
    EPopupCreationFlags[EPopupCreationFlags["NotFocusable"] = 512] = "NotFocusable";
    EPopupCreationFlags[EPopupCreationFlags["FullScreen"] = 1024] = "FullScreen";
    EPopupCreationFlags[EPopupCreationFlags["Fullscreen_Exclusive"] = 2048] = "Fullscreen_Exclusive";
    EPopupCreationFlags[EPopupCreationFlags["ApplyBrowserScaleToDimensions"] = 4096] = "ApplyBrowserScaleToDimensions";
    EPopupCreationFlags[EPopupCreationFlags["AlwaysOnTop"] = 8192] = "AlwaysOnTop";
    EPopupCreationFlags[EPopupCreationFlags["NoWindowShadow"] = 16384] = "NoWindowShadow";
    EPopupCreationFlags[EPopupCreationFlags["NoMinimize"] = 32768] = "NoMinimize";
    EPopupCreationFlags[EPopupCreationFlags["PopUpMenu"] = 65536] = "PopUpMenu";
    EPopupCreationFlags[EPopupCreationFlags["Overlay"] = 8712] = "Overlay";
    EPopupCreationFlags[EPopupCreationFlags["Notification"] = 90632] = "Notification";
    EPopupCreationFlags[EPopupCreationFlags["PopupContextMenu"] = 65544] = "PopupContextMenu";
})(EPopupCreationFlags || (EPopupCreationFlags = {}));
const BrowserContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext({ ownerWindow: window });
const useBrowserContext = () => react__WEBPACK_IMPORTED_MODULE_1__.useContext(BrowserContext);
function BrowserContextRoot(props) {
    const { ownerWindow, children } = props;
    const value = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(() => ({ ownerWindow }), [ownerWindow]);
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(BrowserContext.Provider, { value }, children);
}
function BIsVRBrowserInfo(context) {
    return context.m_eBrowserType == shared_clienttypes__WEBPACK_IMPORTED_MODULE_5__.EBrowserType.EBrowserType_OpenVROverlay
        || context.m_eBrowserType == shared_clienttypes__WEBPACK_IMPORTED_MODULE_5__.EBrowserType.EBrowserType_OpenVROverlay_Dashboard;
}
/*
 * Popup base class
 */
class CPopup {
    constructor(strName, rgParams) {
        this.m_bCreated = false;
        this.m_onCreateRender = null;
        this.m_bFocused = false;
        (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_8__.AssertMsg)(strName, "Name is required.  This is an internal name, different from title.");
        this.m_strName = strName;
        this.m_rgParams = rgParams;
        // TODO: have popup manager track ids by browser?
        if (this.m_rgParams.target_browser)
            this.m_strName += '_uid' + this.m_rgParams.target_browser.m_unPID;
        // We actually create _all_ popups as hidden and then show them when they're done loading.
        // If we passed in the Hidden flag at initialization time, though, we'd like to not show
        // it until explicitly shown, so we need to write this down here.
        this.m_bCreateHidden = !!(rgParams.eCreationFlags & EPopupCreationFlags.Hidden);
        // save off title, we'll manage it from here
        this.m_strTitle = rgParams.title;
        delete this.m_rgParams.title;
    }
    SetClosedByUser(bClosedByUser) {
        this.m_bClosedByUser = bClosedByUser;
    }
    UpdateParamsBeforeShow(rgParams) {
        // TODO: if this modifies target_browser, the name field will be incorrect
        return rgParams;
    }
    OnDrop(event) {
        console.log('Ignoring drop onto toplevel window', event);
        event.preventDefault();
        event.stopPropagation();
    }
    OnDragOver(event) {
        event.preventDefault();
        // Stopping propagation of the dragover will make the system
        // think we are a drop target.  The dropEffect 'none'
        // should cause the OS to display a "you can't drop here"
        // cursor, but Windows doesn't always do that.
        event.dataTransfer.dropEffect = 'none';
        event.stopPropagation();
    }
    OnMessage(event) {
        if (event.data == 'window_moved') {
            this.OnResize();
        }
        if (event.data == 'popup-created') {
            this.OnCreateInternal();
        }
    }
    Show(bFocus = true, bForceToForeground = false) {
        var _a, _b;
        // all popup windows are initially created hidden then set visible when rendering is complete to prevent initial black screen flash
        if (window.SteamClient)
            this.m_rgParams.eCreationFlags |= EPopupCreationFlags.Hidden;
        // TODO (mikela): EPopupCreationFlags.Tooltip can be removed once EPopupCreationFlags.AlwaysOnTop
        // is available in the public client.
        if (this.m_rgParams.eCreationFlags & (EPopupCreationFlags.NotFocusable | EPopupCreationFlags.Tooltip))
            bFocus = false;
        if (this.BIsValid()) {
            if (!this.BIsClosed()) {
                if (bFocus)
                    this.Focus(bForceToForeground);
            }
            else {
                this.m_popup = undefined;
                this.m_element = undefined;
            }
        }
        // need to force replace existing popup
        let existingPopup = g_PopupManager.GetExistingPopup(this.m_strName);
        if (existingPopup && !this.m_rgParams.replace_existing_popup)
            return;
        // replace or create
        this.m_rgParams = this.UpdateParamsBeforeShow(this.m_rgParams);
        let popup;
        let element;
        let renderWhenReady;
        if (existingPopup) {
            element = existingPopup.m_element;
            popup = existingPopup.m_popup;
            existingPopup.ReleasePopup();
            renderWhenReady = existingPopup.m_renderWhenReady;
            g_PopupManager.RemoveTrackedPopup(existingPopup);
            popup.removeEventListener('beforeunload', existingPopup.OnBeforeUnloadEvent);
            popup.removeEventListener('unload', existingPopup.OnUnload);
            popup.removeEventListener('resize', existingPopup.OnResizeEvent);
            popup.removeEventListener('focus', this.OnFocusInternal);
            popup.removeEventListener('blur', this.OnBlurInternal);
            popup.removeEventListener('drop', existingPopup.OnDrop);
            popup.removeEventListener('dragover', existingPopup.OnDragOver);
            popup.removeEventListener('message', this.OnMessage);
        }
        else {
            ({ popup, element } = CPopupManager.CreatePopup(this.m_strName, this.m_rgParams));
            renderWhenReady = new _renderwhenlinksready__WEBPACK_IMPORTED_MODULE_9__.CRenderWhenLinksReady(popup.document, element);
        }
        if (popup && element) {
            popup.document.title = this.m_strTitle;
            popup.addEventListener('beforeunload', this.OnBeforeUnloadEvent);
            popup.addEventListener('unload', this.OnUnload);
            popup.addEventListener('resize', this.OnResizeEvent);
            popup.addEventListener('focus', this.OnFocusInternal);
            popup.addEventListener('blur', this.OnBlurInternal);
            popup.addEventListener('drop', this.OnDrop);
            popup.addEventListener('dragover', this.OnDragOver);
            popup.addEventListener('message', this.OnMessage);
            if (shared_webui_config__WEBPACK_IMPORTED_MODULE_7__.Config.LANGUAGE) {
                popup.document.documentElement.setAttribute('lang', (0,shared_utils_localization__WEBPACK_IMPORTED_MODULE_6__.GetConfiguredLocale)());
            }
            this.m_popup = popup;
            this.m_element = element;
            this.m_renderWhenReady = renderWhenReady;
            this.m_renderWhenReady.SetTarget(() => this.RenderInternal(this.m_popup, this.m_element, bFocus));
        }
        g_PopupManager.AddTrackedPopup(this);
        if (existingPopup) {
            if (bFocus)
                this.Focus();
        }
        else if (!((_b = (_a = SteamClient.Features) === null || _a === void 0 ? void 0 : _a.SteamInitsPopups) === null || _b === void 0 ? void 0 : _b.call(_a))) {
            this.OnCreateInternal();
        }
    }
    RemoveEventListeners() {
        this.window.removeEventListener('beforeunload', this.OnBeforeUnloadEvent);
        this.window.removeEventListener('unload', this.OnUnload);
        this.window.removeEventListener('resize', this.OnResizeEvent);
        this.window.removeEventListener('focus', this.OnFocusInternal);
        this.window.removeEventListener('blur', this.OnBlurInternal);
        this.window.removeEventListener('drop', this.OnDrop);
        this.window.removeEventListener('dragover', this.OnDragOver);
        this.window.removeEventListener('message', this.OnMessage);
    }
    RenderInternal(popup, element, bFocus) {
        if (!this.m_bCreated) {
            this.m_onCreateRender = () => this.RenderInternal(popup, element, bFocus);
            return;
        }
        if (this.browser_info && BIsVRBrowserInfo(this.browser_info)) {
            element.ownerDocument.body.className += " VR";
        }
        this.Render(popup, element);
        this.OnLoad();
        if (popup.SteamClient && !this.m_bCreateHidden) {
            if (bFocus) {
                popup.SteamClient.Window.BringToFront();
            }
            else {
                popup.SteamClient.Window.ShowWindow();
            }
        }
    }
    OnCreateInternal() {
        if (!this.m_bCreated) {
            this.m_bCreated = true;
            this.OnCreate();
            if (this.m_onCreateRender) {
                this.m_onCreateRender();
                this.m_onCreateRender = null;
            }
        }
    }
    OnCreate() {
    }
    OnResizeEvent() {
        this.OnResize();
    }
    OnBeforeUnloadEvent() {
        this.OnBeforeUnload();
    }
    OnUnload() {
        this.RemoveEventListeners();
        g_PopupManager.RemoveTrackedPopup(this);
        this.OnClose();
        this.m_popup = undefined;
    }
    get browser_info() {
        return this.m_rgParams.target_browser;
    }
    get window() {
        return this.m_popup;
    }
    get root_element() {
        return this.m_element;
    }
    get title() {
        return this.m_strTitle;
    }
    set title(title) {
        this.m_strTitle = title;
        if (this.m_popup)
            this.m_popup.document.title = this.m_strTitle;
    }
    get params() {
        return this.m_rgParams;
    }
    Focus(bForceToForeground = false) {
        if (this.m_popup && typeof this.m_popup.SteamClient != 'undefined' && typeof this.m_popup.SteamClient.Window != 'undefined') {
            if (!bForceToForeground)
                this.m_popup.SteamClient.Window.BringToFront();
            else
                this.m_popup.SteamClient.Window.SetForegroundWindow();
        }
        else if (this.m_popup)
            this.m_popup.focus();
    }
    Close() {
        if (this.m_popup)
            this.m_popup.close();
    }
    GetName() {
        return this.m_strName;
    }
    BIsValid() {
        return !!this.m_popup;
    }
    BIsClosed() {
        return !this.m_popup || this.m_popup.closed;
    }
    BIsVisible() {
        return this.m_popup && !this.m_popup.closed && this.m_popup.document.visibilityState == "visible";
    }
    /*
     * Focus related
     */
    BIsFocused() {
        return this.BIsVisible() && this.m_popup.document.hasFocus();
    }
    OnFocusInternal() {
        if (this.m_popup) {
            this.m_popup.document.body.classList.add('WindowFocus');
        }
        this.m_bFocused = true;
        this.OnFocus();
    }
    OnBlurInternal() {
        if (this.m_popup) {
            this.m_popup.document.body.classList.remove('WindowFocus');
        }
        this.m_bFocused = false;
        this.OnBlur();
    }
    get focused() {
        return this.m_bFocused;
    }
    GetWindowRestoreDetails() {
        if (this.m_popup && !this.m_popup.closed && this.m_popup.SteamClient) {
            return new Promise((resolve, reject) => {
                this.m_popup.SteamClient.Window.GetWindowRestoreDetails((strWindowRestoreDetails) => {
                    resolve(strWindowRestoreDetails);
                });
            });
        }
        else {
            return Promise.resolve('');
        }
    }
    IsMinimized() {
        if (this.m_popup && !this.m_popup.closed && this.m_popup.SteamClient && this.m_popup.SteamClient.Window && this.m_popup.SteamClient.Window.IsWindowMinimized) {
            return new Promise((resolve, reject) => {
                this.m_popup.SteamClient.Window.IsWindowMinimized((bMinimized) => {
                    resolve(bMinimized);
                });
            });
        }
        return Promise.resolve(false);
    }
    ReleasePopup() {
        this.OnClose();
        this.m_popup = null;
    }
    // Called when the javascript beforeunload event has fired.  You may not
    // actually close after this if a navigation gets cancelled, so don't
    // do anything destructive.
    OnBeforeUnload() { }
    OnFocus() { }
    OnBlur() { }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    mobx__WEBPACK_IMPORTED_MODULE_0__.observable
], CPopup.prototype, "m_bFocused", void 0);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnMessage", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "RenderInternal", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnCreateInternal", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnResizeEvent", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnBeforeUnloadEvent", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnUnload", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnFocusInternal", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CPopup.prototype, "OnBlurInternal", null);
class CSavedDimensionsPopup extends CPopup {
    constructor(strName, strSavedDimensionsKey, rgParams, bExpires) {
        super(strName, rgParams);
        this.SetSavedDimensionsKey(strSavedDimensionsKey);
        this.m_bExpires = bExpires;
    }
    BIsInOverlay() {
        return this.browser_info && this.browser_info.m_unPID != 0 && this.browser_info.m_nBrowserID != -1;
    }
    SetSavedDimensionsKey(strSavedDimensionsKey) {
        this.m_strSavedDimensionsKey = strSavedDimensionsKey;
    }
    UpdateParamsBeforeShow(rgParams) {
        if (this.m_strSavedDimensionsKey && !rgParams.bIgnoreSavedDimensions && !rgParams.strRestoreDetails) {
            this.m_strInitialSavedDimensionsKey = this.GetSavedDimensionsKey();
            rgParams.strRestoreDetails = g_PopupManager.GetRestoreDetails(this.m_strInitialSavedDimensionsKey);
        }
        else if (rgParams.strRestoreDetails) {
            this.m_strInitialSavedDimensionsKey = this.GetSavedDimensionsKey();
            g_PopupManager.SetRestoreDetails(this.m_strInitialSavedDimensionsKey, rgParams.strRestoreDetails, this.m_bExpires);
        }
        else {
            // console.log( 'Skipping restore details, using dimensions', rgParams.dimensions );
        }
        return rgParams;
    }
    OnLoad() {
        this.GetWindowRestoreDetails().then((strDetails) => {
            this.m_strInitialRestoreDetails = strDetails;
            this.OnResizeComplete(strDetails);
        });
    }
    OnResize() {
        this.QueryAndStoreWindowPosition();
    }
    OnResizeComplete(strNewRestoreDetails) {
    }
    QueryAndStoreWindowPosition() {
        if (this.m_strInitialRestoreDetails) {
            let strSavedDimensionsKey = this.GetSavedDimensionsKey();
            // Allow a slight delay before trying to read the window size and position.  There are cases (like resizing a youtube video)
            // where we get the OnResize event before the window is actually finished resizing, so without the delay we get stale information
            // and then dumb things happen when you restart.
            this.m_popup.setTimeout(() => {
                this.GetWindowRestoreDetails().then((strCurrentRestoreDetails) => {
                    let bUnchanged = (this.m_strInitialRestoreDetails == strCurrentRestoreDetails) && (strSavedDimensionsKey == this.m_strInitialSavedDimensionsKey);
                    if (this.m_popup && this.m_strSavedDimensionsKey && strCurrentRestoreDetails && !bUnchanged) {
                        g_PopupManager.SetRestoreDetails(strSavedDimensionsKey, strCurrentRestoreDetails, this.m_bExpires);
                        this.m_rgParams.strRestoreDetails = strCurrentRestoreDetails;
                        this.m_strInitialSavedDimensionsKey = strSavedDimensionsKey;
                        this.OnResizeComplete(strCurrentRestoreDetails);
                    }
                });
            }, 30);
        }
    }
    OnBeforeUnload() {
        this.QueryAndStoreWindowPosition();
        super.OnBeforeUnload();
    }
    OnClose() {
    }
    SaveWindowPosition(strRestoreDetails) {
        g_PopupManager.SetRestoreDetails(this.GetSavedDimensionsKey(), strRestoreDetails, false);
        this.m_rgParams.strRestoreDetails = strRestoreDetails;
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind
], CSavedDimensionsPopup.prototype, "QueryAndStoreWindowPosition", null);
class CPopupManager {
    constructor() {
        this.m_bShuttingDown = false;
        this.m_mapPopups = mobx__WEBPACK_IMPORTED_MODULE_0__.observable.map([], { deep: false });
        this.m_rgShutdownCallbacks = [];
        this.m_rgPopupCreatedCallbacks = [];
        this.m_unCurrentAccountID = 0;
        this.m_mapRestoreDetails = new Map();
        this.m_bSaveRequired = false;
        // TODO: popup manager doesn't do much in mobile
        if (!({"NODE_ENV":"development","STEAM_BUILD":"dev"}).MOBILE_BUILD) {
            window.addEventListener('beforeunload', (event) => {
                var _a, _b, _c, _d;
                this.m_bShuttingDown = true;
                for (let fnCallback of this.m_rgShutdownCallbacks)
                    fnCallback();
                // popups will remove themselves from the map as they close, put them in a separate array to avoid any wonkiness.
                let rgPopupsToClose = [];
                this.m_mapPopups.forEach((popup) => {
                    if (popup.BIsValid() && !popup.BIsClosed()) {
                        rgPopupsToClose.push(popup);
                        popup.SetClosedByUser(false);
                    }
                });
                for (let popup of rgPopupsToClose) {
                    if ((_b = (_a = popup.window) === null || _a === void 0 ? void 0 : _a.SteamClient.Browser) === null || _b === void 0 ? void 0 : _b.SetShouldExitSteamOnBrowserClosed)
                        popup.window.SteamClient.Browser.SetShouldExitSteamOnBrowserClosed(false);
                    if ((_c = popup.window) === null || _c === void 0 ? void 0 : _c.SteamClient.Window.SetHideOnClose)
                        (_d = popup.window) === null || _d === void 0 ? void 0 : _d.SteamClient.Window.SetHideOnClose(false);
                    popup.Close();
                }
                if (this.m_bSaveRequired) {
                    this.SaveSavedDimensionStore();
                }
                this.m_mapPopups.clear();
            });
            let elHead = document.querySelector('head');
            (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_8__.AssertMsg)(elHead, 'Couldn\'t find head element');
            if (elHead) {
                this.m_DynamicCSSObserver = new MutationObserver(() => {
                    const styleSheetLinks = shared_utils_domutils__WEBPACK_IMPORTED_MODULE_2__.GetStyleSheetLinks();
                    this.m_mapPopups.forEach((popup) => {
                        if (true) {
                            // @note Colby Sieber: In dev we want to update existing sheets so that hot replacement of changed CSS
                            // works. It seemed like this would be safe to do all the time, but can cause flashes of unstyled UI
                            // that I still need to work out first.
                            shared_utils_domutils__WEBPACK_IMPORTED_MODULE_2__.UpdateStylesheetsInDocument(popup.window.document, styleSheetLinks);
                        }
                        else {}
                    });
                });
                this.m_DynamicCSSObserver.observe(elHead, { childList: true });
            }
        }
    }
    BAnyPopupHasFocus() {
        for (const popup of this.m_mapPopups.values()) {
            if (popup.focused) {
                return true;
            }
        }
        return false;
    }
    BAnyMenuHasFocus() {
        for (const popup of this.m_mapPopups.values()) {
            if (popup.focused && !!(popup.params.eCreationFlags & EPopupCreationFlags.NoTaskbarIcon)) {
                return true;
            }
        }
        return false;
    }
    SetCurrentLoggedInAccountID(accountid) {
        if (this.m_unCurrentAccountID != accountid) {
            this.m_unCurrentAccountID = accountid;
            if (accountid) {
                this.LoadSavedDimensionStore();
            }
            else {
                this.ClearSavedDimensionStore();
            }
        }
    }
    AddShutdownCallback(fnCallback) {
        this.m_rgShutdownCallbacks.push(fnCallback);
    }
    AddPopupCreatedCallback(fnCallback) {
        this.m_rgPopupCreatedCallbacks.push(fnCallback);
    }
    AddTrackedPopup(popup) {
        this.m_mapPopups.set(popup.GetName(), popup);
        for (let fnCallback of this.m_rgPopupCreatedCallbacks)
            fnCallback(popup);
    }
    RemoveTrackedPopup(popup) {
        this.m_mapPopups.delete(popup.GetName());
    }
    GetExistingPopup(strName) {
        return this.m_mapPopups.get(strName);
    }
    GetPopups() {
        return this.m_mapPopups.values();
    }
    ClosePopupsOwnedByBrowser(browser) {
        this.m_mapPopups.forEach((popup) => {
            if (popup.browser_info && popup.browser_info.m_nBrowserID == browser.m_nBrowserID &&
                popup.browser_info.m_unPID == browser.m_unPID) {
                popup.Close();
            }
        });
    }
    static CreatePopup(strName, rgParams) {
        let dimensions = rgParams.dimensions || {};
        let width = dimensions.width || 300;
        let height = dimensions.height || 300;
        let title = rgParams.title;
        if (rgParams.center_on_window && typeof dimensions.left == 'undefined' && typeof dimensions.top == 'undefined') {
            // Center this on the given window
            const win = rgParams.center_on_window;
            dimensions.left = win.innerWidth / 2 + win.screenLeft - width / 2;
            dimensions.top = win.innerHeight / 2 + win.screenTop - height / 2;
        }
        let strParams = "width=" + width + ",height=" + height;
        if (typeof dimensions.left != 'undefined')
            strParams += ",left=" + dimensions.left;
        if (typeof dimensions.top != 'undefined')
            strParams += ",top=" + dimensions.top;
        strParams += ",resizeable,status=0,toolbar=0,menubar=0,location=0";
        let strPopupURL = "about:blank";
        let rgQueryParams = [];
        rgQueryParams.push('createflags=' + rgParams.eCreationFlags);
        if (rgParams.minWidth) {
            rgQueryParams.push('minwidth=' + rgParams.minWidth);
        }
        if (rgParams.minHeight) {
            rgQueryParams.push('minheight=' + rgParams.minHeight);
        }
        if (rgParams.target_browser) {
            // these parameters are interpreted by the steam process to open popups in the Steam overlay
            // or SteamVR dashboard instead of on the desktop.
            rgQueryParams.push('pid=' + rgParams.target_browser.m_unPID);
            rgQueryParams.push('browser=' + rgParams.target_browser.m_nBrowserID);
            if (rgParams.target_browser.m_eBrowserType) {
                rgQueryParams.push('browserType=' + rgParams.target_browser.m_eBrowserType);
            }
            else if (rgParams.browserType) {
                rgQueryParams.push('browserType=' + rgParams.browserType);
            }
            if (rgParams.availscreenwidth && rgParams.availscreenheight) {
                rgQueryParams.push('screenavailwidth=' + rgParams.availscreenwidth);
                rgQueryParams.push('screenavailheight=' + rgParams.availscreenheight);
            }
        }
        else if (rgParams.browserType) {
            rgQueryParams.push('browserType=' + rgParams.browserType);
        }
        if (rgParams.strVROverlayKey) {
            rgQueryParams.push('vrOverlayKey=' + rgParams.strVROverlayKey);
        }
        if (rgParams.strRestoreDetails) {
            rgQueryParams.push("restoredetails=" + rgParams.strRestoreDetails);
        }
        if (rgParams.window_opener_id) {
            rgQueryParams.push('openerid=' + rgParams.window_opener_id);
        }
        if (rgParams.strUserAgent) {
            rgQueryParams.push('useragent=' + rgParams.strUserAgent + '/' + (0,shared_clienttypes__WEBPACK_IMPORTED_MODULE_5__.PchNameFromELauncherType)(shared_webui_config__WEBPACK_IMPORTED_MODULE_7__.Config.LAUNCHER_TYPE));
        }
        if (rgParams.hwndParent) {
            rgQueryParams.push('hwndParent=' + rgParams.hwndParent);
        }
        if (rgQueryParams) {
            strPopupURL += '?' + rgQueryParams.join('&');
        }
        let windowOwner = rgParams.owner_window || window;
        let popup = windowOwner.open(strPopupURL, strName, strParams);
        // popup blockers can cause this to fail.
        if (!popup) {
            console.error(`Failed to create popup, browser/CEF may be blocking popups for "${window.location.origin}"`);
            return {};
        }
        let strHTMLClass = '';
        if (rgParams.html_class)
            strHTMLClass = `class="${rgParams.html_class}"`;
        let strBodyClass = '';
        if (rgParams.body_class)
            strBodyClass = `class="${rgParams.body_class}"`;
        let strPopupClass = '';
        if (rgParams.popup_class)
            strPopupClass = `class="${rgParams.popup_class}"`;
        let strPopupContent = `<!DOCTYPE html><html ${strHTMLClass}><head><title></title></head><body ${strBodyClass}><div id="popup_target" ${strPopupClass}></div></body></html>`;
        popup.document.write(strPopupContent);
        popup.document.title = title;
        shared_utils_domutils__WEBPACK_IMPORTED_MODULE_2__.AddMissingStylesheetsToWindow(popup, shared_utils_domutils__WEBPACK_IMPORTED_MODULE_2__.GetStyleSheetLinks());
        return { popup, element: popup.document.getElementById('popup_target') };
    }
    BShuttingDown() {
        return this.m_bShuttingDown;
    }
    GetLocalStorageKey() {
        return 'PopupSavedDimensions_' + this.m_unCurrentAccountID;
    }
    LoadSavedDimensionStore() {
        if (!this.m_unCurrentAccountID)
            return;
        let strLocalStorageKey = this.GetLocalStorageKey();
        this.m_mapRestoreDetails = undefined;
        let strJSON = window.localStorage.getItem(strLocalStorageKey);
        if (strJSON) {
            try {
                // When the Map<> gets stringified, it ends up
                // as an array where the zeroth element is the
                // key and the 1th element is the value
                let o = JSON.parse(strJSON);
                this.m_mapRestoreDetails = new Map(o);
            }
            catch (e) {
            }
        }
        if (!this.m_mapRestoreDetails) {
            this.m_mapRestoreDetails = new Map();
        }
    }
    SaveSavedDimensionStore() {
        if (!this.m_unCurrentAccountID || !this.m_bSaveRequired)
            return;
        let strLocalStorageKey = this.GetLocalStorageKey();
        // JSON.stringify is not implemented on all Maps.  We want to end up with an
        // array of [key, value] tuples, so build that and then stringify that.
        // Array.from will do the right thing for us.
        let strOutput = JSON.stringify(Array.from(this.m_mapRestoreDetails));
        window.localStorage.setItem(strLocalStorageKey, strOutput);
        this.m_bSaveRequired = false;
    }
    DebouncedSaveSavedDimensionStore() {
        this.SaveSavedDimensionStore();
    }
    ClearSavedDimensionStore() {
        this.m_mapRestoreDetails.clear();
        this.m_bSaveRequired = false;
    }
    GetRestoreDetails(strSavedDimensionsKey) {
        if (!this.m_mapRestoreDetails.has(strSavedDimensionsKey))
            return '';
        let savedValue = this.m_mapRestoreDetails.get(strSavedDimensionsKey);
        savedValue.last_used = Date.now();
        this.m_bSaveRequired = true;
        return savedValue.strRestoreDetails;
    }
    SetRestoreDetails(strSavedDimensionsKey, strRestoreDetails, bExpires) {
        if (strSavedDimensionsKey) {
            if (strRestoreDetails) {
                // Purge the oldest
                if (this.m_mapRestoreDetails.size > 50) {
                    let oldestKey = null;
                    let oldestTime = Date.now();
                    for (let key of Array.from(this.m_mapRestoreDetails.keys())) {
                        let val = this.m_mapRestoreDetails.get(key);
                        if (val.last_used < oldestTime && val.bExpires) {
                            oldestTime = val.last_used;
                            oldestKey = key;
                        }
                    }
                    if (oldestKey) {
                        this.m_mapRestoreDetails.delete(oldestKey);
                    }
                }
                let saveData = { strRestoreDetails, last_used: Date.now(), bExpires };
                this.m_mapRestoreDetails.set(strSavedDimensionsKey, saveData);
            }
            else {
                this.m_mapRestoreDetails.delete(strSavedDimensionsKey);
            }
            this.m_bSaveRequired = true;
            if (this.m_bShuttingDown) {
                // In shutdown path, save immediately rather than waiting for the timeout, just to make
                // sure everything ends up in local storage before the browser goes away.
                this.SaveSavedDimensionStore();
            }
            else {
                this.DebouncedSaveSavedDimensionStore();
            }
        }
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_4__.bind,
    (0,shared_utils_decorators__WEBPACK_IMPORTED_MODULE_3__.debounce)(100)
], CPopupManager.prototype, "DebouncedSaveSavedDimensionStore", null);
let g_PopupManager = (0,shared_steam_friendsui_friendsuiexports__WEBPACK_IMPORTED_MODULE_10__.SharedFriendsUIGlobal)('PopupManager', () => new CPopupManager());
window.g_PopupManager = g_PopupManager;


/***/ }),

/***/ "../../../web_src/shared/js/domutil/renderwhenlinksready.ts":
/*!******************************************************************!*\
  !*** ../../../web_src/shared/js/domutil/renderwhenlinksready.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CRenderWhenLinksReady": () => (/* binding */ CRenderWhenLinksReady)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _utils_bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/bind */ "../../../web_src/shared/js/utils/bind.ts");
/* harmony import */ var shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/arrayutils */ "../../../web_src/shared/js/utils/arrayutils.ts");



/*
 * Helper to track when all links for a newly created popup have loaded. Supports CPopup replacement too.
 */
class CRenderWhenLinksReady {
    constructor(doc, element, rgLoadingLinks) {
        this.m_rgLoadingLinks = [];
        // listen for links loading
        this.m_rgLoadingLinks = [];
        if (rgLoadingLinks) {
            for (let i = 0; i < rgLoadingLinks.length; i++) {
                this.AddLink(rgLoadingLinks[i], true);
            }
        }
        else {
            let rgLinks = doc.getElementsByTagName("link");
            for (let i = 0; i < rgLinks.length; i++) {
                let elLink = rgLinks[i];
                this.AddLink(elLink, false);
            }
        }
    }
    AddLink(elLink, bCheckIfLoaded) {
        if (bCheckIfLoaded) {
            let bNeedToLoad = false;
            try {
                if (!elLink.sheet || !elLink.sheet.cssRules || elLink.sheet.cssRules.length == 0) {
                    bNeedToLoad = true;
                }
            }
            catch (e) {
                // may not be the same domain, so might get an exception
                // "SecurityError: Failed to read the 'cssRules' property from 'CSSStyleSheet': Cannot access rules"
                // in which case, we'll say we do not need to wait for it
                // console.error( "CRenderLinksWhenReady: failed to load " + elLink.href + " = " + e );
            }
            if (bNeedToLoad) {
                elLink.addEventListener('load', this.OnLinkLoad);
                this.m_rgLoadingLinks.push(elLink);
            }
        }
        else {
            elLink.addEventListener('load', this.OnLinkLoad);
            this.m_rgLoadingLinks.push(elLink);
        }
    }
    SetTarget(fnRender) {
        this.m_fnRender = fnRender;
        // if links have already loaded, force render (replacement case)
        if (this.m_rgLoadingLinks.length == 0) {
            this.m_fnRender();
            this.m_fnRender = undefined;
        }
    }
    OnLinkLoad(event) {
        let link = event.currentTarget;
        link.removeEventListener('load', this.OnLinkLoad);
        shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_1__.FindAndRemove(this.m_rgLoadingLinks, event.currentTarget);
        if (this.m_rgLoadingLinks.length == 0) {
            this.m_fnRender();
            this.m_fnRender = undefined;
        }
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    _utils_bind__WEBPACK_IMPORTED_MODULE_0__.bind
], CRenderWhenLinksReady.prototype, "OnLinkLoad", null);


/***/ }),

/***/ "../../../web_src/shared/js/steam/friendsui/friendsuiexports.ts":
/*!**********************************************************************!*\
  !*** ../../../web_src/shared/js/steam/friendsui/friendsuiexports.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SharedFriendsUIGlobal": () => (/* binding */ SharedFriendsUIGlobal),
/* harmony export */   "k_nFriendsUIExportsVersion": () => (/* binding */ k_nFriendsUIExportsVersion)
/* harmony export */ });
/* harmony import */ var shared_utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/utils/assert */ "../../../web_src/shared/js/utils/assert.ts");
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");


/**
 * Roll this forward if there are breaking changes to the friendsui/pal interface.  This will cause the client
 * to display a "you need to update" message.
 */
const k_nFriendsUIExportsVersion = 5;
/**
 * SteamPal and FriendsUI Share certain globals across the iframe boundary.  This code will simply return the object
 * generated by the factory in all other cases.
 *
 * To share a global value with FriendsUI, simply replace a declaration like this:
 *   export const GamepadNavigationContext = React.createContext<CFocusNavNode>( null );
 * with
 *   export const GamepadNavigationContext = SharedFriendsUIGlobal( 'GamepadNavigationContext', () => React.createContext<CFocusNavNode>( null ) );
 *
 * When friendsUI runs, it will grab the value of the global from the parent window.
 *
 * @param name A globally unique name for the object.
 * @param fnCreate A factory method to instantiate the object if needed
 * @returns the object created by fnCreate, or the existing instance from the parent window as appropriate
 */
function SharedFriendsUIGlobal(name, fnCreate) {
    if (false) {}
    else {
        return fnCreate();
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/steamclient.ts":
/*!*************************************************!*\
  !*** ../../../web_src/shared/js/steamclient.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSteamClientHasInterface": () => (/* reexport safe */ _steamclient_clientinterfacehelpers__WEBPACK_IMPORTED_MODULE_0__.BSteamClientHasInterface),
/* harmony export */   "BSteamClientHasMethod": () => (/* reexport safe */ _steamclient_clientinterfacehelpers__WEBPACK_IMPORTED_MODULE_0__.BSteamClientHasMethod),
/* harmony export */   "BWindowHasSteamClientInterface": () => (/* reexport safe */ _steamclient_clientinterfacehelpers__WEBPACK_IMPORTED_MODULE_0__.BWindowHasSteamClientInterface),
/* harmony export */   "BWindowHasSteamClientMethod": () => (/* reexport safe */ _steamclient_clientinterfacehelpers__WEBPACK_IMPORTED_MODULE_0__.BWindowHasSteamClientMethod)
/* harmony export */ });
/* harmony import */ var _steamclient_clientinterfacehelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./steamclient/clientinterfacehelpers */ "../../../web_src/shared/js/steamclient/clientinterfacehelpers.ts");
/* harmony import */ var _common_ostype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/ostype */ "../../../web_src/shared/js/common/ostype.ts");
/* harmony import */ var _clienttypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clienttypes */ "../../../web_src/shared/js/clienttypes/index.ts");
//
// contains definitions for all methods and objects exposed from C++ Steam Client
//





/***/ }),

/***/ "../../../web_src/shared/js/steamclient/clientinterfacehelpers.ts":
/*!************************************************************************!*\
  !*** ../../../web_src/shared/js/steamclient/clientinterfacehelpers.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSteamClientHasInterface": () => (/* binding */ BSteamClientHasInterface),
/* harmony export */   "BSteamClientHasMethod": () => (/* binding */ BSteamClientHasMethod),
/* harmony export */   "BWindowHasSteamClientInterface": () => (/* binding */ BWindowHasSteamClientInterface),
/* harmony export */   "BWindowHasSteamClientMethod": () => (/* binding */ BWindowHasSteamClientMethod),
/* harmony export */   "InstrumentSteamClientAPIPerformance": () => (/* binding */ InstrumentSteamClientAPIPerformance)
/* harmony export */ });
/** Returns true if SteamClient exists on the given window and has the given interface */
function BWindowHasSteamClientInterface(ownerWindow, strInterface) {
    if (!ownerWindow)
        return false;
    return typeof ownerWindow.SteamClient === 'object' && (strInterface in ownerWindow.SteamClient);
}
/** Returns true if SteamClient exists and has the given interface */
function BSteamClientHasInterface(strInterface) {
    return BWindowHasSteamClientInterface(window, strInterface);
}
/** Returns true if SteamClient exists on the given window and has the given method (passed as 'Interface.MethodName') */
function BWindowHasSteamClientMethod(ownerWindow, strInterfaceFunction) {
    if (!ownerWindow)
        return false;
    const [strInterface, strFunction] = strInterfaceFunction.split('.', 2);
    return strInterface && strFunction && BWindowHasSteamClientInterface(ownerWindow, strInterface) && (strFunction in ownerWindow.SteamClient[strInterface]);
}
/** Returns true if SteamClient exists and has the given method (passed as 'Interface.MethodName') */
function BSteamClientHasMethod(strInterfaceFunction) {
    return BWindowHasSteamClientMethod(window, strInterfaceFunction);
}
/**
 * Helper to wrap SteamClient invocations in performance metrics; reports how often they are called, when
 * callbacks are invoked, and how long callbacks take.  This also allows for callbacks to appear in devtools
 * performance tab, where they are usually mysteriously absent.
 */
function InstrumentSteamClientAPIPerformance() {
    let fnInstrumentClient = () => { };
    if (true) {
        const symWrapped = Symbol("ClientAPIWrapper");
        const fnWrapAPI = function WrapAPI(oInterface, strPath, strMethodName, fnMethod) {
            if (strMethodName == 'ExecutePromise' || oInterface[strMethodName][symWrapped])
                return;
            const fullName = `${strPath}.${strMethodName}`;
            let nMethodCallCount = 0;
            oInterface[strMethodName] = (...args) => {
                if (typeof args[0] === "function") {
                    // looks like a callback
                    const fnCallback = args[0];
                    const strFuncName = fnCallback.name;
                    const nCallbackRegistration = nMethodCallCount; // give each caller a unique number
                    let nCallbackCount = 0;
                    args[0] = (...argsCallback) => {
                        // delaying the callback by a frame allows it to show in devtools performance section
                        // otherwise devtools seems to miss profiling these.
                        window.setTimeout(() => {
                            const start = performance.now();
                            fnCallback.apply(window, argsCallback);
                            console.log(`SteamClient invoked callback ${strFuncName} ( ${strMethodName}${nMethodCallCount > 1 ? `-${nCallbackRegistration}` : ''} ) #${nCallbackCount++} took ${performance.now() - start}ms`);
                        }, 1);
                    };
                }
                console.log(`SteamClient call: ${fullName} #${nMethodCallCount++}`);
                return fnMethod.apply(oInterface, args);
            };
            oInterface[strMethodName][symWrapped] = true;
        };
        fnInstrumentClient = function InstrumentSteamClientAPI(strPath, oInterface) {
            for (const strMethodName in oInterface) {
                if (typeof oInterface[strMethodName] === "object") {
                    fnInstrumentClient(`${strPath}.${strMethodName}`, oInterface[strMethodName]);
                }
                else {
                    fnWrapAPI(oInterface, strPath, strMethodName, oInterface[strMethodName]);
                }
            }
        };
    }
    fnInstrumentClient("SteamClient", SteamClient);
}


/***/ }),

/***/ "../../../web_src/shared/js/steammessages/steammessages_controllerconfiguration_enums_pb.ts":
/*!**************************************************************************************************!*\
  !*** ../../../web_src/shared/js/steammessages/steammessages_controllerconfiguration_enums_pb.ts ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ECceResult": () => (/* binding */ ECceResult),
/* harmony export */   "ECceResultToString": () => (/* binding */ ECceResultToString),
/* harmony export */   "EControllerAction": () => (/* binding */ EControllerAction),
/* harmony export */   "EControllerActionToString": () => (/* binding */ EControllerActionToString),
/* harmony export */   "EControllerActivationType": () => (/* binding */ EControllerActivationType),
/* harmony export */   "EControllerActivationTypeToString": () => (/* binding */ EControllerActivationTypeToString),
/* harmony export */   "EControllerDigitalIO": () => (/* binding */ EControllerDigitalIO),
/* harmony export */   "EControllerDigitalIOToString": () => (/* binding */ EControllerDigitalIOToString),
/* harmony export */   "EControllerLEDSettingType": () => (/* binding */ EControllerLEDSettingType),
/* harmony export */   "EControllerLEDSettingTypeToString": () => (/* binding */ EControllerLEDSettingTypeToString),
/* harmony export */   "EControllerModeInput": () => (/* binding */ EControllerModeInput),
/* harmony export */   "EControllerModeInputToString": () => (/* binding */ EControllerModeInputToString),
/* harmony export */   "EControllerPresetType": () => (/* binding */ EControllerPresetType),
/* harmony export */   "EControllerPresetTypeToString": () => (/* binding */ EControllerPresetTypeToString),
/* harmony export */   "EControllerSetting": () => (/* binding */ EControllerSetting),
/* harmony export */   "EControllerSettingToString": () => (/* binding */ EControllerSettingToString),
/* harmony export */   "EControllerSource": () => (/* binding */ EControllerSource),
/* harmony export */   "EControllerSourceMode": () => (/* binding */ EControllerSourceMode),
/* harmony export */   "EControllerSourceModeToString": () => (/* binding */ EControllerSourceModeToString),
/* harmony export */   "EControllerSourceToString": () => (/* binding */ EControllerSourceToString),
/* harmony export */   "EDeviceSupportFlowState": () => (/* binding */ EDeviceSupportFlowState),
/* harmony export */   "EDeviceSupportFlowStateToString": () => (/* binding */ EDeviceSupportFlowStateToString),
/* harmony export */   "EDeviceSupportTestingStep": () => (/* binding */ EDeviceSupportTestingStep),
/* harmony export */   "EDeviceSupportTestingStepToString": () => (/* binding */ EDeviceSupportTestingStepToString),
/* harmony export */   "EFlickStickSnapAngles": () => (/* binding */ EFlickStickSnapAngles),
/* harmony export */   "EFlickStickSnapAnglesToString": () => (/* binding */ EFlickStickSnapAnglesToString),
/* harmony export */   "EGameActionBindingType": () => (/* binding */ EGameActionBindingType),
/* harmony export */   "EGameActionBindingTypeToString": () => (/* binding */ EGameActionBindingTypeToString),
/* harmony export */   "EGamepadButton": () => (/* binding */ EGamepadButton),
/* harmony export */   "EGamepadButtonToString": () => (/* binding */ EGamepadButtonToString),
/* harmony export */   "EHIDKeyboardKey": () => (/* binding */ EHIDKeyboardKey),
/* harmony export */   "EHIDKeyboardKeyToString": () => (/* binding */ EHIDKeyboardKeyToString),
/* harmony export */   "EMouseControl": () => (/* binding */ EMouseControl),
/* harmony export */   "EMouseControlToString": () => (/* binding */ EMouseControlToString)
/* harmony export */ });
/* harmony import */ var google_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-protobuf */ "./node_modules/google-protobuf/google-protobuf.js");
/* harmony import */ var google_protobuf__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(google_protobuf__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_common_protohelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/common/protohelpers */ "../../../web_src/shared/js/common/protohelpers.ts");
/* tslint:disable */
// GENERATED FILE - generated from steammessages_controllerconfiguration_enums.proto


const jspb_Message = google_protobuf__WEBPACK_IMPORTED_MODULE_0__.Message; // for better minification
var ECceResult;
(function (ECceResult) {
    ECceResult[ECceResult["k_ECceResult_Ok"] = 1] = "k_ECceResult_Ok";
    ECceResult[ECceResult["k_ECceResult_Fail"] = 2] = "k_ECceResult_Fail";
    ECceResult[ECceResult["k_ECceResult_NotImplemented"] = 12000] = "k_ECceResult_NotImplemented";
    ECceResult[ECceResult["k_ECceResult_InvalidArgument"] = 12001] = "k_ECceResult_InvalidArgument";
    ECceResult[ECceResult["k_ECceResult_NoEditingConfiguration"] = 12002] = "k_ECceResult_NoEditingConfiguration";
    ECceResult[ECceResult["k_ECceResult_InvalidPath"] = 12100] = "k_ECceResult_InvalidPath";
    ECceResult[ECceResult["k_ECceResult_InvalidPathActionSetKey"] = 12101] = "k_ECceResult_InvalidPathActionSetKey";
    ECceResult[ECceResult["k_ECceResult_InvalidPathBaseActionSetKey"] = 12102] = "k_ECceResult_InvalidPathBaseActionSetKey";
    ECceResult[ECceResult["k_ECceResult_InvalidPathLayerActionSetKey"] = 12103] = "k_ECceResult_InvalidPathLayerActionSetKey";
    ECceResult[ECceResult["k_ECceResult_InvalidPathSourceKey"] = 12104] = "k_ECceResult_InvalidPathSourceKey";
    ECceResult[ECceResult["k_ECceResult_InvalidPathInputKey"] = 12105] = "k_ECceResult_InvalidPathInputKey";
    ECceResult[ECceResult["k_ECceResult_InvalidPathActivatorIndex"] = 12106] = "k_ECceResult_InvalidPathActivatorIndex";
    ECceResult[ECceResult["k_ECceResult_InvalidPathBindingIndex"] = 12107] = "k_ECceResult_InvalidPathBindingIndex";
    ECceResult[ECceResult["k_ECceResult_InvalidValueSourceMode"] = 12150] = "k_ECceResult_InvalidValueSourceMode";
    ECceResult[ECceResult["k_ECceResult_InvalidValueSourceModeSettingKey"] = 12151] = "k_ECceResult_InvalidValueSourceModeSettingKey";
    ECceResult[ECceResult["k_ECceResult_InvalidValueSourceModeSettingValue"] = 12152] = "k_ECceResult_InvalidValueSourceModeSettingValue";
    ECceResult[ECceResult["k_ECceResult_InvalidValueActivator"] = 12160] = "k_ECceResult_InvalidValueActivator";
    ECceResult[ECceResult["k_ECceResult_InvalidValueActivatorActivation"] = 12161] = "k_ECceResult_InvalidValueActivatorActivation";
    ECceResult[ECceResult["k_ECceResult_InvalidValueActivatorSettingKey"] = 12162] = "k_ECceResult_InvalidValueActivatorSettingKey";
    ECceResult[ECceResult["k_ECceResult_InvalidValueActivatorSettingValue"] = 12163] = "k_ECceResult_InvalidValueActivatorSettingValue";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBinding"] = 12200] = "k_ECceResult_InvalidValueBinding";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingKeyboardKey"] = 12201] = "k_ECceResult_InvalidValueBindingKeyboardKey";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingMouseButton"] = 12202] = "k_ECceResult_InvalidValueBindingMouseButton";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingGamepadButton"] = 12203] = "k_ECceResult_InvalidValueBindingGamepadButton";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingMouseWheel"] = 12204] = "k_ECceResult_InvalidValueBindingMouseWheel";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingGameAction"] = 12205] = "k_ECceResult_InvalidValueBindingGameAction";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingGameActionSetKey"] = 12206] = "k_ECceResult_InvalidValueBindingGameActionSetKey";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingGameActionKey"] = 12207] = "k_ECceResult_InvalidValueBindingGameActionKey";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingModeShift"] = 12208] = "k_ECceResult_InvalidValueBindingModeShift";
    ECceResult[ECceResult["k_ECceResult_InvalidValueBindingControllerAction"] = 12209] = "k_ECceResult_InvalidValueBindingControllerAction";
    ECceResult[ECceResult["k_ECceResult_InvalidValueActionSetName"] = 12250] = "k_ECceResult_InvalidValueActionSetName";
})(ECceResult || (ECceResult = {}));
;
function ECceResultToString(eCceResult) {
    if (true) {
        switch (eCceResult) {
            case 1:
                return 'k_ECceResult_Ok';
            case 2:
                return 'k_ECceResult_Fail';
            case 12000:
                return 'k_ECceResult_NotImplemented';
            case 12001:
                return 'k_ECceResult_InvalidArgument';
            case 12002:
                return 'k_ECceResult_NoEditingConfiguration';
            case 12100:
                return 'k_ECceResult_InvalidPath';
            case 12101:
                return 'k_ECceResult_InvalidPathActionSetKey';
            case 12102:
                return 'k_ECceResult_InvalidPathBaseActionSetKey';
            case 12103:
                return 'k_ECceResult_InvalidPathLayerActionSetKey';
            case 12104:
                return 'k_ECceResult_InvalidPathSourceKey';
            case 12105:
                return 'k_ECceResult_InvalidPathInputKey';
            case 12106:
                return 'k_ECceResult_InvalidPathActivatorIndex';
            case 12107:
                return 'k_ECceResult_InvalidPathBindingIndex';
            case 12150:
                return 'k_ECceResult_InvalidValueSourceMode';
            case 12151:
                return 'k_ECceResult_InvalidValueSourceModeSettingKey';
            case 12152:
                return 'k_ECceResult_InvalidValueSourceModeSettingValue';
            case 12160:
                return 'k_ECceResult_InvalidValueActivator';
            case 12161:
                return 'k_ECceResult_InvalidValueActivatorActivation';
            case 12162:
                return 'k_ECceResult_InvalidValueActivatorSettingKey';
            case 12163:
                return 'k_ECceResult_InvalidValueActivatorSettingValue';
            case 12200:
                return 'k_ECceResult_InvalidValueBinding';
            case 12201:
                return 'k_ECceResult_InvalidValueBindingKeyboardKey';
            case 12202:
                return 'k_ECceResult_InvalidValueBindingMouseButton';
            case 12203:
                return 'k_ECceResult_InvalidValueBindingGamepadButton';
            case 12204:
                return 'k_ECceResult_InvalidValueBindingMouseWheel';
            case 12205:
                return 'k_ECceResult_InvalidValueBindingGameAction';
            case 12206:
                return 'k_ECceResult_InvalidValueBindingGameActionSetKey';
            case 12207:
                return 'k_ECceResult_InvalidValueBindingGameActionKey';
            case 12208:
                return 'k_ECceResult_InvalidValueBindingModeShift';
            case 12209:
                return 'k_ECceResult_InvalidValueBindingControllerAction';
            case 12250:
                return 'k_ECceResult_InvalidValueActionSetName';
        }
    }
    return 'unknown ECceResult ( ' + eCceResult + ' )';
}
var EGameActionBindingType;
(function (EGameActionBindingType) {
    EGameActionBindingType[EGameActionBindingType["k_EGameActionBindingType_StickPadGyro"] = 0] = "k_EGameActionBindingType_StickPadGyro";
    EGameActionBindingType[EGameActionBindingType["k_EGameActionBindingType_AnalogTrigger"] = 1] = "k_EGameActionBindingType_AnalogTrigger";
    EGameActionBindingType[EGameActionBindingType["k_EGameActionBindingType_Button"] = 2] = "k_EGameActionBindingType_Button";
    EGameActionBindingType[EGameActionBindingType["k_EGameActionBindingType_Count"] = 3] = "k_EGameActionBindingType_Count";
})(EGameActionBindingType || (EGameActionBindingType = {}));
;
function EGameActionBindingTypeToString(eGameActionBindingType) {
    if (true) {
        switch (eGameActionBindingType) {
            case 0:
                return 'k_EGameActionBindingType_StickPadGyro';
            case 1:
                return 'k_EGameActionBindingType_AnalogTrigger';
            case 2:
                return 'k_EGameActionBindingType_Button';
            case 3:
                return 'k_EGameActionBindingType_Count';
        }
    }
    return 'unknown EGameActionBindingType ( ' + eGameActionBindingType + ' )';
}
var EControllerSource;
(function (EControllerSource) {
    EControllerSource[EControllerSource["k_EControllerSource_None"] = 0] = "k_EControllerSource_None";
    EControllerSource[EControllerSource["k_EControllerSource_LeftTrackpad"] = 1] = "k_EControllerSource_LeftTrackpad";
    EControllerSource[EControllerSource["k_EControllerSource_RightTrackpad"] = 2] = "k_EControllerSource_RightTrackpad";
    EControllerSource[EControllerSource["k_EControllerSource_Joystick"] = 3] = "k_EControllerSource_Joystick";
    EControllerSource[EControllerSource["k_EControllerSource_ABXY"] = 4] = "k_EControllerSource_ABXY";
    EControllerSource[EControllerSource["k_EControllerSource_Switch"] = 5] = "k_EControllerSource_Switch";
    EControllerSource[EControllerSource["k_EControllerSource_LeftTrigger"] = 6] = "k_EControllerSource_LeftTrigger";
    EControllerSource[EControllerSource["k_EControllerSource_RightTrigger"] = 7] = "k_EControllerSource_RightTrigger";
    EControllerSource[EControllerSource["k_EControllerSource_LeftBumper"] = 8] = "k_EControllerSource_LeftBumper";
    EControllerSource[EControllerSource["k_EControllerSource_RightBumper"] = 9] = "k_EControllerSource_RightBumper";
    EControllerSource[EControllerSource["k_EControllerSource_Gyro"] = 10] = "k_EControllerSource_Gyro";
    EControllerSource[EControllerSource["k_EControllerSource_CenterTrackpad"] = 11] = "k_EControllerSource_CenterTrackpad";
    EControllerSource[EControllerSource["k_EControllerSource_RightJoystick"] = 12] = "k_EControllerSource_RightJoystick";
    EControllerSource[EControllerSource["k_EControllerSource_DPad"] = 13] = "k_EControllerSource_DPad";
    EControllerSource[EControllerSource["k_EControllerSource_Key"] = 14] = "k_EControllerSource_Key";
    EControllerSource[EControllerSource["k_EControllerSource_Mouse"] = 15] = "k_EControllerSource_Mouse";
    EControllerSource[EControllerSource["k_EControllerSource_LeftGyro"] = 16] = "k_EControllerSource_LeftGyro";
    EControllerSource[EControllerSource["k_EControllerSource_CapJoystickRight"] = 17] = "k_EControllerSource_CapJoystickRight";
    EControllerSource[EControllerSource["k_EControllerSource_CapJoystickLeft"] = 18] = "k_EControllerSource_CapJoystickLeft";
    EControllerSource[EControllerSource["k_EControllerSource_Count"] = 19] = "k_EControllerSource_Count";
})(EControllerSource || (EControllerSource = {}));
;
function EControllerSourceToString(eControllerSource) {
    if (true) {
        switch (eControllerSource) {
            case 0:
                return 'k_EControllerSource_None';
            case 1:
                return 'k_EControllerSource_LeftTrackpad';
            case 2:
                return 'k_EControllerSource_RightTrackpad';
            case 3:
                return 'k_EControllerSource_Joystick';
            case 4:
                return 'k_EControllerSource_ABXY';
            case 5:
                return 'k_EControllerSource_Switch';
            case 6:
                return 'k_EControllerSource_LeftTrigger';
            case 7:
                return 'k_EControllerSource_RightTrigger';
            case 8:
                return 'k_EControllerSource_LeftBumper';
            case 9:
                return 'k_EControllerSource_RightBumper';
            case 10:
                return 'k_EControllerSource_Gyro';
            case 11:
                return 'k_EControllerSource_CenterTrackpad';
            case 12:
                return 'k_EControllerSource_RightJoystick';
            case 13:
                return 'k_EControllerSource_DPad';
            case 14:
                return 'k_EControllerSource_Key';
            case 15:
                return 'k_EControllerSource_Mouse';
            case 16:
                return 'k_EControllerSource_LeftGyro';
            case 17:
                return 'k_EControllerSource_CapJoystickRight';
            case 18:
                return 'k_EControllerSource_CapJoystickLeft';
            case 19:
                return 'k_EControllerSource_Count';
        }
    }
    return 'unknown EControllerSource ( ' + eControllerSource + ' )';
}
var EControllerSourceMode;
(function (EControllerSourceMode) {
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_None"] = 0] = "k_EControllerSourceMode_None";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Dpad"] = 1] = "k_EControllerSourceMode_Dpad";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Buttons"] = 2] = "k_EControllerSourceMode_Buttons";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_FourButtons"] = 3] = "k_EControllerSourceMode_FourButtons";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_AbsoluteMouse"] = 4] = "k_EControllerSourceMode_AbsoluteMouse";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_RelativeMouse"] = 5] = "k_EControllerSourceMode_RelativeMouse";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_JoystickMove"] = 6] = "k_EControllerSourceMode_JoystickMove";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_JoystickMouse"] = 7] = "k_EControllerSourceMode_JoystickMouse";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_JoystickCamera"] = 8] = "k_EControllerSourceMode_JoystickCamera";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_ScrollWheel"] = 9] = "k_EControllerSourceMode_ScrollWheel";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Trigger"] = 10] = "k_EControllerSourceMode_Trigger";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_TouchMenu"] = 11] = "k_EControllerSourceMode_TouchMenu";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_MouseJoystick"] = 12] = "k_EControllerSourceMode_MouseJoystick";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_MouseRegion"] = 13] = "k_EControllerSourceMode_MouseRegion";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_RadialMenu"] = 14] = "k_EControllerSourceMode_RadialMenu";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_SingleButton"] = 15] = "k_EControllerSourceMode_SingleButton";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Switches"] = 16] = "k_EControllerSourceMode_Switches";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_FlickStick"] = 17] = "k_EControllerSourceMode_FlickStick";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_2DScrollwheel"] = 18] = "k_EControllerSourceMode_2DScrollwheel";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Hotbar"] = 19] = "k_EControllerSourceMode_Hotbar";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Disabled"] = 20] = "k_EControllerSourceMode_Disabled";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Reference"] = 21] = "k_EControllerSourceMode_Reference";
    EControllerSourceMode[EControllerSourceMode["k_EControllerSourceMode_Count"] = 22] = "k_EControllerSourceMode_Count";
})(EControllerSourceMode || (EControllerSourceMode = {}));
;
function EControllerSourceModeToString(eControllerSourceMode) {
    if (true) {
        switch (eControllerSourceMode) {
            case 0:
                return 'k_EControllerSourceMode_None';
            case 1:
                return 'k_EControllerSourceMode_Dpad';
            case 2:
                return 'k_EControllerSourceMode_Buttons';
            case 3:
                return 'k_EControllerSourceMode_FourButtons';
            case 4:
                return 'k_EControllerSourceMode_AbsoluteMouse';
            case 5:
                return 'k_EControllerSourceMode_RelativeMouse';
            case 6:
                return 'k_EControllerSourceMode_JoystickMove';
            case 7:
                return 'k_EControllerSourceMode_JoystickMouse';
            case 8:
                return 'k_EControllerSourceMode_JoystickCamera';
            case 9:
                return 'k_EControllerSourceMode_ScrollWheel';
            case 10:
                return 'k_EControllerSourceMode_Trigger';
            case 11:
                return 'k_EControllerSourceMode_TouchMenu';
            case 12:
                return 'k_EControllerSourceMode_MouseJoystick';
            case 13:
                return 'k_EControllerSourceMode_MouseRegion';
            case 14:
                return 'k_EControllerSourceMode_RadialMenu';
            case 15:
                return 'k_EControllerSourceMode_SingleButton';
            case 16:
                return 'k_EControllerSourceMode_Switches';
            case 17:
                return 'k_EControllerSourceMode_FlickStick';
            case 18:
                return 'k_EControllerSourceMode_2DScrollwheel';
            case 19:
                return 'k_EControllerSourceMode_Hotbar';
            case 20:
                return 'k_EControllerSourceMode_Disabled';
            case 21:
                return 'k_EControllerSourceMode_Reference';
            case 22:
                return 'k_EControllerSourceMode_Count';
        }
    }
    return 'unknown EControllerSourceMode ( ' + eControllerSourceMode + ' )';
}
var EControllerModeInput;
(function (EControllerModeInput) {
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_None"] = 0] = "k_EControllerModeInput_None";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_N"] = 1] = "k_EControllerModeInput_Dpad_N";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_NE"] = 2] = "k_EControllerModeInput_Dpad_NE";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_E"] = 3] = "k_EControllerModeInput_Dpad_E";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_SE"] = 4] = "k_EControllerModeInput_Dpad_SE";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_S"] = 5] = "k_EControllerModeInput_Dpad_S";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_SW"] = 6] = "k_EControllerModeInput_Dpad_SW";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_W"] = 7] = "k_EControllerModeInput_Dpad_W";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Dpad_NW"] = 8] = "k_EControllerModeInput_Dpad_NW";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Button_Y"] = 9] = "k_EControllerModeInput_Button_Y";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Button_B"] = 10] = "k_EControllerModeInput_Button_B";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Button_X"] = 11] = "k_EControllerModeInput_Button_X";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Button_A"] = 12] = "k_EControllerModeInput_Button_A";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Click"] = 13] = "k_EControllerModeInput_Click";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_DoubleTap"] = 14] = "k_EControllerModeInput_DoubleTap";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Edge"] = 15] = "k_EControllerModeInput_Edge";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Clockwise"] = 16] = "k_EControllerModeInput_Clockwise";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_CounterClockwise"] = 17] = "k_EControllerModeInput_CounterClockwise";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TriggerAnalog"] = 18] = "k_EControllerModeInput_TriggerAnalog";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List0"] = 19] = "k_EControllerModeInput_ScrollWheel_List0";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List1"] = 20] = "k_EControllerModeInput_ScrollWheel_List1";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List2"] = 21] = "k_EControllerModeInput_ScrollWheel_List2";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List3"] = 22] = "k_EControllerModeInput_ScrollWheel_List3";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List4"] = 23] = "k_EControllerModeInput_ScrollWheel_List4";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List5"] = 24] = "k_EControllerModeInput_ScrollWheel_List5";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List6"] = 25] = "k_EControllerModeInput_ScrollWheel_List6";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List7"] = 26] = "k_EControllerModeInput_ScrollWheel_List7";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List8"] = 27] = "k_EControllerModeInput_ScrollWheel_List8";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_ScrollWheel_List9"] = 28] = "k_EControllerModeInput_ScrollWheel_List9";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button0"] = 29] = "k_EControllerModeInput_TouchMenu_Button0";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button1"] = 30] = "k_EControllerModeInput_TouchMenu_Button1";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button2"] = 31] = "k_EControllerModeInput_TouchMenu_Button2";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button3"] = 32] = "k_EControllerModeInput_TouchMenu_Button3";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button4"] = 33] = "k_EControllerModeInput_TouchMenu_Button4";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button5"] = 34] = "k_EControllerModeInput_TouchMenu_Button5";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button6"] = 35] = "k_EControllerModeInput_TouchMenu_Button6";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button7"] = 36] = "k_EControllerModeInput_TouchMenu_Button7";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button8"] = 37] = "k_EControllerModeInput_TouchMenu_Button8";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button9"] = 38] = "k_EControllerModeInput_TouchMenu_Button9";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button10"] = 39] = "k_EControllerModeInput_TouchMenu_Button10";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button11"] = 40] = "k_EControllerModeInput_TouchMenu_Button11";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button12"] = 41] = "k_EControllerModeInput_TouchMenu_Button12";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button13"] = 42] = "k_EControllerModeInput_TouchMenu_Button13";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button14"] = 43] = "k_EControllerModeInput_TouchMenu_Button14";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button15"] = 44] = "k_EControllerModeInput_TouchMenu_Button15";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button16"] = 45] = "k_EControllerModeInput_TouchMenu_Button16";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button17"] = 46] = "k_EControllerModeInput_TouchMenu_Button17";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button18"] = 47] = "k_EControllerModeInput_TouchMenu_Button18";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button19"] = 48] = "k_EControllerModeInput_TouchMenu_Button19";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_TouchMenu_Button20"] = 49] = "k_EControllerModeInput_TouchMenu_Button20";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Touch"] = 50] = "k_EControllerModeInput_Touch";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Select"] = 51] = "k_EControllerModeInput_Switch_Select";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Start"] = 52] = "k_EControllerModeInput_Switch_Start";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftBumper"] = 53] = "k_EControllerModeInput_Switch_LeftBumper";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightBumper"] = 54] = "k_EControllerModeInput_Switch_RightBumper";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftGrip"] = 55] = "k_EControllerModeInput_Switch_LeftGrip";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightGrip"] = 56] = "k_EControllerModeInput_Switch_RightGrip";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftGrip_Upper"] = 57] = "k_EControllerModeInput_Switch_LeftGrip_Upper";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightGrip_Upper"] = 58] = "k_EControllerModeInput_Switch_RightGrip_Upper";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftTrackPadClick"] = 59] = "k_EControllerModeInput_Switch_LeftTrackPadClick";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightTrackPadClick"] = 60] = "k_EControllerModeInput_Switch_RightTrackPadClick";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftTrigger"] = 61] = "k_EControllerModeInput_Switch_LeftTrigger";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightTrigger"] = 62] = "k_EControllerModeInput_Switch_RightTrigger";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_LeftTriggerThreshold"] = 63] = "k_EControllerModeInput_Switch_LeftTriggerThreshold";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_RightTriggerThreshold"] = 64] = "k_EControllerModeInput_Switch_RightTriggerThreshold";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_JoystickClick"] = 65] = "k_EControllerModeInput_Switch_JoystickClick";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Steam"] = 66] = "k_EControllerModeInput_Switch_Steam";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_ActionSetAlwaysOn"] = 67] = "k_EControllerModeInput_Switch_ActionSetAlwaysOn";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_CaptureButton"] = 68] = "k_EControllerModeInput_Switch_CaptureButton";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro0"] = 69] = "k_EControllerModeInput_Switch_Macro0";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro1"] = 70] = "k_EControllerModeInput_Switch_Macro1";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro2"] = 71] = "k_EControllerModeInput_Switch_Macro2";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro3"] = 72] = "k_EControllerModeInput_Switch_Macro3";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro4"] = 73] = "k_EControllerModeInput_Switch_Macro4";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro5"] = 74] = "k_EControllerModeInput_Switch_Macro5";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro6"] = 75] = "k_EControllerModeInput_Switch_Macro6";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro7"] = 76] = "k_EControllerModeInput_Switch_Macro7";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro1Finger"] = 77] = "k_EControllerModeInput_Switch_Macro1Finger";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Switch_Macro2Finger"] = 78] = "k_EControllerModeInput_Switch_Macro2Finger";
    EControllerModeInput[EControllerModeInput["k_EControllerModeInput_Count"] = 79] = "k_EControllerModeInput_Count";
})(EControllerModeInput || (EControllerModeInput = {}));
;
function EControllerModeInputToString(eControllerModeInput) {
    if (true) {
        switch (eControllerModeInput) {
            case 0:
                return 'k_EControllerModeInput_None';
            case 1:
                return 'k_EControllerModeInput_Dpad_N';
            case 2:
                return 'k_EControllerModeInput_Dpad_NE';
            case 3:
                return 'k_EControllerModeInput_Dpad_E';
            case 4:
                return 'k_EControllerModeInput_Dpad_SE';
            case 5:
                return 'k_EControllerModeInput_Dpad_S';
            case 6:
                return 'k_EControllerModeInput_Dpad_SW';
            case 7:
                return 'k_EControllerModeInput_Dpad_W';
            case 8:
                return 'k_EControllerModeInput_Dpad_NW';
            case 9:
                return 'k_EControllerModeInput_Button_Y';
            case 10:
                return 'k_EControllerModeInput_Button_B';
            case 11:
                return 'k_EControllerModeInput_Button_X';
            case 12:
                return 'k_EControllerModeInput_Button_A';
            case 13:
                return 'k_EControllerModeInput_Click';
            case 14:
                return 'k_EControllerModeInput_DoubleTap';
            case 15:
                return 'k_EControllerModeInput_Edge';
            case 16:
                return 'k_EControllerModeInput_Clockwise';
            case 17:
                return 'k_EControllerModeInput_CounterClockwise';
            case 18:
                return 'k_EControllerModeInput_TriggerAnalog';
            case 19:
                return 'k_EControllerModeInput_ScrollWheel_List0';
            case 20:
                return 'k_EControllerModeInput_ScrollWheel_List1';
            case 21:
                return 'k_EControllerModeInput_ScrollWheel_List2';
            case 22:
                return 'k_EControllerModeInput_ScrollWheel_List3';
            case 23:
                return 'k_EControllerModeInput_ScrollWheel_List4';
            case 24:
                return 'k_EControllerModeInput_ScrollWheel_List5';
            case 25:
                return 'k_EControllerModeInput_ScrollWheel_List6';
            case 26:
                return 'k_EControllerModeInput_ScrollWheel_List7';
            case 27:
                return 'k_EControllerModeInput_ScrollWheel_List8';
            case 28:
                return 'k_EControllerModeInput_ScrollWheel_List9';
            case 29:
                return 'k_EControllerModeInput_TouchMenu_Button0';
            case 30:
                return 'k_EControllerModeInput_TouchMenu_Button1';
            case 31:
                return 'k_EControllerModeInput_TouchMenu_Button2';
            case 32:
                return 'k_EControllerModeInput_TouchMenu_Button3';
            case 33:
                return 'k_EControllerModeInput_TouchMenu_Button4';
            case 34:
                return 'k_EControllerModeInput_TouchMenu_Button5';
            case 35:
                return 'k_EControllerModeInput_TouchMenu_Button6';
            case 36:
                return 'k_EControllerModeInput_TouchMenu_Button7';
            case 37:
                return 'k_EControllerModeInput_TouchMenu_Button8';
            case 38:
                return 'k_EControllerModeInput_TouchMenu_Button9';
            case 39:
                return 'k_EControllerModeInput_TouchMenu_Button10';
            case 40:
                return 'k_EControllerModeInput_TouchMenu_Button11';
            case 41:
                return 'k_EControllerModeInput_TouchMenu_Button12';
            case 42:
                return 'k_EControllerModeInput_TouchMenu_Button13';
            case 43:
                return 'k_EControllerModeInput_TouchMenu_Button14';
            case 44:
                return 'k_EControllerModeInput_TouchMenu_Button15';
            case 45:
                return 'k_EControllerModeInput_TouchMenu_Button16';
            case 46:
                return 'k_EControllerModeInput_TouchMenu_Button17';
            case 47:
                return 'k_EControllerModeInput_TouchMenu_Button18';
            case 48:
                return 'k_EControllerModeInput_TouchMenu_Button19';
            case 49:
                return 'k_EControllerModeInput_TouchMenu_Button20';
            case 50:
                return 'k_EControllerModeInput_Touch';
            case 51:
                return 'k_EControllerModeInput_Switch_Select';
            case 52:
                return 'k_EControllerModeInput_Switch_Start';
            case 53:
                return 'k_EControllerModeInput_Switch_LeftBumper';
            case 54:
                return 'k_EControllerModeInput_Switch_RightBumper';
            case 55:
                return 'k_EControllerModeInput_Switch_LeftGrip';
            case 56:
                return 'k_EControllerModeInput_Switch_RightGrip';
            case 57:
                return 'k_EControllerModeInput_Switch_LeftGrip_Upper';
            case 58:
                return 'k_EControllerModeInput_Switch_RightGrip_Upper';
            case 59:
                return 'k_EControllerModeInput_Switch_LeftTrackPadClick';
            case 60:
                return 'k_EControllerModeInput_Switch_RightTrackPadClick';
            case 61:
                return 'k_EControllerModeInput_Switch_LeftTrigger';
            case 62:
                return 'k_EControllerModeInput_Switch_RightTrigger';
            case 63:
                return 'k_EControllerModeInput_Switch_LeftTriggerThreshold';
            case 64:
                return 'k_EControllerModeInput_Switch_RightTriggerThreshold';
            case 65:
                return 'k_EControllerModeInput_Switch_JoystickClick';
            case 66:
                return 'k_EControllerModeInput_Switch_Steam';
            case 67:
                return 'k_EControllerModeInput_Switch_ActionSetAlwaysOn';
            case 68:
                return 'k_EControllerModeInput_Switch_CaptureButton';
            case 69:
                return 'k_EControllerModeInput_Switch_Macro0';
            case 70:
                return 'k_EControllerModeInput_Switch_Macro1';
            case 71:
                return 'k_EControllerModeInput_Switch_Macro2';
            case 72:
                return 'k_EControllerModeInput_Switch_Macro3';
            case 73:
                return 'k_EControllerModeInput_Switch_Macro4';
            case 74:
                return 'k_EControllerModeInput_Switch_Macro5';
            case 75:
                return 'k_EControllerModeInput_Switch_Macro6';
            case 76:
                return 'k_EControllerModeInput_Switch_Macro7';
            case 77:
                return 'k_EControllerModeInput_Switch_Macro1Finger';
            case 78:
                return 'k_EControllerModeInput_Switch_Macro2Finger';
            case 79:
                return 'k_EControllerModeInput_Count';
        }
    }
    return 'unknown EControllerModeInput ( ' + eControllerModeInput + ' )';
}
var EControllerActivationType;
(function (EControllerActivationType) {
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_None"] = 0] = "k_EControllerActivationType_None";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_FullPress"] = 1] = "k_EControllerActivationType_FullPress";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_SoftPress"] = 2] = "k_EControllerActivationType_SoftPress";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_StartPress"] = 3] = "k_EControllerActivationType_StartPress";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_Release"] = 4] = "k_EControllerActivationType_Release";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_LongPress"] = 5] = "k_EControllerActivationType_LongPress";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_DoublePress"] = 6] = "k_EControllerActivationType_DoublePress";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_Analog"] = 7] = "k_EControllerActivationType_Analog";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_Chord"] = 8] = "k_EControllerActivationType_Chord";
    EControllerActivationType[EControllerActivationType["k_EControllerActivationType_Count"] = 9] = "k_EControllerActivationType_Count";
})(EControllerActivationType || (EControllerActivationType = {}));
;
function EControllerActivationTypeToString(eControllerActivationType) {
    if (true) {
        switch (eControllerActivationType) {
            case 0:
                return 'k_EControllerActivationType_None';
            case 1:
                return 'k_EControllerActivationType_FullPress';
            case 2:
                return 'k_EControllerActivationType_SoftPress';
            case 3:
                return 'k_EControllerActivationType_StartPress';
            case 4:
                return 'k_EControllerActivationType_Release';
            case 5:
                return 'k_EControllerActivationType_LongPress';
            case 6:
                return 'k_EControllerActivationType_DoublePress';
            case 7:
                return 'k_EControllerActivationType_Analog';
            case 8:
                return 'k_EControllerActivationType_Chord';
            case 9:
                return 'k_EControllerActivationType_Count';
        }
    }
    return 'unknown EControllerActivationType ( ' + eControllerActivationType + ' )';
}
var EControllerAction;
(function (EControllerAction) {
    EControllerAction[EControllerAction["k_EControllerAction_Change_Preset"] = 0] = "k_EControllerAction_Change_Preset";
    EControllerAction[EControllerAction["k_EControllerAction_Show_Keyboard"] = 1] = "k_EControllerAction_Show_Keyboard";
    EControllerAction[EControllerAction["k_EControllerAction_Screenshot"] = 2] = "k_EControllerAction_Screenshot";
    EControllerAction[EControllerAction["k_EControllerAction_Mouse_Position"] = 3] = "k_EControllerAction_Mouse_Position";
    EControllerAction[EControllerAction["k_EControllerAction_Toggle_Magnifier"] = 4] = "k_EControllerAction_Toggle_Magnifier";
    EControllerAction[EControllerAction["k_EControllerAction_Toggle_Rumble"] = 5] = "k_EControllerAction_Toggle_Rumble";
    EControllerAction[EControllerAction["k_EControllerAction_Toggle_Haptics"] = 6] = "k_EControllerAction_Toggle_Haptics";
    EControllerAction[EControllerAction["k_EControllerAction_Open_Configurator"] = 7] = "k_EControllerAction_Open_Configurator";
    EControllerAction[EControllerAction["k_EControllerAction_Open_QuickMenu"] = 8] = "k_EControllerAction_Open_QuickMenu";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_Next"] = 9] = "k_EControllerAction_SteamMusic_Next";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_Prev"] = 10] = "k_EControllerAction_SteamMusic_Prev";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_PlayPause"] = 11] = "k_EControllerAction_SteamMusic_PlayPause";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_VolUp"] = 12] = "k_EControllerAction_SteamMusic_VolUp";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_VolDown"] = 13] = "k_EControllerAction_SteamMusic_VolDown";
    EControllerAction[EControllerAction["k_EControllerAction_SteamMusic_VolMute"] = 14] = "k_EControllerAction_SteamMusic_VolMute";
    EControllerAction[EControllerAction["k_EControllerAction_Controller_PowerOff"] = 15] = "k_EControllerAction_Controller_PowerOff";
    EControllerAction[EControllerAction["k_EControllerAction_BigPicture_Minimize"] = 16] = "k_EControllerAction_BigPicture_Minimize";
    EControllerAction[EControllerAction["k_EControllerAction_BigPicture_Open"] = 17] = "k_EControllerAction_BigPicture_Open";
    EControllerAction[EControllerAction["k_EControllerAction_BigPicture_Quit"] = 18] = "k_EControllerAction_BigPicture_Quit";
    EControllerAction[EControllerAction["k_EControllerAction_Host_Suspend"] = 19] = "k_EControllerAction_Host_Suspend";
    EControllerAction[EControllerAction["k_EControllerAction_Host_PowerOff"] = 20] = "k_EControllerAction_Host_PowerOff";
    EControllerAction[EControllerAction["k_EControllerAction_Host_Restart"] = 21] = "k_EControllerAction_Host_Restart";
    EControllerAction[EControllerAction["k_EControllerAction_Toggle_Hud"] = 22] = "k_EControllerAction_Toggle_Hud";
    EControllerAction[EControllerAction["k_EControllerAction_Set_LED"] = 23] = "k_EControllerAction_Set_LED";
    EControllerAction[EControllerAction["k_EControllerAction_Force_Guide_Up"] = 24] = "k_EControllerAction_Force_Guide_Up";
    EControllerAction[EControllerAction["k_EControllerAction_Add_ActionSet_Layer"] = 25] = "k_EControllerAction_Add_ActionSet_Layer";
    EControllerAction[EControllerAction["k_EControllerAction_Remove_ActionSet_Layer"] = 26] = "k_EControllerAction_Remove_ActionSet_Layer";
    EControllerAction[EControllerAction["k_EControllerAction_Hold_ActionSet_Layer"] = 27] = "k_EControllerAction_Hold_ActionSet_Layer";
    EControllerAction[EControllerAction["k_EControllerAction_Toggle_Lizard_Mode"] = 28] = "k_EControllerAction_Toggle_Lizard_Mode";
    EControllerAction[EControllerAction["k_EControllerAction_Layer_Empty_Binding"] = 29] = "k_EControllerAction_Layer_Empty_Binding";
    EControllerAction[EControllerAction["k_EControllerAction_Quit_Application"] = 30] = "k_EControllerAction_Quit_Application";
    EControllerAction[EControllerAction["k_EControllerAction_Change_Player_Number"] = 31] = "k_EControllerAction_Change_Player_Number";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_Hover"] = 32] = "k_EControllerAction_Change_TouchscreenMode_Hover";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_RightClick"] = 33] = "k_EControllerAction_Change_TouchscreenMode_RightClick";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_LeftClick"] = 34] = "k_EControllerAction_Change_TouchscreenMode_LeftClick";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_MiddleClick"] = 35] = "k_EControllerAction_Change_TouchscreenMode_MiddleClick";
    EControllerAction[EControllerAction["k_EControllerAction_Mouse_Delta"] = 36] = "k_EControllerAction_Mouse_Delta";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_Native"] = 37] = "k_EControllerAction_Change_TouchscreenMode_Native";
    EControllerAction[EControllerAction["k_EControllerAction_Screen_Brightness_Up"] = 38] = "k_EControllerAction_Screen_Brightness_Up";
    EControllerAction[EControllerAction["k_EControllerAction_Screen_Brightness_Down"] = 39] = "k_EControllerAction_Screen_Brightness_Down";
    EControllerAction[EControllerAction["k_EControllerAction_Empty_Sub_Command"] = 40] = "k_EControllerAction_Empty_Sub_Command";
    EControllerAction[EControllerAction["k_EControllerAction_Change_TouchscreenMode_None"] = 41] = "k_EControllerAction_Change_TouchscreenMode_None";
    EControllerAction[EControllerAction["k_EControllerAction_System_Key_0"] = 42] = "k_EControllerAction_System_Key_0";
    EControllerAction[EControllerAction["k_EControllerAction_System_Key_1"] = 43] = "k_EControllerAction_System_Key_1";
    EControllerAction[EControllerAction["k_EControllerAction_Notify_ActionSet_Change"] = 44] = "k_EControllerAction_Notify_ActionSet_Change";
    EControllerAction[EControllerAction["k_EControllerAction_Notify_ActionSetLayer_Change"] = 45] = "k_EControllerAction_Notify_ActionSetLayer_Change";
    EControllerAction[EControllerAction["k_EControllerAction_Notify_Close_Touch_Menu"] = 46] = "k_EControllerAction_Notify_Close_Touch_Menu";
    EControllerAction[EControllerAction["k_EControllerAction_Chord_Hint_Display"] = 47] = "k_EControllerAction_Chord_Hint_Display";
    EControllerAction[EControllerAction["k_EControllerAction_Chord_Hint_Dismiss"] = 48] = "k_EControllerAction_Chord_Hint_Dismiss";
    EControllerAction[EControllerAction["k_EControllerAction_Notify_XInput_Slot_Change"] = 49] = "k_EControllerAction_Notify_XInput_Slot_Change";
    EControllerAction[EControllerAction["k_EControllerAction_Count"] = 50] = "k_EControllerAction_Count";
})(EControllerAction || (EControllerAction = {}));
;
function EControllerActionToString(eControllerAction) {
    if (true) {
        switch (eControllerAction) {
            case 0:
                return 'k_EControllerAction_Change_Preset';
            case 1:
                return 'k_EControllerAction_Show_Keyboard';
            case 2:
                return 'k_EControllerAction_Screenshot';
            case 3:
                return 'k_EControllerAction_Mouse_Position';
            case 4:
                return 'k_EControllerAction_Toggle_Magnifier';
            case 5:
                return 'k_EControllerAction_Toggle_Rumble';
            case 6:
                return 'k_EControllerAction_Toggle_Haptics';
            case 7:
                return 'k_EControllerAction_Open_Configurator';
            case 8:
                return 'k_EControllerAction_Open_QuickMenu';
            case 9:
                return 'k_EControllerAction_SteamMusic_Next';
            case 10:
                return 'k_EControllerAction_SteamMusic_Prev';
            case 11:
                return 'k_EControllerAction_SteamMusic_PlayPause';
            case 12:
                return 'k_EControllerAction_SteamMusic_VolUp';
            case 13:
                return 'k_EControllerAction_SteamMusic_VolDown';
            case 14:
                return 'k_EControllerAction_SteamMusic_VolMute';
            case 15:
                return 'k_EControllerAction_Controller_PowerOff';
            case 16:
                return 'k_EControllerAction_BigPicture_Minimize';
            case 17:
                return 'k_EControllerAction_BigPicture_Open';
            case 18:
                return 'k_EControllerAction_BigPicture_Quit';
            case 19:
                return 'k_EControllerAction_Host_Suspend';
            case 20:
                return 'k_EControllerAction_Host_PowerOff';
            case 21:
                return 'k_EControllerAction_Host_Restart';
            case 22:
                return 'k_EControllerAction_Toggle_Hud';
            case 23:
                return 'k_EControllerAction_Set_LED';
            case 24:
                return 'k_EControllerAction_Force_Guide_Up';
            case 25:
                return 'k_EControllerAction_Add_ActionSet_Layer';
            case 26:
                return 'k_EControllerAction_Remove_ActionSet_Layer';
            case 27:
                return 'k_EControllerAction_Hold_ActionSet_Layer';
            case 28:
                return 'k_EControllerAction_Toggle_Lizard_Mode';
            case 29:
                return 'k_EControllerAction_Layer_Empty_Binding';
            case 30:
                return 'k_EControllerAction_Quit_Application';
            case 31:
                return 'k_EControllerAction_Change_Player_Number';
            case 32:
                return 'k_EControllerAction_Change_TouchscreenMode_Hover';
            case 33:
                return 'k_EControllerAction_Change_TouchscreenMode_RightClick';
            case 34:
                return 'k_EControllerAction_Change_TouchscreenMode_LeftClick';
            case 35:
                return 'k_EControllerAction_Change_TouchscreenMode_MiddleClick';
            case 36:
                return 'k_EControllerAction_Mouse_Delta';
            case 37:
                return 'k_EControllerAction_Change_TouchscreenMode_Native';
            case 38:
                return 'k_EControllerAction_Screen_Brightness_Up';
            case 39:
                return 'k_EControllerAction_Screen_Brightness_Down';
            case 40:
                return 'k_EControllerAction_Empty_Sub_Command';
            case 41:
                return 'k_EControllerAction_Change_TouchscreenMode_None';
            case 42:
                return 'k_EControllerAction_System_Key_0';
            case 43:
                return 'k_EControllerAction_System_Key_1';
            case 44:
                return 'k_EControllerAction_Notify_ActionSet_Change';
            case 45:
                return 'k_EControllerAction_Notify_ActionSetLayer_Change';
            case 46:
                return 'k_EControllerAction_Notify_Close_Touch_Menu';
            case 47:
                return 'k_EControllerAction_Chord_Hint_Display';
            case 48:
                return 'k_EControllerAction_Chord_Hint_Dismiss';
            case 49:
                return 'k_EControllerAction_Notify_XInput_Slot_Change';
            case 50:
                return 'k_EControllerAction_Count';
        }
    }
    return 'unknown EControllerAction ( ' + eControllerAction + ' )';
}
var EHIDKeyboardKey;
(function (EHIDKeyboardKey) {
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Invalid"] = 0] = "k_EHIDKeyboardKey_Invalid";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_BeforeFirst"] = 3] = "k_EHIDKeyboardKey_BeforeFirst";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_A"] = 4] = "k_EHIDKeyboardKey_A";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_B"] = 5] = "k_EHIDKeyboardKey_B";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_C"] = 6] = "k_EHIDKeyboardKey_C";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_D"] = 7] = "k_EHIDKeyboardKey_D";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_E"] = 8] = "k_EHIDKeyboardKey_E";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F"] = 9] = "k_EHIDKeyboardKey_F";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_G"] = 10] = "k_EHIDKeyboardKey_G";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_H"] = 11] = "k_EHIDKeyboardKey_H";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_I"] = 12] = "k_EHIDKeyboardKey_I";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_J"] = 13] = "k_EHIDKeyboardKey_J";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_K"] = 14] = "k_EHIDKeyboardKey_K";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_L"] = 15] = "k_EHIDKeyboardKey_L";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_M"] = 16] = "k_EHIDKeyboardKey_M";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_N"] = 17] = "k_EHIDKeyboardKey_N";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_O"] = 18] = "k_EHIDKeyboardKey_O";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_P"] = 19] = "k_EHIDKeyboardKey_P";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Q"] = 20] = "k_EHIDKeyboardKey_Q";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_R"] = 21] = "k_EHIDKeyboardKey_R";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_S"] = 22] = "k_EHIDKeyboardKey_S";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_T"] = 23] = "k_EHIDKeyboardKey_T";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_U"] = 24] = "k_EHIDKeyboardKey_U";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_V"] = 25] = "k_EHIDKeyboardKey_V";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_W"] = 26] = "k_EHIDKeyboardKey_W";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_X"] = 27] = "k_EHIDKeyboardKey_X";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Y"] = 28] = "k_EHIDKeyboardKey_Y";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Z"] = 29] = "k_EHIDKeyboardKey_Z";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_1"] = 30] = "k_EHIDKeyboardKey_1";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_2"] = 31] = "k_EHIDKeyboardKey_2";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_3"] = 32] = "k_EHIDKeyboardKey_3";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_4"] = 33] = "k_EHIDKeyboardKey_4";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_5"] = 34] = "k_EHIDKeyboardKey_5";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_6"] = 35] = "k_EHIDKeyboardKey_6";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_7"] = 36] = "k_EHIDKeyboardKey_7";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_8"] = 37] = "k_EHIDKeyboardKey_8";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_9"] = 38] = "k_EHIDKeyboardKey_9";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_0"] = 39] = "k_EHIDKeyboardKey_0";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Return"] = 40] = "k_EHIDKeyboardKey_Return";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Escape"] = 41] = "k_EHIDKeyboardKey_Escape";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Backspace"] = 42] = "k_EHIDKeyboardKey_Backspace";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Tab"] = 43] = "k_EHIDKeyboardKey_Tab";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Space"] = 44] = "k_EHIDKeyboardKey_Space";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Dash"] = 45] = "k_EHIDKeyboardKey_Dash";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Equals"] = 46] = "k_EHIDKeyboardKey_Equals";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Left_Bracket"] = 47] = "k_EHIDKeyboardKey_Left_Bracket";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Right_Bracket"] = 48] = "k_EHIDKeyboardKey_Right_Bracket";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Backslash"] = 49] = "k_EHIDKeyboardKey_Backslash";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Unused1"] = 50] = "k_EHIDKeyboardKey_Unused1";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Semicolon"] = 51] = "k_EHIDKeyboardKey_Semicolon";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Single_Quote"] = 52] = "k_EHIDKeyboardKey_Single_Quote";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Back_Tick"] = 53] = "k_EHIDKeyboardKey_Back_Tick";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Comma"] = 54] = "k_EHIDKeyboardKey_Comma";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Period"] = 55] = "k_EHIDKeyboardKey_Period";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Forward_Slash"] = 56] = "k_EHIDKeyboardKey_Forward_Slash";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_CapsLock"] = 57] = "k_EHIDKeyboardKey_CapsLock";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F1"] = 58] = "k_EHIDKeyboardKey_F1";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F2"] = 59] = "k_EHIDKeyboardKey_F2";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F3"] = 60] = "k_EHIDKeyboardKey_F3";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F4"] = 61] = "k_EHIDKeyboardKey_F4";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F5"] = 62] = "k_EHIDKeyboardKey_F5";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F6"] = 63] = "k_EHIDKeyboardKey_F6";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F7"] = 64] = "k_EHIDKeyboardKey_F7";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F8"] = 65] = "k_EHIDKeyboardKey_F8";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F9"] = 66] = "k_EHIDKeyboardKey_F9";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F10"] = 67] = "k_EHIDKeyboardKey_F10";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F11"] = 68] = "k_EHIDKeyboardKey_F11";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_F12"] = 69] = "k_EHIDKeyboardKey_F12";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Print_Screen"] = 70] = "k_EHIDKeyboardKey_Print_Screen";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Scroll_Lock"] = 71] = "k_EHIDKeyboardKey_Scroll_Lock";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Break"] = 72] = "k_EHIDKeyboardKey_Break";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Insert"] = 73] = "k_EHIDKeyboardKey_Insert";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Home"] = 74] = "k_EHIDKeyboardKey_Home";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Page_Up"] = 75] = "k_EHIDKeyboardKey_Page_Up";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Delete"] = 76] = "k_EHIDKeyboardKey_Delete";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_End"] = 77] = "k_EHIDKeyboardKey_End";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Page_Down"] = 78] = "k_EHIDKeyboardKey_Page_Down";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Right_Arrow"] = 79] = "k_EHIDKeyboardKey_Right_Arrow";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Left_Arrow"] = 80] = "k_EHIDKeyboardKey_Left_Arrow";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Down_Arrow"] = 81] = "k_EHIDKeyboardKey_Down_Arrow";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Up_Arrow"] = 82] = "k_EHIDKeyboardKey_Up_Arrow";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Num_Lock"] = 83] = "k_EHIDKeyboardKey_Num_Lock";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Forward_Slash"] = 84] = "k_EHIDKeyboardKey_Keypad_Forward_Slash";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Asterisk"] = 85] = "k_EHIDKeyboardKey_Keypad_Asterisk";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Dash"] = 86] = "k_EHIDKeyboardKey_Keypad_Dash";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Plus"] = 87] = "k_EHIDKeyboardKey_Keypad_Plus";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Enter"] = 88] = "k_EHIDKeyboardKey_Keypad_Enter";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_1"] = 89] = "k_EHIDKeyboardKey_Keypad_1";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_2"] = 90] = "k_EHIDKeyboardKey_Keypad_2";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_3"] = 91] = "k_EHIDKeyboardKey_Keypad_3";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_4"] = 92] = "k_EHIDKeyboardKey_Keypad_4";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_5"] = 93] = "k_EHIDKeyboardKey_Keypad_5";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_6"] = 94] = "k_EHIDKeyboardKey_Keypad_6";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_7"] = 95] = "k_EHIDKeyboardKey_Keypad_7";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_8"] = 96] = "k_EHIDKeyboardKey_Keypad_8";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_9"] = 97] = "k_EHIDKeyboardKey_Keypad_9";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_0"] = 98] = "k_EHIDKeyboardKey_Keypad_0";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Keypad_Period"] = 99] = "k_EHIDKeyboardKey_Keypad_Period";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_LAlt"] = 100] = "k_EHIDKeyboardKey_LAlt";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_LShift"] = 101] = "k_EHIDKeyboardKey_LShift";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_LWin"] = 102] = "k_EHIDKeyboardKey_LWin";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_LControl"] = 103] = "k_EHIDKeyboardKey_LControl";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_RAlt"] = 104] = "k_EHIDKeyboardKey_RAlt";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_RShift"] = 105] = "k_EHIDKeyboardKey_RShift";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_RWin"] = 106] = "k_EHIDKeyboardKey_RWin";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_RControl"] = 107] = "k_EHIDKeyboardKey_RControl";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_VolUp"] = 108] = "k_EHIDKeyboardKey_VolUp";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_VolDown"] = 109] = "k_EHIDKeyboardKey_VolDown";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Mute"] = 110] = "k_EHIDKeyboardKey_Mute";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Play"] = 111] = "k_EHIDKeyboardKey_Play";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Stop"] = 112] = "k_EHIDKeyboardKey_Stop";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Next"] = 113] = "k_EHIDKeyboardKey_Next";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_Prev"] = 114] = "k_EHIDKeyboardKey_Prev";
    EHIDKeyboardKey[EHIDKeyboardKey["k_EHIDKeyboardKey_AfterLast"] = 115] = "k_EHIDKeyboardKey_AfterLast";
})(EHIDKeyboardKey || (EHIDKeyboardKey = {}));
;
function EHIDKeyboardKeyToString(eHIDKeyboardKey) {
    if (true) {
        switch (eHIDKeyboardKey) {
            case 0:
                return 'k_EHIDKeyboardKey_Invalid';
            case 3:
                return 'k_EHIDKeyboardKey_BeforeFirst';
            case 4:
                return 'k_EHIDKeyboardKey_A';
            case 5:
                return 'k_EHIDKeyboardKey_B';
            case 6:
                return 'k_EHIDKeyboardKey_C';
            case 7:
                return 'k_EHIDKeyboardKey_D';
            case 8:
                return 'k_EHIDKeyboardKey_E';
            case 9:
                return 'k_EHIDKeyboardKey_F';
            case 10:
                return 'k_EHIDKeyboardKey_G';
            case 11:
                return 'k_EHIDKeyboardKey_H';
            case 12:
                return 'k_EHIDKeyboardKey_I';
            case 13:
                return 'k_EHIDKeyboardKey_J';
            case 14:
                return 'k_EHIDKeyboardKey_K';
            case 15:
                return 'k_EHIDKeyboardKey_L';
            case 16:
                return 'k_EHIDKeyboardKey_M';
            case 17:
                return 'k_EHIDKeyboardKey_N';
            case 18:
                return 'k_EHIDKeyboardKey_O';
            case 19:
                return 'k_EHIDKeyboardKey_P';
            case 20:
                return 'k_EHIDKeyboardKey_Q';
            case 21:
                return 'k_EHIDKeyboardKey_R';
            case 22:
                return 'k_EHIDKeyboardKey_S';
            case 23:
                return 'k_EHIDKeyboardKey_T';
            case 24:
                return 'k_EHIDKeyboardKey_U';
            case 25:
                return 'k_EHIDKeyboardKey_V';
            case 26:
                return 'k_EHIDKeyboardKey_W';
            case 27:
                return 'k_EHIDKeyboardKey_X';
            case 28:
                return 'k_EHIDKeyboardKey_Y';
            case 29:
                return 'k_EHIDKeyboardKey_Z';
            case 30:
                return 'k_EHIDKeyboardKey_1';
            case 31:
                return 'k_EHIDKeyboardKey_2';
            case 32:
                return 'k_EHIDKeyboardKey_3';
            case 33:
                return 'k_EHIDKeyboardKey_4';
            case 34:
                return 'k_EHIDKeyboardKey_5';
            case 35:
                return 'k_EHIDKeyboardKey_6';
            case 36:
                return 'k_EHIDKeyboardKey_7';
            case 37:
                return 'k_EHIDKeyboardKey_8';
            case 38:
                return 'k_EHIDKeyboardKey_9';
            case 39:
                return 'k_EHIDKeyboardKey_0';
            case 40:
                return 'k_EHIDKeyboardKey_Return';
            case 41:
                return 'k_EHIDKeyboardKey_Escape';
            case 42:
                return 'k_EHIDKeyboardKey_Backspace';
            case 43:
                return 'k_EHIDKeyboardKey_Tab';
            case 44:
                return 'k_EHIDKeyboardKey_Space';
            case 45:
                return 'k_EHIDKeyboardKey_Dash';
            case 46:
                return 'k_EHIDKeyboardKey_Equals';
            case 47:
                return 'k_EHIDKeyboardKey_Left_Bracket';
            case 48:
                return 'k_EHIDKeyboardKey_Right_Bracket';
            case 49:
                return 'k_EHIDKeyboardKey_Backslash';
            case 50:
                return 'k_EHIDKeyboardKey_Unused1';
            case 51:
                return 'k_EHIDKeyboardKey_Semicolon';
            case 52:
                return 'k_EHIDKeyboardKey_Single_Quote';
            case 53:
                return 'k_EHIDKeyboardKey_Back_Tick';
            case 54:
                return 'k_EHIDKeyboardKey_Comma';
            case 55:
                return 'k_EHIDKeyboardKey_Period';
            case 56:
                return 'k_EHIDKeyboardKey_Forward_Slash';
            case 57:
                return 'k_EHIDKeyboardKey_CapsLock';
            case 58:
                return 'k_EHIDKeyboardKey_F1';
            case 59:
                return 'k_EHIDKeyboardKey_F2';
            case 60:
                return 'k_EHIDKeyboardKey_F3';
            case 61:
                return 'k_EHIDKeyboardKey_F4';
            case 62:
                return 'k_EHIDKeyboardKey_F5';
            case 63:
                return 'k_EHIDKeyboardKey_F6';
            case 64:
                return 'k_EHIDKeyboardKey_F7';
            case 65:
                return 'k_EHIDKeyboardKey_F8';
            case 66:
                return 'k_EHIDKeyboardKey_F9';
            case 67:
                return 'k_EHIDKeyboardKey_F10';
            case 68:
                return 'k_EHIDKeyboardKey_F11';
            case 69:
                return 'k_EHIDKeyboardKey_F12';
            case 70:
                return 'k_EHIDKeyboardKey_Print_Screen';
            case 71:
                return 'k_EHIDKeyboardKey_Scroll_Lock';
            case 72:
                return 'k_EHIDKeyboardKey_Break';
            case 73:
                return 'k_EHIDKeyboardKey_Insert';
            case 74:
                return 'k_EHIDKeyboardKey_Home';
            case 75:
                return 'k_EHIDKeyboardKey_Page_Up';
            case 76:
                return 'k_EHIDKeyboardKey_Delete';
            case 77:
                return 'k_EHIDKeyboardKey_End';
            case 78:
                return 'k_EHIDKeyboardKey_Page_Down';
            case 79:
                return 'k_EHIDKeyboardKey_Right_Arrow';
            case 80:
                return 'k_EHIDKeyboardKey_Left_Arrow';
            case 81:
                return 'k_EHIDKeyboardKey_Down_Arrow';
            case 82:
                return 'k_EHIDKeyboardKey_Up_Arrow';
            case 83:
                return 'k_EHIDKeyboardKey_Num_Lock';
            case 84:
                return 'k_EHIDKeyboardKey_Keypad_Forward_Slash';
            case 85:
                return 'k_EHIDKeyboardKey_Keypad_Asterisk';
            case 86:
                return 'k_EHIDKeyboardKey_Keypad_Dash';
            case 87:
                return 'k_EHIDKeyboardKey_Keypad_Plus';
            case 88:
                return 'k_EHIDKeyboardKey_Keypad_Enter';
            case 89:
                return 'k_EHIDKeyboardKey_Keypad_1';
            case 90:
                return 'k_EHIDKeyboardKey_Keypad_2';
            case 91:
                return 'k_EHIDKeyboardKey_Keypad_3';
            case 92:
                return 'k_EHIDKeyboardKey_Keypad_4';
            case 93:
                return 'k_EHIDKeyboardKey_Keypad_5';
            case 94:
                return 'k_EHIDKeyboardKey_Keypad_6';
            case 95:
                return 'k_EHIDKeyboardKey_Keypad_7';
            case 96:
                return 'k_EHIDKeyboardKey_Keypad_8';
            case 97:
                return 'k_EHIDKeyboardKey_Keypad_9';
            case 98:
                return 'k_EHIDKeyboardKey_Keypad_0';
            case 99:
                return 'k_EHIDKeyboardKey_Keypad_Period';
            case 100:
                return 'k_EHIDKeyboardKey_LAlt';
            case 101:
                return 'k_EHIDKeyboardKey_LShift';
            case 102:
                return 'k_EHIDKeyboardKey_LWin';
            case 103:
                return 'k_EHIDKeyboardKey_LControl';
            case 104:
                return 'k_EHIDKeyboardKey_RAlt';
            case 105:
                return 'k_EHIDKeyboardKey_RShift';
            case 106:
                return 'k_EHIDKeyboardKey_RWin';
            case 107:
                return 'k_EHIDKeyboardKey_RControl';
            case 108:
                return 'k_EHIDKeyboardKey_VolUp';
            case 109:
                return 'k_EHIDKeyboardKey_VolDown';
            case 110:
                return 'k_EHIDKeyboardKey_Mute';
            case 111:
                return 'k_EHIDKeyboardKey_Play';
            case 112:
                return 'k_EHIDKeyboardKey_Stop';
            case 113:
                return 'k_EHIDKeyboardKey_Next';
            case 114:
                return 'k_EHIDKeyboardKey_Prev';
            case 115:
                return 'k_EHIDKeyboardKey_AfterLast';
        }
    }
    return 'unknown EHIDKeyboardKey ( ' + eHIDKeyboardKey + ' )';
}
var EMouseControl;
(function (EMouseControl) {
    EMouseControl[EMouseControl["k_EMouseControl_Button_Left"] = 0] = "k_EMouseControl_Button_Left";
    EMouseControl[EMouseControl["k_EMouseControl_Button_Right"] = 1] = "k_EMouseControl_Button_Right";
    EMouseControl[EMouseControl["k_EMouseControl_Button_Middle"] = 2] = "k_EMouseControl_Button_Middle";
    EMouseControl[EMouseControl["k_EMouseControl_Button_Back"] = 3] = "k_EMouseControl_Button_Back";
    EMouseControl[EMouseControl["k_EMouseControl_Button_Forward"] = 4] = "k_EMouseControl_Button_Forward";
    EMouseControl[EMouseControl["k_EMouseControl_Scroll_Up"] = 5] = "k_EMouseControl_Scroll_Up";
    EMouseControl[EMouseControl["k_EMouseControl_Scroll_Down"] = 6] = "k_EMouseControl_Scroll_Down";
    EMouseControl[EMouseControl["k_EMouseControl_Count"] = 7] = "k_EMouseControl_Count";
})(EMouseControl || (EMouseControl = {}));
;
function EMouseControlToString(eMouseControl) {
    if (true) {
        switch (eMouseControl) {
            case 0:
                return 'k_EMouseControl_Button_Left';
            case 1:
                return 'k_EMouseControl_Button_Right';
            case 2:
                return 'k_EMouseControl_Button_Middle';
            case 3:
                return 'k_EMouseControl_Button_Back';
            case 4:
                return 'k_EMouseControl_Button_Forward';
            case 5:
                return 'k_EMouseControl_Scroll_Up';
            case 6:
                return 'k_EMouseControl_Scroll_Down';
            case 7:
                return 'k_EMouseControl_Count';
        }
    }
    return 'unknown EMouseControl ( ' + eMouseControl + ' )';
}
var EGamepadButton;
(function (EGamepadButton) {
    EGamepadButton[EGamepadButton["k_EGamepadButton_BeforeFirst"] = 0] = "k_EGamepadButton_BeforeFirst";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Trigger_Left"] = 1] = "k_EGamepadButton_Trigger_Left";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Trigger_Right"] = 2] = "k_EGamepadButton_Trigger_Right";
    EGamepadButton[EGamepadButton["k_EGamepadButton_A"] = 3] = "k_EGamepadButton_A";
    EGamepadButton[EGamepadButton["k_EGamepadButton_B"] = 4] = "k_EGamepadButton_B";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Y"] = 5] = "k_EGamepadButton_Y";
    EGamepadButton[EGamepadButton["k_EGamepadButton_X"] = 6] = "k_EGamepadButton_X";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Shoulder_Left"] = 7] = "k_EGamepadButton_Shoulder_Left";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Shoulder_Right"] = 8] = "k_EGamepadButton_Shoulder_Right";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Left_Joystick"] = 9] = "k_EGamepadButton_Left_Joystick";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Right_Joystick"] = 10] = "k_EGamepadButton_Right_Joystick";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Start"] = 11] = "k_EGamepadButton_Start";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Select"] = 12] = "k_EGamepadButton_Select";
    EGamepadButton[EGamepadButton["k_EGamepadButton_Steam"] = 13] = "k_EGamepadButton_Steam";
    EGamepadButton[EGamepadButton["k_EGamepadButton_DPad_Up"] = 14] = "k_EGamepadButton_DPad_Up";
    EGamepadButton[EGamepadButton["k_EGamepadButton_DPad_Down"] = 15] = "k_EGamepadButton_DPad_Down";
    EGamepadButton[EGamepadButton["k_EGamepadButton_DPad_Left"] = 16] = "k_EGamepadButton_DPad_Left";
    EGamepadButton[EGamepadButton["k_EGamepadButton_DPad_Right"] = 17] = "k_EGamepadButton_DPad_Right";
    EGamepadButton[EGamepadButton["k_EGamepadButton_LStick_Up"] = 18] = "k_EGamepadButton_LStick_Up";
    EGamepadButton[EGamepadButton["k_EGamepadButton_LStick_Down"] = 19] = "k_EGamepadButton_LStick_Down";
    EGamepadButton[EGamepadButton["k_EGamepadButton_LStick_Left"] = 20] = "k_EGamepadButton_LStick_Left";
    EGamepadButton[EGamepadButton["k_EGamepadButton_LStick_Right"] = 21] = "k_EGamepadButton_LStick_Right";
    EGamepadButton[EGamepadButton["k_EGamepadButton_RStick_Up"] = 22] = "k_EGamepadButton_RStick_Up";
    EGamepadButton[EGamepadButton["k_EGamepadButton_RStick_Down"] = 23] = "k_EGamepadButton_RStick_Down";
    EGamepadButton[EGamepadButton["k_EGamepadButton_RStick_Left"] = 24] = "k_EGamepadButton_RStick_Left";
    EGamepadButton[EGamepadButton["k_EGamepadButton_RStick_Right"] = 25] = "k_EGamepadButton_RStick_Right";
    EGamepadButton[EGamepadButton["k_EGamepadButton_AfterLast"] = 26] = "k_EGamepadButton_AfterLast";
})(EGamepadButton || (EGamepadButton = {}));
;
function EGamepadButtonToString(eGamepadButton) {
    if (true) {
        switch (eGamepadButton) {
            case 0:
                return 'k_EGamepadButton_BeforeFirst';
            case 1:
                return 'k_EGamepadButton_Trigger_Left';
            case 2:
                return 'k_EGamepadButton_Trigger_Right';
            case 3:
                return 'k_EGamepadButton_A';
            case 4:
                return 'k_EGamepadButton_B';
            case 5:
                return 'k_EGamepadButton_Y';
            case 6:
                return 'k_EGamepadButton_X';
            case 7:
                return 'k_EGamepadButton_Shoulder_Left';
            case 8:
                return 'k_EGamepadButton_Shoulder_Right';
            case 9:
                return 'k_EGamepadButton_Left_Joystick';
            case 10:
                return 'k_EGamepadButton_Right_Joystick';
            case 11:
                return 'k_EGamepadButton_Start';
            case 12:
                return 'k_EGamepadButton_Select';
            case 13:
                return 'k_EGamepadButton_Steam';
            case 14:
                return 'k_EGamepadButton_DPad_Up';
            case 15:
                return 'k_EGamepadButton_DPad_Down';
            case 16:
                return 'k_EGamepadButton_DPad_Left';
            case 17:
                return 'k_EGamepadButton_DPad_Right';
            case 18:
                return 'k_EGamepadButton_LStick_Up';
            case 19:
                return 'k_EGamepadButton_LStick_Down';
            case 20:
                return 'k_EGamepadButton_LStick_Left';
            case 21:
                return 'k_EGamepadButton_LStick_Right';
            case 22:
                return 'k_EGamepadButton_RStick_Up';
            case 23:
                return 'k_EGamepadButton_RStick_Down';
            case 24:
                return 'k_EGamepadButton_RStick_Left';
            case 25:
                return 'k_EGamepadButton_RStick_Right';
            case 26:
                return 'k_EGamepadButton_AfterLast';
        }
    }
    return 'unknown EGamepadButton ( ' + eGamepadButton + ' )';
}
var EControllerLEDSettingType;
(function (EControllerLEDSettingType) {
    EControllerLEDSettingType[EControllerLEDSettingType["k_EControllerLEDSettingDefault"] = 0] = "k_EControllerLEDSettingDefault";
    EControllerLEDSettingType[EControllerLEDSettingType["k_EControllerLEDSettingCustom"] = 1] = "k_EControllerLEDSettingCustom";
    EControllerLEDSettingType[EControllerLEDSettingType["k_EControllerLEDSettingXinputSlot"] = 2] = "k_EControllerLEDSettingXinputSlot";
    EControllerLEDSettingType[EControllerLEDSettingType["k_EControllerLEDSettingType_Count"] = 3] = "k_EControllerLEDSettingType_Count";
})(EControllerLEDSettingType || (EControllerLEDSettingType = {}));
;
function EControllerLEDSettingTypeToString(eControllerLEDSettingType) {
    if (true) {
        switch (eControllerLEDSettingType) {
            case 0:
                return 'k_EControllerLEDSettingDefault';
            case 1:
                return 'k_EControllerLEDSettingCustom';
            case 2:
                return 'k_EControllerLEDSettingXinputSlot';
            case 3:
                return 'k_EControllerLEDSettingType_Count';
        }
    }
    return 'unknown EControllerLEDSettingType ( ' + eControllerLEDSettingType + ' )';
}
var EControllerPresetType;
(function (EControllerPresetType) {
    EControllerPresetType[EControllerPresetType["k_EControllerPresetType_None"] = 32767] = "k_EControllerPresetType_None";
    EControllerPresetType[EControllerPresetType["k_EControllerPresetType_Next"] = 32766] = "k_EControllerPresetType_Next";
    EControllerPresetType[EControllerPresetType["k_EControllerPresetType_Previous"] = 32765] = "k_EControllerPresetType_Previous";
})(EControllerPresetType || (EControllerPresetType = {}));
;
function EControllerPresetTypeToString(eControllerPresetType) {
    if (true) {
        switch (eControllerPresetType) {
            case 32767:
                return 'k_EControllerPresetType_None';
            case 32766:
                return 'k_EControllerPresetType_Next';
            case 32765:
                return 'k_EControllerPresetType_Previous';
        }
    }
    return 'unknown EControllerPresetType ( ' + eControllerPresetType + ' )';
}
var EControllerSetting;
(function (EControllerSetting) {
    EControllerSetting[EControllerSetting["k_EControllerSettingLeftTrackpadMode"] = 0] = "k_EControllerSettingLeftTrackpadMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingRightTrackpadMode"] = 1] = "k_EControllerSettingRightTrackpadMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingTrackpadTriggerData"] = 2] = "k_EControllerSettingTrackpadTriggerData";
    EControllerSetting[EControllerSetting["k_EControllerSettingHapticIntensity"] = 3] = "k_EControllerSettingHapticIntensity";
    EControllerSetting[EControllerSetting["k_EControllerSettingHapticIntensityOverride"] = 4] = "k_EControllerSettingHapticIntensityOverride";
    EControllerSetting[EControllerSetting["k_EControllerSettingRumbleType"] = 5] = "k_EControllerSettingRumbleType";
    EControllerSetting[EControllerSetting["k_EControllerSettingRumbleIntensity"] = 6] = "k_EControllerSettingRumbleIntensity";
    EControllerSetting[EControllerSetting["k_EControllerSettingEdgeBindingRadius"] = 7] = "k_EControllerSettingEdgeBindingRadius";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputJoystick"] = 8] = "k_EControllerSettingOutputJoystick";
    EControllerSetting[EControllerSetting["k_EControllerSettingCurveExponent"] = 9] = "k_EControllerSettingCurveExponent";
    EControllerSetting[EControllerSetting["k_EControllerSettingCustomCurveExponent"] = 10] = "k_EControllerSettingCustomCurveExponent";
    EControllerSetting[EControllerSetting["k_EControllerSettingSwipeDuration"] = 11] = "k_EControllerSettingSwipeDuration";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadZoneInnerRadius"] = 12] = "k_EControllerSettingDeadZoneInnerRadius";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadZoneOuterRadius"] = 13] = "k_EControllerSettingDeadZoneOuterRadius";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadZoneShape"] = 14] = "k_EControllerSettingDeadZoneShape";
    EControllerSetting[EControllerSetting["k_EControllerSettingAdaptiveCentering"] = 15] = "k_EControllerSettingAdaptiveCentering";
    EControllerSetting[EControllerSetting["k_EControllerSettingVirtualCapSize"] = 16] = "k_EControllerSettingVirtualCapSize";
    EControllerSetting[EControllerSetting["k_EControllerSettingVirtualStickThrow"] = 17] = "k_EControllerSettingVirtualStickThrow";
    EControllerSetting[EControllerSetting["k_EControllerSettingAntiDeadZone"] = 18] = "k_EControllerSettingAntiDeadZone";
    EControllerSetting[EControllerSetting["k_EControllerSettingAntiDeadZoneBuffer"] = 19] = "k_EControllerSettingAntiDeadZoneBuffer";
    EControllerSetting[EControllerSetting["k_EControllerSettingEdgeBindingInvert"] = 20] = "k_EControllerSettingEdgeBindingInvert";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputAxis"] = 21] = "k_EControllerSettingOutputAxis";
    EControllerSetting[EControllerSetting["k_EControllerSettingRequiresClick"] = 22] = "k_EControllerSettingRequiresClick";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadzone"] = 23] = "k_EControllerSettingDeadzone";
    EControllerSetting[EControllerSetting["k_EControllerSettingLayout"] = 24] = "k_EControllerSettingLayout";
    EControllerSetting[EControllerSetting["k_EControllerSettingHoldRepeats"] = 25] = "k_EControllerSettingHoldRepeats";
    EControllerSetting[EControllerSetting["k_EControllerSettingHoldRepeatInterval"] = 26] = "k_EControllerSettingHoldRepeatInterval";
    EControllerSetting[EControllerSetting["k_EControllerSettingAnalogEmulationDutyCyclePct"] = 27] = "k_EControllerSettingAnalogEmulationDutyCyclePct";
    EControllerSetting[EControllerSetting["k_EControllerSettingAnalogEmulationPeriod"] = 28] = "k_EControllerSettingAnalogEmulationPeriod";
    EControllerSetting[EControllerSetting["k_EControllerSettingOverlapRegion"] = 29] = "k_EControllerSettingOverlapRegion";
    EControllerSetting[EControllerSetting["k_EControllerSettingSensitivity"] = 30] = "k_EControllerSettingSensitivity";
    EControllerSetting[EControllerSetting["k_EControllerSettingSensitivityVertScale"] = 31] = "k_EControllerSettingSensitivityVertScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingSensitivityHorizScale"] = 32] = "k_EControllerSettingSensitivityHorizScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingTrackball"] = 33] = "k_EControllerSettingTrackball";
    EControllerSetting[EControllerSetting["k_EControllerSettingFriction"] = 34] = "k_EControllerSettingFriction";
    EControllerSetting[EControllerSetting["k_EControllerSettingFrictionVertScale"] = 35] = "k_EControllerSettingFrictionVertScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingAcceleration"] = 36] = "k_EControllerSettingAcceleration";
    EControllerSetting[EControllerSetting["k_EControllerSettingDoubleTap"] = 37] = "k_EControllerSettingDoubleTap";
    EControllerSetting[EControllerSetting["k_EControllerSettingDoubleTapBeep"] = 38] = "k_EControllerSettingDoubleTapBeep";
    EControllerSetting[EControllerSetting["k_EControllerSettingEdgeSpinRadius"] = 39] = "k_EControllerSettingEdgeSpinRadius";
    EControllerSetting[EControllerSetting["k_EControllerSettingEdgeSpinVelocity"] = 40] = "k_EControllerSettingEdgeSpinVelocity";
    EControllerSetting[EControllerSetting["k_EControllerSettingInvertX"] = 41] = "k_EControllerSettingInvertX";
    EControllerSetting[EControllerSetting["k_EControllerSettingInvertY"] = 42] = "k_EControllerSettingInvertY";
    EControllerSetting[EControllerSetting["k_EControllerSettingMouseSmoothing"] = 43] = "k_EControllerSettingMouseSmoothing";
    EControllerSetting[EControllerSetting["k_EControllerSettingMouseMoveThreshold"] = 44] = "k_EControllerSettingMouseMoveThreshold";
    EControllerSetting[EControllerSetting["k_EControllerSettingRotation"] = 45] = "k_EControllerSettingRotation";
    EControllerSetting[EControllerSetting["k_EControllerSettingDoubleTapMaxDist"] = 46] = "k_EControllerSettingDoubleTapMaxDist";
    EControllerSetting[EControllerSetting["k_EControllerSettingDoubleTapMinDuration"] = 47] = "k_EControllerSettingDoubleTapMinDuration";
    EControllerSetting[EControllerSetting["k_EControllerSettingDoubleTapMaxDuration"] = 48] = "k_EControllerSettingDoubleTapMaxDuration";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputToJoystick"] = 49] = "k_EControllerSettingOutputToJoystick";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputToJoystickDeadzoneX"] = 50] = "k_EControllerSettingOutputToJoystickDeadzoneX";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputToJoystickDeadzoneY"] = 51] = "k_EControllerSettingOutputToJoystickDeadzoneY";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputToJoystickPrecision"] = 52] = "k_EControllerSettingOutputToJoystickPrecision";
    EControllerSetting[EControllerSetting["k_EControllerSettingScrollAngle"] = 53] = "k_EControllerSettingScrollAngle";
    EControllerSetting[EControllerSetting["k_EControllerSettingScrollWrap"] = 54] = "k_EControllerSettingScrollWrap";
    EControllerSetting[EControllerSetting["k_EControllerSettingScrollType"] = 55] = "k_EControllerSettingScrollType";
    EControllerSetting[EControllerSetting["k_EControllerSettingScrollInvert"] = 56] = "k_EControllerSettingScrollInvert";
    EControllerSetting[EControllerSetting["k_EControllerSettingScrollMomentum"] = 57] = "k_EControllerSettingScrollMomentum";
    EControllerSetting[EControllerSetting["k_EControllerSettingOutputTrigger"] = 58] = "k_EControllerSettingOutputTrigger";
    EControllerSetting[EControllerSetting["k_EControllerSettingAdaptiveThreshold"] = 59] = "k_EControllerSettingAdaptiveThreshold";
    EControllerSetting[EControllerSetting["k_EControllerSettingFourButtonSize"] = 60] = "k_EControllerSettingFourButtonSize";
    EControllerSetting[EControllerSetting["k_EControllerSettingFourButtonDist"] = 61] = "k_EControllerSettingFourButtonDist";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroMode"] = 62] = "k_EControllerSettingGyroMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingSmoothJoystick"] = 63] = "k_EControllerSettingSmoothJoystick";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroAxis"] = 64] = "k_EControllerSettingGyroAxis";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroButton"] = 65] = "k_EControllerSettingGyroButton";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroNeutralAngle"] = 66] = "k_EControllerSettingGyroNeutralAngle";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroLockExtents"] = 67] = "k_EControllerSettingGyroLockExtents";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroPointer"] = 68] = "k_EControllerSettingGyroPointer";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroButtonInvert"] = 69] = "k_EControllerSettingGyroButtonInvert";
    EControllerSetting[EControllerSetting["k_EControllerSettingVirtualMode"] = 70] = "k_EControllerSettingVirtualMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingDynamicMode"] = 71] = "k_EControllerSettingDynamicMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingLayerMode"] = 72] = "k_EControllerSettingLayerMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuButtonCount"] = 73] = "k_EControllerSettingTouchMenuButtonCount";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuOpacity"] = 74] = "k_EControllerSettingTouchMenuOpacity";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuPosX"] = 75] = "k_EControllerSettingTouchMenuPosX";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuPosY"] = 76] = "k_EControllerSettingTouchMenuPosY";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuScale"] = 77] = "k_EControllerSettingTouchMenuScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingTriggerMouseClamping"] = 78] = "k_EControllerSettingTriggerMouseClamping";
    EControllerSetting[EControllerSetting["k_EControllerSettingTriggerMouseClampingAmount"] = 79] = "k_EControllerSettingTriggerMouseClampingAmount";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuLabels"] = 80] = "k_EControllerSettingTouchMenuLabels";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroSensitivityScale"] = 81] = "k_EControllerSettingGyroSensitivityScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingMouseRegionScale"] = 82] = "k_EControllerSettingMouseRegionScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingMouseRegionPositionX"] = 83] = "k_EControllerSettingMouseRegionPositionX";
    EControllerSetting[EControllerSetting["k_EControllerSettingMouseRegionPositionY"] = 84] = "k_EControllerSettingMouseRegionPositionY";
    EControllerSetting[EControllerSetting["k_EControllerSettingTeleportMouseStart"] = 85] = "k_EControllerSettingTeleportMouseStart";
    EControllerSetting[EControllerSetting["k_EControllerSettingTeleportMouseStop"] = 86] = "k_EControllerSettingTeleportMouseStop";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuButtonType"] = 87] = "k_EControllerSettingTouchMenuButtonType";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam0"] = 88] = "k_EControllerSettingTestParam0";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam1"] = 89] = "k_EControllerSettingTestParam1";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam2"] = 90] = "k_EControllerSettingTestParam2";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam3"] = 91] = "k_EControllerSettingTestParam3";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam4"] = 92] = "k_EControllerSettingTestParam4";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam5"] = 93] = "k_EControllerSettingTestParam5";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam6"] = 94] = "k_EControllerSettingTestParam6";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam7"] = 95] = "k_EControllerSettingTestParam7";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam8"] = 96] = "k_EControllerSettingTestParam8";
    EControllerSetting[EControllerSetting["k_EControllerSettingTestParam9"] = 97] = "k_EControllerSettingTestParam9";
    EControllerSetting[EControllerSetting["k_EControllerSettingActionSetTriggerCursorShow"] = 98] = "k_EControllerSettingActionSetTriggerCursorShow";
    EControllerSetting[EControllerSetting["k_EControllerSettingActionSetTriggerCursorHide"] = 99] = "k_EControllerSettingActionSetTriggerCursorHide";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorStartDelay"] = 100] = "k_EControllerSettingActivatorStartDelay";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorEndDelay"] = 101] = "k_EControllerSettingActivatorEndDelay";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorCycle"] = 102] = "k_EControllerSettingActivatorCycle";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorToggle"] = 103] = "k_EControllerSettingActivatorToggle";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorRepeatRate"] = 104] = "k_EControllerSettingActivatorRepeatRate";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorDoubleTapTime"] = 105] = "k_EControllerSettingActivatorDoubleTapTime";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorLongPressTime"] = 106] = "k_EControllerSettingActivatorLongPressTime";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorThreshold"] = 107] = "k_EControllerSettingActivatorThreshold";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorMouseWarpX"] = 108] = "k_EControllerSettingActivatorMouseWarpX";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorMouseWarpY"] = 109] = "k_EControllerSettingActivatorMouseWarpY";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorAnalogOutputValue"] = 110] = "k_EControllerSettingActivatorAnalogOutputValue";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorInterruptable"] = 111] = "k_EControllerSettingActivatorInterruptable";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorSoftPressStyle"] = 112] = "k_EControllerSettingActivatorSoftPressStyle";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorOutputAxis"] = 113] = "k_EControllerSettingActivatorOutputAxis";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorChord"] = 114] = "k_EControllerSettingActivatorChord";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuInnerDeadzone"] = 115] = "k_EControllerSettingTouchMenuInnerDeadzone";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuOuterDeadzone"] = 116] = "k_EControllerSettingTouchMenuOuterDeadzone";
    EControllerSetting[EControllerSetting["k_EControllerSettingPressureJoystickMinPressure"] = 117] = "k_EControllerSettingPressureJoystickMinPressure";
    EControllerSetting[EControllerSetting["k_EControllerSettingPressureJoystickMaxPressure"] = 118] = "k_EControllerSettingPressureJoystickMaxPressure";
    EControllerSetting[EControllerSetting["k_EControllerSettingPressureJoystickEnable"] = 119] = "k_EControllerSettingPressureJoystickEnable";
    EControllerSetting[EControllerSetting["k_EControllerSettingActivatorActivateStickOrTrackpad"] = 120] = "k_EControllerSettingActivatorActivateStickOrTrackpad";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickFrameTime"] = 121] = "k_EControllerSettingFlickStickFrameTime";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickTransitionTime"] = 122] = "k_EControllerSettingFlickStickTransitionTime";
    EControllerSetting[EControllerSetting["k_EControllerSettingTouchMenuActivateButton"] = 123] = "k_EControllerSettingTouchMenuActivateButton";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadZoneEnabled"] = 124] = "k_EControllerSettingDeadZoneEnabled";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroYawScale"] = 125] = "k_EControllerSettingGyroYawScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingGyroRollScale"] = 126] = "k_EControllerSettingGyroRollScale";
    EControllerSetting[EControllerSetting["k_EControllerSettingDeadzoneAdvancedSettings"] = 127] = "k_EControllerSettingDeadzoneAdvancedSettings";
    EControllerSetting[EControllerSetting["k_EControllerSettingRotationOld"] = 128] = "k_EControllerSettingRotationOld";
    EControllerSetting[EControllerSetting["k_EControllerSettingReferencedMode"] = 129] = "k_EControllerSettingReferencedMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingVirtualMenuCenterBound"] = 130] = "k_EControllerSettingVirtualMenuCenterBound";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickSnapMode"] = 131] = "k_EControllerSettingFlickStickSnapMode";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickForwardDeadZone"] = 132] = "k_EControllerSettingFlickStickForwardDeadZone";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickSnapTightness"] = 133] = "k_EControllerSettingFlickStickSnapTightness";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickSweepTightness"] = 134] = "k_EControllerSettingFlickStickSweepTightness";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickSweepSensitivity"] = 135] = "k_EControllerSettingFlickStickSweepSensitivity";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickDepressionSpeed"] = 136] = "k_EControllerSettingFlickStickDepressionSpeed";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickRotationToPixels"] = 137] = "k_EControllerSettingFlickStickRotationToPixels";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickEdgeBindingRadius"] = 138] = "k_EControllerSettingFlickStickEdgeBindingRadius";
    EControllerSetting[EControllerSetting["k_EControllerSettingFlickStickHapticBumpPerAngle"] = 139] = "k_EControllerSettingFlickStickHapticBumpPerAngle";
    EControllerSetting[EControllerSetting["k_EControllerSettingCount"] = 140] = "k_EControllerSettingCount";
})(EControllerSetting || (EControllerSetting = {}));
;
function EControllerSettingToString(eControllerSetting) {
    if (true) {
        switch (eControllerSetting) {
            case 0:
                return 'k_EControllerSettingLeftTrackpadMode';
            case 1:
                return 'k_EControllerSettingRightTrackpadMode';
            case 2:
                return 'k_EControllerSettingTrackpadTriggerData';
            case 3:
                return 'k_EControllerSettingHapticIntensity';
            case 4:
                return 'k_EControllerSettingHapticIntensityOverride';
            case 5:
                return 'k_EControllerSettingRumbleType';
            case 6:
                return 'k_EControllerSettingRumbleIntensity';
            case 7:
                return 'k_EControllerSettingEdgeBindingRadius';
            case 8:
                return 'k_EControllerSettingOutputJoystick';
            case 9:
                return 'k_EControllerSettingCurveExponent';
            case 10:
                return 'k_EControllerSettingCustomCurveExponent';
            case 11:
                return 'k_EControllerSettingSwipeDuration';
            case 12:
                return 'k_EControllerSettingDeadZoneInnerRadius';
            case 13:
                return 'k_EControllerSettingDeadZoneOuterRadius';
            case 14:
                return 'k_EControllerSettingDeadZoneShape';
            case 15:
                return 'k_EControllerSettingAdaptiveCentering';
            case 16:
                return 'k_EControllerSettingVirtualCapSize';
            case 17:
                return 'k_EControllerSettingVirtualStickThrow';
            case 18:
                return 'k_EControllerSettingAntiDeadZone';
            case 19:
                return 'k_EControllerSettingAntiDeadZoneBuffer';
            case 20:
                return 'k_EControllerSettingEdgeBindingInvert';
            case 21:
                return 'k_EControllerSettingOutputAxis';
            case 22:
                return 'k_EControllerSettingRequiresClick';
            case 23:
                return 'k_EControllerSettingDeadzone';
            case 24:
                return 'k_EControllerSettingLayout';
            case 25:
                return 'k_EControllerSettingHoldRepeats';
            case 26:
                return 'k_EControllerSettingHoldRepeatInterval';
            case 27:
                return 'k_EControllerSettingAnalogEmulationDutyCyclePct';
            case 28:
                return 'k_EControllerSettingAnalogEmulationPeriod';
            case 29:
                return 'k_EControllerSettingOverlapRegion';
            case 30:
                return 'k_EControllerSettingSensitivity';
            case 31:
                return 'k_EControllerSettingSensitivityVertScale';
            case 32:
                return 'k_EControllerSettingSensitivityHorizScale';
            case 33:
                return 'k_EControllerSettingTrackball';
            case 34:
                return 'k_EControllerSettingFriction';
            case 35:
                return 'k_EControllerSettingFrictionVertScale';
            case 36:
                return 'k_EControllerSettingAcceleration';
            case 37:
                return 'k_EControllerSettingDoubleTap';
            case 38:
                return 'k_EControllerSettingDoubleTapBeep';
            case 39:
                return 'k_EControllerSettingEdgeSpinRadius';
            case 40:
                return 'k_EControllerSettingEdgeSpinVelocity';
            case 41:
                return 'k_EControllerSettingInvertX';
            case 42:
                return 'k_EControllerSettingInvertY';
            case 43:
                return 'k_EControllerSettingMouseSmoothing';
            case 44:
                return 'k_EControllerSettingMouseMoveThreshold';
            case 45:
                return 'k_EControllerSettingRotation';
            case 46:
                return 'k_EControllerSettingDoubleTapMaxDist';
            case 47:
                return 'k_EControllerSettingDoubleTapMinDuration';
            case 48:
                return 'k_EControllerSettingDoubleTapMaxDuration';
            case 49:
                return 'k_EControllerSettingOutputToJoystick';
            case 50:
                return 'k_EControllerSettingOutputToJoystickDeadzoneX';
            case 51:
                return 'k_EControllerSettingOutputToJoystickDeadzoneY';
            case 52:
                return 'k_EControllerSettingOutputToJoystickPrecision';
            case 53:
                return 'k_EControllerSettingScrollAngle';
            case 54:
                return 'k_EControllerSettingScrollWrap';
            case 55:
                return 'k_EControllerSettingScrollType';
            case 56:
                return 'k_EControllerSettingScrollInvert';
            case 57:
                return 'k_EControllerSettingScrollMomentum';
            case 58:
                return 'k_EControllerSettingOutputTrigger';
            case 59:
                return 'k_EControllerSettingAdaptiveThreshold';
            case 60:
                return 'k_EControllerSettingFourButtonSize';
            case 61:
                return 'k_EControllerSettingFourButtonDist';
            case 62:
                return 'k_EControllerSettingGyroMode';
            case 63:
                return 'k_EControllerSettingSmoothJoystick';
            case 64:
                return 'k_EControllerSettingGyroAxis';
            case 65:
                return 'k_EControllerSettingGyroButton';
            case 66:
                return 'k_EControllerSettingGyroNeutralAngle';
            case 67:
                return 'k_EControllerSettingGyroLockExtents';
            case 68:
                return 'k_EControllerSettingGyroPointer';
            case 69:
                return 'k_EControllerSettingGyroButtonInvert';
            case 70:
                return 'k_EControllerSettingVirtualMode';
            case 71:
                return 'k_EControllerSettingDynamicMode';
            case 72:
                return 'k_EControllerSettingLayerMode';
            case 73:
                return 'k_EControllerSettingTouchMenuButtonCount';
            case 74:
                return 'k_EControllerSettingTouchMenuOpacity';
            case 75:
                return 'k_EControllerSettingTouchMenuPosX';
            case 76:
                return 'k_EControllerSettingTouchMenuPosY';
            case 77:
                return 'k_EControllerSettingTouchMenuScale';
            case 78:
                return 'k_EControllerSettingTriggerMouseClamping';
            case 79:
                return 'k_EControllerSettingTriggerMouseClampingAmount';
            case 80:
                return 'k_EControllerSettingTouchMenuLabels';
            case 81:
                return 'k_EControllerSettingGyroSensitivityScale';
            case 82:
                return 'k_EControllerSettingMouseRegionScale';
            case 83:
                return 'k_EControllerSettingMouseRegionPositionX';
            case 84:
                return 'k_EControllerSettingMouseRegionPositionY';
            case 85:
                return 'k_EControllerSettingTeleportMouseStart';
            case 86:
                return 'k_EControllerSettingTeleportMouseStop';
            case 87:
                return 'k_EControllerSettingTouchMenuButtonType';
            case 88:
                return 'k_EControllerSettingTestParam0';
            case 89:
                return 'k_EControllerSettingTestParam1';
            case 90:
                return 'k_EControllerSettingTestParam2';
            case 91:
                return 'k_EControllerSettingTestParam3';
            case 92:
                return 'k_EControllerSettingTestParam4';
            case 93:
                return 'k_EControllerSettingTestParam5';
            case 94:
                return 'k_EControllerSettingTestParam6';
            case 95:
                return 'k_EControllerSettingTestParam7';
            case 96:
                return 'k_EControllerSettingTestParam8';
            case 97:
                return 'k_EControllerSettingTestParam9';
            case 98:
                return 'k_EControllerSettingActionSetTriggerCursorShow';
            case 99:
                return 'k_EControllerSettingActionSetTriggerCursorHide';
            case 100:
                return 'k_EControllerSettingActivatorStartDelay';
            case 101:
                return 'k_EControllerSettingActivatorEndDelay';
            case 102:
                return 'k_EControllerSettingActivatorCycle';
            case 103:
                return 'k_EControllerSettingActivatorToggle';
            case 104:
                return 'k_EControllerSettingActivatorRepeatRate';
            case 105:
                return 'k_EControllerSettingActivatorDoubleTapTime';
            case 106:
                return 'k_EControllerSettingActivatorLongPressTime';
            case 107:
                return 'k_EControllerSettingActivatorThreshold';
            case 108:
                return 'k_EControllerSettingActivatorMouseWarpX';
            case 109:
                return 'k_EControllerSettingActivatorMouseWarpY';
            case 110:
                return 'k_EControllerSettingActivatorAnalogOutputValue';
            case 111:
                return 'k_EControllerSettingActivatorInterruptable';
            case 112:
                return 'k_EControllerSettingActivatorSoftPressStyle';
            case 113:
                return 'k_EControllerSettingActivatorOutputAxis';
            case 114:
                return 'k_EControllerSettingActivatorChord';
            case 115:
                return 'k_EControllerSettingTouchMenuInnerDeadzone';
            case 116:
                return 'k_EControllerSettingTouchMenuOuterDeadzone';
            case 117:
                return 'k_EControllerSettingPressureJoystickMinPressure';
            case 118:
                return 'k_EControllerSettingPressureJoystickMaxPressure';
            case 119:
                return 'k_EControllerSettingPressureJoystickEnable';
            case 120:
                return 'k_EControllerSettingActivatorActivateStickOrTrackpad';
            case 121:
                return 'k_EControllerSettingFlickStickFrameTime';
            case 122:
                return 'k_EControllerSettingFlickStickTransitionTime';
            case 123:
                return 'k_EControllerSettingTouchMenuActivateButton';
            case 124:
                return 'k_EControllerSettingDeadZoneEnabled';
            case 125:
                return 'k_EControllerSettingGyroYawScale';
            case 126:
                return 'k_EControllerSettingGyroRollScale';
            case 127:
                return 'k_EControllerSettingDeadzoneAdvancedSettings';
            case 128:
                return 'k_EControllerSettingRotationOld';
            case 129:
                return 'k_EControllerSettingReferencedMode';
            case 130:
                return 'k_EControllerSettingVirtualMenuCenterBound';
            case 131:
                return 'k_EControllerSettingFlickStickSnapMode';
            case 132:
                return 'k_EControllerSettingFlickStickForwardDeadZone';
            case 133:
                return 'k_EControllerSettingFlickStickSnapTightness';
            case 134:
                return 'k_EControllerSettingFlickStickSweepTightness';
            case 135:
                return 'k_EControllerSettingFlickStickSweepSensitivity';
            case 136:
                return 'k_EControllerSettingFlickStickDepressionSpeed';
            case 137:
                return 'k_EControllerSettingFlickStickRotationToPixels';
            case 138:
                return 'k_EControllerSettingFlickStickEdgeBindingRadius';
            case 139:
                return 'k_EControllerSettingFlickStickHapticBumpPerAngle';
            case 140:
                return 'k_EControllerSettingCount';
        }
    }
    return 'unknown EControllerSetting ( ' + eControllerSetting + ' )';
}
var EDeviceSupportFlowState;
(function (EDeviceSupportFlowState) {
    EDeviceSupportFlowState[EDeviceSupportFlowState["k_EDeviceSupportFlowStateIdle"] = 0] = "k_EDeviceSupportFlowStateIdle";
    EDeviceSupportFlowState[EDeviceSupportFlowState["k_EDeviceSupportFlowStateBinding"] = 1] = "k_EDeviceSupportFlowStateBinding";
    EDeviceSupportFlowState[EDeviceSupportFlowState["k_EDeviceSupportFlowStateTesting"] = 2] = "k_EDeviceSupportFlowStateTesting";
})(EDeviceSupportFlowState || (EDeviceSupportFlowState = {}));
;
function EDeviceSupportFlowStateToString(eDeviceSupportFlowState) {
    if (true) {
        switch (eDeviceSupportFlowState) {
            case 0:
                return 'k_EDeviceSupportFlowStateIdle';
            case 1:
                return 'k_EDeviceSupportFlowStateBinding';
            case 2:
                return 'k_EDeviceSupportFlowStateTesting';
        }
    }
    return 'unknown EDeviceSupportFlowState ( ' + eDeviceSupportFlowState + ' )';
}
var EDeviceSupportTestingStep;
(function (EDeviceSupportTestingStep) {
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingStarted"] = 0] = "k_TestingStarted";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingFreeMode"] = 1] = "k_TestingFreeMode";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindAButton"] = 2] = "k_TestingBindAButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindBButton"] = 3] = "k_TestingBindBButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindXButton"] = 4] = "k_TestingBindXButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindYButton"] = 5] = "k_TestingBindYButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindDPadLeft"] = 6] = "k_TestingBindDPadLeft";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindDPadRight"] = 7] = "k_TestingBindDPadRight";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindDPadUp"] = 8] = "k_TestingBindDPadUp";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindDPadDown"] = 9] = "k_TestingBindDPadDown";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftStickLeft"] = 10] = "k_TestingBindLeftStickLeft";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftStickRight"] = 11] = "k_TestingBindLeftStickRight";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftStickUp"] = 12] = "k_TestingBindLeftStickUp";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftStickDown"] = 13] = "k_TestingBindLeftStickDown";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftStickButton"] = 14] = "k_TestingBindLeftStickButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightStickLeft"] = 15] = "k_TestingBindRightStickLeft";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightStickRight"] = 16] = "k_TestingBindRightStickRight";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightStickUp"] = 17] = "k_TestingBindRightStickUp";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightStickDown"] = 18] = "k_TestingBindRightStickDown";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightStickButton"] = 19] = "k_TestingBindRightStickButton";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftShoulder"] = 20] = "k_TestingBindLeftShoulder";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindLeftTrigger"] = 21] = "k_TestingBindLeftTrigger";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightShoulder"] = 22] = "k_TestingBindRightShoulder";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindRightTrigger"] = 23] = "k_TestingBindRightTrigger";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindSelect"] = 24] = "k_TestingBindSelect";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindStart"] = 25] = "k_TestingBindStart";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindGuide"] = 26] = "k_TestingBindGuide";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindShare"] = 27] = "k_TestingBindShare";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindTouchpad"] = 28] = "k_TestingBindTouchpad";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingBindingComplete"] = 29] = "k_TestingBindingComplete";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingLeftTrigger"] = 30] = "k_TestingLeftTrigger";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingRightTrigger"] = 31] = "k_TestingRightTrigger";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingLeftTrackpad"] = 32] = "k_TestingLeftTrackpad";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingLeftTrackpadPressure"] = 33] = "k_TestingLeftTrackpadPressure";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingRightTrackpad"] = 34] = "k_TestingRightTrackpad";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingRightTrackpadPressure"] = 35] = "k_TestingRightTrackpadPressure";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingLeftJoystick"] = 36] = "k_TestingLeftJoystick";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingRightJoystick"] = 37] = "k_TestingRightJoystick";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingButtons"] = 38] = "k_TestingButtons";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingLeftHaptics"] = 39] = "k_TestingLeftHaptics";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingRightHaptics"] = 40] = "k_TestingRightHaptics";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingComplete"] = 41] = "k_TestingComplete";
    EDeviceSupportTestingStep[EDeviceSupportTestingStep["k_TestingAborted"] = 42] = "k_TestingAborted";
})(EDeviceSupportTestingStep || (EDeviceSupportTestingStep = {}));
;
function EDeviceSupportTestingStepToString(eDeviceSupportTestingStep) {
    if (true) {
        switch (eDeviceSupportTestingStep) {
            case 0:
                return 'k_TestingStarted';
            case 1:
                return 'k_TestingFreeMode';
            case 2:
                return 'k_TestingBindAButton';
            case 3:
                return 'k_TestingBindBButton';
            case 4:
                return 'k_TestingBindXButton';
            case 5:
                return 'k_TestingBindYButton';
            case 6:
                return 'k_TestingBindDPadLeft';
            case 7:
                return 'k_TestingBindDPadRight';
            case 8:
                return 'k_TestingBindDPadUp';
            case 9:
                return 'k_TestingBindDPadDown';
            case 10:
                return 'k_TestingBindLeftStickLeft';
            case 11:
                return 'k_TestingBindLeftStickRight';
            case 12:
                return 'k_TestingBindLeftStickUp';
            case 13:
                return 'k_TestingBindLeftStickDown';
            case 14:
                return 'k_TestingBindLeftStickButton';
            case 15:
                return 'k_TestingBindRightStickLeft';
            case 16:
                return 'k_TestingBindRightStickRight';
            case 17:
                return 'k_TestingBindRightStickUp';
            case 18:
                return 'k_TestingBindRightStickDown';
            case 19:
                return 'k_TestingBindRightStickButton';
            case 20:
                return 'k_TestingBindLeftShoulder';
            case 21:
                return 'k_TestingBindLeftTrigger';
            case 22:
                return 'k_TestingBindRightShoulder';
            case 23:
                return 'k_TestingBindRightTrigger';
            case 24:
                return 'k_TestingBindSelect';
            case 25:
                return 'k_TestingBindStart';
            case 26:
                return 'k_TestingBindGuide';
            case 27:
                return 'k_TestingBindShare';
            case 28:
                return 'k_TestingBindTouchpad';
            case 29:
                return 'k_TestingBindingComplete';
            case 30:
                return 'k_TestingLeftTrigger';
            case 31:
                return 'k_TestingRightTrigger';
            case 32:
                return 'k_TestingLeftTrackpad';
            case 33:
                return 'k_TestingLeftTrackpadPressure';
            case 34:
                return 'k_TestingRightTrackpad';
            case 35:
                return 'k_TestingRightTrackpadPressure';
            case 36:
                return 'k_TestingLeftJoystick';
            case 37:
                return 'k_TestingRightJoystick';
            case 38:
                return 'k_TestingButtons';
            case 39:
                return 'k_TestingLeftHaptics';
            case 40:
                return 'k_TestingRightHaptics';
            case 41:
                return 'k_TestingComplete';
            case 42:
                return 'k_TestingAborted';
        }
    }
    return 'unknown EDeviceSupportTestingStep ( ' + eDeviceSupportTestingStep + ' )';
}
var EFlickStickSnapAngles;
(function (EFlickStickSnapAngles) {
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_NoSnap"] = 0] = "k_EFlickStickSnapAngles_NoSnap";
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_Half"] = 1] = "k_EFlickStickSnapAngles_Half";
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_Quarter"] = 2] = "k_EFlickStickSnapAngles_Quarter";
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_Sixths"] = 3] = "k_EFlickStickSnapAngles_Sixths";
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_Eighths"] = 4] = "k_EFlickStickSnapAngles_Eighths";
    EFlickStickSnapAngles[EFlickStickSnapAngles["k_EFlickStickSnapAngles_ForwardOnly"] = 5] = "k_EFlickStickSnapAngles_ForwardOnly";
})(EFlickStickSnapAngles || (EFlickStickSnapAngles = {}));
;
function EFlickStickSnapAnglesToString(eFlickStickSnapAngles) {
    if (true) {
        switch (eFlickStickSnapAngles) {
            case 0:
                return 'k_EFlickStickSnapAngles_NoSnap';
            case 1:
                return 'k_EFlickStickSnapAngles_Half';
            case 2:
                return 'k_EFlickStickSnapAngles_Quarter';
            case 3:
                return 'k_EFlickStickSnapAngles_Sixths';
            case 4:
                return 'k_EFlickStickSnapAngles_Eighths';
            case 5:
                return 'k_EFlickStickSnapAngles_ForwardOnly';
        }
    }
    return 'unknown EFlickStickSnapAngles ( ' + eFlickStickSnapAngles + ' )';
}
var EControllerDigitalIO;
(function (EControllerDigitalIO) {
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonNone"] = -1] = "k_EControllerDigitalInput_ButtonNone";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonRightTrigger"] = 0] = "k_EControllerDigitalInput_ButtonRightTrigger";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonLeftTrigger"] = 1] = "k_EControllerDigitalInput_ButtonLeftTrigger";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Button1"] = 2] = "k_EControllerDigitalInput_Button1";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonY"] = 2] = "k_EControllerDigitalInput_ButtonY";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Button2"] = 3] = "k_EControllerDigitalInput_Button2";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonB"] = 3] = "k_EControllerDigitalInput_ButtonB";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Button3"] = 4] = "k_EControllerDigitalInput_Button3";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonX"] = 4] = "k_EControllerDigitalInput_ButtonX";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Button4"] = 5] = "k_EControllerDigitalInput_Button4";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonA"] = 5] = "k_EControllerDigitalInput_ButtonA";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonRightBumper"] = 6] = "k_EControllerDigitalInput_ButtonRightBumper";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonLeftBumper"] = 7] = "k_EControllerDigitalInput_ButtonLeftBumper";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonLeftJoystickClick"] = 8] = "k_EControllerDigitalInput_ButtonLeftJoystickClick";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonEscape"] = 9] = "k_EControllerDigitalInput_ButtonEscape";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonSteam"] = 10] = "k_EControllerDigitalInput_ButtonSteam";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMenu"] = 11] = "k_EControllerDigitalInput_ButtonMenu";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_StickUp"] = 12] = "k_EControllerDigitalInput_StickUp";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_StickDown"] = 13] = "k_EControllerDigitalInput_StickDown";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_StickLeft"] = 14] = "k_EControllerDigitalInput_StickLeft";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_StickRight"] = 15] = "k_EControllerDigitalInput_StickRight";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Touch1"] = 16] = "k_EControllerDigitalInput_Touch1";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonUp"] = 16] = "k_EControllerDigitalInput_ButtonUp";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Touch2"] = 17] = "k_EControllerDigitalInput_Touch2";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonRight"] = 17] = "k_EControllerDigitalInput_ButtonRight";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Touch3"] = 18] = "k_EControllerDigitalInput_Touch3";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonLeft"] = 18] = "k_EControllerDigitalInput_ButtonLeft";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Touch4"] = 19] = "k_EControllerDigitalInput_Touch4";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonDown"] = 19] = "k_EControllerDigitalInput_ButtonDown";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonBackLeft"] = 20] = "k_EControllerDigitalInput_ButtonBackLeft";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonBackRight"] = 21] = "k_EControllerDigitalInput_ButtonBackRight";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadN"] = 22] = "k_EControllerDigitalInput_LeftTrackpadN";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadNe"] = 23] = "k_EControllerDigitalInput_LeftTrackpadNe";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadE"] = 24] = "k_EControllerDigitalInput_LeftTrackpadE";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadSe"] = 25] = "k_EControllerDigitalInput_LeftTrackpadSe";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadS"] = 26] = "k_EControllerDigitalInput_LeftTrackpadS";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadSw"] = 27] = "k_EControllerDigitalInput_LeftTrackpadSw";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadW"] = 28] = "k_EControllerDigitalInput_LeftTrackpadW";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadNw"] = 29] = "k_EControllerDigitalInput_LeftTrackpadNw";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadN"] = 30] = "k_EControllerDigitalInput_RightTrackpadN";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadNe"] = 31] = "k_EControllerDigitalInput_RightTrackpadNe";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadE"] = 32] = "k_EControllerDigitalInput_RightTrackpadE";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadSe"] = 33] = "k_EControllerDigitalInput_RightTrackpadSe";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadS"] = 34] = "k_EControllerDigitalInput_RightTrackpadS";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadSw"] = 35] = "k_EControllerDigitalInput_RightTrackpadSw";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadW"] = 36] = "k_EControllerDigitalInput_RightTrackpadW";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadNw"] = 37] = "k_EControllerDigitalInput_RightTrackpadNw";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadDoubleTap"] = 38] = "k_EControllerDigitalInput_LeftTrackpadDoubleTap";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadDoubleTap"] = 39] = "k_EControllerDigitalInput_RightTrackpadDoubleTap";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadOuterRadius"] = 40] = "k_EControllerDigitalInput_LeftTrackpadOuterRadius";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadOuterRadius"] = 41] = "k_EControllerDigitalInput_RightTrackpadOuterRadius";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTrackpadClick"] = 42] = "k_EControllerDigitalInput_LeftTrackpadClick";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTrackpadClick"] = 43] = "k_EControllerDigitalInput_RightTrackpadClick";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_BatteryLow"] = 44] = "k_EControllerDigitalInput_BatteryLow";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_LeftTriggerThreshold"] = 45] = "k_EControllerDigitalInput_LeftTriggerThreshold";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_RightTriggerThreshold"] = 46] = "k_EControllerDigitalInput_RightTriggerThreshold";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonBackLeft2"] = 47] = "k_EControllerDigitalInput_ButtonBackLeft2";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonBackRight2"] = 48] = "k_EControllerDigitalInput_ButtonBackRight2";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonAlwaysOn"] = 49] = "k_EControllerDigitalInput_ButtonAlwaysOn";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonAncillary1"] = 50] = "k_EControllerDigitalInput_ButtonAncillary1";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro0"] = 51] = "k_EControllerDigitalInput_ButtonMacro0";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro1"] = 52] = "k_EControllerDigitalInput_ButtonMacro1";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro2"] = 53] = "k_EControllerDigitalInput_ButtonMacro2";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro3"] = 54] = "k_EControllerDigitalInput_ButtonMacro3";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro4"] = 55] = "k_EControllerDigitalInput_ButtonMacro4";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro5"] = 56] = "k_EControllerDigitalInput_ButtonMacro5";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro6"] = 57] = "k_EControllerDigitalInput_ButtonMacro6";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro7"] = 58] = "k_EControllerDigitalInput_ButtonMacro7";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro1Finger"] = 59] = "k_EControllerDigitalInput_ButtonMacro1Finger";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_ButtonMacro2Finger"] = 60] = "k_EControllerDigitalInput_ButtonMacro2Finger";
    EControllerDigitalIO[EControllerDigitalIO["k_EControllerDigitalInput_Count"] = 61] = "k_EControllerDigitalInput_Count";
})(EControllerDigitalIO || (EControllerDigitalIO = {}));
;
function EControllerDigitalIOToString(eControllerDigitalIO) {
    if (true) {
        switch (eControllerDigitalIO) {
            case -1:
                return 'k_EControllerDigitalInput_ButtonNone';
            case 0:
                return 'k_EControllerDigitalInput_ButtonRightTrigger';
            case 1:
                return 'k_EControllerDigitalInput_ButtonLeftTrigger';
            // value 2 could also be k_EControllerDigitalInput_Button1
            case 2:
                return 'k_EControllerDigitalInput_ButtonY';
            // value 3 could also be k_EControllerDigitalInput_Button2
            case 3:
                return 'k_EControllerDigitalInput_ButtonB';
            // value 4 could also be k_EControllerDigitalInput_Button3
            case 4:
                return 'k_EControllerDigitalInput_ButtonX';
            // value 5 could also be k_EControllerDigitalInput_Button4
            case 5:
                return 'k_EControllerDigitalInput_ButtonA';
            case 6:
                return 'k_EControllerDigitalInput_ButtonRightBumper';
            case 7:
                return 'k_EControllerDigitalInput_ButtonLeftBumper';
            case 8:
                return 'k_EControllerDigitalInput_ButtonLeftJoystickClick';
            case 9:
                return 'k_EControllerDigitalInput_ButtonEscape';
            case 10:
                return 'k_EControllerDigitalInput_ButtonSteam';
            case 11:
                return 'k_EControllerDigitalInput_ButtonMenu';
            case 12:
                return 'k_EControllerDigitalInput_StickUp';
            case 13:
                return 'k_EControllerDigitalInput_StickDown';
            case 14:
                return 'k_EControllerDigitalInput_StickLeft';
            case 15:
                return 'k_EControllerDigitalInput_StickRight';
            // value 16 could also be k_EControllerDigitalInput_Touch1
            case 16:
                return 'k_EControllerDigitalInput_ButtonUp';
            // value 17 could also be k_EControllerDigitalInput_Touch2
            case 17:
                return 'k_EControllerDigitalInput_ButtonRight';
            // value 18 could also be k_EControllerDigitalInput_Touch3
            case 18:
                return 'k_EControllerDigitalInput_ButtonLeft';
            // value 19 could also be k_EControllerDigitalInput_Touch4
            case 19:
                return 'k_EControllerDigitalInput_ButtonDown';
            case 20:
                return 'k_EControllerDigitalInput_ButtonBackLeft';
            case 21:
                return 'k_EControllerDigitalInput_ButtonBackRight';
            case 22:
                return 'k_EControllerDigitalInput_LeftTrackpadN';
            case 23:
                return 'k_EControllerDigitalInput_LeftTrackpadNe';
            case 24:
                return 'k_EControllerDigitalInput_LeftTrackpadE';
            case 25:
                return 'k_EControllerDigitalInput_LeftTrackpadSe';
            case 26:
                return 'k_EControllerDigitalInput_LeftTrackpadS';
            case 27:
                return 'k_EControllerDigitalInput_LeftTrackpadSw';
            case 28:
                return 'k_EControllerDigitalInput_LeftTrackpadW';
            case 29:
                return 'k_EControllerDigitalInput_LeftTrackpadNw';
            case 30:
                return 'k_EControllerDigitalInput_RightTrackpadN';
            case 31:
                return 'k_EControllerDigitalInput_RightTrackpadNe';
            case 32:
                return 'k_EControllerDigitalInput_RightTrackpadE';
            case 33:
                return 'k_EControllerDigitalInput_RightTrackpadSe';
            case 34:
                return 'k_EControllerDigitalInput_RightTrackpadS';
            case 35:
                return 'k_EControllerDigitalInput_RightTrackpadSw';
            case 36:
                return 'k_EControllerDigitalInput_RightTrackpadW';
            case 37:
                return 'k_EControllerDigitalInput_RightTrackpadNw';
            case 38:
                return 'k_EControllerDigitalInput_LeftTrackpadDoubleTap';
            case 39:
                return 'k_EControllerDigitalInput_RightTrackpadDoubleTap';
            case 40:
                return 'k_EControllerDigitalInput_LeftTrackpadOuterRadius';
            case 41:
                return 'k_EControllerDigitalInput_RightTrackpadOuterRadius';
            case 42:
                return 'k_EControllerDigitalInput_LeftTrackpadClick';
            case 43:
                return 'k_EControllerDigitalInput_RightTrackpadClick';
            case 44:
                return 'k_EControllerDigitalInput_BatteryLow';
            case 45:
                return 'k_EControllerDigitalInput_LeftTriggerThreshold';
            case 46:
                return 'k_EControllerDigitalInput_RightTriggerThreshold';
            case 47:
                return 'k_EControllerDigitalInput_ButtonBackLeft2';
            case 48:
                return 'k_EControllerDigitalInput_ButtonBackRight2';
            case 49:
                return 'k_EControllerDigitalInput_ButtonAlwaysOn';
            case 50:
                return 'k_EControllerDigitalInput_ButtonAncillary1';
            case 51:
                return 'k_EControllerDigitalInput_ButtonMacro0';
            case 52:
                return 'k_EControllerDigitalInput_ButtonMacro1';
            case 53:
                return 'k_EControllerDigitalInput_ButtonMacro2';
            case 54:
                return 'k_EControllerDigitalInput_ButtonMacro3';
            case 55:
                return 'k_EControllerDigitalInput_ButtonMacro4';
            case 56:
                return 'k_EControllerDigitalInput_ButtonMacro5';
            case 57:
                return 'k_EControllerDigitalInput_ButtonMacro6';
            case 58:
                return 'k_EControllerDigitalInput_ButtonMacro7';
            case 59:
                return 'k_EControllerDigitalInput_ButtonMacro1Finger';
            case 60:
                return 'k_EControllerDigitalInput_ButtonMacro2Finger';
            case 61:
                return 'k_EControllerDigitalInput_Count';
        }
    }
    return 'unknown EControllerDigitalIO ( ' + eControllerDigitalIO + ' )';
}


/***/ }),

/***/ "../../../web_src/shared/js/stores/ierrorreportingstore.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/stores/ierrorreportingstore.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "../../../web_src/shared/js/ui/shared_svg_library.tsx":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/ui/shared_svg_library.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Achievement": () => (/* binding */ Achievement),
/* harmony export */   "AddFriend": () => (/* binding */ AddFriend),
/* harmony export */   "AdvancedSearch": () => (/* binding */ AdvancedSearch),
/* harmony export */   "AppleLogo": () => (/* binding */ AppleLogo),
/* harmony export */   "Arrow": () => (/* binding */ Arrow),
/* harmony export */   "ArrowGamepadUI": () => (/* binding */ ArrowGamepadUI),
/* harmony export */   "Avatar": () => (/* binding */ Avatar),
/* harmony export */   "AwardIcon": () => (/* binding */ AwardIcon),
/* harmony export */   "Backgrounds": () => (/* binding */ Backgrounds),
/* harmony export */   "Badge": () => (/* binding */ Badge),
/* harmony export */   "Bell": () => (/* binding */ Bell),
/* harmony export */   "BigPicture": () => (/* binding */ BigPicture),
/* harmony export */   "Bookmark": () => (/* binding */ Bookmark),
/* harmony export */   "BroadcastAdminOfficer": () => (/* binding */ BroadcastAdminOfficer),
/* harmony export */   "BroadcastBroadcaster": () => (/* binding */ BroadcastBroadcaster),
/* harmony export */   "BroadcastContributor": () => (/* binding */ BroadcastContributor),
/* harmony export */   "BroadcastModerator": () => (/* binding */ BroadcastModerator),
/* harmony export */   "Burger": () => (/* binding */ Burger),
/* harmony export */   "CSGO": () => (/* binding */ CSGO),
/* harmony export */   "Calendar": () => (/* binding */ Calendar),
/* harmony export */   "Caution": () => (/* binding */ Caution),
/* harmony export */   "Chart": () => (/* binding */ Chart),
/* harmony export */   "ChatBubble": () => (/* binding */ ChatBubble),
/* harmony export */   "ChatEffect": () => (/* binding */ ChatEffect),
/* harmony export */   "ChatEmoticon": () => (/* binding */ ChatEmoticon),
/* harmony export */   "ChatListView": () => (/* binding */ ChatListView),
/* harmony export */   "ChatNotification": () => (/* binding */ ChatNotification),
/* harmony export */   "ChatSettings": () => (/* binding */ ChatSettings),
/* harmony export */   "ChatSticker": () => (/* binding */ ChatSticker),
/* harmony export */   "Check": () => (/* binding */ Check),
/* harmony export */   "ChevronNoPadding": () => (/* binding */ ChevronNoPadding),
/* harmony export */   "Circle": () => (/* binding */ Circle),
/* harmony export */   "Clock": () => (/* binding */ Clock),
/* harmony export */   "ClosedCaption": () => (/* binding */ ClosedCaption),
/* harmony export */   "CloudDownload": () => (/* binding */ CloudDownload),
/* harmony export */   "Collapse": () => (/* binding */ Collapse),
/* harmony export */   "CommentThread": () => (/* binding */ CommentThread),
/* harmony export */   "CopyToClipboard": () => (/* binding */ CopyToClipboard),
/* harmony export */   "CornerRibbon": () => (/* binding */ CornerRibbon),
/* harmony export */   "Coupon": () => (/* binding */ Coupon),
/* harmony export */   "Crown": () => (/* binding */ Crown),
/* harmony export */   "CutArrow": () => (/* binding */ CutArrow),
/* harmony export */   "DLCIcon": () => (/* binding */ DLCIcon),
/* harmony export */   "DeleteUserNews": () => (/* binding */ DeleteUserNews),
/* harmony export */   "DialogCheck": () => (/* binding */ DialogCheck),
/* harmony export */   "Discord": () => (/* binding */ Discord),
/* harmony export */   "DoNotDisturb": () => (/* binding */ DoNotDisturb),
/* harmony export */   "DoubleArrow": () => (/* binding */ DoubleArrow),
/* harmony export */   "DownArrowContextMenu": () => (/* binding */ DownArrowContextMenu),
/* harmony export */   "Download": () => (/* binding */ Download),
/* harmony export */   "DynamicCollection": () => (/* binding */ DynamicCollection),
/* harmony export */   "Edit": () => (/* binding */ Edit),
/* harmony export */   "Effect": () => (/* binding */ Effect),
/* harmony export */   "Emoticon": () => (/* binding */ Emoticon),
/* harmony export */   "EmoticonBow": () => (/* binding */ EmoticonBow),
/* harmony export */   "Envelope": () => (/* binding */ Envelope),
/* harmony export */   "ExitIcon": () => (/* binding */ ExitIcon),
/* harmony export */   "Expand": () => (/* binding */ Expand),
/* harmony export */   "ExpanderArrow": () => (/* binding */ ExpanderArrow),
/* harmony export */   "ExternalLink": () => (/* binding */ ExternalLink),
/* harmony export */   "Facebook": () => (/* binding */ Facebook),
/* harmony export */   "FavoriteFriends": () => (/* binding */ FavoriteFriends),
/* harmony export */   "Filter": () => (/* binding */ Filter),
/* harmony export */   "Flag": () => (/* binding */ Flag),
/* harmony export */   "Flair": () => (/* binding */ Flair),
/* harmony export */   "FlatArrow": () => (/* binding */ FlatArrow),
/* harmony export */   "FriendFilled": () => (/* binding */ FriendFilled),
/* harmony export */   "FriendIcon": () => (/* binding */ FriendIcon),
/* harmony export */   "FriendRequest": () => (/* binding */ FriendRequest),
/* harmony export */   "Globe": () => (/* binding */ Globe),
/* harmony export */   "Group": () => (/* binding */ Group),
/* harmony export */   "Headphones": () => (/* binding */ Headphones),
/* harmony export */   "HeadphonesGamepadUI": () => (/* binding */ HeadphonesGamepadUI),
/* harmony export */   "Help": () => (/* binding */ Help),
/* harmony export */   "Hidden": () => (/* binding */ Hidden),
/* harmony export */   "HideShowChat": () => (/* binding */ HideShowChat),
/* harmony export */   "Home": () => (/* binding */ Home),
/* harmony export */   "Hyperlink": () => (/* binding */ Hyperlink),
/* harmony export */   "Image": () => (/* binding */ Image),
/* harmony export */   "IncomingVoiceCall": () => (/* binding */ IncomingVoiceCall),
/* harmony export */   "Info": () => (/* binding */ Info),
/* harmony export */   "Information": () => (/* binding */ Information),
/* harmony export */   "Instagram": () => (/* binding */ Instagram),
/* harmony export */   "Installed": () => (/* binding */ Installed),
/* harmony export */   "Invalid": () => (/* binding */ Invalid),
/* harmony export */   "Invite": () => (/* binding */ Invite),
/* harmony export */   "InviteFriend": () => (/* binding */ InviteFriend),
/* harmony export */   "LanguageOptions": () => (/* binding */ LanguageOptions),
/* harmony export */   "LargeMobilePhone": () => (/* binding */ LargeMobilePhone),
/* harmony export */   "LeaveVoiceChat": () => (/* binding */ LeaveVoiceChat),
/* harmony export */   "Library": () => (/* binding */ Library),
/* harmony export */   "LinuxLogo": () => (/* binding */ LinuxLogo),
/* harmony export */   "LinuxLogo2": () => (/* binding */ LinuxLogo2),
/* harmony export */   "Lock": () => (/* binding */ Lock),
/* harmony export */   "LoyaltyCoinIcon": () => (/* binding */ LoyaltyCoinIcon),
/* harmony export */   "MagnifyingGlass": () => (/* binding */ MagnifyingGlass),
/* harmony export */   "Maximize": () => (/* binding */ Maximize),
/* harmony export */   "MediaControls": () => (/* binding */ MediaControls),
/* harmony export */   "MenuMoreDots": () => (/* binding */ MenuMoreDots),
/* harmony export */   "MenuMoreDotsVertical": () => (/* binding */ MenuMoreDotsVertical),
/* harmony export */   "Microphone": () => (/* binding */ Microphone),
/* harmony export */   "MicrophoneGamepadUI": () => (/* binding */ MicrophoneGamepadUI),
/* harmony export */   "Minimize": () => (/* binding */ Minimize),
/* harmony export */   "MobilePhone": () => (/* binding */ MobilePhone),
/* harmony export */   "MouseAndKB": () => (/* binding */ MouseAndKB),
/* harmony export */   "MultiPlayer": () => (/* binding */ MultiPlayer),
/* harmony export */   "NavArrow": () => (/* binding */ NavArrow),
/* harmony export */   "NewChatGroup": () => (/* binding */ NewChatGroup),
/* harmony export */   "NewChatGroupGamepadUI": () => (/* binding */ NewChatGroupGamepadUI),
/* harmony export */   "Notification": () => (/* binding */ Notification),
/* harmony export */   "OutgoingVoiceCall": () => (/* binding */ OutgoingVoiceCall),
/* harmony export */   "Paperclip": () => (/* binding */ Paperclip),
/* harmony export */   "PartyPopper": () => (/* binding */ PartyPopper),
/* harmony export */   "Patch": () => (/* binding */ Patch),
/* harmony export */   "Pause": () => (/* binding */ Pause),
/* harmony export */   "Person": () => (/* binding */ Person),
/* harmony export */   "Pin": () => (/* binding */ Pin),
/* harmony export */   "Play": () => (/* binding */ Play),
/* harmony export */   "PlayCircle": () => (/* binding */ PlayCircle),
/* harmony export */   "PlayTime": () => (/* binding */ PlayTime),
/* harmony export */   "Plus": () => (/* binding */ Plus),
/* harmony export */   "PlusCircle": () => (/* binding */ PlusCircle),
/* harmony export */   "PlusFilled": () => (/* binding */ PlusFilled),
/* harmony export */   "Popout": () => (/* binding */ Popout),
/* harmony export */   "Profile": () => (/* binding */ Profile),
/* harmony export */   "ProgressCircle": () => (/* binding */ ProgressCircle),
/* harmony export */   "RSS": () => (/* binding */ RSS),
/* harmony export */   "ReadyToPlay": () => (/* binding */ ReadyToPlay),
/* harmony export */   "RecentChats": () => (/* binding */ RecentChats),
/* harmony export */   "RecentClock": () => (/* binding */ RecentClock),
/* harmony export */   "Reload": () => (/* binding */ Reload),
/* harmony export */   "ResizeIcon": () => (/* binding */ ResizeIcon),
/* harmony export */   "Restore": () => (/* binding */ Restore),
/* harmony export */   "ReviewHelp": () => (/* binding */ ReviewHelp),
/* harmony export */   "Reviews": () => (/* binding */ Reviews),
/* harmony export */   "RewardsIcon": () => (/* binding */ RewardsIcon),
/* harmony export */   "Rules": () => (/* binding */ Rules),
/* harmony export */   "STVTimelineGrabber": () => (/* binding */ STVTimelineGrabber),
/* harmony export */   "STVTimelineMarker": () => (/* binding */ STVTimelineMarker),
/* harmony export */   "Schedule": () => (/* binding */ Schedule),
/* harmony export */   "ScratchPad": () => (/* binding */ ScratchPad),
/* harmony export */   "Scroll": () => (/* binding */ Scroll),
/* harmony export */   "Settings": () => (/* binding */ Settings),
/* harmony export */   "Share": () => (/* binding */ Share),
/* harmony export */   "ShowBothChats": () => (/* binding */ ShowBothChats),
/* harmony export */   "SingleWindowToggle": () => (/* binding */ SingleWindowToggle),
/* harmony export */   "SketchArrowTopLeft": () => (/* binding */ SketchArrowTopLeft),
/* harmony export */   "Sliders": () => (/* binding */ Sliders),
/* harmony export */   "SmallMediumLarge": () => (/* binding */ SmallMediumLarge),
/* harmony export */   "SmallX": () => (/* binding */ SmallX),
/* harmony export */   "Snowball": () => (/* binding */ Snowball),
/* harmony export */   "SortBy": () => (/* binding */ SortBy),
/* harmony export */   "SortBy_V2": () => (/* binding */ SortBy_V2),
/* harmony export */   "Star": () => (/* binding */ Star),
/* harmony export */   "SteamDeckCompatLogo": () => (/* binding */ SteamDeckCompatLogo),
/* harmony export */   "SteamDeckCompatPlayable": () => (/* binding */ SteamDeckCompatPlayable),
/* harmony export */   "SteamDeckCompatUnknown": () => (/* binding */ SteamDeckCompatUnknown),
/* harmony export */   "SteamDeckCompatUnsupported": () => (/* binding */ SteamDeckCompatUnsupported),
/* harmony export */   "SteamDeckCompatVerified": () => (/* binding */ SteamDeckCompatVerified),
/* harmony export */   "SteamLogo": () => (/* binding */ SteamLogo),
/* harmony export */   "SteamLogo_Piston": () => (/* binding */ SteamLogo_Piston),
/* harmony export */   "SteamTV": () => (/* binding */ SteamTV),
/* harmony export */   "StoryWidgetBookmarkPage": () => (/* binding */ StoryWidgetBookmarkPage),
/* harmony export */   "Submit": () => (/* binding */ Submit),
/* harmony export */   "TextButtonDoubleArrow": () => (/* binding */ TextButtonDoubleArrow),
/* harmony export */   "TextChat": () => (/* binding */ TextChat),
/* harmony export */   "TextRoom": () => (/* binding */ TextRoom),
/* harmony export */   "ThickChevron": () => (/* binding */ ThickChevron),
/* harmony export */   "ThumbsUp": () => (/* binding */ ThumbsUp),
/* harmony export */   "ThumbsUpUserNews": () => (/* binding */ ThumbsUpUserNews),
/* harmony export */   "TimeWarning": () => (/* binding */ TimeWarning),
/* harmony export */   "Toast": () => (/* binding */ Toast),
/* harmony export */   "TopOfQueue": () => (/* binding */ TopOfQueue),
/* harmony export */   "Trade": () => (/* binding */ Trade),
/* harmony export */   "Trash": () => (/* binding */ Trash),
/* harmony export */   "TrashCan": () => (/* binding */ TrashCan),
/* harmony export */   "TwitchTV": () => (/* binding */ TwitchTV),
/* harmony export */   "Twitter": () => (/* binding */ Twitter),
/* harmony export */   "Undo": () => (/* binding */ Undo),
/* harmony export */   "Update": () => (/* binding */ Update),
/* harmony export */   "Upgrade": () => (/* binding */ Upgrade),
/* harmony export */   "User": () => (/* binding */ User),
/* harmony export */   "VACShield": () => (/* binding */ VACShield),
/* harmony export */   "VR": () => (/* binding */ VR),
/* harmony export */   "Video": () => (/* binding */ Video),
/* harmony export */   "VideoPlay": () => (/* binding */ VideoPlay),
/* harmony export */   "Viewers": () => (/* binding */ Viewers),
/* harmony export */   "VoiceCallOnHold": () => (/* binding */ VoiceCallOnHold),
/* harmony export */   "VoiceRoom": () => (/* binding */ VoiceRoom),
/* harmony export */   "Volume": () => (/* binding */ Volume),
/* harmony export */   "WindowsLogo": () => (/* binding */ WindowsLogo),
/* harmony export */   "Wishlist": () => (/* binding */ Wishlist),
/* harmony export */   "WriteReview": () => (/* binding */ WriteReview),
/* harmony export */   "X": () => (/* binding */ X),
/* harmony export */   "X_Line": () => (/* binding */ X_Line),
/* harmony export */   "YouTube": () => (/* binding */ YouTube)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/classnames */ "../../../web_src/shared/js/utils/classnames.ts");
/* harmony import */ var shared_utils_mathutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/utils/mathutils */ "../../../web_src/shared/js/utils/mathutils.ts");
/* harmony import */ var _shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared_svg_library.scss */ "../../../web_src/shared/js/ui/shared_svg_library.scss");
/* harmony import */ var _shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var shared_webui_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! shared/webui/config */ "../../../web_src/shared/js/webui/config.ts");






function ChevronNoPadding(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 15 23", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { clipPath: "url(#clip0_3155_4178)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd", d: "M6.9955 11.5L15 3.4955L11.5045 -1.52793e-07L0.00450275 11.5L11.5045 23L15 19.5045L6.9955 11.5Z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("defs", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("clipPath", { id: "clip0_3155_4178" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { fill: "currentColor", width: "15", height: "23" })))));
}
function Hyperlink(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, "SVGIcon_Button SVGIcon_Hyperlink"), "data-name": "Layer 1", viewBox: "0 0 100 100", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { "data-name": "Group" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { "data-name": "Path", d: "M50.86,20.23l-9,9,4.24,4.24,9-9c6.35-6.35,16.09-6.93,21.73-1.3s5,15.38-1.3,21.73l-9,9,4.24,4.24,9-9c8.69-8.69,9.27-22.24,1.3-30.21S59.55,11.55,50.86,20.23Z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { "data-name": "Path", d: "M44.89,75.53a17.22,17.22,0,0,1-11.28,5.13A13.23,13.23,0,0,1,19.34,66.39a17.22,17.22,0,0,1,5.13-11.28l9-9-4.24-4.24-9,9a23.21,23.21,0,0,0-6.88,15.22c0,.37,0,.74,0,1.11A19.19,19.19,0,0,0,33.91,86.66a23.21,23.21,0,0,0,15.22-6.88l9-9-4.24-4.24Z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { "data-name": "Path", className: "Link1", x: "28.75", y: "47", width: "42.48", height: "6", transform: "translate(-20.71 50) rotate(-45)" }))));
}
function InviteFriend() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_InviteFriend", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "50.5", cy: "30.6", r: "19.4" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M65,56.9H36c-16.5,0-30,13.5-30,30v1c0,0.6,0.4,1,1,1h87c0.6,0,1-0.4,1-1v-1C95,70.4,81.5,56.9,65,56.9z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: "InvitePlus", points: "13.9,34.2 17.9,34.2 17.9,25.3 26.8,25.3 26.8,21.3 17.9,21.3 17.9,12.4 13.9,12.4 13.9,21.3 5,21.3 5,25.3    13.9,25.3  " }))));
}
function Settings() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Settings", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "-305.5 396.5 256 256", enableBackground: "new -305.5 396.5 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-232.755,589.942l3.103,2.408c5.78,4.492,11.973,8.18,18.409,10.959l3.581,1.547l2.276,33.783 c0.089,1.33,1.385,2.54,2.715,2.54h48.62c1.355,0,2.745-1.273,2.852-2.621l2.74-33.284l3.602-1.496 c6.406-2.656,12.646-6.262,18.554-10.707l3.137-2.366l30.578,15.009c1.155,0.571,2.924,0.017,3.563-1.087l24.303-42.1 c0.674-1.173,0.265-3.014-0.852-3.785l-27.872-19.309l0.469-3.832c0.495-4.032,0.725-7.395,0.725-10.57 c0-3.129-0.227-6.5-0.687-10.307l-0.469-3.896l28.699-19.253c1.112-0.741,1.509-2.473,0.84-3.627l-24.3-42.104 c-0.657-1.139-2.502-1.727-3.7-1.155l-31.208,14.748l-3.091-2.341c-5.571-4.224-11.466-7.688-17.522-10.306l-3.58-1.548 l-2.34-34.887c-0.089-1.33-1.381-2.536-2.715-2.536h-48.617c-1.355,0-2.74,1.274-2.851,2.626l-2.834,34.371l-3.593,1.501 c-6.082,2.535-12.028,5.924-17.667,10.071l-3.124,2.302l-31.392-15.413c-1.168-0.575-2.924-0.025-3.559,1.074l-24.309,42.107 c-0.678,1.172-0.264,3.014,0.848,3.781l28.068,19.444l-0.524,3.883c-0.592,4.378-0.865,8.018-0.865,11.462 c0,2.988,0.179,6.065,0.55,9.403l0.431,3.853l-28.528,19.125c-1.108,0.742-1.509,2.468-0.84,3.632l24.308,42.1 c0.656,1.142,2.489,1.726,3.7,1.154L-232.755,589.942z M-177.498,560.051c-19.311,0-35.02-15.709-35.02-35.02 s15.709-35.02,35.02-35.02s35.02,15.709,35.02,35.02S-158.188,560.051-177.498,560.051z", fill: "currentColor" })));
}
function ChatNotification(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M22 6H2V27H12L18 34L24 27H34V21H27C24.2386 21 22 18.7614 22 16V6ZM8.11107 18.5787C8.5222 18.8534 9.00555 19 9.5 19C9.8283 19 10.1534 18.9353 10.4567 18.8097C10.76 18.6841 11.0356 18.4999 11.2678 18.2678C11.4999 18.0356 11.6841 17.76 11.8097 17.4567C11.9353 17.1534 12 16.8283 12 16.5C12 16.0055 11.8534 15.5222 11.5787 15.1111C11.304 14.7 10.9135 14.3795 10.4567 14.1903C9.99989 14.0011 9.49723 13.9516 9.01227 14.048C8.52732 14.1445 8.08186 14.3826 7.73223 14.7322C7.3826 15.0819 7.1445 15.5273 7.04804 16.0123C6.95157 16.4972 7.00108 16.9999 7.1903 17.4567C7.37952 17.9135 7.69995 18.304 8.11107 18.5787ZM16.6111 18.5787C17.0222 18.8534 17.5055 19 18 19C18.3283 19 18.6534 18.9353 18.9567 18.8097C19.26 18.6841 19.5356 18.4999 19.7678 18.2678C19.9999 18.0356 20.1841 17.76 20.3097 17.4567C20.4353 17.1534 20.5 16.8283 20.5 16.5C20.5 16.0055 20.3534 15.5222 20.0787 15.1111C19.804 14.7 19.4135 14.3795 18.9567 14.1903C18.4999 14.0011 17.9972 13.9516 17.5123 14.048C17.0273 14.1445 16.5819 14.3826 16.2322 14.7322C15.8826 15.0819 15.6445 15.5273 15.548 16.0123C15.4516 16.4972 15.5011 16.9999 15.6903 17.4567C15.8795 17.9135 16.2 18.304 16.6111 18.5787Z", fill: "currentColor" })));
}
function ChatSettings() {
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ChatSettings", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 600 600" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M256,0C126.6,0,21.3,104.7,21.3,233.7c0,65.9,26.5,125.4,74.7,168.3v99.3c0,3.8,2,7.4,5.3,9.2c1.7,1,3.5,1.5,5.3,1.5   c1.8,0,3.7-0.5,5.4-1.5l85.8-50.3c18.9,4.8,38.4,7.3,58.1,7.3c129.4,0,234.7-104.9,234.7-233.7C490.7,104.7,385.4,0,256,0z    M405.3,254.1L370,260c-3,13.5-8.3,26-15.5,37.3l20.8,29.2L347.8,354l-29.2-20.8c-11.3,7.2-23.8,12.5-37.3,15.5l-5.9,35.3h-39   l-5.9-35.3c-13.5-3-26-8.3-37.3-15.5L164.2,354l-27.5-27.5l20.8-29.2C150.3,286,145,273.5,142,260l-35.3-5.9v-39l35.3-5.9   c3-13.5,8.3-26,15.5-37.3l-20.8-29.2l27.5-27.5l29.2,20.8c11.3-7.2,23.8-12.5,37.3-15.5l5.9-35.3h39l5.9,35.3   c13.5,3,26,8.3,37.3,15.5l29.2-20.8l27.5,27.5L354.5,172c7.2,11.3,12.5,23.8,15.5,37.3l35.3,5.9V254.1z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "256", cy: "234.6", r: "45.9" }))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.7 15.75C31.703 13.1045 30.94 10.5148 29.5031 8.2936C28.0663 6.07238 26.0171 4.31465 23.603 3.23272C21.189 2.15079 18.5133 1.79092 15.8991 2.19659C13.285 2.60226 10.8442 3.75611 8.87157 5.51878C6.89893 7.28145 5.47882 9.57755 4.78275 12.1298C4.08667 14.682 4.14441 17.3811 4.94899 19.9013C5.75356 22.4214 7.27057 24.6546 9.31678 26.3313C11.363 28.008 13.8509 29.0565 16.48 29.35V35.05L27.31 25.79C28.6947 24.5098 29.7995 22.9569 30.555 21.2291C31.3105 19.5012 31.7003 17.6358 31.7 15.75ZM27 14.572V17.428L24.63 17.86C24.4791 18.3905 24.2677 18.9018 24 19.384L25.374 21.34L23.352 23.362L21.384 22C20.9023 22.2718 20.391 22.4872 19.86 22.642L19.428 25H16.572L16.14 22.63C15.6096 22.4791 15.0982 22.2677 14.616 22L12.648 23.374L10.626 21.352L12 19.384C11.7282 18.9023 11.5128 18.391 11.358 17.86L9 17.428V14.572L11.358 14.14C11.5128 13.609 11.7282 13.0977 12 12.616L10.626 10.648L12.648 8.626L14.616 10C15.0977 9.72818 15.609 9.51276 16.14 9.358L16.572 7H19.428L19.86 9.358C20.391 9.51276 20.9023 9.72818 21.384 10L23.352 8.626L25.362 10.648L24 12.616C24.2718 13.0977 24.4872 13.609 24.642 14.14L27 14.572ZM16.3333 18.4944C16.8266 18.8241 17.4067 19 18 19C18.394 19 18.7841 18.9224 19.1481 18.7716C19.512 18.6209 19.8427 18.3999 20.1213 18.1213C20.3999 17.8427 20.6209 17.512 20.7716 17.1481C20.9224 16.7841 21 16.394 21 16C21 15.4067 20.8241 14.8266 20.4944 14.3333C20.1648 13.8399 19.6962 13.4554 19.1481 13.2284C18.5999 13.0013 17.9967 12.9419 17.4147 13.0576C16.8328 13.1734 16.2982 13.4591 15.8787 13.8787C15.4591 14.2982 15.1734 14.8328 15.0576 15.4147C14.9419 15.9967 15.0013 16.5999 15.2284 17.1481C15.4554 17.6962 15.8399 18.1648 16.3333 18.4944Z", fill: "currentColor" })));
    }
}
function CopyToClipboard() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", className: "SVGIcon_Button SVGIcon_CopyToClipboard", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", className: "line", strokeWidth: "12", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "178.25,197.25 247,197.25 247,82.5 175,10.25 111.5,10.25 111.5,56 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "none", className: "line", strokeWidth: "12", strokeLinejoin: "round", strokeMiterlimit: "10", points: "155,133 83,60.75 11,60.75 11,247.75 155,247.75 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", className: "line", strokeWidth: "12", strokeLinejoin: "round", strokeMiterlimit: "10", points: "83,60.75 83,133 155,133 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", className: "line", strokeWidth: "12", strokeLinejoin: "round", strokeMiterlimit: "10", points: "175,10.25 175,82.5 247,82.5 " })));
}
function DownArrowContextMenu() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DownArrowContextMenu", "data-name": "Layer 1", viewBox: "0 0 128 128", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "50 59.49 13.21 22.89 4.74 31.39 50 76.41 95.26 31.39 86.79 22.89 50 59.49" })));
}
function ExpanderArrow(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { style: { transform: `rotate(${props.angle}deg)` }, version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", width: "24.833px", height: "21.917px", viewBox: "0 0 24.833 21.917" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "12.5,14.873 3.302,5.723 1.185,7.848 12.5,19.103 23.814,7.848 21.697,5.723 " })));
}
function MagnifyingGlass(props) {
    let strClassName = 'SVGIcon_Button SVGIcon_MagnifyingGlass';
    if (props.className)
        strClassName += ` ${props.className}`;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: strClassName, version: "1.1", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "translate(0,-952.36218)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "ColorSelector", d: "m 40.99855,964.36216 c -15.9798,0 -28.9986,13.01864 -28.9986,28.99862 0,15.97992 13.0188,28.99862 28.9986,28.99862 6.9189,0 13.2881,-2.4349 18.2803,-6.4997 l 23.5927,23.6239 c 1.1714,1.1714 3.0784,1.1715 4.2498,0 1.1716,-1.1715 1.1716,-3.0783 0,-4.2498 l -23.6239,-23.5926 c 4.0649,-4.9923 6.4997,-11.3615 6.4997,-18.28042 0,-15.97998 -13.0187,-28.99862 -28.9986,-28.99862 z m 0,5.99972 c 12.7374,0 22.9989,10.26145 22.9989,22.9989 0,12.73732 -10.2615,22.99892 -22.9989,22.99892 -12.7374,0 -22.9989,-10.2616 -22.9989,-22.99892 0,-12.73745 10.2615,-22.9989 22.9989,-22.9989 z", fill: "currentColor", fillOpacity: "1", stroke: "none", visibility: "visible", display: "inline", overflow: "visible" }))));
}
function Clock() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: "SVGIcon_Button SVGIcon_Clock", version: "1.1", x: "0px", y: "0px", width: "20px", height: "20px", viewBox: "0 0 20 20" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M15.999 15c-.15 0-.303-.034-.446-.105l-4-2A1.001 1.001 0 0111 12V5a1 1 0 012 0v6.382l3.447 1.724A1 1 0 0115.999 15zM12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2z" })));
}
function Microphone(props) {
    let strClassName = 'SVGIcon_Button SVGIcon_Microphone';
    if (props.className)
        strClassName += ` ${props.className}`;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: strClassName, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "-127.5 664.5 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "MicBase" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-64.7,826.3c-0.5-2.9-0.8-5.8-0.8-8.7v-38.2h11.2v36.5L-64.7,826.3z" }),
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-54.8,779.9v35.8l-9.6,9.6c-0.4-2.6-0.6-5.1-0.6-7.6v-37.7H-54.8 M-53.8,778.9H-66v38.7c0,3.3,0.4,6.5,1,9.7l11.2-11.2 V778.9L-53.8,778.9z" })),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M56.8,817.6c0,24.7-24.8,44.9-55.3,44.9c-16.6,0-31.6-6-41.7-15.5l-8.6,8.6c11.1,10.5,26.7,17.5,44.2,18.8v25.1h-35.2 c-2.1,0-3.8,2.7-3.8,6.1c0,3.4,1.7,6.1,3.8,6.1h35.5H7.3h35.5c2.1,0,3.8-2.7,3.8-6.1c0-3.4-1.7-6.1-3.8-6.1H7.6v-25.1 C42,871.8,69,847.3,69,817.6v-38.7H56.8V817.6z" }),
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M69,778.9H56.8v38.7c0,24.7-24.8,44.9-55.3,44.9c-16.6,0-31.6-6-41.7-15.5l-8.6,8.6c11.1,10.5,26.7,17.5,44.2,18.8v25.1 h-35.2c-2.1,0-3.8,2.7-3.8,6.1c0,3.4,1.7,6.1,3.8,6.1h35.5H7.3h35.5c2.1,0,3.8-2.7,3.8-6.1c0-3.4-1.7-6.1-3.8-6.1H7.6v-25.1 C42,871.8,69,847.3,69,817.6V778.9L69,778.9z" }))),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M40.6,712.5c0-21.6-17.5-39.1-39.1-39.1c-21.6,0-39.1,17.5-39.1,39.1v87.4l10-10v-72.4h0v-5c0-16.1,13.1-29.1,29.1-29.1 c16.1,0,29.1,13.1,29.1,29.1v5v14.1l10-10V712.5z" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-4.7,835.4c-2.2-0.5-4.4-1.2-6.4-2.2C-9.1,834.2-6.9,834.9-4.7,835.4z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-0.1,836c-0.2,0-0.4,0-0.6,0C-0.6,836-0.4,836-0.1,836z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M30.6,806.9C30.6,806.9,30.6,806.9,30.6,806.9v-16.6" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-11.9,832.8c0.2,0.1,0.5,0.2,0.7,0.3C-11.4,833-11.7,832.9-11.9,832.8L-11.9,832.8z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-1.7,835.9c-0.3,0-0.5-0.1-0.8-0.1C-2.3,835.8-2,835.8-1.7,835.9z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-3.3,835.7c-0.3-0.1-0.6-0.1-1-0.2C-3.9,835.6-3.6,835.6-3.3,835.7z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M30.6,776.1v14.1v16.6c0,0,0,0,0,0s0,0,0,0c0,16.1-13,29.1-29.1,29.1c-0.5,0-1.1,0-1.6,0c-0.2,0-0.4,0-0.6,0 c-0.3,0-0.6,0-1-0.1c-0.3,0-0.5-0.1-0.8-0.1c-0.2,0-0.5-0.1-0.7-0.1c-0.3-0.1-0.6-0.1-1-0.2c-0.2,0-0.3-0.1-0.5-0.1 c-2.2-0.5-4.4-1.2-6.4-2.2c0,0-0.1,0-0.1,0c-0.2-0.1-0.5-0.2-0.7-0.3l0,0c-3-1.6-5.7-3.6-8-6.1l-7.1,7.1 c7.1,7.6,17.3,12.3,28.5,12.3c21.6,0,39.1-17.5,39.1-39.1v-40.8L30.6,776.1z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-0.8,836c-0.3,0-0.6-0.1-1-0.1C-1.4,835.9-1.1,835.9-0.8,836z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M1.5,836.1c-0.5,0-1.1,0-1.6,0C0.4,836,0.9,836.1,1.5,836.1z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-2.6,835.8c-0.2,0-0.5-0.1-0.7-0.1C-3,835.7-2.8,835.7-2.6,835.8z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M1.5,836.1c16.1,0,29.1-13,29.1-29.1c0,0,0,0,0,0C30.6,823,17.6,836.1,1.5,836.1z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-4.2,835.5c-0.2,0-0.3-0.1-0.5-0.1C-4.5,835.4-4.4,835.5-4.2,835.5z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-11.1,833.2C-11.1,833.2-11.2,833.2-11.1,833.2C-11.2,833.2-11.1,833.2-11.1,833.2z" }))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "MicFill" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-53.8,816.1L-65,827.3c2.2,10.8,7.9,20.5,16.2,28.3l8.6-8.6c-8.5-7.9-13.6-18.2-13.6-29.4V816.1L-53.8,816.1z" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M1.5,834.6c-15.2,0-27.6-12.4-27.6-27.6v-94.5c0-15.2,12.4-27.6,27.6-27.6c15.2,0,27.6,12.4,27.6,27.6v94.5 C29.1,822.2,16.7,834.6,1.5,834.6z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M1.5,696.3c8.9,0,16.1,7.2,16.1,16.1v94.5c0,8.9-7.2,16.1-16.1,16.1c-8.9,0-16.1-7.2-16.1-16.1v-94.5 C-14.6,703.6-7.4,696.3,1.5,696.3 M1.5,673.3c-21.6,0-39.1,17.5-39.1,39.1v94.5c0,21.6,17.5,39.1,39.1,39.1s39.1-17.5,39.1-39.1 v-94.5C40.6,690.8,23.1,673.3,1.5,673.3L1.5,673.3z" }))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "MicStrike", fill: "none", strokeWidth: "1" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { x1: "-82.5", y1: "866.5", x2: "83.5", y2: "700.4" }))));
}
function MicrophoneGamepadUI(props) {
    const { off } = props, svgProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["off"]);
    if (off) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, svgProps),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M14.6999 25.42L18.0799 22.05L33.0599 7.06005L30.9399 4.94005L23.9999 11.88V8.05005C23.9999 6.45875 23.3678 4.93263 22.2426 3.80741C21.1174 2.68219 19.5912 2.05005 17.9999 2.05005C16.4086 2.05005 14.8825 2.68219 13.7573 3.80741C12.6321 4.93263 11.9999 6.45875 11.9999 8.05005V16.05C12.0021 17.0575 12.2579 18.0482 12.7437 18.9308C13.2296 19.8134 13.9298 20.5594 14.7799 21.1L11.9999 23.84C10.6491 22.6903 9.65647 21.1771 9.13994 19.48L5.34994 20.6201C6.05673 22.9386 7.39296 25.0157 9.20994 26.6201L4.93994 30.9401L7.05994 33.0601L14.6999 25.42Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18.3299 26L14.7399 29.58C15.1551 29.6912 15.5757 29.7813 15.9999 29.85V34.01H19.9999V29.89C22.4663 29.5004 24.7732 28.4243 26.6566 26.785C28.54 25.1456 29.9239 23.0091 30.6499 20.6201L26.8199 19.48C26.2501 21.3098 25.1284 22.9186 23.6084 24.0858C22.0885 25.2531 20.2448 25.9217 18.3299 26Z", fill: "currentColor" })));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, svgProps),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M30.65 20.6201L26.82 19.48C26.25 21.376 25.0842 23.0378 23.4955 24.2191C21.9068 25.4004 19.9797 26.0383 18 26.0383C16.0202 26.0383 14.0931 25.4004 12.5044 24.2191C10.9157 23.0378 9.74999 21.376 9.17998 19.48L5.34998 20.6201C6.07599 23.0091 7.45988 25.1456 9.3433 26.785C11.2267 28.4243 13.5336 29.5004 16 29.89V34.05H20V29.89C22.4664 29.5004 24.7732 28.4243 26.6567 26.785C28.5401 25.1456 29.924 23.0091 30.65 20.6201Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18 22.05C19.5913 22.05 21.1174 21.4179 22.2426 20.2927C23.3678 19.1675 24 17.6413 24 16.05V8.05005C24 6.45875 23.3678 4.93263 22.2426 3.80741C21.1174 2.68219 19.5913 2.05005 18 2.05005C16.4087 2.05005 14.8826 2.68219 13.7573 3.80741C12.6321 4.93263 12 6.45875 12 8.05005V16.05C12 17.6413 12.6321 19.1675 13.7573 20.2927C14.8826 21.4179 16.4087 22.05 18 22.05Z", fill: "currentColor" })));
    }
}
function Emoticon() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Emoticon", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeMiterlimit: "10", cx: "128", cy: "128", r: "107.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", d: "M74.484,145.945 c0,0,12.996,37.533,53.514,37.533c38.084,0,53.499-37.533,53.499-37.533" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", x1: "94.5", y1: "97.5", x2: "94.5", y2: "109.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", x1: "160.5", y1: "97.5", x2: "160.5", y2: "109.5" })));
}
function Submit(props) {
    /* Plan to unify these across platforms eventually. Riiiiiight. */
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { fill: "#FFFFFF", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Submit", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 100 100" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "translate(0,-952.36218)" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "m 92.115057,974.14842 a 2.0001999,2.0001999 0 0 0 -1.96764,2.02965 l 0.0376,31.19553 -77.475501,0 16.161909,-15.73013 a 2.0002746,2.0002746 0 1 0 -2.790355,-2.8667 L 6.3913393,1007.9405 a 2.0001999,2.0001999 0 0 0 -0.0011,2.8646 l 19.6896957,19.2036 a 2.0002671,2.0002671 0 1 0 2.792551,-2.8646 l -16.170767,-15.771 79.153048,0 a 2.0001999,2.0001999 0 0 0 1.72959,-0.5437 2.0001999,2.0001999 0 0 0 0.0598,-0.058 2.0001999,2.0001999 0 0 0 0.54259,-1.7218 l -0.0388,-32.87638 a 2.0001999,2.0001999 0 0 0 -2.03297,-2.02522 z", fill: "#FFFFFF", fillOpacity: "1", fillRule: "evenodd", stroke: "none", visibility: "visible", display: "inline", overflow: "visible" }))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "24", height: "24", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Submit" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M4.16683 8.982C4.10732 8.3908 3.83847 7.42693 4.15486 7.17995C4.46877 6.93489 4.7797 6.90487 5.90123 7.31306L31.1931 17.2282C32.2693 17.6503 32.2686 18.335 31.1931 18.7564L5.90123 28.6715C4.77972 29.1235 4.46864 29.0497 4.15487 28.8049C3.83836 28.5579 4.0953 27.5939 4.15484 27.0028L4.7797 21.2151C4.89862 20.0374 5.92644 18.9801 7.0706 18.854L15.467 18.4429C24.1686 17.9924 24.1686 17.9924 15.467 17.5419L7.0706 17.1313C5.92423 17.0053 4.89825 15.9476 4.7797 14.7706L4.16683 8.982Z", fill: "currentColor" })));
    }
}
function TextChat() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { fill: "#FFFFFF", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_TextChat", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "translate(0,0)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M 38 24 C 35.247298 24 33 26.2473 33 29 L 33 34 L 20 34 C 17.247298 34 15 36.2473 15 39 L 15 61 C 15 63.7527 17.247298 66 20 66 L 20 75 A 1.0000999 1.0000999 0 0 0 21.71875 75.6875 L 31.40625 66 L 62 66 C 64.752702 66 67 63.7527 67 61 L 67 56 L 68.59375 56 L 78.28125 65.6875 A 1.0000999 1.0000999 0 0 0 80 65 L 80 56 C 82.752702 56 85 53.7527 85 51 L 85 29 C 85 26.2473 82.752702 24 80 24 L 38 24 z M 38 26 L 80 26 C 81.679296 26 83 27.3207 83 29 L 83 51 C 83 52.6793 81.679296 54 80 54 L 79 54 A 1.0000999 1.0000999 0 0 0 78 55 L 78 62.5625 L 69.71875 54.28125 A 1.0000999 1.0000999 0 0 0 69 54 L 38 54 C 36.320704 54 35 52.6793 35 51 L 35 29 C 35 27.3207 36.320704 26 38 26 z M 44.8125 32 A 1.0043849 1.0043849 0 0 0 45 34 L 73 34 A 1.0000999 1.0000999 0 1 0 73 32 L 45 32 A 1.0000999 1.0000999 0 0 0 44.8125 32 z M 20 36 L 33 36 L 33 51 C 33 53.7527 35.247298 56 38 56 L 65 56 L 65 61 C 65 62.6793 63.679296 64 62 64 L 31 64 A 1.0000999 1.0000999 0 0 0 30.28125 64.28125 L 22 72.5625 L 22 65 A 1.0000999 1.0000999 0 0 0 21 64 L 20 64 C 18.320704 64 17 62.6793 17 61 L 17 39 C 17 37.3207 18.320704 36 20 36 z M 44.8125 39 A 1.0043849 1.0043849 0 0 0 45 41 L 73 41 A 1.0000999 1.0000999 0 1 0 73 39 L 45 39 A 1.0000999 1.0000999 0 0 0 44.8125 39 z M 44.8125 46 A 1.0043849 1.0043849 0 0 0 45 48 L 67 48 A 1.0000999 1.0000999 0 1 0 67 46 L 45 46 A 1.0000999 1.0000999 0 0 0 44.8125 46 z ", transform: "translate(0,0)" }))));
}
function LanguageOptions() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", width: "100px", height: "91.582px", viewBox: "0 0 100 91.582", enableBackground: "new 0 0 100 91.582" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { clipPath: "url(#SVGID_2_)", d: "M88.853,29.724H62.271V11.351C62.262,5.18,57.26,0.179,51.089,0.169H11.255\r\n\t\t\t\tC5.085,0.179,0.085,5.18,0.074,11.351v24.908c-0.001,2.207,0.657,4.36,1.888,6.19c3.942,7.586,22.118,18.799,22.314,18.916\r\n\t\t\t\tc0.389,0.229,0.83,0.354,1.281,0.361c1.351,0.01,2.455-1.074,2.468-2.426c0.003-0.329-0.062-0.654-0.187-0.958\r\n\t\t\t\tc-1.319-3.565-2.341-7.233-3.053-10.968h13.135v18.389C37.93,71.9,42.882,76.882,49.02,76.928H75.29\r\n\t\t\t\tc-0.715,3.724-1.737,7.379-3.054,10.936c-0.517,1.248,0.076,2.678,1.323,3.196c0.303,0.125,0.63,0.188,0.959,0.186\r\n\t\t\t\tc0.451-0.006,0.894-0.13,1.279-0.361c0.197-0.115,18.373-11.329,22.314-18.914c1.235-1.834,1.894-3.997,1.888-6.207V40.906\r\n\t\t\t\tC99.99,34.746,95.01,29.751,88.853,29.724 M32.797,42.449H21.831c-0.721,0.01-1.4,0.327-1.873,0.869\r\n\t\t\t\tc-0.464,0.544-0.669,1.265-0.558,1.973c0,0.228,0.59,3.79,1.641,8.028c-5.517-3.842-12.773-9.425-14.776-13.136\r\n\t\t\t\tc-0.067-0.162-0.149-0.314-0.247-0.46c-0.738-1.033-1.13-2.276-1.116-3.546V11.351c0.008-3.463,2.825-6.264,6.288-6.255h0.065\r\n\t\t\t\th39.833c3.45,0.007,6.246,2.804,6.255,6.255v18.373H49.02c-3.223,0.005-6.286,1.399-8.406,3.825\r\n\t\t\t\tc-1.744-0.054-3.464-0.427-5.074-1.101c2.588-3.257,4.169-7.2,4.548-11.345h1.33c1.359,0,2.463-1.103,2.463-2.463\r\n\t\t\t\tc0-1.361-1.104-2.461-2.463-2.461h-7.784v-4.384c0-1.36-1.102-2.464-2.461-2.464c-1.361,0-2.463,1.104-2.463,2.464v4.384h-7.668\r\n\t\t\t\tc-1.361,0-2.462,1.1-2.462,2.461c0,1.36,1.102,2.463,2.462,2.463H35.13c-0.348,3.137-1.604,6.104-3.613,8.538\r\n\t\t\t\tc-1.439-1.598-2.553-3.46-3.284-5.482c-0.489-1.271-1.916-1.903-3.185-1.414c-1.27,0.489-1.902,1.917-1.412,3.185\r\n\t\t\t\tc0.892,2.395,2.192,4.619,3.841,6.57c-2.017,0.812-4.178,1.208-6.354,1.165c-1.359,0-2.463,1.102-2.463,2.461\r\n\t\t\t\tc0,1.362,1.104,2.465,2.463,2.465c3.647,0.07,7.244-0.868,10.393-2.71c2.032,1.239,4.293,2.049,6.649,2.38\r\n\t\t\t\tc-0.218,0.859-0.327,1.741-0.327,2.627v1.641L32.797,42.449z M95.19,65.763c0.013,1.271-0.379,2.514-1.117,3.547\r\n\t\t\t\tc-0.097,0.138-0.181,0.287-0.246,0.443c-1.938,3.678-9.211,9.277-14.776,13.135c1.099-4.236,1.64-7.799,1.64-8.03\r\n\t\t\t\tc0.111-0.704-0.091-1.425-0.558-1.969c-0.462-0.548-1.138-0.871-1.854-0.887H49.02c-3.447,0-6.246-2.791-6.255-6.239V40.906\r\n\t\t\t\tc0.009-3.452,2.805-6.249,6.255-6.257h39.833c3.449,0.008,6.246,2.805,6.256,6.257L95.19,65.763z M77.834,56.635L77.834,56.635\r\n\t\t\t\tl-6.564-16.42c-0.037-0.092-0.081-0.18-0.133-0.262l-0.099-0.165c-0.047-0.078-0.102-0.15-0.164-0.214l-0.132-0.164l-0.182-0.147\r\n\t\t\t\tl-0.195-0.099c-0.056-0.043-0.116-0.076-0.182-0.098l-0.246-0.132c-0.06-0.009-0.121-0.009-0.18,0l-0.248-0.082h-0.245h-0.231\r\n\t\t\t\th-0.261h-0.214l-0.279,0.082c-0.055-0.007-0.109-0.007-0.164,0l-0.246,0.132l-0.247,0.098c-0.064,0.044-0.124,0.095-0.18,0.147\r\n\t\t\t\tl-0.182,0.148l-0.149,0.166c-0.056,0.066-0.113,0.138-0.161,0.211v0.166l-0.149,0.263l-6.567,16.418l-3.282,8.21\r\n\t\t\t\tc-0.546,1.246,0.026,2.697,1.272,3.24c0.036,0.016,0.072,0.029,0.105,0.042c0.29,0.127,0.604,0.189,0.919,0.182\r\n\t\t\t\tc1.005-0.006,1.905-0.616,2.283-1.544l2.657-6.665h9.854l2.66,6.665c0.383,0.931,1.291,1.54,2.298,1.544\r\n\t\t\t\tc0.31,0.003,0.619-0.059,0.904-0.182c1.269-0.485,1.906-1.907,1.422-3.18c-0.014-0.034-0.028-0.069-0.044-0.103L77.834,56.635z\r\n\t\t\t\tM66.062,55.123l2.939-7.323l2.923,7.323H66.062z" }))));
}
function ResizeIcon() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ResizeIcon", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#020202", d: "M115.512,137.263l21.6-21.6c0,0,25.5,25.5,45.8,45.8l35-35v91.6h-91.6l35-35 C141.012,162.763,115.512,137.263,115.512,137.263z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#020202", d: "M108.312,129.763c-20.3-20.3-35.8-35.8-35.8-35.8l21.6-21.601c0,0,15.5,15.5,35.8,35.801L108.312,129.763z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#020202", d: "M54.312,75.763c-20.3-20.3-15.8-15.8-15.8-15.8l21.6-21.601c0,0-4.5-4.5,15.8,15.801L54.312,75.763z" }))));
}
function Popout() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { fill: "#FFFFFF", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Popout", viewBox: "0 0 8 8", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M0 0v8h8v-2h-1v1h-6v-6h1v-1h-2zm4 0l1.5 1.5-2.5 2.5 1 1 2.5-2.5 1.5 1.5v-4h-4z" })));
}
function X(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ fill: "#FFFFFF", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_X", version: "1.1", x: "0px", y: "0px", viewBox: "-165 95 100 100" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "-74.9,117.2 -102.2,145 -74.9,172.8 -89.1,186.8 -116.2,159.3 -143.2,186.8 -157.5,172.8 -130.2,145 -157.5,117.2 -143.2,103.2 -116.2,130.7 -89.1,103.2" }))));
}
function X_Line(props) {
    const color = props.color || '#FFFFFF';
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_X_Line", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: color, strokeWidth: "45", strokeMiterlimit: "10", x1: "212", y1: "212", x2: "44", y2: "44" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: color, strokeWidth: "45", strokeMiterlimit: "10", x1: "44", y1: "212", x2: "212", y2: "44" })));
}
function Plus(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])("SVGIcon_Button SVGIcon_Plus", className), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "horizontalLine", fill: "none", stroke: "currentColor", strokeWidth: "45", strokeLinecap: "square", strokeMiterlimit: "10", x1: "73.333", y1: "128", x2: "183.333", y2: "128" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "verticalLine", fill: "none", stroke: "currentColor", strokeWidth: "45", strokeLinecap: "square", strokeMiterlimit: "10", x1: "128.333", y1: "73.335", x2: "128.333", y2: "183.333" })));
}
function PlusFilled(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 12 12", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd", d: "M1 0C0.447715 0 0 0.447715 0 1V11C0 11.5523 0.447715 12 1 12H11C11.5523 12 12 11.5523 12 11V1C12 0.447715 11.5523 0 11 0H1ZM8.85703 6.95227H6.95227V8.85703H5.0475V6.95227H3.14274V5.0475H5.0475V3.14274H6.95227V5.0475H8.85703V6.95227Z" })));
}
function FriendFilled(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 12 12", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd", d: "M1 0C0.447715 0 0 0.447715 0 1V11C0 11.5523 0.447715 12 1 12H11C11.5523 12 12 11.5523 12 11V1C12 0.447715 11.5523 0 11 0H1ZM6.00009 9.14281V7.97879C6.00009 7.48484 5.80443 7.01112 5.45615 6.66185C5.10787 6.31258 4.63549 6.11636 4.14295 6.11636C3.65041 6.11636 3.17803 6.31258 2.82975 6.66185C2.48147 7.01112 2.28581 7.48484 2.28581 7.97879V9.14281H6.00009ZM4.72332 5.24139C4.55153 5.3565 4.34956 5.41794 4.14295 5.41794C4.00568 5.41825 3.8697 5.39136 3.74282 5.33882C3.61594 5.28628 3.50066 5.20913 3.40359 5.11179C3.30653 5.01445 3.22959 4.89884 3.1772 4.77159C3.12481 4.64435 3.098 4.50799 3.09831 4.37032C3.09831 4.16313 3.15957 3.96058 3.27436 3.7883C3.38915 3.61602 3.5523 3.48174 3.74318 3.40245C3.93407 3.32316 4.14411 3.30241 4.34675 3.34283C4.54939 3.38326 4.73553 3.48303 4.88162 3.62955C5.02772 3.77606 5.12721 3.96273 5.16752 4.16594C5.20783 4.36916 5.18714 4.5798 5.10807 4.77123C5.02901 4.96266 4.89511 5.12627 4.72332 5.24139ZM8.52066 5.77217C8.76478 5.86581 8.98645 6.01006 9.17116 6.19551C9.34357 6.3686 9.48028 6.57406 9.57349 6.80015C9.6667 7.02624 9.71457 7.26853 9.71438 7.51318V8.6772H6.92866V7.97879C6.93046 7.39391 6.74762 6.82346 6.40634 6.34916C6.56949 6.14438 6.77391 5.97645 7.00622 5.85634C7.23854 5.73622 7.49351 5.66664 7.75448 5.65214C8.01545 5.63764 8.27654 5.67854 8.52066 5.77217ZM8.43761 4.77578C8.26582 4.89089 8.06385 4.95233 7.85724 4.95233C7.71996 4.95264 7.58399 4.92575 7.45711 4.87321C7.33023 4.82068 7.21494 4.74352 7.11788 4.64618C7.02081 4.54884 6.94388 4.43323 6.89149 4.30598C6.8391 4.17874 6.81229 4.04238 6.81259 3.90472C6.81259 3.69752 6.87386 3.49497 6.98865 3.32269C7.10343 3.15041 7.26658 3.01613 7.45747 2.93684C7.64835 2.85755 7.85839 2.8368 8.06104 2.87723C8.26368 2.91765 8.44981 3.01743 8.59591 3.16394C8.74201 3.31045 8.8415 3.49712 8.88181 3.70034C8.92211 3.90355 8.90143 4.11419 8.82236 4.30562C8.74329 4.49705 8.6094 4.66067 8.43761 4.77578Z" })));
}
function VoiceRoom(props) {
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_VoiceRoom", x: "0px", y: "0px", width: "64px", height: "64px", viewBox: "0 0 64 64", enableBackground: "new 0 0 64 64" },
            !props.exitOnly && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "Bubble", fill: "none", strokeMiterlimit: "1", strokeWidth: "2.5px", d: "M60.1,32.3c0,15.1-12.3,27.3-27.4,27.3 c-5,0-9.7-1.4-13.8-3.7c-1.8-1.1-15,5.4-13.8,3.4c1.7-2.9,5.9-10.3,4.7-12C7,43,5.3,37.8,5.3,32.3C5.3,17.2,17.6,5,32.7,5 C47.8,5,60.1,17.2,60.1,32.3z" })),
            !props.exitOnly && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "AudioLines", opacity: "0", strokeWidth: "1px", d: "M37.2,51.1c-0.5,0-1-0.1-1.3-0.4c-0.7-0.5-0.7-1.3,0-1.8c6.3-4.4,9.8-10.2,9.8-16.4c0-6.2-3.5-12-9.8-16.4 c-0.7-0.5-0.7-1.3,0-1.8s1.9-0.5,2.6,0c7.1,4.9,10.9,11.4,10.9,18.3c0,6.9-3.9,13.4-10.9,18.3C38.2,51,37.7,51.1,37.2,51.1 M21.4,40.2c0.5,0,0.9-0.1,1.3-0.4c2.8-2,4.3-4.6,4.3-7.3s-1.5-5.4-4.3-7.3c-0.7-0.5-1.9-0.5-2.6,0c-0.7,0.5-0.7,1.3,0,1.8 c2.1,1.5,3.3,3.4,3.3,5.5c0,2.1-1.2,4-3.3,5.5c-0.7,0.5-0.7,1.3,0,1.8C20.4,40.1,20.9,40.2,21.4,40.2 M29.3,45.7 c0.5,0,1-0.1,1.3-0.4c4.9-3.4,7.7-7.9,7.7-12.7c0-4.8-2.7-9.3-7.7-12.7c-0.7-0.5-1.9-0.5-2.6,0c-0.7,0.5-0.7,1.3,0,1.8 c4.2,2.9,6.6,6.8,6.6,10.9c0,4.1-2.3,8-6.6,10.9c-0.7,0.5-0.7,1.3,0,1.8C28.4,45.5,28.8,45.7,29.3,45.7" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Arrow", opacity: props.exitOnly ? 1 : 0 },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "41,30.7 14.5,30.7 23.5,19.4 " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "41,30.7 14.5,30.7 23.5,42 " })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "ExitDoor", opacity: props.exitOnly ? 1 : 0, strokeLinecap: "round", strokeMiterlimit: "1", strokeWidth: "2px", fill: "none", points: "32.5,22.1 32.5,17.7 47.7,17.7 47.7,43.8 32.5,43.8 32.5,39.5" })),
            !props.exitOnly && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Microphone" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M40.971,28.593v6.278c0,4.007-4.023,7.284-8.971,7.284c-2.693,0-5.126-0.974-6.765-2.516 c-1.379-1.28-2.207-2.952-2.207-4.769v-6.278l0,0H21.05v6.278c0,0.536,0.064,1.055,0.162,1.573 c0.357,1.752,1.281,3.325,2.627,4.592c1.801,1.702,4.332,2.839,7.17,3.049v4.072H25.3c-0.341,0-0.616,0.438-0.616,0.989 c0,0.552,0.275,0.99,0.616,0.99h5.759h1.882H38.7c0.341,0,0.616-0.438,0.616-0.99c0-0.551-0.275-0.989-0.616-0.989h-5.71v-4.072 c5.58-0.422,9.96-4.396,9.96-9.214v-6.278H40.971z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M32,39.841c-3.493,0-6.343-2.344-6.343-5.213v-17.85c0-2.871,2.85-5.213,6.343-5.213s6.343,2.342,6.343,5.213v17.85,C38.343,37.497,35.493,39.841,32,39.841z" })))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_VoiceRoom", viewBox: "0 0 36 36", fill: "none" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M31.7 15.75C31.703 13.1045 30.94 10.5148 29.5031 8.2936C28.0663 6.07238 26.0171 4.31465 23.603 3.23272C21.189 2.15079 18.5133 1.79092 15.8991 2.19659C13.285 2.60226 10.8442 3.75611 8.87157 5.51878C6.89893 7.28145 5.47882 9.57755 4.78275 12.1298C4.08667 14.682 4.14441 17.3811 4.94899 19.9013C5.75356 22.4214 7.27057 24.6546 9.31678 26.3313C11.363 28.008 13.8509 29.0565 16.48 29.35V35.05L27.31 25.79C28.6947 24.5098 29.7995 22.9569 30.555 21.2291C31.3105 19.5012 31.7003 17.6358 31.7 15.75ZM14.25 9.79997C14.25 8.80541 14.6451 7.85158 15.3483 7.14832C16.0516 6.44506 17.0054 6.04997 18 6.04997C18.9945 6.04997 19.9484 6.44506 20.6516 7.14832C21.3549 7.85158 21.75 8.80541 21.75 9.79997V14.8C21.75 15.7945 21.3549 16.7484 20.6516 17.4516C19.9484 18.1549 18.9945 18.55 18 18.55C17.0054 18.55 16.0516 18.1549 15.3483 17.4516C14.6451 16.7484 14.25 15.7945 14.25 14.8V9.79997ZM19.25 23.45V26.05H16.75V23.45C15.2086 23.2066 13.7667 22.5346 12.5891 21.5107C11.4114 20.4869 10.5454 19.1525 10.09 17.66L12.49 16.94C12.8494 18.1186 13.5778 19.1505 14.568 19.8838C15.5582 20.6171 16.7578 21.0129 17.99 21.0129C19.2221 21.0129 20.4217 20.6171 21.4119 19.8838C22.4021 19.1505 23.1306 18.1186 23.49 16.94L25.89 17.66C25.4361 19.1498 24.5731 20.4824 23.3992 21.5059C22.2254 22.5295 20.7878 23.2031 19.25 23.45Z", fill: "currentColor" })));
    }
}
function ExitIcon() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ExitIcon", x: "0px", y: "0px", width: "64px", height: "64px", viewBox: "0 0 64 64", enableBackground: "new 0 0 64 64" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Arrow" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "41,30.7 14.5,30.7 23.5,19.4 " }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "41,30.7 14.5,30.7 23.5,42 " })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "ExitDoor", strokeLinecap: "round", strokeMiterlimit: "1", strokeWidth: "2px", fill: "none", points: "32.5,22.1 32.5,17.7 47.7,17.7 47.7,43.8 32.5,43.8 32.5,39.5" }))));
}
function TextRoom() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_TextRoom", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256", stroke: "#000", strokeWidth: "10px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "ScratchPad" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "0", strokeMiterlimit: "10", d: "M179.751,40.994h14.869 c8.388,0,15.25,6.862,15.25,15.25v141.193c0,8.388-6.862,15.25-15.25,15.25H57.37c-8.388,0-15.25-6.862-15.25-15.25V56.244 c0-8.388,6.862-15.25,15.25-15.25h14.869H179.751z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "0", strokeLinecap: "round", strokeMiterlimit: "10", x1: "74.495", y1: "27.313", x2: "74.495", y2: "54.063" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "0", strokeLinecap: "round", strokeMiterlimit: "10", x1: "124.495", y1: "27.313", x2: "124.495", y2: "54.063" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "0", strokeLinecap: "round", strokeMiterlimit: "10", x1: "174.745", y1: "27.313", x2: "174.745", y2: "54.063" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "TextLines", x1: "71.6", y1: "115.4", x2: "179.4", y2: "115.4" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "TextLines", x1: "71.6", y1: "145.8", x2: "143.3", y2: "145.8" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "TextLines", x1: "71.6", y1: "175.9", x2: "179.4", y2: "175.9" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "TextLines", x1: "73.7", y1: "82.7", x2: "166.8", y2: "82.7" })));
}
function Headphones(props) {
    let strClassName = 'SVGIcon_Button SVGIcon_Headphones';
    if (props.className)
        strClassName += ` ${props.className}`;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: strClassName, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "-305.5 396.5 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "HeadPhonesBase" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", d: "M-176.5,418.7c-37,0-69.5,30.2-69.5,64.5v25.3c11.3,2.3,19.9,12.3,19.9,24.3v8.6l100.9-100.9 C-138.2,427.3-156.7,418.7-176.5,418.7z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-226.2,532.9c0-12-8.5-22-19.9-24.3v-25.3c0-34.4,32.5-64.5,69.5-64.5c19.8,0,38.3,8.6,51.2,21.9l6.9-6.9 c-14.8-15.1-35.7-24.9-58.2-24.9c-42.3,0-79.4,34.8-79.4,74.5v25.3c-11.3,2.3-19.9,12.3-19.9,24.3v29.8c0,7.8,3.6,14.7,9.2,19.3 l40.5-40.5V532.9z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-97.1,508.6v-25.3c0-7.5-1.3-14.8-3.8-21.8l-7.9,7.9c1.2,4.5,1.8,9.1,1.8,13.9v25.3c-11.3,2.3-19.9,12.3-19.9,24.3v29.8 c0,13.7,11.1,24.8,24.8,24.8c13.7,0,24.8-11.1,24.8-24.8v-29.8C-77.2,520.9-85.8,510.9-97.1,508.6z" }))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "HeadphonesStrike" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", x1: "-260.5", y1: "598.5", x2: "-94.5", y2: "432.4" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "HeadPhonesFill" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-226.2,562.7v-21.2l-40.5,40.5c4.3,3.5,9.7,5.6,15.6,5.6C-237.3,587.5-226.2,576.4-226.2,562.7z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-118.3,433.7l-6.9,6.9c7.9,8.1,13.7,18,16.5,28.8l7.9-7.9C-104.5,451.1-110.5,441.6-118.3,433.7z" }))));
}
function HeadphonesGamepadUI(props) {
    const { off } = props, svgProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["off"]);
    if (off) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 36 36", fill: "none" }, svgProps),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M31.06 13L27.82 16.24C27.9314 16.8338 27.9916 17.436 28 18.04C28.001 19.0585 27.8424 20.0707 27.53 21.04H24L21 29.04L26 32.04C31.07 25.77 31.74 20.69 31.74 20.69C31.9114 19.8205 31.9985 18.9364 32 18.05C32.0008 16.3231 31.6821 14.611 31.06 13Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M33.06 6.76005L30.94 4.64005L27.65 7.93005C25.6668 6.04325 23.1741 4.77921 20.48 4.2943C17.786 3.80939 15.0089 4.12489 12.4923 5.20176C9.97574 6.27863 7.83004 8.06963 6.32066 10.3532C4.81129 12.6368 4.00447 15.3127 4 18.05C4.00415 18.94 4.09458 19.8275 4.27 20.7C4.8128 23.3864 5.8541 25.9472 7.34 28.25L3.94 31.64L6.06 33.76L33.06 6.76005ZM12.69 22.89L12 21.05H8.47C8.15762 20.0807 7.99903 19.0685 8 18.05C8.00457 16.104 8.57689 14.2015 9.6468 12.5759C10.7167 10.9503 12.2377 9.67215 14.0233 8.89825C15.8089 8.12435 17.7815 7.88828 19.6993 8.21899C21.6171 8.54969 23.3967 9.4328 24.82 10.76L12.69 22.89Z", fill: "currentColor" })));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 36 36", fill: "none" }, svgProps),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M32 18.05C32 14.337 30.525 10.7761 27.8995 8.15055C25.274 5.52504 21.713 4.05005 18 4.05005C14.287 4.05005 10.726 5.52504 8.1005 8.15055C5.475 10.7761 4 14.337 4 18.05C4.00415 18.94 4.09457 19.8275 4.27 20.7001C4.27 20.7001 4.93 25.78 10 32.05L15 29.05L12 21.05H8.47C8.15762 20.0807 7.99903 19.0685 8 18.05C8 15.3979 9.05357 12.8543 10.9289 10.979C12.8043 9.10362 15.3478 8.05005 18 8.05005C20.6522 8.05005 23.1957 9.10362 25.0711 10.979C26.9464 12.8543 28 15.3979 28 18.05C28.001 19.0685 27.8424 20.0807 27.53 21.05H24L21 29.05L26 32.05C31.07 25.78 31.74 20.7001 31.74 20.7001C31.9121 19.8272 31.9991 18.9397 32 18.05Z", fill: "currentColor" })));
    }
}
function IncomingVoiceCall(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21.1334 10.5001C21.1353 8.73644 20.6267 7.00996 19.6688 5.52915C19.5205 5.29997 19.3625 5.0782 19.1953 4.86435L17.452 6.60766L16.0589 5.21472L17.8215 3.45216C17.1909 2.93055 16.4899 2.49338 15.7354 2.15523C14.126 1.43394 12.3422 1.19403 10.5995 1.46448C8.8567 1.73492 7.22951 2.50415 5.91442 3.67927C4.59933 4.85438 3.65259 6.38512 3.18854 8.08659C2.72449 9.78807 2.76298 11.5875 3.29937 13.2676C3.83575 14.9477 4.84709 16.4365 6.21123 17.5543C7.57537 18.6721 9.23396 19.3711 10.9867 19.5667V23.3667L18.2067 17.1934C19.1298 16.3399 19.8664 15.3047 20.37 14.1528C20.8737 13.0009 21.1336 11.7573 21.1334 10.5001ZM14.4972 9.56583L16.3388 7.72437L14.9458 6.33143L13.1041 8.17289L14.4972 9.56583ZM7.33337 15.3334L7.33337 9.42369H9.30347L9.30347 11.9688L11.9907 9.2858L13.3816 10.6766L10.6983 13.3635H13.2437V15.3334H7.33337Z", fill: "currentColor" })));
}
function OutgoingVoiceCall(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.7 15.75C31.703 13.1045 30.94 10.5148 29.5031 8.2936C28.0663 6.07238 26.0171 4.31465 23.603 3.23272C21.189 2.15079 18.5133 1.79092 15.8991 2.19659C13.285 2.60226 10.8442 3.75611 8.87157 5.51878C6.89893 7.28145 5.47882 9.57755 4.78275 12.1298C4.08667 14.682 4.14441 17.3811 4.94899 19.9013C5.44737 21.4623 6.2191 22.9133 7.22063 24.1901L9.32215 22.0886L11.4117 24.178L9.28472 26.305C9.29539 26.3138 9.30608 26.3226 9.31678 26.3313C11.363 28.008 13.8509 29.0565 16.48 29.35V35.05L27.31 25.79C28.6947 24.5098 29.7995 22.9569 30.555 21.2291C31.3105 19.5012 31.7003 17.6358 31.7 15.75ZM24.5 9V17.8646H21.5449V14.0469L17.5141 18.0714L15.4277 15.9853L19.4526 11.9549H15.6346V9H24.5ZM13.7543 17.6514L10.9918 20.4136L13.0814 22.503L15.8439 19.7408L13.7543 17.6514Z", fill: "currentColor" })));
}
function VoiceCallOnHold(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.7 15.75C31.703 13.1045 30.94 10.5148 29.5031 8.2936C28.0663 6.07238 26.0171 4.31465 23.603 3.23272C21.189 2.15079 18.5133 1.79092 15.8991 2.19659C13.285 2.60226 10.8442 3.75611 8.87157 5.51878C6.89893 7.28145 5.47882 9.57755 4.78275 12.1298C4.08667 14.682 4.14441 17.3811 4.94899 19.9013C5.75356 22.4214 7.27057 24.6546 9.31678 26.3313C11.363 28.008 13.8509 29.0565 16.48 29.35V35.05L27.31 25.79C28.6947 24.5098 29.7995 22.9569 30.555 21.2291C31.3105 19.5012 31.7003 17.6358 31.7 15.75ZM18 26.75C24.0751 26.75 29 21.8251 29 15.75C29 9.67487 24.0751 4.75 18 4.75C11.9249 4.75 7 9.67487 7 15.75C7 21.8251 11.9249 26.75 18 26.75Z", fill: "currentColor" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M16.3333 21H13V11H16.3333V21ZM23 11H19.6667V21H23V11Z", fill: "currentColor" })));
}
function Group(props) {
    /* Plan to unify these across platforms eventually. Riiiiiight. */
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Group", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "translate(0,-952.36218)" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M58.6,970.4c-15.4,0-28.1,12.7-28.1,28.1c0,15.4,12.7,28.1,28.1,28.1s28.1-12.7,28.1-28.1\tC86.7,983,74,970.4,58.6,970.4z M202.1,970.4c-15.4,0-28.1,12.7-28.1,28.1c0,15.4,12.7,28.1,28.1,28.1s28.1-12.7,28.1-28.1 C230.2,983,217.6,970.4,202.1,970.4z M130.4,986c-15.4,0-28.1,12.7-28.1,28.1c0,15.4,12.7,28.1,28.1,28.1s28.1-12.7,28.1-28.1 C158.5,998.6,145.8,986,130.4,986z M242.8,1110.6c0-0.1,0-17.9,0-18l-0.1-16.1c0-22.4-18.2-40.6-40.6-40.6 c-17.8,0-30,7.7-36.3,18.8c-2,3.5-3.4,7.3-4.5,11.1c-7.5-8.7-18.6-14.3-31-14.3s-23.5,5.6-31,14.3c-1.1-3.9-2.5-7.6-4.5-11.1 c-6.3-11.1-18.4-18.8-36.3-18.8c-22.4,0-40.6,18.2-40.6,40.6v46.8c0,3.4,2.8,6.2,6.2,6.2h12.5v31.2c0,3.4,2.8,6.2,6.2,6.2h31.2 c3.4,0,6.2-2.8,6.2-6.2v-31.2h9.4v9.4c0,3.4,2.8,6.2,6.2,6.2h12.5v31.2c0,3.4,2.8,6.2,6.2,6.2H146c3.4,0,6.2-2.8,6.2-6.2v-31.2 h12.5c3.4,0,6.2-2.8,6.2-6.2v-9.4h9.4v31.2c0,3.4,2.8,6.2,6.2,6.2h31.2c3.4,0,6.2-2.8,6.2-6.2v-31.2h12.5c3.4,0,6.3-2.7,6.3-6.2\tV1110.6z" }))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Group", viewBox: "0 0 36 36", fill: "none" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M7.71001 20.11C7.23859 21.3527 6.99798 22.6709 7.00001 24V30H1.23001V25.38C1.23001 24.6726 1.3695 23.9722 1.64049 23.3189C1.91149 22.6655 2.30867 22.0719 2.80931 21.5722C3.30995 21.0725 3.90422 20.6764 4.5581 20.4067C5.21199 20.1369 5.91266 19.9987 6.62001 20C6.98607 20.001 7.35115 20.0378 7.71001 20.11ZM6.50001 10C5.80778 10 5.13109 10.2053 4.55552 10.5899C3.97994 10.9744 3.53134 11.5211 3.26643 12.1606C3.00153 12.8002 2.93221 13.5039 3.06726 14.1828C3.20231 14.8618 3.53565 15.4854 4.02514 15.9749C4.51462 16.4644 5.13826 16.7977 5.81719 16.9328C6.49613 17.0678 7.19986 16.9985 7.8394 16.7336C8.47894 16.4687 9.02557 16.0201 9.41016 15.4445C9.79474 14.8689 10 14.1922 10 13.5C10 12.5717 9.63126 11.6815 8.97488 11.0251C8.31851 10.3688 7.42827 10 6.50001 10ZM13.5 9.5C13.5 8.60999 13.7639 7.73996 14.2584 6.99994C14.7529 6.25991 15.4557 5.68314 16.2779 5.34254C17.1002 5.00195 18.005 4.91283 18.8779 5.08647C19.7508 5.2601 20.5527 5.68868 21.182 6.31802C21.8113 6.94736 22.2399 7.74918 22.4135 8.6221C22.5872 9.49501 22.4981 10.3998 22.1575 11.2221C21.8169 12.0443 21.2401 12.7471 20.5001 13.2416C19.7601 13.7361 18.89 14 18 14C17.4087 14.0013 16.8229 13.8858 16.2764 13.6601C15.7298 13.4345 15.2332 13.103 14.8151 12.6849C14.397 12.2668 14.0655 11.7702 13.8399 11.2236C13.6142 10.6771 13.4987 10.0913 13.5 9.5ZM25 24V30H11V24C11 22.1435 11.7375 20.363 13.0503 19.0503C14.363 17.7375 16.1435 17 18 17C19.8565 17 21.637 17.7375 22.9498 19.0503C24.2625 20.363 25 22.1435 25 24ZM35 25.38V30H29V24C29.0038 22.6921 28.77 21.3944 28.31 20.17C28.7376 20.0576 29.1779 20.0004 29.62 20C31.0469 20 32.4153 20.5668 33.4242 21.5758C34.4332 22.5847 35 23.9531 35 25.38ZM29.5 17C28.8078 17 28.1311 16.7947 27.5555 16.4101C26.9799 16.0256 26.5313 15.4789 26.2664 14.8394C26.0015 14.1999 25.9322 13.4961 26.0673 12.8172C26.2023 12.1383 26.5357 11.5146 27.0251 11.0251C27.5146 10.5356 28.1383 10.2023 28.8172 10.0673C29.4961 9.9322 30.1999 10.0015 30.8394 10.2664C31.4789 10.5313 32.0256 10.9799 32.4102 11.5555C32.7947 12.1311 33 12.8078 33 13.5C33 14.4283 32.6313 15.3185 31.9749 15.9749C31.3185 16.6313 30.4283 17 29.5 17Z", fill: "currentColor" })));
    }
}
function RecentChats(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_RecentChats", viewBox: "0 0 22 22", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd", d: "M0.333252 0.666626V8.66663V11.3333L3.66659 8.66663H14.9999V0.666626H0.333252ZM6.99992 11.3333V19.3333H18.3333L21.6666 22V19.3333V11.3333H6.99992Z" })));
}
function ScratchPad() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ScratchPad", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M214.75,43.09c0-12.065-9.872-21.938-21.938-21.938h-14.26v-6.947c0-2.194-1.462-3.656-3.656-3.656 c-2.193,0-3.656,1.462-3.656,3.656v6.947h-40.584v-6.947c0-2.194-1.463-3.656-3.656-3.656c-2.194,0-3.656,1.462-3.656,3.656v6.947 H82.759v-6.947c0-2.194-1.462-3.656-3.656-3.656c-2.193,0-3.656,1.462-3.656,3.656v6.947H61.188 c-12.066,0-21.938,9.872-21.938,21.938v179.522c0,12.065,9.872,21.938,21.938,21.938h131.625c12.065,0,21.938-9.872,21.938-21.938 V43.09z M192.813,237.237H61.188c-8.043,0-14.625-6.581-14.625-14.625V43.09c0-8.043,6.582-14.625,14.625-14.625h14.259v21.378 c0,2.194,1.463,3.656,3.656,3.656c2.194,0,3.656-1.462,3.656-3.656V28.465h40.584v21.378c0,2.194,1.462,3.656,3.656,3.656 c2.193,0,3.656-1.462,3.656-3.656V28.465h40.584v21.378c0,2.194,1.463,3.656,3.656,3.656c2.194,0,3.656-1.462,3.656-3.656V28.465 h14.26c8.044,0,14.625,6.582,14.625,14.625v179.522C207.438,230.656,200.856,237.237,192.813,237.237z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "TextLines" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "11", strokeMiterlimit: "10", x1: "73.1", y1: "124.1", x2: "180.9", y2: "124.1" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "11", strokeMiterlimit: "10", x1: "73.1", y1: "154.5", x2: "144.799", y2: "154.5" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "11", strokeMiterlimit: "10", x1: "73.1", y1: "184.601", x2: "180.9", y2: "184.601" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "11", strokeMiterlimit: "10", x1: "73.1", y1: "91.4", x2: "166.199", y2: "91.4" }))));
}
function Pin(props) {
    let strClasses = "SVGIcon_Button SVGIcon_Pin";
    if (props.bPinned)
        strClasses += " Pinned";
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: strClasses, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "point", d: "M134.787,129.241v52.051v26.025c0.041,4.334-0.092,8.677,0.094,13.009c-1.493,4.332-3.129,8.675-5.239,13.009 c-2.109-4.334-3.734-8.677-5.237-13.009c0.186-4.333,0.05-8.677,0.092-33.009v-26.025v-32.051v-5.146h10.291V129.241z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "head", d: "M186.55,151.049H73.351l-5.146-5.146c0-23.791,11.186-40.359,30.871-46.091V39.394 c-6.843-3.478-17.164-10.034-17.154-27.312l5.146-5.146h85.167l5.146,5.146c0,17.227-9.828,23.803-16.537,27.292v60.521 c19.664,6.062,30.852,22.609,30.852,46.01L186.55,151.049z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "ground", opacity: props.bPinned ? 1 : 0, fill: "none", stroke: "#ffffff", strokeWidth: "16", strokeLinecap: "round", strokeMiterlimit: "10", x1: "33.833", y1: "238.5", x2: "221.834", y2: "238.5" })));
}
function PlusCircle(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])("SVGIcon_Button SVGIcon_PlusCircle", className), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        !props.nocircle && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", strokeWidth: "10", strokeMiterlimit: "10", cx: "128", cy: "128", r: "95.333" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "horizontalLine", fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "73.333", y1: "128", x2: "183.333", y2: "128" }),
        !props.minus && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { className: "verticalLine", fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "128.333", y1: "73.335", x2: "128.333", y2: "183.333" })));
}
function AddFriend(props) {
    if ((0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.63604 19.636C7.32387 17.9482 9.61305 17 12 17C12.4664 17 12.9292 17.0362 13.3844 17.1071C13.1338 18.0289 13 18.9988 13 20C13 25.0351 16.383 29.2801 21 30.5859V31H3V26C3 23.6131 3.94821 21.3239 5.63604 19.636ZM14.7779 13.1573C13.9556 13.7068 12.9889 14 12 14C10.6739 14 9.40215 13.4732 8.46447 12.5355C7.52678 11.5979 7 10.3261 7 9C7 8.0111 7.29324 7.0444 7.84265 6.22215C8.39206 5.39991 9.17295 4.75904 10.0866 4.3806C11.0002 4.00217 12.0055 3.90315 12.9755 4.09608C13.9454 4.289 14.8363 4.76521 15.5355 5.46447C16.2348 6.16373 16.711 7.05465 16.9039 8.02455C17.0969 8.99446 16.9978 9.99979 16.6194 10.9134C16.241 11.827 15.6001 12.6079 14.7779 13.1573Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M24 28C28.4183 28 32 24.4183 32 20C32 15.5817 28.4183 12 24 12C19.5817 12 16 15.5817 16 20C16 24.4183 19.5817 28 24 28ZM22.5 21.5V26H25.5V21.5H30V18.5H25.5V14H22.5V18.5H18V21.5H22.5Z", fill: "currentColor" })));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_AddFriend", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "friendHead", transform: "matrix(1.34048,0,0,1.34048,-10.0942,-5.50445)" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "86.296", cy: "47.419", r: "33.526" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "friendBody", d: "M100.353,170.882c0-23.589,10.397-44.736,26.842-59.152c-3.352-0.423-6.773-0.649-10.257-0.649H94.231\tc-39.775,0-56.481,28.271-56.481,63.099v41.88c0,0-0.3,16.369,35.917,21.813c36.217,5.444,73.651,5,73.651,5 C119.666,230.681,100.353,203.044,100.353,170.882z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "plusCircle", d: "M179.01,103.892c-36.998,0-66.99,29.992-66.99,66.99s29.994,66.989,66.99,66.989c36.997,0,66.99-29.991,66.99-66.989 S216.008,103.892,179.01,103.892z M217.893,175.882h-33.647v33.882c0,2.762-2.239,5-5,5s-5-2.238-5-5v-33.882h-33.647 c-2.762,0-5-2.238-5-5c0-2.763,2.238-5,5-5h33.647V132.47c0-2.762,2.239-5,5-5s5,2.238,5,5v33.412h33.647c2.762,0,5,2.237,5,5 C222.893,173.643,220.654,175.882,217.893,175.882z" })));
    }
}
function FriendRequest() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_4", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_FriendRequest", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "friendHead", transform: "matrix(1.34048,0,0,1.34048,-10.0942,-5.50445)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "85.923", cy: "47.419", r: "33.526" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "friendBody", d: "M100.353,170.882c0-23.589,10.397-44.736,26.842-59.152c-3.352-0.423-6.773-0.649-10.257-0.649H94.231\tc-39.775,0-56.481,28.271-56.481,63.099v41.88c0,0-0.3,16.369,35.917,21.813c36.217,5.444,73.651,5,73.651,5 C119.666,230.681,100.353,203.044,100.353,170.882z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "friendBodyFull", d: "M176.504,217.922v-42.624c0-35.443-17.002-64.217-57.483-64.217H106.96h-1.017H94.898 c-40.48,0.001-57.484,28.774-57.484,64.217v42.624c0,0,0,22.197,69.544,22.197C177.521,240.121,176.504,217.922,176.504,217.922z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "friendArm", d: "M18.167,63.833c6.53-0.734,39.348,39.127,50.007,47.647s21.327,16.686,15.16,25.353s-20.646,16.74-36.167,2.5 S-1.349,90.532,0,85.333S8.599,64.909,18.167,63.833z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "redCircle", d: "M178.51,103.892c-36.998,0-66.99,29.992-66.99,66.99s29.994,66.99,66.99,66.99c36.997,0,66.99-29.992,66.99-66.99 S215.508,103.892,178.51,103.892z" })));
}
function Invite(props) {
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Invite", x: "0px", y: "0px", width: "256px", height: "255.999px", viewBox: "0 0 256 255.999" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M165.678,20.535c-17.251,0-31.386,14.135-31.386,31.386c0,17.252,14.135,31.386,31.386,31.386 c17.251,0,31.386-14.134,31.386-31.386C197.063,34.67,182.929,20.535,165.678,20.535z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M165.678,93.121c24.995,0,45.335,20.34,45.335,45.335v52.31c0,3.853-3.123,6.975-6.975,6.975h-13.95v34.874 c0,3.852-3.123,6.974-6.974,6.975h-34.874c-3.852-0.001-6.974-3.123-6.975-6.975v-34.874h-13.95c-3.852,0-6.974-3.123-6.974-6.975 v-52.31C120.343,113.461,140.683,93.121,165.678,93.121z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "invitePlus" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "22", strokeMiterlimit: "10", x1: "14", y1: "128", x2: "101.5", y2: "128" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "22", strokeMiterlimit: "10", x1: "57.75", y1: "84.25", x2: "57.75", y2: "171.75" }))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", className: "SVGIcon_Button SVGIcon_Invite", xmlns: "http://www.w3.org/2000/svg" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M5.5 7C5.5 6.20888 5.7346 5.43552 6.17412 4.77772C6.61365 4.11992 7.23836 3.60723 7.96927 3.30448C8.70017 3.00173 9.50444 2.92252 10.2804 3.07686C11.0563 3.2312 11.769 3.61216 12.3284 4.17157C12.8878 4.73098 13.2688 5.44372 13.4231 6.21964C13.5775 6.99556 13.4983 7.79983 13.1955 8.53074C12.8928 9.26164 12.3801 9.88635 11.7223 10.3259C11.0645 10.7654 10.2911 11 9.5 11C8.43913 11 7.42172 10.5786 6.67157 9.82843C5.92143 9.07828 5.5 8.06087 5.5 7ZM9.5 14C7.51088 14 5.60322 14.7902 4.1967 16.1967C2.79018 17.6032 2 19.5109 2 21.5V26H5.2L6 35H13L13.8 26H17V21.5C17 19.5109 16.2098 17.6032 14.8033 16.1967C13.3968 14.7902 11.4891 14 9.5 14Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M34.959 9.48904C34.9608 7.85167 34.4886 6.24879 33.5993 4.87399C32.7099 3.49918 31.4416 2.41125 29.9474 1.7416C28.4533 1.07195 26.7972 0.849212 25.1792 1.1003C23.5612 1.35138 22.0505 2.06555 20.8295 3.15654C19.6086 4.24753 18.7296 5.66868 18.2988 7.24834C17.868 8.82801 17.9037 10.4986 18.4017 12.0584C18.8997 13.6182 19.8386 15.0005 21.1051 16.0383C22.3716 17.0761 23.9114 17.725 25.5387 17.9066V21.4346L32.2418 15.7032C33.0989 14.9108 33.7827 13.9497 34.2503 12.8803C34.7179 11.8109 34.9592 10.6562 34.959 9.48904ZM24.8116 11.2173V14.6231H28.2173V11.2173H31.6231V7.81157H28.2173V4.4058H24.8116V7.81157H21.4058V11.2173H24.8116Z", fill: "currentColor" })));
    }
}
function Paperclip() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Paperclip", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M167.768,62.647 l-0.012,123.052c0,24.729-19.334,44.856-43.096,44.866c-23.765-0.006-43.099-20.134-43.096-44.872L81.557,48.851 c0-15.345,14.483-27.827,29.83-27.83c15.342,0.003,27.827,12.488,27.833,27.833l-0.002,139.245 c0.003,6.376-8.546,12.925-14.925,12.925c0,0-13.929-0.166-13.929-12.928l0.003-124.839" })));
}
function MultiPlayer(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 36 36", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M5.5 6C5.5 5.20888 5.7346 4.43552 6.17412 3.77772C6.61365 3.11992 7.23836 2.60723 7.96927 2.30448C8.70017 2.00173 9.50444 1.92252 10.2804 2.07686C11.0563 2.2312 11.769 2.61216 12.3284 3.17157C12.8878 3.73098 13.2688 4.44372 13.4231 5.21964C13.5775 5.99556 13.4983 6.79983 13.1955 7.53074C12.8928 8.26164 12.3801 8.88635 11.7223 9.32588C11.0645 9.76541 10.2911 10 9.5 10C8.43913 10 7.42172 9.57857 6.67157 8.82843C5.92143 8.07828 5.5 7.06087 5.5 6ZM9.5 13C7.51088 13 5.60322 13.7902 4.1967 15.1967C2.79018 16.6032 2 18.5109 2 20.5V25H5.2L6 34H13L13.8 25H17V20.5C17 18.5109 16.2098 16.6032 14.8033 15.1967C13.3968 13.7902 11.4891 13 9.5 13ZM20.5 13C19.8064 12.9989 19.1161 13.0966 18.45 13.29C20.0998 15.3309 20.9998 17.8757 21 20.5V29H17.46L17 34H24L24.8 25H28V20.5C28 18.5109 27.2098 16.6032 25.8033 15.1967C24.3968 13.7902 22.4891 13 20.5 13ZM20.5 10C21.2911 10 22.0645 9.76541 22.7223 9.32588C23.3801 8.88635 23.8928 8.26164 24.1955 7.53074C24.4983 6.79983 24.5775 5.99556 24.4231 5.21964C24.2688 4.44372 23.8878 3.73098 23.3284 3.17157C22.769 2.61216 22.0563 2.2312 21.2804 2.07686C20.5044 1.92252 19.7002 2.00173 18.9693 2.30448C18.2384 2.60723 17.6136 3.11992 17.1741 3.77772C16.7346 4.43552 16.5 5.20888 16.5 6C16.5 7.06087 16.9214 8.07828 17.6716 8.82843C18.4217 9.57857 19.4391 10 20.5 10ZM36 9H33V6H30V9H27V12H30V15H33V12H36V9Z", fill: "currentColor" })));
}
function Volume(props) {
    const { muted, className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', 'SVGIcon_Volume', className), x: "0px", y: "0px", width: "256px", height: "255.999px", viewBox: "0 0 256 255.999" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Speaker" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M93.785,52.265c-0.946,0-2.357,0.63-3.304,1.577L40.284,98.022c-0.947,0.789-2.831,1.578-4.093,1.578H9.367 C8.104,99.6,7,100.706,7,101.967v52.069c0,1.264,1.104,2.367,2.367,2.367H36.19c1.262,0,3.146,0.632,4.093,1.578l50.197,44.181 c0.947,0.789,2.516,1.578,3.304,1.578s1.578-1.104,1.578-2.367V54.631C95.363,53.369,94.731,52.265,93.785,52.265z" })),
        !muted && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "SoundWaves" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "SoundWavesHighest", d: "M193.826,30.402c24.959,24.958,40.349,59.403,40.349,97.604c0,38.199-15.388,72.645-40.349,97.603l9.916,9.916 c28.067-28.067,44.263-64.673,44.263-107.521c0-42.847-16.196-79.455-44.263-107.521" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "SoundWavesHigh", d: "M175.737,47.628l-8.924,8.924c18.271,18.27,29.536,43.484,29.536,71.448s-11.264,53.178-29.536,71.448l8.924,8.924 c20.546-20.546,33.234-49.008,33.234-80.374c0-31.366-12.688-59.829-33.234-80.374V47.628z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "SoundWavesMed", d: "M148.913,74.454l-8.925,8.925c11.488,11.488,18.491,27.236,18.491,44.624c0,17.388-7.054,33.281-18.491,44.575l8.875,8.975 c13.811-13.635,22.239-32.753,22.239-53.55c0-20.797-8.432-39.793-22.189-53.55V74.454z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "SoundWavesLow", d: "M121.989,101.229l-8.778,9.073c4.641,4.516,7.397,10.706,7.397,17.702c0,6.995-2.755,13.186-7.397,17.702l8.778,9.073 c7.035-6.844,11.243-16.413,11.243-26.775C133.232,117.643,129.024,108.075,121.989,101.229z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "SoundX" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: !muted ? 0 : 10, stroke: "#fff", strokeMiterlimit: "10", x1: "137", y1: "170.667", x2: "223.167", y2: "84.5" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: !muted ? 0 : 10, stroke: "#fff", strokeMiterlimit: "10", x1: "137", y1: "84.5", x2: "223.167", y2: "170.667" }))));
}
function ChatListView() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ChatListView", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "friendShape" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "matrix(1.34048,0,0,1.34048,-10.0942,-5.50445)" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "48.657", cy: "67.693", r: "21.811" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M99.909,188.023v-27.245c0-22.658-10.868-41.05-36.744-41.05h-7.71h-0.65h-7.06C21.869,119.729,11,138.12,11,160.778 v27.245c0,0,0,14.189,44.454,14.189C100.559,202.213,99.909,188.023,99.909,188.023z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "friendLines" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "118", y1: "72", x2: "234", y2: "72" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "138", y1: "126", x2: "234", y2: "126" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "138", y1: "180", x2: "234", y2: "180" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "allLines" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "72", y1: "72", x2: "234", y2: "72" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "72", y1: "126", x2: "234", y2: "126" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "72", y1: "180", x2: "234", y2: "180" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "27", y1: "72", x2: "27", y2: "72" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "27", y1: "126", x2: "27", y2: "126" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "24", strokeLinecap: "round", strokeMiterlimit: "10", x1: "27", y1: "180", x2: "27", y2: "180" }))));
}
function NewChatGroup() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_NewChatGroup", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "Bubble", strokeWidth: "12", strokeMiterlimit: "10", d: "M127.393,10.833 c64.854,0,117.46,52.609,117.46,117.013c0,24.035-7.254,45.804-19.5,63.943c-4.99,7.711,13.15,39.457,20.408,51.705 c4.989,8.612-51.701-19.05-59.412-14.514c-17.233,9.979-37.188,15.872-58.957,15.872c-64.859,0-117.465-52.607-117.465-117.008 C9.928,63.442,62.534,10.833,127.393,10.833z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { strokeWidth: "22", strokeLinecap: "round", strokeMiterlimit: "10", x1: "83.5", y1: "128.886", x2: "176.184", y2: "128.886" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { strokeWidth: "22", strokeLinecap: "round", strokeMiterlimit: "10", x1: "129.842", y1: "82.544", x2: "129.842", y2: "175.228" })));
}
function NewChatGroupGamepadUI(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.7 15.75C31.703 13.1045 30.94 10.5148 29.5031 8.2936C28.0663 6.07238 26.0171 4.31465 23.603 3.23272C21.189 2.15079 18.5133 1.79092 15.8991 2.19659C13.285 2.60226 10.8442 3.75611 8.87157 5.51878C6.89893 7.28145 5.47882 9.57755 4.78275 12.1298C4.08667 14.682 4.14441 17.3811 4.94899 19.9013C5.75356 22.4214 7.27057 24.6546 9.31678 26.3313C11.363 28.008 13.8509 29.0565 16.48 29.35V35.05L27.31 25.79C28.6947 24.5098 29.7995 22.9569 30.555 21.2291C31.3105 19.5012 31.7003 17.6358 31.7 15.75ZM16.25 17.75V23H19.75V17.75H25V14.25H19.75V9H16.25V14.25H11V17.75H16.25Z", fill: "currentColor" })));
}
function Crown() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Crown", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M239.874,94.963l-31.115,21.325c-18.18,12.586-43.351,5.594-52.44-14.333l-23.772-50.692c-2.099-4.194-8.041-4.194-9.789,0 l-23.074,50.343c-9.439,20.627-35.31,27.27-53.49,13.983L16.128,93.565c-4.195-3.147-10.139,1.049-8.391,6.293l31.464,106.628 c0.35,1.049,1.398,1.397,2.098,1.397h173.752c1.049,0,1.749-0.698,2.098-1.397l31.115-104.53 C250.012,96.36,244.068,91.816,239.874,94.963z" }))));
}
function VideoPlay() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "50px", height: "25px", viewBox: "0 0 50 25" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M46 0H4C1.8 0 0 1.8 0 4v17c0 2.2 1.8 4 4 4h42c2.2 0 4-1.8 4-4V4c0-2.2-1.8-4-4-4zM21 18.916V5.084L32.805 12 21 18.916z" })));
}
function Play() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Play", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "playTriangle", d: "M65.321,33.521c-11.274-6.615-20.342-1.471-20.342,11.52V210.96c0,12.989,9.068,18.135,20.342,11.521l137.244-82.348 c11.274-6.618,11.274-17.646,0-24.509L65.321,33.521z" })));
}
function PlayCircle() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "23", height: "23", viewBox: "0 0 23 23", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M15.3252 10.8948L9.73258 7.16634C9.24837 6.85161 8.6189 7.19055 8.6189 7.77161V15.2284C8.6189 15.8095 9.27258 16.1484 9.73258 15.8337L15.3252 12.1053C15.761 11.8148 15.761 11.1853 15.3252 10.8948Z", fill: "#C3D3D8" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M11.5 0C5.15684 0 0 5.15684 0 11.5C0 17.8432 5.15684 23 11.5 23C17.8432 23 23 17.8432 23 11.5C23 5.15684 17.8432 0 11.5 0ZM11.5 21.2084C6.14947 21.2084 1.79158 16.8505 1.79158 11.5C1.79158 6.14947 6.14947 1.79158 11.5 1.79158C16.8505 1.79158 21.2084 6.14947 21.2084 11.5C21.2084 16.8505 16.8505 21.2084 11.5 21.2084Z", fill: "#C3D3D8" })));
}
function Pause() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Pause", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M44.979,219.364c0,3.3,2.7,6,6,6h49.753c3.3,0,6-2.7,6-6V36.5c0-3.3-2.7-6-6-6H50.979c-3.3,0-6,2.7-6,6V219.364z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M149.267,219.364c0,3.3,2.7,6,6,6h49.753c3.3,0,6-2.7,6-6V36.5c0-3.3-2.7-6-6-6h-49.753c-3.3,0-6,2.7-6,6V219.364z" })));
}
function SortBy() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_SortBy", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "time" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", strokeWidth: "10", strokeMiterlimit: "10", cx: "91.735", cy: "128.014", r: "64" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "91.735,90.833 91.735,128.014 116.58,152.086 \t" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "alphabet" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "70.268,109.934 94.483,63.635 119.77,109.934" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "77.458", y1: "97.861", x2: "112.135", y2: "97.861" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "70.045,145.379 119.547,145.379 70.045,192.032 119.547,192.032" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Arrow" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "199.735,63.66 199.735,192.366 171.207,163.675" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "199.735,63.66 199.735,192.366 228.266,163.675" }))));
}
function SortBy_V2(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "19", height: "19", viewBox: "0 0 19 19", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', props.className) },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M7.7976 11.7352L5.2516 14.2793C5.2003 14.3306 5.1433 14.3781 5.0844 14.418C5.0749 14.4237 5.0654 14.4294 5.0559 14.4351C5.0293 14.4522 5.0027 14.4693 4.9761 14.4826C4.9438 14.4997 4.9096 14.5149 4.8773 14.5301C4.8735 14.5301 4.8697 14.532 4.8659 14.5339C4.8336 14.5453 4.8013 14.5567 4.7709 14.5662C4.7348 14.5776 4.6987 14.5852 4.6626 14.5928C4.5923 14.6061 4.5182 14.6137 4.446 14.6137C4.3358 14.6137 4.2275 14.5985 4.1211 14.5662C4.0888 14.5567 4.0565 14.5453 4.0261 14.5339C4.0223 14.532 4.0185 14.5301 4.0147 14.5301C3.9805 14.5149 3.9482 14.4997 3.9159 14.4826C3.8893 14.4693 3.8627 14.4541 3.8361 14.4351C3.7677 14.3933 3.7012 14.342 3.6404 14.2793H3.6385L1.0944 11.7352C0.647896 11.2887 0.647896 10.5667 1.0944 10.1221C1.539 9.67754 2.261 9.67754 2.7056 10.1221L3.306 10.7225L3.30599 3.3529C3.30599 2.724 3.81519 2.2129 4.44599 2.2129C5.07489 2.2129 5.58599 2.724 5.58599 3.3529L5.586 10.7206L6.1845 10.1221C6.631 9.67754 7.3511 9.67754 7.7976 10.1221C8.2422 10.5667 8.2422 11.2887 7.7976 11.7352Z", fill: "currentColor" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M17.1001 4.51535H10.3036C9.6741 4.51535 9.16357 4.00482 9.16357 3.37535C9.16357 2.74588 9.6741 2.23535 10.3036 2.23535H17.1001C17.7295 2.23535 18.2401 2.74588 18.2401 3.37535C18.2401 4.00482 17.7295 4.51535 17.1001 4.51535Z", fill: "currentColor" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M15.7408 9.54465H10.3036C9.6741 9.54465 9.16357 9.03412 9.16357 8.40465C9.16357 7.77518 9.6741 7.26465 10.3036 7.26465H15.7408C16.3703 7.26465 16.8808 7.77518 16.8808 8.40465C16.8808 9.03412 16.3703 9.54465 15.7408 9.54465Z", fill: "currentColor" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M14.3814 14.5739H10.3036C9.6741 14.5739 9.16357 14.0634 9.16357 13.4339C9.16357 12.8045 9.6741 12.2939 10.3036 12.2939H14.3815C15.011 12.2939 15.5215 12.8045 15.5215 13.4339C15.5215 14.0634 15.011 14.5739 14.3814 14.5739Z", fill: "currentColor" })));
}
function RecentClock() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_SortBy", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "time" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", strokeWidth: "10", strokeMiterlimit: "10", cx: "91.735", cy: "128.014", r: "64" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "91.735,90.833 91.735,128.014 116.58,152.086 \t" }))));
}
function Notification() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Notification", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "topFlap" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "#FFFFFF", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "234.667,94.167 128.667,26.5 21.333,94.167" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "note" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "58.666", y: "50", fill: "#FFFFFF", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", width: "138.667", height: "119.334" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "baseEnvelope" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#FFFFFF", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "21.333,94.167 21.333,229.501 234.667,229.501 234.667,94.167 127.333,161.834 \t" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "86.326", y1: "135.656", x2: "21.333", y2: "229.501" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "169.674", y1: "135.656", x2: "234.667", y2: "229.501" }))));
}
// Currently we take a few of the SVG props and apply them directly to the polyline. In future we could
// apply a different set of props to the polyline and destructure them the same way we do the SVG props.
function Check(props) {
    var _a;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Check", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256", strokeWidth: "24", stroke: (_a = props.color) !== null && _a !== void 0 ? _a : "#fff", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", points: "49.5,147.75 95,210.75 206.5,45.25 " })));
}
function Calendar() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: "SVGIcon_Button SVGIcon_Calendar", width: "25", height: "24", viewBox: "0 0 25 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M1.97014 2.77093H4.44345V3.97865C4.44345 5.04817 5.31099 5.91572 6.38052 5.91572C7.45004 5.91572 8.31699 5.04817 8.31699 3.97865V2.77093H16.6836V3.97865C16.6836 5.04817 17.5511 5.91572 18.6207 5.91572C19.6902 5.91572 20.5571 5.04817 20.5571 3.97865V2.77093H23.0293C24.1136 2.77093 25 3.65738 25 4.74167V21.4991C25 22.5834 24.1136 23.4698 23.0293 23.4698H1.97073C0.886445 23.4698 0 22.5834 0 21.4991V4.74167C0 3.65738 0.886445 2.77093 1.97073 2.77093H1.97014ZM23.5005 8.23961V21.4991C23.5005 21.7578 23.2879 21.9704 23.0293 21.9704H1.97073C1.71206 21.9704 1.49946 21.7583 1.49946 21.4991V8.23961H23.5005V8.23961Z", fill: "#717A81" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M5.29335 1.08724C5.29335 0.486629 5.77998 0 6.38059 0C6.98061 0 7.46724 0.486629 7.46724 1.08724V3.97867C7.46724 4.57928 6.98061 5.06591 6.38059 5.06591C5.77998 5.06591 5.29335 4.57928 5.29335 3.97867V1.08724V1.08724Z", fill: "#717A81" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M17.5329 1.08724C17.5329 0.486629 18.0195 0 18.6201 0C19.2201 0 19.7068 0.486629 19.7068 1.08724V3.97867C19.7068 4.57928 19.2201 5.06591 18.6201 5.06591C18.0195 5.06591 17.5329 4.57928 17.5329 3.97867V1.08724V1.08724Z", fill: "#717A81" })));
}
function Chart() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M1.91995 1.20001C1.5223 1.20001 1.19995 1.52236 1.19995 1.92001V22.08C1.19995 22.4776 1.52232 22.8 1.91995 22.8H22.08C22.4776 22.8 22.7999 22.4776 22.7999 22.08C22.7999 21.6824 22.4776 21.36 22.08 21.36H2.63995V1.92001C2.63995 1.52236 2.31758 1.20001 1.91995 1.20001ZM16.32 6.72001C15.8854 6.71929 15.5464 7.12373 15.5625 7.47751C15.5821 7.85454 15.9429 8.17971 16.32 8.16001H18.3525L11.97 14.16L9.67495 12.2475C9.52982 12.0749 9.29995 11.9772 9.07495 11.9925C8.91446 12.004 8.75853 12.0713 8.63995 12.18L3.83995 16.5C3.54514 16.7473 3.50834 17.2483 3.76495 17.535C4.02158 17.8217 4.52167 17.8383 4.79995 17.5725L9.14246 13.665L11.4525 15.5925C11.7066 15.887 12.2125 15.9125 12.495 15.645L19.4399 9.12001V11.28C19.4347 11.6604 19.7795 12.0075 20.16 12.0075C20.5404 12.0075 20.8853 11.6604 20.8799 11.28V7.44001C20.8799 7.06303 20.5369 6.72005 20.16 6.72001H16.32Z", fill: "#C3D3D8" })));
}
function DialogCheck(props) {
    let highlightColor = props.highlightColor || "#00ccff";
    let color = props.color || "#2d73ff";
    const [prefix] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Math.random().toString());
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DialogCheck", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("defs", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: `${prefix}_linear`, x1: "0%", y1: "0%", x2: "100%", y2: "100%" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "0%", stopColor: highlightColor }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "100%", stopColor: color })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("filter", { id: `${prefix}_f1`, x: "0", y: "0", width: "200%", height: "200%" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("feOffset", { result: "offOut", in: "SourceAlpha", dx: "20", dy: "20" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("feGaussianBlur", { result: "blurOut", in: "offOut", stdDeviation: "10" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("feBlend", { in: "SourceGraphic", in2: "blurOut", mode: "normal" }))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: `url(#${prefix}_linear)`, strokeWidth: "24", strokeLinecap: "round", strokeLinejoin: "miter", strokeMiterlimit: "10", d: "M206.5,45.25L95,210.75l-45.5-63", strokeDasharray: "365.19 365.19", strokeDashoffset: "0.00" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", opacity: ".2", filter: `url(#${prefix}_f1)`, stroke: `url(#${prefix}_linear)`, strokeWidth: "24", strokeLinecap: "round", strokeLinejoin: "miter", strokeMiterlimit: "10", d: "M206.5,45.25L95,210.75l-45.5-63", strokeDasharray: "365.19 365.19", strokeDashoffset: "0.00" })));
}
function Caution(props) {
    const color = props.color || "#020202";
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Caution", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "triangle" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { stroke: color, strokeWidth: "16", strokeLinecap: "round", strokeMiterlimit: "10", d: "M127.9,76.632" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: color, strokeWidth: "11", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "5", d: "M128.001,226.606c42.507,0,81.538,0,87.756,0c31.222,0,36.95-14.974,24.045-34.771c-6.921-10.617-78.297-122.962-89.163-140.254\tC141.859,37.613,138.542,29.393,128,29.393l0,0c-10.543,0-13.86,8.222-22.639,22.189C94.495,68.874,23.119,181.219,16.198,191.836 c-12.905,19.797-7.175,34.771,24.045,34.771C46.463,226.606,85.494,226.606,128.001,226.606" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: color, d: "M127.9,208.12" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "exclamation" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: color, strokeWidth: "16", strokeLinecap: "round", strokeMiterlimit: "10", x1: "127.9", y1: "76.632", x2: "127.9", y2: "160.07" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: color, d: "M127.9,208.12c-6.377,0-11.548-5.17-11.548-11.548c0-6.377,5.17-11.547,11.548-11.547 c6.377,0,11.547,5.17,11.547,11.547C139.447,202.95,134.277,208.12,127.9,208.12" }))));
}
function Upgrade(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: props.idName, xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Upgrade ", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { id: "shape", fill: "#0000", stroke: "#ffffff", strokeWidth: "8", strokeMiterlimit: "10", d: "M241.334,181.958 c0,33.16-26.881,60.042-60.041,60.042h-20.545v-52.093h39.84l-72.541-86.079l-72.54,86.079h40.028V242H74.708 c-33.16,0-60.042-26.882-60.042-60.042V74.383c0-33.16,26.882-60.042,60.042-60.042h106.585c33.16,0,60.041,26.882,60.041,60.042 V181.958z" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { id: "animUp", begin: "shape.mouseenter", attributeName: "d", dur: "420ms", fill: "freeze", keyTimes: "0;1", keySplines: "0.1 0.8 0.2 1;", calcMode: "spline", to: "M241.334,181.958 c0,33.16-26.881,60.042-60.041,60.042h-20.545V129.907h39.84l-72.541-86.079l-72.54,86.079h40.028V242H74.708 c-33.16,0-60.042-26.882-60.042-60.042V74.383c0-33.16,26.882-60.042,60.042-60.042h106.585c33.16,0,60.041,26.882,60.041,60.042 V181.958z;" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { id: "animDown", attributeName: "d", begin: "shape.mouseleave", dur: "420ms", fill: "freeze", keyTimes: "0;1", keySplines: "0.1 0.8 0.2 1;", calcMode: "spline", to: "M241.334,181.958 c0,33.16-26.881,60.042-60.041,60.042h-20.545v-52.093h39.84l-72.541-86.079l-72.54,86.079h40.028V242H74.708 c-33.16,0-60.042-26.882-60.042-60.042V74.383c0-33.16,26.882-60.042,60.042-60.042h106.585c33.16,0,60.041,26.882,60.041,60.042 V181.958z;" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { begin: "shape.mouseenter", attributeName: "fill", dur: "240ms", fill: "freeze", to: "rgba(51, 102, 255, .3)" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { begin: "shape.mouseleave", attributeName: "fill", dur: "240ms", fill: "freeze", to: "rgba(0, 0, 0, 0)" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { begin: "shape.mouseenter", attributeName: "stroke", dur: "240ms", fill: "freeze", to: "rgb(5, 193, 255)" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("animate", { begin: "shape.mouseleave", attributeName: "stroke", dur: "240ms", fill: "freeze", to: "rgb(51, 102, 255)" }))));
}
function Lock() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Lock", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "topLock", d: "M203.553,197.794c0,21.929-17.778,39.706-39.706,39.706H92.154c-21.929,0-39.706-17.777-39.706-39.706v-71.693 c0-21.928,17.778-39.706,39.706-39.706h71.692c21.928,0,39.706,17.778,39.706,39.706V197.794z M128.001,129.664 c-8.941,0-16.19,7.248-16.19,16.189c0,5.589,2.833,10.518,7.137,13.427c2.066,1.395,0.318,23.508,0.318,32.842 c0,2.292-0.078,3.65,8.734,3.65c8.676,0,8.75-1.221,8.75-3.654c0-9.348-1.708-31.469,0.368-32.886 c4.269-2.916,7.071-7.821,7.071-13.38C144.191,136.912,136.941,129.664,128.001,129.664z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "baseLock", fill: "none", stroke: "#ffffff", strokeWidth: "22", strokeMiterlimit: "10", d: "M84.813,172.74V73.688l0,0 c0-23.85,19.335-43.188,43.187-43.188l0,0c23.852,0,43.188,19.337,43.188,43.188l0,0v23.885" })));
}
function Video() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Video", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "videoPlayButton", d: "M165.399,124.063L109.118,92.06c-1.399-0.797-3.118-0.787-4.508,0.026c-1.39,0.805-2.25,2.295-2.25,3.905v64.008 c0,1.609,0.86,3.1,2.25,3.913c0.705,0.412,1.491,0.613,2.277,0.613c0.768,0,1.546-0.191,2.241-0.596l56.283-32.003 c1.416-0.806,2.285-2.306,2.285-3.934C167.694,126.368,166.816,124.869,165.399,124.063z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M238.069,40.646H214.25h-28.82h-28.82h-28.458h-0.36H99.333H70.536H41.727h-23.82c-3.184,0-5.773,2.59-5.773,5.772v23.856 v120.441v18.867c0,3.184,2.589,5.771,5.773,5.771h2.415h21.394h28.82h28.82h28.459h0.361h28.457h28.82h28.82h23.82 c3.184,0,5.773-2.589,5.773-5.771v-18.867V70.274V46.418C243.844,43.223,241.254,40.646,238.069,40.646z M191.215,47.181h17.273  V64.5h-17.273V47.181L191.215,47.181z M162.396,47.181h17.272V64.5h-17.272V47.181z M133.938,47.181h16.912V64.5h-16.912V47.181z\tM105.128,47.181h16.912V64.5h-16.912V47.181z M76.309,47.181h17.273V64.5H76.309V47.181z M47.488,47.181h17.273V64.5H47.488V47.181 z M18.681,47.181h17.273V64.5H18.681V47.181z M35.954,208.811H18.681v-17.319h17.273V208.811z M64.763,208.811H47.489v-17.319 h17.273V208.811L64.763,208.811z M93.583,208.811H76.31v-17.319h17.273V208.811z M122.041,208.811h-16.912v-17.319h16.912V208.811z M150.849,208.811h-16.912v-17.319h16.912V208.811z M179.668,208.811h-17.272v-17.319h17.272V208.811z M208.488,208.811h-17.273 v-17.319h17.273V208.811z M237.297,208.811h-17.273v-17.319h17.273V208.811L237.297,208.811z M237.297,184.943H214.25h-28.819 h-28.82h-28.458h-0.361H99.333H70.537H41.728H18.682V71.047h23.046h28.82h28.82h28.458h0.36h28.458h28.82h28.82h23.045v113.896 H237.297z M237.297,64.5h-17.273V47.181h17.273V64.5L237.297,64.5z" })));
}
function Image() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", version: "1.1", className: "SVGIcon_Button SVGIcon_Image", x: "0px", y: "0px", viewBox: "0 0 100 100", enableBackground: "new 0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { stroke: "#ffffff", fill: "#ffffff", d: "M83.086,12.091H16.913C10.344,12.091,5,17.435,5,24.004v51.992l0.005,0.102c0.056,6.514,5.396,11.813,11.908,11.813h66.173  c6.531,0,11.874-5.314,11.906-11.764L95,24.004C95,17.435,89.654,12.091,83.086,12.091z M83.086,82.989H16.913  c-3.516,0-6.488-2.653-6.93-6.106l18.899-20.615c1.226-1.34,2.85-2.076,4.574-2.076c1.723,0,3.347,0.736,4.574,2.078l19.611,21.393  c0.885,0.961,2.508,1.029,3.473,0.148c1-0.916,1.068-2.476,0.152-3.478l-4.113-4.485l8.406-8.918  c1.258-1.332,2.926-2.064,4.696-2.064c1.772,0,3.44,0.732,4.696,2.064l15.061,15.973C89.564,80.346,86.594,82.989,83.086,82.989z   M90.08,69.801L78.532,57.555c-2.194-2.328-5.132-3.609-8.275-3.609c-3.142,0-6.08,1.281-8.272,3.609l-8.164,8.656l-12.162-13.27  c-2.171-2.366-5.084-3.67-8.201-3.67c-3.119,0-6.031,1.304-8.202,3.67L9.92,69.673V24.004c0-3.856,3.137-6.994,6.993-6.994h66.173  c3.857,0,6.994,3.137,6.994,6.994V69.801z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { stroke: "#ffffff", fill: "#ffffff", d: "M68.907,22.489c-6.569,0-11.914,5.344-11.914,11.914c0,6.569,5.345,11.913,11.914,11.913  c6.567,0,11.913-5.344,11.913-11.913C80.82,27.833,75.477,22.489,68.907,22.489z M68.907,41.396c-3.856,0-6.993-3.137-6.993-6.993  s3.137-6.994,6.993-6.994c3.854,0,6.991,3.138,6.991,6.994S72.764,41.396,68.907,41.396z" })));
}
function Bell(props) {
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Bell", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M107.785,33.965c-34.875,8.972-60.644,40.618-60.644,78.308v53.903c0,4.965-4.035,8.99-8.975,8.99 c-9.929,0-17.978,8.066-17.978,17.971c0,9.924,8.059,17.969,18.013,17.969h179.598c9.948,0,18.014-8.066,18.014-17.969 c0-9.926-8.087-17.971-17.979-17.971c-4.956,0-8.975-3.993-8.975-8.99v-53.903c0-37.676-25.763-69.333-60.644-78.308v-9.281 c0-11.193-9.052-20.219-20.215-20.219c-11.143,0-20.215,9.052-20.215,20.219V33.965L107.785,33.965z M96.554,220.09h62.891 c0,17.366-14.079,31.445-31.445,31.445C110.633,251.535,96.554,237.458,96.554,220.09z" })));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Bell", viewBox: "0 0 36 36", fill: "none" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M32 24V26H4V24L8 19V12C8 9.34784 9.05357 6.8043 10.9289 4.92893C12.8043 3.05357 15.3478 2 18 2C20.6522 2 23.1957 3.05357 25.0711 4.92893C26.9464 6.8043 28 9.34784 28 12V19L32 24ZM18 34C19.2396 33.9986 20.4483 33.6133 21.46 32.897C22.4718 32.1807 23.2368 31.1687 23.65 30H12.35C12.7632 31.1687 13.5282 32.1807 14.54 32.897C15.5517 33.6133 16.7604 33.9986 18 34Z", fill: "currentColor" })));
    }
}
function Toast() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Toast", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M197.333,228.813H58.666v-95.289h138.667V228.813z M117.096,149.642H73.481v43.614h43.615V149.642z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "9.334", y1: "85.473", x2: "42.167", y2: "115.973" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "59.834", y1: "41.973", x2: "79.167", y2: "86.806" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "246.667", y1: "85.473", x2: "213.833", y2: "115.973" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "196.167", y1: "41.973", x2: "176.833", y2: "86.806" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "128.094", y1: "24.473", x2: "128.094", y2: "75.861" })));
}
function Arrow(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { style: { transform: `rotate(${props.angle}deg)` }, version: "1.1", id: "arrowBase", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Arrow", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "128,247.688 128,8.313 181.061,61.674 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "128,247.688 128,8.313 74.939,61.674 " })));
}
function ArrowGamepadUI(props) {
    const { direction } = props, svgProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["direction"]);
    switch (direction) {
        case "up":
            return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: "36px", height: "36px", viewBox: "0 0 36 36", fill: "none" }, svgProps),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M26.23 17.31L20.5 11.58V33.54H15.5V11.58L9.76998 17.31L6.22998 13.77L18 2.00001L29.77 13.77L26.23 17.31Z", fill: "currentColor" })));
        case "down":
            return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: "36px", height: "36px", viewBox: "0 0 36 36", fill: "none" }, svgProps),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M26.23 18.23L20.5 23.96V2H15.5V23.96L9.76998 18.23L6.22998 21.77L18 33.54L29.77 21.77L26.23 18.23Z", fill: "currentColor" })));
        case "left":
            return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: "36px", height: "36px", viewBox: "0 0 36 36", fill: "none" }, svgProps),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M17.54 9.53998L11.81 15.27L33.77 15.27V20.27H11.81L17.54 26L14 29.54L2.23002 17.77L14 5.99998L17.54 9.53998Z", fill: "currentColor" })));
        case "right":
            return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ viewBox: "0 0 36 36", width: "36px", height: "36px", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, svgProps),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18.46 9.54004L24.19 15.27L2.22998 15.27L2.22998 20.27H24.19L18.46 26L22 29.54L33.77 17.77L22 6.00004L18.46 9.54004Z", fill: "currentColor" })));
    }
}
function CutArrow() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", width: "50px", height: "100px", viewBox: "0 0 50 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#ffffff", points: "0,0.093 0,25.702 24.323,50.026 0,74.349 0,99.955 49.929,50.026 " })));
}
function DoubleArrow(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { style: { transform: `rotate(${props.angle}deg)` }, version: "1.1", id: "arrowBase", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DoubleArrow", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "Arrow1", fill: "none", stroke: "#ffffff", strokeWidth: "23", strokeLinecap: "round", strokeMiterlimit: "10", points: "135.65,21.667 30.081,127.235 137.18,234.333 " }),
        !props.singlearrow && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "Arrow2", fill: "none", stroke: "#ffffff", strokeWidth: "23", strokeLinecap: "round", strokeMiterlimit: "10", points: "224.389,21.667 118.821,127.235 225.92,234.333 " })));
}
function ThickChevron(props) {
    const { angle } = props, svgProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["angle"]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ style: { transform: `rotate(${props.angle}deg)` }, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", fill: "none" }, svgProps),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd", d: "M16.0855 15.5837L8.88892 8.38708L12.0316 5.24438L22.3709 15.5837L12.0316 25.923L8.88892 22.7803L16.0855 15.5837Z" })));
}
function TextButtonDoubleArrow() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "arrowBase", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DoubleArrow", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "Arrow1", fill: "none", stroke: "#ffffff", strokeWidth: "23", strokeLinecap: "round", strokeMiterlimit: "10", points: "135.65,21.667 30.081,127.235 137.18,234.333 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "Arrow2", fill: "none", stroke: "#ffffff", strokeWidth: "23", strokeLinecap: "round", strokeMiterlimit: "10", points: "224.389,21.667 118.821,127.235 225.92,234.333 " })));
}
function Maximize() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Maximize", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "24", y: "42.167", fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "18", strokeMiterlimit: "10", width: "208", height: "171.667" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "42", strokeMiterlimit: "10", x1: "24", y1: "54.01", x2: "232", y2: "54.01" })));
}
function Minimize() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Minimize", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "18", strokeMiterlimit: "10", x1: "24", y1: "209.01", x2: "232", y2: "209.01" })));
}
function Restore() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Restore", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "12", strokeMiterlimit: "10", points: "83,90.861 83,42.167 232,42.167 232,165.14 173,165.14 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "24", y: "90.861", fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "18", strokeMiterlimit: "10", width: "149", height: "122.973" })));
}
function Undo() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Undo", viewBox: "0 0 100 100", x: "0px", y: "0px", width: "16px", height: "16px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M94.83,50A44.81,44.81,0,0,0,17.12,19.56V11.15a6,6,0,1,0-12,0v23.9a6,6,0,0,0,6,6H35.06a6,6,0,0,0,0-12H24.64A32.88,32.88,0,1,1,50,82.87h0a6,6,0,1,0,0,12h.12A44.82,44.82,0,0,0,94.83,50Z" }))));
}
function SingleWindowToggle() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_SingleWindowToggle", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "mainBox" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "90", y: "42.167", fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "18", strokeMiterlimit: "10", width: "142", height: "171.667" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "42", strokeMiterlimit: "10", x1: "90", y1: "54.01", x2: "232", y2: "54.01" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "leftBox" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "28", y: "42.167", fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "18", strokeMiterlimit: "10", width: "62", height: "171.667" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "rgb(120, 138, 146)", strokeWidth: "42", strokeMiterlimit: "10", x1: "28", y1: "54.01", x2: "90", y2: "54.01" }))));
}
function Reload() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Reload", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#ffffff", strokeWidth: "30", strokeLinecap: "round", strokeMiterlimit: "10", d: "M229.809,147.639 c-9.178,47.863-51.27,84.027-101.809,84.027c-57.253,0-103.667-46.412-103.667-103.666S70.747,24.334,128,24.334 c34.107,0,64.368,16.472,83.261,41.895" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "147.639,108.361 245.755,10.166 245.834,108.361 " })));
}
function Trade() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Trade", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M132.025,162.943h40.246c0,0,3.219,56.879-31.303,79.599c-12.298,8.094,71.103-6.708,75.574-79.599h35.775l-60.146-74.681 L132.025,162.943z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M123.975,93.056H83.729c0,0-3.219-56.879,31.303-79.599c12.298-8.094-71.103,6.708-75.574,79.599H3.682l60.146,74.681 L123.975,93.056z" })));
}
function Trash() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Trash", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "base" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M216.773,43.909 l-7.399,177.589c-0.37,8.893-7.919,16.1-16.812,16.1H63.437c-8.914,0-16.442-7.24-16.812-16.1L39.226,43.909" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "lines" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line1", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M128,68.12v137.197" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line2", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M83.613,68.12 l4.035,137.197" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line3", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M172.387,68.12 l-4.035,137.197" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "lid" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M27.121,38.577H228.88" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#ffffff", strokeWidth: "10", d: "M87.648,38.577l4.319-10.796c2.072-5.181,8.292-9.379,13.84-9.379h44.386 c5.572,0,11.761,4.18,13.841,9.379l4.319,10.796" }))));
}
/**
 * Same as Trash, but removed stroke so parent's can style
 */
function TrashCan() {
    let styles = {
        overflow: "visible",
        width: "100%",
        height: "100%",
        maxWidth: "320px",
        maxHeight: "320px",
    };
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", style: styles, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "base" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M216.773,43.909 l-7.399,177.589c-0.37,8.893-7.919,16.1-16.812,16.1H63.437c-8.914,0-16.442-7.24-16.812-16.1L39.226,43.909" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "lines" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line1", fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M128,68.12v137.197" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line2", fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M83.613,68.12 l4.035,137.197" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "line3", fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M172.387,68.12 l-4.035,137.197" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "lid" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", d: "M27.121,38.577H228.88" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "10", d: "M87.648,38.577l4.319-10.796c2.072-5.181,8.292-9.379,13.84-9.379h44.386 c5.572,0,11.761,4.18,13.841,9.379l4.319,10.796" }))));
}
function Scroll() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Scroll", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "translate(0,-952.36215)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M49.624,963.362c-20.72,0-37.667,14.78-37.667,32.806c0,3.589,3.353,6.499,7.486,6.499l52.407-0.305v162.5 c0,18.134,17.404,32.5,38.018,32.5h96.508c20.612,0,37.667-14.475,37.667-32.5c0-3.59-3.354-6.499-7.486-6.5H217.84V996.168 c0-18.024-16.947-32.806-37.667-32.806H49.624z M49.624,976.362h2.223c0.569,0.162,1.158,0.265,1.754,0.306 c8.159,1.274,14.426,6.085,16.962,12.694l-42.112,0.306C31.513,981.897,39.656,976.362,49.624,976.362z M79.337,976.362h100.836 c12.587,0,22.694,8.77,22.694,19.806v162.194H139.23c-4.135,0.001-7.486,2.91-7.488,6.5c0,4.609-1.43,7.796-4.21,10.765 c-2.78,2.972-7.203,5.757-13.686,7.923c-0.624,0.201-1.214,0.476-1.755,0.813h-2.223c-12.695,0-23.044-8.573-23.044-19.5v-169 C86.824,988.529,84.023,981.812,79.337,976.362z M108.582,1005.611c-4.135,0.169-7.33,3.216-7.135,6.807 c0.193,3.59,3.702,6.363,7.837,6.194h71.123c4.135,0.051,7.535-2.817,7.592-6.407c0.059-3.591-3.246-6.542-7.381-6.594 c-0.069,0-0.141,0-0.211,0h-71.123C109.05,1005.603,108.816,1005.603,108.582,1005.611z M108.582,1044.612 c-4.135,0.169-7.33,3.215-7.135,6.807c0.193,3.588,3.702,6.362,7.837,6.192h71.123c4.135,0.051,7.535-2.816,7.592-6.407 c0.059-3.59-3.246-6.542-7.381-6.592c-0.069,0-0.141,0-0.211,0h-71.123C109.05,1044.603,108.816,1044.603,108.582,1044.612z M108.582,1083.612c-4.135,0.169-7.33,3.216-7.135,6.806c0.193,3.589,3.702,6.363,7.837,6.193h71.123 c4.135,0.052,7.535-2.816,7.592-6.407c0.059-3.59-3.246-6.541-7.381-6.592c-0.069-0.001-0.141-0.001-0.211,0h-71.123 C109.05,1083.602,108.816,1083.602,108.582,1083.612z M108.582,1122.611c-4.135,0.17-7.33,3.216-7.135,6.806 c0.193,3.591,3.702,6.364,7.837,6.195h71.123c4.135,0.05,7.535-2.818,7.592-6.408c0.059-3.591-3.246-6.541-7.381-6.593 c-0.069,0-0.141,0-0.211,0h-71.123C109.05,1122.602,108.816,1122.602,108.582,1122.611z M145.547,1171.363h82.002 c-3.09,7.604-11.189,12.999-21.173,12.999h-67.849c0.196-0.197,0.512-0.306,0.703-0.509 C142.576,1180.277,144.436,1175.973,145.547,1171.363z" }))));
}
function FlatArrow(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { style: { transform: `rotate(${props.angle}deg)` }, version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_FlatArrow", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "13.913,141 128,59 242.087,141 ", fill: "#ffffff" })));
}
function FriendIcon(props) {
    let { bPending, bShowArm } = props, svgProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["bPending", "bShowArm"]);
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_FriendIcon" + (bPending ? " SVGIcon_FriendIcon_Pending" : ""), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "Outline" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "matrix(1.34048,0,0,1.34048,-10.0942,-5.50445)" },
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M102.239,90.394c-22.556,0-40.906-18.351-40.906-40.906c0-22.556,18.35-40.906,40.906-40.906s40.906,18.35,40.906,40.906 C143.145,72.043,124.795,90.394,102.239,90.394z" })),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M127.453,250.212c-30.208,0-52.086-4.188-65.028-12.45c-12.507-7.983-13.141-17.484-13.141-19.308v-41.781 c0-20.554,5.356-38.104,15.489-50.754c11.63-14.519,29.216-22.193,50.858-22.194h23.646c21.643,0,39.229,7.674,50.858,22.193 c10.133,12.65,15.488,30.201,15.488,50.754v41.751c0.011,2.202-0.586,8.058-6.43,14.175 c-11.164,11.687-35.301,17.613-71.732,17.613C127.458,250.212,127.458,250.212,127.453,250.212z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "WavingArm", opacity: bPending ? "1" : "0", d: "M87.625,170.102c-5.877,0-14.85-1.804-24.219-10.4c-8.677-7.961-20.959-20.438-30.563-31.048 c-18.766-20.732-21.125-26.658-19.522-32.832c1.463-5.64,10.288-27.077,26.729-28.926c0.429-0.048,0.867-0.072,1.303-0.072 c7.609,0,14.543,6.335,38.063,31.516c7.141,7.645,14.524,15.549,18.002,18.33l0.803,0.641c5.551,4.432,11.291,9.015,15.104,14.136 c8.477,11.383,3.634,20.705,1.158,24.185C108.034,164.692,97.995,170.102,87.625,170.102z" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "foreground" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { transform: "matrix(1.34048,0,0,1.34048,-10.0942,-5.50445)" },
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "currentColor", cx: "102.239", cy: "49.488", r: "33.446" })),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", d: "M195.624,218.454v-41.781c0-34.743-16.666-62.948-56.347-62.948h-11.822h-0.997h-10.826 c-39.68,0.001-56.348,28.205-56.348,62.948v41.781c0,0,0,21.758,68.169,21.758C196.62,240.214,195.624,218.454,195.624,218.454z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "WavingArm", opacity: bPending ? "1" : "0", d: "M41.167,76.833c6.53-0.734,39.348,39.127,50.007,47.647c10.659,8.52,21.327,16.686,15.16,25.353 s-20.646,16.74-36.167,2.5 s-48.516-48.801-47.167-54S31.599,77.909,41.167,76.833z" }))));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: "SVGIcon_Button SVGIcon_FriendIcon", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, svgProps),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18 17C15.6131 17 13.3239 17.9482 11.636 19.636C9.94821 21.3239 9 23.6131 9 26V31H27V26C27 23.6131 26.0518 21.3239 24.364 19.636C22.6761 17.9482 20.3869 17 18 17ZM18 14C18.9889 14 19.9556 13.7068 20.7779 13.1573C21.6001 12.6079 22.241 11.827 22.6194 10.9134C22.9978 9.99979 23.0969 8.99446 22.9039 8.02455C22.711 7.05465 22.2348 6.16373 21.5355 5.46447C20.8363 4.76521 19.9454 4.289 18.9755 4.09608C18.0055 3.90315 17.0002 4.00217 16.0866 4.3806C15.173 4.75904 14.3921 5.39991 13.8427 6.22215C13.2932 7.0444 13 8.0111 13 9C13 10.3261 13.5268 11.5979 14.4645 12.5355C15.4021 13.4732 16.6739 14 18 14Z", fill: "currentColor" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "WavingArm", opacity: bShowArm ? "1" : "0", d: "M4.67541 11.8555C5.6007 10.8308 7.18156 10.7501 8.20635 11.6754L18.9515 21.3773L15.6007 25.0884L4.85556 15.3865C3.83077 14.4612 3.75011 12.8803 4.67541 11.8555V11.8555Z", fill: "currentColor", strokeWidth: "0" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { opacity: bShowArm ? "1" : "0", d: "M32.3573 11.8876C33.2626 12.93 33.1515 14.509 32.109 15.4144L23.2784 23.083L20 19.3078L28.8305 11.6392C29.873 10.7339 31.452 10.8451 32.3573 11.8876Z", fill: "currentColor", strokeWidth: "0" })));
    }
}
function FavoriteFriends(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_FavoriteFriends", viewBox: "0 0 36 36", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18 34.05H2C2 31.9283 2.84285 29.8935 4.34315 28.3932C5.84344 26.8929 7.87827 26.05 10 26.05C12.1217 26.05 14.1566 26.8929 15.6569 28.3932C17.1571 29.8935 18 31.9283 18 34.05ZM10 23.05C10.89 23.05 11.76 22.7861 12.5001 22.2917C13.2401 21.7972 13.8169 21.0944 14.1575 20.2721C14.4981 19.4499 14.5872 18.5451 14.4135 17.6721C14.2399 16.7992 13.8113 15.9974 13.182 15.3681C12.5526 14.7387 11.7508 14.3101 10.8779 14.1365C10.005 13.9629 9.10019 14.052 8.27792 14.3926C7.45566 14.7332 6.75285 15.31 6.25839 16.05C5.76392 16.79 5.5 17.66 5.5 18.55C5.49868 19.1414 5.61418 19.7271 5.83986 20.2737C6.06554 20.8202 6.39695 21.3168 6.81508 21.735C7.23321 22.1531 7.72981 22.4845 8.27637 22.7102C8.82293 22.9359 9.40868 23.0514 10 23.05ZM31.66 28.39C30.186 26.916 28.1949 26.0755 26.1105 26.0474C24.0261 26.0194 22.0131 26.8061 20.5 28.24C21.4889 30.0165 22.0054 32.0169 22 34.05H34C34.0008 32.9992 33.7946 31.9584 33.3931 30.9873C32.9916 30.0161 32.4027 29.1336 31.66 28.39ZM21.5 18.55C21.5 19.4401 21.7639 20.3101 22.2584 21.0501C22.7529 21.7901 23.4557 22.3669 24.2779 22.7075C25.1002 23.0481 26.005 23.1372 26.8779 22.9636C27.7508 22.7899 28.5526 22.3614 29.182 21.732C29.8113 21.1027 30.2399 20.3009 30.4135 19.428C30.5872 18.555 30.4981 17.6502 30.1575 16.828C29.8169 16.0057 29.2401 15.3029 28.5001 14.8084C27.76 14.314 26.89 14.05 26 14.05C25.4087 14.0487 24.8229 14.1642 24.2764 14.3899C23.7298 14.6156 23.2332 14.947 22.8151 15.3651C22.397 15.7833 22.0655 16.2799 21.8399 16.8264C21.6142 17.373 21.4987 17.9587 21.5 18.55ZM20.83 6.91005L23.65 4.16005L19.75 3.59005L18 0.0500488L16.25 3.59005L12.35 4.16005L15.17 6.91005L14.51 10.81L18 9.00005L21.49 10.84L20.83 6.91005Z", fill: "currentColor" })));
}
function User(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_User", viewBox: "0 0 36 36", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M30 32H6V31C6 27.8174 7.26428 24.7652 9.51472 22.5147C11.7652 20.2643 14.8174 19 18 19C21.1826 19 24.2348 20.2643 26.4853 22.5147C28.7357 24.7652 30 27.8174 30 31V32ZM18 3C16.8133 3 15.6533 3.35189 14.6666 4.01118C13.6799 4.67047 12.9108 5.60754 12.4567 6.7039C12.0026 7.80026 11.8838 9.00666 12.1153 10.1705C12.3468 11.3344 12.9182 12.4035 13.7574 13.2426C14.5965 14.0818 15.6656 14.6532 16.8295 14.8847C17.9933 15.1162 19.1997 14.9974 20.2961 14.5433C21.3925 14.0892 22.3295 13.3201 22.9888 12.3334C23.6481 11.3467 24 10.1867 24 9C24 7.4087 23.3679 5.88258 22.2426 4.75736C21.1174 3.63214 19.5913 3 18 3Z", fill: "currentColor" })));
}
function DoNotDisturb() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DoNotDisturb", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#ffffff", strokeWidth: "24", strokeMiterlimit: "10", cx: "128", cy: "128", r: "101.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "24", strokeMiterlimit: "10", x1: "73", y1: "128", x2: "183", y2: "128" })));
}
function MediaControls(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", style: { transform: `scaleX(${props.bFlipHorizontal ? -1 : 1})` }, className: "SVGIcon_Button SVGIcon_MediaControls", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "Arrow", d: "M77.003,54.763h32.784c3.794,0,9.113,2.181,11.814,4.848l63.604,62.773c2.703,2.667,2.727,7.054,0.05,9.748 l-63.705,64.206c-2.674,2.693-7.968,4.898-11.763,4.898H77.003" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "preArrowBox", opacity: props.bHidePreArrow ? "0" : "1", points: "6.833,54.763 46.71,54.763 46.71,201.236 6.833,201.236 \t" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "jumpAheadBox", opacity: props.bShowJumpAheadBox ? "1" : "0", points: "6.833,54.764 86.386,54.764 86.386,201.236 6.833,201.236 \t" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "postArrowBox", opacity: props.bHidePostArrow ? "0" : "1", points: "209.29,54.763 249.167,54.763 249.167,201.236 209.29,201.236 \t" })));
}
function SteamTV() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_SteamTV", x: "0px", y: "0px", width: "1024px", height: "256px", viewBox: "0 0 1024 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("defs", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "gradient", x1: "0%", y1: "0%", x2: "100%", y2: "0%" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "0%", stopColor: "rgb(55, 102, 251)" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "100%", stopColor: "rgb(91, 106, 219)" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "gradientText", x1: "0%", y1: "0%", x2: "100%", y2: "0%" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "0%", stopColor: "rgb(91, 106, 219)" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "100%", stopColor: "rgb(125, 110, 188)" }))),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { className: "logoBG", opacity: "0", fill: "#000000", cx: "156.586", cy: "128", r: "125.914" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "logo" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "url(#gradient)", d: "M156.374,5.355c-64.404,0-117.167,49.661-122.18,112.77l65.712,27.171 c5.567-3.808,12.293-6.032,19.53-6.032c0.649,0,1.294,0.016,1.934,0.051l29.226-42.355c0-0.202-0.005-0.399-0.005-0.598 c0-25.496,20.74-46.241,46.237-46.241c25.498,0,46.239,20.745,46.239,46.241c0,25.494-20.741,46.241-46.239,46.241 c-0.352,0-0.698-0.01-1.047-0.021l-41.68,29.741c0.022,0.546,0.041,1.095,0.041,1.644c0,19.14-15.569,34.707-34.706,34.707 c-16.796,0-30.843-11.991-34.026-27.87l-46.993-19.429c14.55,51.464,61.831,89.19,117.957,89.19 c67.713,0,122.605-54.893,122.605-122.604C278.978,60.244,224.086,5.355,156.374,5.355" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "rgb(67, 104, 241)", d: "M111.026,191.387l-15.061-6.22c2.67,5.56,7.285,10.208,13.418,12.767 c13.25,5.521,28.531-0.771,34.054-14.028c2.674-6.416,2.694-13.5,0.04-19.929c-2.646-6.431-7.64-11.451-14.063-14.129 c-6.371-2.648-13.196-2.552-19.198-0.291l15.561,6.436c9.776,4.074,14.396,15.299,10.324,25.072 C132.031,190.841,120.801,195.464,111.026,191.387" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "rgb(79, 105, 230)", d: "M227.639,96.359c0-16.987-13.82-30.809-30.809-30.809c-16.987,0-30.812,13.821-30.812,30.809 c0,16.988,13.824,30.806,30.812,30.806C213.818,127.165,227.639,113.347,227.639,96.359 M173.736,96.306 c0-12.783,10.364-23.142,23.145-23.142c12.783,0,23.145,10.359,23.145,23.142c0,12.783-10.361,23.142-23.145,23.142 C184.1,119.447,173.736,109.089,173.736,96.306" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "steam" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "rgb(92, 106, 218)", d: "M404.52,91.9l-7.968,14.006c-6.138-4.287-14.455-6.862-21.717-6.862c-8.299,0-13.437,3.43-13.437,9.586 c0,7.473,9.124,9.212,22.682,14.082c14.574,5.149,22.948,11.21,22.948,24.558c0,18.264-14.359,28.519-34.998,28.519 c-10.063,0-22.195-2.595-31.53-8.265l5.815-15.539c7.579,4.008,16.644,6.381,24.722,6.381c10.897,0,16.071-4.021,16.071-9.96 c0-6.802-7.893-8.843-20.641-13.06c-14.521-4.856-24.586-11.213-24.586-25.992c0-16.658,13.34-26.225,32.538-26.225 C387.797,83.128,398.551,87.367,404.52,91.9" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "rgb(99, 107, 211)", points: "468.163,100.753 468.163,174.252 449.402,174.252 449.402,100.753 422.166,100.753 422.166,84.663 495.315,84.663 495.315,100.753 \t" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "rgb(108, 108, 203)", points: "533.512,100.706 533.512,120.896 569.417,120.896 569.417,136.982 533.512,136.982 533.512,158.014 575.173,158.014 575.173,174.253 514.757,174.253 514.757,84.665 575.173,84.665 575.173,100.706" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "rgb(117, 109, 195)", d: "M617.054,156.857l-5.932,17.396h-19.67l33.593-89.594h18.888l34.539,89.594h-20.336l-6.061-17.396H617.054z M634.378,106.035l-12.23,35.87h24.723L634.378,106.035z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "rgb(125, 110, 188)", points: "773.403,119.291 748.888,171.645 738.302,171.645 714.182,119.758 714.182,174.253 696.212,174.253 696.212,84.665 714.138,84.665 744.251,149.33 773.285,84.665 791.374,84.665 791.374,174.253 773.406,174.253" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "tv" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "rgb(125, 110, 188)", points: "853.961,92.664 823.506,92.664 823.506,84.147 893.835,84.147 893.835,92.664 863.51,92.664 863.51,174.479 853.961,174.479" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "rgb(125, 110, 188)", points: "909.835,84.147 920.286,84.147 950.612,165.831 980.033,84.147 990.487,84.147 956.421,174.479 944.159,174.479" }))));
}
function SteamLogo(props) {
    const className = (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', 'SVGIcon_SteamLogo', props && props.className);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", fill: "#FFFFFF", className: className, x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#currentColor", d: "M127.374,5.355c-64.404,0-117.167,49.661-122.18,112.77l65.712,27.171 c5.567-3.808,12.293-6.032,19.53-6.032c0.649,0,1.294,0.017,1.934,0.051l29.226-42.354c0-0.202-0.005-0.399-0.005-0.598 c0-25.496,20.74-46.241,46.237-46.241c25.498,0,46.238,20.745,46.238,46.241c0,25.494-20.74,46.242-46.238,46.242 c-0.352,0-0.698-0.011-1.047-0.021l-41.68,29.741c0.022,0.546,0.041,1.095,0.041,1.644c0,19.141-15.569,34.707-34.706,34.707 c-16.796,0-30.843-11.99-34.026-27.869l-46.993-19.43c14.55,51.464,61.831,89.189,117.957,89.189 c67.713,0,122.604-54.893,122.604-122.604C249.979,60.244,195.086,5.355,127.374,5.355" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#currentColor", d: "M82.026,191.387l-15.061-6.22c2.67,5.56,7.285,10.208,13.418,12.767 c13.25,5.521,28.531-0.771,34.054-14.027c2.674-6.416,2.694-13.5,0.04-19.93c-2.646-6.431-7.64-11.451-14.063-14.129 c-6.371-2.647-13.196-2.552-19.198-0.291l15.561,6.437c9.776,4.073,14.396,15.299,10.324,25.071 C103.031,190.841,91.801,195.464,82.026,191.387" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#currentColor", d: "M198.639,96.359c0-16.987-13.82-30.809-30.809-30.809c-16.987,0-30.813,13.821-30.813,30.809 c0,16.988,13.824,30.806,30.813,30.806S198.639,113.347,198.639,96.359 M144.736,96.306c0-12.783,10.363-23.142,23.145-23.142 c12.783,0,23.145,10.359,23.145,23.142c0,12.783-10.36,23.142-23.145,23.142C155.1,119.447,144.736,109.089,144.736,96.306" })));
}
function Viewers() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Viewers", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "frontGuy", fill: "#666666", d: "M181.732,53.151c-17.255,0-31.321,13.316-31.321,32.634v25.132 c0,18.005,24.006,21.006,24.382,21.381c-10.691,2.813-30.947,8.252-40.888,15.566c-8.252,6.003-11.44,18.005-13.128,22.882 c-0.75,2.063-1.688,5.064-1.688,7.127c0,0,0,9.94,0,19.881s12.941,16.505,18.005,16.505h89.65c4.877,0,18.006-5.627,18.006-16.505 s0-19.881,0-19.881c0-2.251-0.938-5.627-1.688-7.689c-4.313-10.878-4.688-16.316-13.315-22.319 c-9.941-6.939-30.009-12.19-40.512-15.004c0.374-0.563,24.193-4.127,24.193-22.131V85.785 C213.053,66.467,198.986,53.151,181.732,53.151L181.732,53.151z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "backGuy", fill: "rgb(144, 153, 161)", d: "M84.204,34.396c-20.068,0-36.385,15.38-36.385,38.074v29.258c0,20.818,27.945,24.382,28.32,24.944 c-12.378,3.189-36.01,9.565-47.638,18.006c-9.753,7.127-13.504,21.006-15.379,26.632c-0.75,2.251-1.876,6.002-1.876,8.253  c0,0,0,11.44,0,23.257c0,11.815,15.004,19.13,20.819,19.13h104.279c5.814,0,20.818-6.564,20.818-19.13c0-12.566,0-23.257,0-23.257 c0-2.438-1.125-6.564-2.063-8.815c-5.063-12.566-5.438-18.942-15.566-26.069c-11.628-8.065-34.885-14.067-47.076-17.443 c0.375-0.563,28.133-4.876,28.133-25.695V72.469C120.59,49.775,104.272,34.396,84.204,34.396L84.204,34.396z" })));
}
function ChatBubble() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", className: "SVGIcon_Button SVGIcon_ChatBubble", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 64 64" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M33,5C18.7,5,7.1,16.6,7.1,30.9c0,5.2,1.5,10.1,4.2,14.1c-0.6,3.7-4.5,10.5-6.2,13.5c-1.3,2.2,11.4-3.8,16.3-4.5c3.5,1.8,7.5,2.8,11.7,2.8c14.3,0,25.9-11.6,25.9-25.9S47.3,5,33,5z" }))));
}
function Globe() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", className: "SVGIcon_Button SVGIcon_Globe", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 64 64" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M32.5,5C17.9,5,6,16.9,6,31.5C6,46.1,17.9,58,32.5,58S59,46.1,59,31.5C59,16.9,47.1,5,32.5,5 M32.5,54.7c-1.2,0-2.5-0.1-3.7-0.3c-1.1-1.1-2.1-2.8-3-4.8c-0.8-1.8-1.4-3.8-2-6c2.7-0.3,5.6-0.5,8.6-0.5c3,0,5.9,0.2,8.6,0.5c-0.5,2.2-1.2,4.2-2,6c-0.9,2-1.9,3.7-3,4.8C35,54.6,33.7,54.7,32.5,54.7 M32.5,41.4c-3.2,0-6.2,0.2-9,0.5c-0.6-3-0.9-6.2-1-9.6h19.9c0,3.4-0.4,6.6-1,9.6C38.7,41.6,35.7,41.4,32.5,41.4 M32.5,8.3c1.2,0,2.5,0.1,3.7,0.3c1.1,1.1,2.1,2.8,3,4.8c0.8,1.8,1.4,3.8,2,6c-2.7,0.3-5.6,0.5-8.6,0.5c-3,0-5.9-0.2-8.6-0.5c0.5-2.2,1.2-4.2,2-6c0.9-2,1.9-3.7,3-4.8C30,8.4,31.3,8.3,32.5,8.3 M32.5,21.6c3.2,0,6.2-0.2,9-0.5c0.6,3,0.9,6.2,1,9.6H22.6c0-3.4,0.4-6.6,1-9.6C26.3,21.4,29.3,21.6,32.5,21.6 M44.1,30.7c0-3.5-0.4-6.8-1-9.8c3.4-0.5,6.4-1.1,8.8-2c2.3,3.5,3.6,7.5,3.7,11.8H44.1z M20.9,30.7H9.3c0.1-4.2,1.4-8.3,3.7-11.8c2.5,0.8,5.5,1.5,8.8,2C21.3,23.9,21,27.2,20.9,30.7 M20.9,32.3c0,3.5,0.4,6.8,1,9.8c-3.4,0.5-6.4,1.1-8.8,2c-2.3-3.5-3.6-7.5-3.7-11.8H20.9z M44.1,32.3h11.6c-0.1,4.2-1.4,8.3-3.7,11.8c-2.5-0.8-5.5-1.5-8.8-2C43.7,39.1,44,35.8,44.1,32.3 M51,17.5c-0.1,0-0.2,0.1-0.3,0.1c-2.3,0.7-5,1.3-7.9,1.7c-0.9-4.1-2.3-7.6-4-10.1c3.8,1.1,7.3,3.1,10.2,5.9C49.6,15.9,50.3,16.6,51,17.5 M26.3,9.2c-1.7,2.5-3.1,6-4,10.1c-2.9-0.4-5.6-1-7.9-1.7c-0.1,0-0.2-0.1-0.3-0.1c0.6-0.8,1.3-1.6,2.1-2.4C19,12.2,22.5,10.2,26.3,9.2 M14,45.5c0.1,0,0.2-0.1,0.3-0.1c2.3-0.7,5-1.3,7.9-1.7c0.9,4.1,2.3,7.6,4,10.1c-3.8-1.1-7.3-3.1-10.2-5.9C15.4,47.1,14.7,46.4,14,45.5 M38.7,53.8c1.7-2.5,3.1-6,4-10.1c2.9,0.4,5.6,1,7.9,1.7c0.1,0,0.2,0.1,0.3,0.1c-0.6,0.8-1.3,1.6-2.1,2.4C46,50.8,42.5,52.8,38.7,53.8" }))));
}
function SmallX() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 64 64" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M40.6,32.7l15.1-15.1c2.6-2.6,2.6-6.7,0-9.3c-2.6-2.6-6.7-2.6-9.3,0L31.3,23.4L16.2,8.3c-2.6-2.6-6.7-2.6-9.3,0c-2.6,2.6-2.6,6.7,0,9.3L22,32.7L6.9,47.8c-2.6,2.6-2.6,6.7,0,9.3c1.3,1.3,3,1.9,4.7,1.9s3.4-0.6,4.7-1.9L31.3,42l15.1,15.1c1.3,1.3,3,1.9,4.7,1.9s3.4-0.6,4.7-1.9c2.6-2.6,2.6-6.7,0-9.3L40.6,32.7z" }))));
}
function STVTimelineGrabber() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_STVTimelineGrabber", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "leftarrow", opacity: '0' },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "127.817,4.403 4,128 127.817,251.598" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "rightarrow", opacity: '0' },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "127.816,4.403 251.633,128 127.816,251.598" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "grabber" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "145.692,22.132 145.692,234.361 127.817,251.598 110.307,234.361 110.307,22.132 127.817,4.403" }))));
}
function STVTimelineMarker() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_STVTimelineMarker", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: "pointer", points: "128,154.979 46.374,230.548 46.374,253.333 209.626,253.333 209.626,230.548 \t" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { className: "line", x: "116.271", y: "3.168", width: "23.459", height: "137.332" })));
}
function HideShowChat(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_HideShowChat", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "hidechat", opacity: props.showChat ? '0' : '1' },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "156.001,189.834 116.375,189.834 67.31,222.538 67.31,189.834 39.834,189.834 39.834,59.011 59.25,59.011" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "109.427,59.011 225.299,59.011 225.299,189.834 207,189.834" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "49.786", y1: "15.012", x2: "214.409", y2: "233.723" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "showchat", opacity: props.showChat ? '1' : '0' },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "116.375,189.834 67.31,222.538 67.31,189.834 39.834,189.834 39.834,59.011 225.299,59.011 225.299,189.834" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "textlines", opacity: props.showChat ? '1' : '0' },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeMiterlimit: "10", x1: "72.333", y1: "124.75", x2: "194.167", y2: "124.75" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeMiterlimit: "10", x1: "72.333", y1: "155.75", x2: "194.167", y2: "155.75" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeMiterlimit: "10", x1: "72.333", y1: "93.75", x2: "179.926", y2: "93.75" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "156.001,189.834 116.375,189.834 67.31,222.538 67.31,189.834 39.834,189.834 39.834,59.011 59.25,59.011 " }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "109.427,59.011 225.299,59.011 225.299,189.834 207,189.834" }))));
}
function ShowBothChats() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ShowBothChats", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { opacity: "0", fill: "#FFFFFF", strokeWidth: "0", cx: "166.241", cy: "161.906", r: "75.259" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "8", strokeLinecap: "round", strokeMiterlimit: "10", points: "92.367,155.634 51.311,183 51.311,150.296 23.834,150.296 23.834,19.473 140.5,19.473 140.5,91.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "8", strokeMiterlimit: "10", x1: "48.529", y1: "82.167", x2: "113.379", y2: "82.167" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "8", strokeMiterlimit: "10", x1: "48.529", y1: "113.167", x2: "113.379", y2: "113.167" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "8", strokeMiterlimit: "10", x1: "48.529", y1: "51.167", x2: "99.138", y2: "51.167" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M166.241,82.167c-43.933,0-79.74,35.807-79.74,79.74c0,43.932,35.808,79.739,79.74,79.739 c43.932,0,79.739-35.808,79.739-79.739C245.98,117.975,210.173,82.167,166.241,82.167 M166.241,231.717 c-3.611,0-7.522-0.301-11.134-0.902c-3.31-3.311-6.318-8.426-9.027-14.444c-2.407-5.416-4.212-11.434-6.018-18.054  8.124-0.902,16.851-1.505,25.878-1.505c9.026,0,17.753,0.603,25.877,1.505c-1.504,6.62-3.61,12.638-6.018,18.054 c-2.708,6.019-5.718,11.134-9.027,14.444C173.764,231.416,169.852,231.717,166.241,231.717 M166.241,191.696 c-9.629,0-18.656,0.602-27.082,1.505c-1.805-9.027-2.708-18.656-3.009-28.887h59.88c0,10.23-1.203,19.859-3.009,28.887 C184.896,192.298,175.87,191.696,166.241,191.696 M166.241,92.097c3.61,0,7.522,0.301,11.133,0.903 c3.311,3.31,6.319,8.425,9.027,14.443c2.407,5.416,4.213,11.435,6.019,18.055c-8.125,0.902-16.851,1.504-25.878,1.504  s-17.753-0.602-25.878-1.504c1.505-6.62,3.611-12.639,6.019-18.055c2.708-6.018,5.717-11.133,9.026-14.443 \tC158.719,92.398,162.63,92.097,166.241,92.097 M166.241,132.117c9.629,0,18.655-0.602,27.081-1.504 \tc1.806,9.026,2.708,18.655,3.009,28.887h-59.88c0-10.231,1.204-19.86,3.01-28.887 \tC147.585,131.516,156.612,132.117,166.241,132.117 M201.146,159.5c0-10.532-1.203-20.462-3.009-29.488 c10.23-1.505,19.258-3.311,26.479-6.019c6.921,10.531,10.833,22.567,11.134,35.507H201.146z M131.336,159.5H96.432 c0.301-12.639,4.212-24.976,11.133-35.507c7.522,2.407,16.55,4.514,26.479,6.019C132.54,139.038,131.637,148.968,131.336,159.5 M131.336,164.314c0,10.531,1.204,20.461,3.01,29.488c-10.231,1.505-19.259,3.31-26.48,6.018 c-6.921-10.531-10.832-22.567-11.133-35.506H131.336z M201.146,164.314h34.905c-0.301,12.638-4.213,24.975-11.134,35.506 c-7.522-2.406-16.55-4.513-26.479-6.018C199.942,184.775,200.845,174.846,201.146,164.314 M221.908,119.78 c-0.301,0-0.602,0.301-0.903,0.301c-6.92,2.106-15.045,3.912-23.771,5.115c-2.708-12.337-6.921-22.868-12.036-30.391 c11.434,3.31,21.966,9.328,30.691,17.753C217.695,114.966,219.802,117.072,221.908,119.78 M147.585,94.806 c-5.115,7.522-9.328,18.054-12.036,30.391c-8.727-1.203-16.851-3.009-23.771-5.115c-0.301,0-0.602-0.301-0.902-0.301 c1.805-2.407,3.911-4.814,6.318-7.222C125.619,103.833,136.15,97.814,147.585,94.806 M110.574,204.033 c0.301,0,0.602-0.301,0.902-0.301c6.921-2.106,15.045-3.912,23.771-5.115c2.708,12.337,6.921,22.869,12.036,30.392 c-11.435-3.311-21.966-9.328-30.692-17.754C114.786,208.848,112.68,206.742,110.574,204.033 M184.896,229.009 c5.116-7.522,9.329-18.055,12.036-30.392c8.727,1.203,16.852,3.009,23.771,5.115c0.301,0,0.603,0.301,0.903,0.301 c-1.806,2.407-3.912,4.814-6.319,7.222C206.863,219.981,196.331,226,184.896,229.009" })));
}
function BigPicture() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_BigPicture", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", d: "M213.771,68.659c-4.108-7.066-46.007-7.231-49.293-7.231H128H91.522c-3.286,0-45.186,0.165-49.293,7.231 c-19.555,29.248-27.385,100.263-27.276,104.01c0.238,8.294,2.11,24.583,16.595,35.162c9.201,6.72,22.183,8.709,29.083,3.614 c4.989-3.682,11.995-19.224,19.061-32.204c7.064-12.981,9.202-11.174,12.98-12.159c3.78-0.986,36.066-0.74,36.066-0.74 s30.809-0.247,34.588,0.74c3.777,0.985,5.915-0.822,12.98,12.159c7.064,12.98,14.07,28.522,19.061,32.204 c6.9,5.095,19.882,3.106,29.083-3.614c14.485-10.58,16.356-26.868,16.595-35.162C241.154,168.922,233.325,97.906,213.771,68.659z M67.251,128.14c-14.974,0-27.112-12.137-27.112-27.111c0-14.975,12.137-27.112,27.112-27.112 c14.973,0,27.111,12.137,27.111,27.112C94.362,116.003,82.224,128.14,67.251,128.14z M188.749,128.14 c-14.974,0-27.111-12.137-27.111-27.111c0-14.975,12.138-27.112,27.111-27.112c14.973,0,27.111,12.137,27.111,27.112 C215.86,116.003,203.722,128.14,188.749,128.14z" })));
}
function MobilePhone(props) {
    const { className } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', 'SVGIcon_MobilePhone', className), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M165.693,45.186H91.368c-7.963,0-14.41,6.447-14.41,14.41V210.9c0,7.964,6.447,14.41,14.41,14.41h74.134 c7.965,0,14.41-6.447,14.41-14.41V59.596C180.102,51.633,173.657,45.186,165.693,45.186z M113.172,57.509h30.717 c1.707,0,3.223,1.327,3.223,3.224c0,1.896-1.328,3.223-3.223,3.223h-30.717c-1.707,0-3.223-1.328-3.223-3.223 C109.949,58.837,111.465,57.509,113.172,57.509z M128.529,213.554c-4.551,0-8.152-3.603-8.152-8.153c0-4.55,3.604-8.152,8.152-8.152 s8.151,3.603,8.151,8.152C136.682,209.761,133.081,213.554,128.529,213.554z M169.105,186.819h-81.15V74.384h81.15V186.819 L169.105,186.819z" })));
}
function VR(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M11.45 26.5H7.625L1 9H5.025L9.625 22.325L14.1 9H18.125L11.45 26.5Z", fill: "white" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M34.552 26.5H30.477L26.952 20.6H26.527H23.927V26.5H20.252V9H26.802C29.202 9 30.9686 9.48333 32.102 10.45C33.2353 11.4 33.802 12.7333 33.802 14.45C33.802 15.8 33.502 16.925 32.902 17.825C32.3186 18.725 31.4936 19.4083 30.427 19.875L34.552 26.5ZM23.927 12.125V17.45H26.802C27.7686 17.45 28.5186 17.2083 29.052 16.725C29.602 16.225 29.877 15.5417 29.877 14.675C29.877 13.825 29.6103 13.1917 29.077 12.775C28.5603 12.3417 27.727 12.125 26.577 12.125H23.927Z", fill: "white" })));
}
function MouseAndKB(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "36", height: "36", viewBox: "0 0 36 36", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.4096 7H1V23.5601H21.9066V19.8801H7.65209V18.0401H21.9066V17.7641C21.9066 17.2208 21.9876 16.6959 22.1387 16.2001H20.9563V14.36H22.8569V14.7117C23.7116 13.4671 25.0741 12.5776 26.6581 12.3204V10.68H28.5587V12.244H31.4096V7ZM5.75149 10.68H3.8509V12.52H5.75149V10.68ZM3.8509 18.0401H5.75149V19.8801H3.8509V18.0401ZM7.65209 14.36H3.8509V16.2001H7.65209V14.36ZM7.65209 10.68H9.55269V12.52H7.65209V10.68ZM11.4533 10.68H13.3539V12.52H11.4533V10.68ZM11.4533 14.36H9.55269V16.2001H11.4533V14.36ZM15.2545 10.68H17.1551V12.52H15.2545V10.68ZM15.2545 14.36H13.3539V16.2001H15.2545V14.36ZM17.1551 14.36H19.0557V16.2001H17.1551V14.36ZM20.9563 10.68H19.0557V12.52H20.9563V10.68ZM24.7575 10.68H22.8569V12.52H24.7575V10.68Z", fill: "white" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M27.9783 15.4332C26.3164 15.4332 24.9691 16.7376 24.9691 18.3466V25.1444C24.9691 27.8261 27.2146 30 29.9845 30C32.7545 30 35 27.8261 35 25.1444V18.3466C35 16.7376 33.6527 15.4332 31.9907 15.4332H27.9783ZM29.9845 17.861C29.4305 17.861 28.9814 18.2958 28.9814 18.8321V20.7744C28.9814 21.3107 29.4305 21.7455 29.9845 21.7455C30.5385 21.7455 30.9876 21.3107 30.9876 20.7744V18.8321C30.9876 18.2958 30.5385 17.861 29.9845 17.861Z", fill: "white" })));
}
function LargeMobilePhone() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_LargeMobilePhone", x: "0px", y: "0px", width: "128px", height: "255px", viewBox: "0 0 128 255" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { className: "screen", x: "7.756", y: "5.518", fill: "#292D33", width: "112.144", height: "234.357" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "frame", fill: "#3C414B", d: "M40.334,15.72h47.237c3.957,0,7.164-3.259,7.164-7.28c0-1.113,0.889-2.017,1.984-2.017h9.746 c7.417,0,13.432,6.108,13.432,13.646v206.156c0,7.538-6.015,13.647-13.431,13.647H21.459c-7.417,0-13.429-6.109-13.429-13.647 V20.071c0-7.536,6.013-13.646,13.429-13.646h9.728c1.096,0,1.983,0.903,1.983,2.017C33.17,12.461,36.377,15.72,40.334,15.72 M107.057,0.001H20.87c-9.922,0-17.965,8.174-17.965,18.256v217.505c0,10.082,8.043,18.256,17.965,18.256h86.188 c9.923,0,17.966-8.174,17.966-18.256V18.257C125.022,8.175,116.979,0.001,107.057,0.001" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#3C414B", d: "M0.826,33.349C0.369,33.349,0,33.725,0,34.189v7.616c0,0.464,0.37,0.84,0.826,0.84s0.827-0.376,0.827-0.84 v-7.617C1.653,33.725,1.283,33.349,0.826,33.349" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#3C414B", d: "M0.826,51.56C0.369,51.56,0,51.936,0,52.4v16.8c0,0.465,0.37,0.841,0.826,0.841s0.827-0.376,0.827-0.841 V52.4C1.653,51.936,1.283,51.56,0.826,51.56" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#3C414B", d: "M0.826,75.304C0.369,75.304,0,75.68,0,76.144v15.904c0,0.464,0.37,0.84,0.826,0.84s0.827-0.376,0.827-0.84 V76.144C1.653,75.68,1.283,75.304,0.826,75.304" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#3C414B", d: "M127.617,58.056c-0.457,0-0.827,0.376-0.827,0.84v27.328c0,0.464,0.37,0.84,0.827,0.84 c0.456,0,0.826-0.376,0.826-0.84V58.896C128.443,58.432,128.073,58.056,127.617,58.056" })));
}
function Envelope() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Envelope", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#3C414B", points: "3.167,48.809 127.22,128 252.833,48.809 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#3C414B", points: "252.833,203.68 252.833,55.439 185.151,99.131 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#3C414B", points: "247.958,207.191 180.47,101.472 128.001,134.24 75.142,101.472 7.849,207.191 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: "#3C414B", points: "3.167,203.682 3.167,55.441 70.851,99.132 " })));
}
function Rules() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_5", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Rules", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", d: "M45.696,48.297h31.935 V31.161h30.637c0,0-1.039-25.01,19.731-25.01s19.386,25.27,19.386,25.27l29.944,0.26v16.616h32.975v200.437H45.696V48.297z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "77.631,48.297 77.5,60.5 177.199,60.5 177.329,48.297 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "102.041", y1: "101.176", x2: "182.048", y2: "101.176" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "102.041", y1: "137.178", x2: "182.048", y2: "137.178" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "102.041", y1: "172.144", x2: "121.811", y2: "172.144" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "74.785", y1: "101.176", x2: "80.215", y2: "101.176" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "74.785", y1: "137.178", x2: "80.215", y2: "137.178" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "74.785", y1: "172.144", x2: "80.215", y2: "172.144" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "136.005,204.887 151.583,222.888 182.048,178.924 " })));
}
function Schedule() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Schedule", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M124.611,212.463 c0,0-83.23,0-95.703,0c-12.474,0-20.646-7.248-20.646-22.335c0-15.086,0-102.617,0-137.242c0-6.638,5.065-20.431,16.958-20.431 c7.99,0,157.675,0,168.645,0c10.966,0,22.149,4.946,22.149,20.216s0,72.094,0,72.094" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M69.34,123.427c0,0.474-0.385,0.86-0.86,0.86 H45.253c-0.475,0-0.86-0.386-0.86-0.86V100.2c0-0.476,0.386-0.861,0.86-0.861H68.48c0.476,0,0.86,0.385,0.86,0.861V123.427z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M124.611,123.427c0,0.474-0.386,0.86-0.86,0.86 h-23.227c-0.475,0-0.86-0.386-0.86-0.86V100.2c0-0.476,0.385-0.861,0.86-0.861h23.227c0.475,0,0.86,0.385,0.86,0.861V123.427z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M69.34,172.891c0,0.477-0.385,0.86-0.86,0.86 H45.253c-0.475,0-0.86-0.385-0.86-0.86v-23.227c0-0.475,0.386-0.86,0.86-0.86H68.48c0.476,0,0.86,0.386,0.86,0.86V172.891z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M124.611,172.891c0,0.477-0.386,0.86-0.86,0.86 h-23.227c-0.475,0-0.86-0.385-0.86-0.86v-23.227c0-0.475,0.385-0.86,0.86-0.86h23.227c0.475,0,0.86,0.386,0.86,0.86V172.891z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M179.668,123.427c0,0.474-0.385,0.86-0.859,0.86 H155.58c-0.477,0-0.858-0.386-0.858-0.86V100.2c0-0.476,0.384-0.861,0.858-0.861h23.229c0.476,0,0.859,0.385,0.859,0.861V123.427z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", x1: "39.778", y1: "73.429", x2: "184.75", y2: "73.429" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", cx: "195.341", cy: "195.188", r: "54.652" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "191.496,161.277 191.496,198.914 218.594,218.914 \t" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "56.722", y1: "50.861", x2: "56.722", y2: "14.455" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "167.811", y1: "50.861", x2: "167.811", y2: "14.455" })));
}
function Info() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Info", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", cx: "128", cy: "75.835", r: "17.679" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M98.821,116.865c0,0,0.159,11,2.71,16.407 c2.451,5.198,8.789,2.938,8.789,10.33c0,13.388,0,42.604,0,42.604s-1.065,10.435,6,10.652c7.065,0.216,29.358,0,29.358,0 s0-50.383,0-68.859c0-5.181-6.328-11.135-11.848-11.135C123.181,116.865,98.821,116.865,98.821,116.865z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", cx: "128", cy: "128", r: "122.334" })));
}
function Facebook() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Facebook", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M236.824,5.666H19.176c-7.467,0-13.51,6.043-13.51,13.51v217.658c0,7.457,6.043,13.5,13.51,13.5h117.186v-94.746h-31.893 v-36.926h31.893V91.434c0-31.604,19.295-48.813,47.488-48.813c13.51,0,25.109,1.012,28.494,1.459v33.027l-19.553,0.01 c-15.332,0-18.299,7.293-18.299,17.975v23.58h36.576l-4.768,36.926h-31.809v94.736h62.352c7.447,0,13.49-6.043,13.49-13.51V19.176 C250.334,11.709,244.291,5.666,236.824,5.666z" })));
}
function Twitter() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Twitter", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M250.151,128.021c0,67.418-54.604,122.022-122.022,122.022S6.107,195.439,6.107,128.021C6.107,60.604,60.712,6,128.129,6 S250.151,60.604,250.151,128.021z M105.799,192.389c54.117,0,83.707-44.842,83.707-83.707c0-1.282,0-2.563-0.062-3.783 c5.736-4.148,10.739-9.335,14.705-15.252c-5.247,2.318-10.922,3.905-16.901,4.637c6.103-3.661,10.738-9.396,12.936-16.29 c-5.675,3.355-11.959,5.796-18.67,7.138c-5.369-5.734-12.995-9.273-21.477-9.273c-16.228,0-29.406,13.179-29.406,29.407 c0,2.318,0.243,4.576,0.793,6.711c-24.466-1.22-46.125-12.934-60.646-30.75c-2.501,4.332-3.965,9.396-3.965,14.765 c0,10.189,5.186,19.218,13.117,24.465c-4.819-0.122-9.334-1.464-13.3-3.661c0,0.122,0,0.244,0,0.366 c0,14.275,10.128,26.113,23.611,28.857c-2.44,0.672-5.064,1.039-7.748,1.039c-1.892,0-3.723-0.184-5.553-0.551 c3.722,11.714,14.581,20.195,27.455,20.44c-10.067,7.868-22.757,12.566-36.546,12.566c-2.379,0-4.697-0.122-7.016-0.427 C73.707,187.507,89.204,192.389,105.799,192.389" })));
}
function Instagram() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Instagram", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M128.01,5.666c-33.224,0-37.39,0.141-50.438,0.737C64.55,6.997,55.657,9.064,47.876,12.089 c-8.044,3.126-14.867,7.309-21.668,14.11C19.407,33,15.224,39.822,12.098,47.867c-3.024,7.781-5.092,16.674-5.686,29.695 C5.816,90.61,5.676,94.776,5.676,128.001c0,33.224,0.141,37.389,0.736,50.438c0.594,13.021,2.662,21.913,5.686,29.695 c3.126,8.044,7.31,14.866,14.11,21.668c6.801,6.801,13.624,10.983,21.668,14.11c7.781,3.023,16.674,5.092,29.695,5.686 c13.048,0.596,17.214,0.736,50.438,0.736c33.224,0,37.39-0.141,50.438-0.736c13.021-0.594,21.914-2.662,29.695-5.686 c8.045-3.127,14.867-7.31,21.668-14.11c6.801-6.802,10.984-13.624,14.11-21.668c3.024-7.782,5.093-16.675,5.687-29.695 c0.595-13.049,0.735-17.214,0.735-50.438c0-33.225-0.141-37.391-0.735-50.438c-0.594-13.021-2.662-21.914-5.687-29.695 c-3.126-8.045-7.31-14.867-14.11-21.668c-6.801-6.801-13.623-10.983-21.668-14.11c-7.781-3.024-16.674-5.092-29.695-5.686 C165.399,5.807,161.233,5.666,128.01,5.666L128.01,5.666L128.01,5.666z M128.01,27.709c32.664,0,36.533,0.125,49.433,0.713 c11.928,0.544,18.405,2.537,22.716,4.212c5.711,2.22,9.785,4.87,14.066,9.151c4.281,4.281,6.932,8.356,9.151,14.066 c1.675,4.311,3.668,10.788,4.212,22.715c0.588,12.9,0.713,16.77,0.713,49.435c0,32.664-0.125,36.533-0.713,49.433 c-0.544,11.928-2.537,18.404-4.212,22.716c-2.22,5.71-4.87,9.785-9.151,14.066c-4.281,4.28-8.355,6.932-14.066,9.15 c-4.311,1.676-10.788,3.668-22.716,4.212c-12.897,0.589-16.767,0.714-49.433,0.714c-32.667,0-36.535-0.125-49.434-0.714 c-11.928-0.544-18.405-2.536-22.716-4.212c-5.71-2.219-9.785-4.87-14.066-9.15c-4.281-4.281-6.932-8.356-9.151-14.066 c-1.675-4.312-3.667-10.788-4.212-22.716c-0.588-12.899-0.713-16.769-0.713-49.433c0-32.665,0.125-36.534,0.713-49.435 c0.545-11.927,2.537-18.404,4.212-22.715c2.219-5.71,4.871-9.786,9.151-14.066c4.281-4.281,8.356-6.932,14.066-9.151 c4.311-1.675,10.788-3.668,22.716-4.212C91.476,27.833,95.345,27.709,128.01,27.709" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M128.01,168.778c-22.521,0-40.778-18.257-40.778-40.777c0-22.522,18.257-40.779,40.778-40.779 c22.521,0,40.777,18.257,40.777,40.779C168.787,150.521,150.53,168.778,128.01,168.778L128.01,168.778z M128.01,65.181 c-34.695,0-62.82,28.125-62.82,62.82c0,34.694,28.125,62.819,62.82,62.819c34.694,0,62.819-28.125,62.819-62.819 C190.829,93.306,162.704,65.181,128.01,65.181L128.01,65.181z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M207.992,62.698c0,8.108-6.573,14.68-14.681,14.68s-14.68-6.572-14.68-14.68c0-8.107,6.572-14.68,14.68-14.68 S207.992,54.591,207.992,62.698L207.992,62.698z" })));
}
function Discord() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Discord", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M105.857,108.305c-6.973,0-12.478,6.117-12.478,13.579c0,7.461,5.627,13.578,12.478,13.578 c6.973,0,12.479-6.116,12.479-13.578C118.458,114.422,112.831,108.305,105.857,108.305z M150.511,108.305 c-6.974,0-12.479,6.117-12.479,13.579c0,7.461,5.628,13.578,12.479,13.578c6.973,0,12.478-6.116,12.478-13.578 C162.988,114.422,157.483,108.305,150.511,108.305z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M209.965,5.666H46.037c-13.824,0-25.079,11.255-25.079,25.201v165.396c0,13.946,11.255,25.2,25.079,25.2h138.728 l-6.484-22.631l15.658,14.559l14.804,13.7l26.301,23.243V30.867C235.043,16.921,223.788,5.666,209.965,5.666z M162.744,165.435 c0,0-4.405-5.261-8.075-9.909c16.026-4.527,22.144-14.558,22.144-14.558c-5.017,3.303-9.787,5.627-14.068,7.218 c-6.117,2.569-11.989,4.281-17.739,5.261c-11.743,2.2-22.509,1.591-31.684-0.124c-6.973-1.346-12.969-3.303-17.984-5.261 c-2.814-1.101-5.872-2.446-8.93-4.158c-0.367-0.245-0.734-0.366-1.102-0.612c-0.244-0.121-0.367-0.245-0.488-0.366 c-2.203-1.224-3.426-2.079-3.426-2.079s5.872,9.785,21.408,14.434c-3.67,4.649-8.197,10.155-8.197,10.155 c-27.035-0.857-37.312-18.595-37.312-18.595c0-39.391,17.617-71.32,17.617-71.32c17.615-13.212,34.375-12.846,34.375-12.846 l1.223,1.468c-22.019,6.361-32.174,16.026-32.174,16.026s2.691-1.468,7.218-3.547c13.09-5.75,23.488-7.341,27.771-7.708 c0.733-0.123,1.346-0.244,2.079-0.244c7.462-0.979,15.903-1.224,24.711-0.245c11.622,1.346,24.101,4.771,36.823,11.744 c0,0-9.665-9.175-30.461-15.537l1.713-1.958c0,0,16.759-0.367,34.376,12.846c0,0,17.616,31.93,17.616,71.32 C200.179,146.84,189.779,164.577,162.744,165.435z" })));
}
function YouTube() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_YouTube", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M243.402,70.101c-2.775-10.309-10.906-18.439-21.217-21.217c-18.838-5.152-94.185-5.152-94.185-5.152 s-75.348,0-94.185,4.957c-10.112,2.775-18.44,11.104-21.216,21.413C7.644,88.94,7.644,128,7.644,128s0,39.257,4.957,57.896 c2.775,10.313,10.905,18.439,21.216,21.219c19.036,5.154,94.185,5.154,94.185,5.154s75.347,0,94.185-4.957 c10.311-2.771,18.441-10.906,21.217-21.217c4.953-18.838,4.953-57.898,4.953-57.898S248.557,88.94,243.402,70.101z M104.008,164.088 V91.912L166.668,128L104.008,164.088z" })));
}
function TwitchTV() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_TwitchTV", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M28.176,8.026L11.763,49.97v171.427h58.358v31.003h32.826l31.003-31.003h47.414l63.829-63.829V8.026H28.176z M223.311,146.625l-36.474,36.474h-58.359l-31.002,31.003v-31.003H48.237V29.91h175.074V146.625z M186.837,71.855v63.829h-21.885 V71.855H186.837z M128.478,71.855v63.829h-21.883V71.855H128.478z" })));
}
function CSGO() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_CSGO", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M236.979,138.059c0.548,0.078,6.91,0.101,7.772,0.032 c1.215-0.095,1.396,0.068,1.388,0.708c-0.01,0.397,0.012,3.039-2.365,7.32c-3.301,5.948-12.079,10.436-12.55,10.672 c-0.47,0.233-0.53,0.484-0.136,0.75c0.434,0.295,8.068,1.454,9.084,1.611c1.017,0.154,0.637,1.001,0.637,1.001 s-0.704,2.621-2.895,5.36c-2.189,2.738-9.311,6.123-8.583,6.123c0.731,0,7.187,0.159,6.181,1.422 c-3.019,3.786-13.603,9.528-18.43,13.813c-13.388,11.885-13.217,12.864-15.52,15.09c-0.983-3.298-3.02-12.658-3.02-12.658 l-6.105-11.467c4.413,0.18,6.364,0.081,8.952,0.081c9.214,0,17.525-2.185,22.234-5.841l2.371-1.843l-2.911-0.728 c-2.131-0.528-7.121-1.782-11.896-2.979c2.184-0.104,10.803-1.299,14.413-5.339c0.136-0.151,0.276-0.321,0.406-0.494l1.245-1.664 l-2.404-0.735c-2.607-0.799-5.948-1.682-8.517-2.335c3.173-1.572,7.585-3.942,10.048-6.088c4.83-4.203,7.226-9.709,7.322-9.943 l0.9-2.098l-10.772,0.318c1.503-1.483,3.218-3.197,3.939-3.991c1.43-1.571,4.053-6.221,4.198-9.896l0.072-1.787l-1.763,0.288 c-1.979,0.322-5.301,1.279-8.179,2.173c2.025-2.193,4.296-4.767,5.46-6.484c2.687-3.964,2.76-8.371,2.597-12.916l-0.104-2.881 l-2.261,1.79c-2.559,2.028-7.595,5.031-11.097,7.047c1.538-3.644,3.54-8.752,3.813-11.276c0.5-4.681-0.248-10.196-0.248-10.196 l-10.76,9.394c0.885-1.953,1.684-4.013,2.117-5.832c1.735-7.29,0.055-17.892-0.021-18.338l-0.452-2.807l-7.777,7.739 c0.722-3.535,1.465-8.253,1.23-11.789c-0.426-6.321-2.278-10.517-2.359-10.694l-1.01-2.251l-6.465,8.577 c0.231-4.285,0.27-10.24-0.948-13.547c-1.934-5.262-3.651-8.007-3.723-8.121l-1.232-1.958l-3.057,4.85 c0.018-2.967-0.11-6.475-0.69-8.68c-1.202-4.543-2.825-6.396-3.002-6.592l-1.325-1.433l-1.623,2.705 c-0.278-3.19-1.112-7.084-3.343-9.478l-0.814-0.872l-1.012,0.623c-0.327,0.201-0.714,0.497-1.104,0.823 c-0.154-1.135-0.365-2.451-0.639-3.691c0.563-4.733,1.186-10.03,1.206-10.452c0.027-0.547,0.274-0.767,1.017-0.391 c0.898,0.452,3.156,2.064,5.187,6.133c2.036,4.067,3.132,11.324,3.117,12.044c-0.009,0.383,0.291,0.757,0.438,0.151 c0.145-0.607,0.478-7.591,0.623-8.312c0.081-0.383,0.199-0.484,0.737-0.212c0.496,0.249,2.959,2.181,4.899,6.463 c1.179,2.599,1.634,11.946,1.574,12.653c-0.106,1.278,0.313,0.891,0.339,0.883c-0.009,0.013-0.025,0.04-0.03,0.049 c0.03-0.041,0.036-0.049,0.03-0.049c0.573-0.841,4.21-8.99,4.519-9.377c0.313-0.39,0.521-0.395,0.835,0.002 c0.262,0.33,2.095,1.717,4.049,10.088c1.902,8.135,1.949,11.542,1.848,12.682c-0.08,0.86,0.339,0.993,0.731,0.524 c0.389-0.47,5.104-9.201,5.497-9.515c0.389-0.313,0.613-0.309,0.927,0.161c0.312,0.469,2.718,4.762,3.684,11.448 c0.861,5.947,0.608,13.599,0.375,14.381c-0.235,0.782-0.135,1.077,0.493,0.53c0.623-0.548,10.299-8.412,11.004-9.038 c0.703-0.627,1.18-0.65,1.34-0.046c0.172,0.654,0.822,8.654,0.275,15.225c-0.549,6.571-2.626,12.752-2.94,13.145 c-0.312,0.391,0.087,0.712,0.478,0.555c0.394-0.157,11.902-10.018,12.645-10.402c0.711-0.367,1.043,0.005,1.105,0.507 c0.068,0.544,0.966,3.098-0.419,11.269c-0.959,5.65-3.54,11.876-3.855,12.033c-0.313,0.157-0.077,0.336,0.234,0.259 c0.315-0.079,8.324-3.488,8.872-3.567c0.546-0.079,0.671,0.339,0.514,0.808c-0.158,0.469-0.458,6.273-2.534,11.639 c-2.603,6.732-6.056,11.001-6.056,11.001s-0.252,0.519,0.217,0.519s9.266-0.186,9.813-0.263c0.547-0.079,0.627,0.156,0.547,0.704 c-0.077,0.547,0.858,9.116-8.624,14.601C236.524,137.734,236.432,137.979,236.979,138.059z M174.473,24.823 c1.981,3.34,2.018,9.248,1.836,11.469l-0.52,6.238l5.25-8.744c0.395,0.843,0.85,2.003,1.25,3.524 c1.02,3.877,0.422,13.082,0.417,13.173l-0.384,5.752l6.435-10.212c0.628,1.27,1.45,3.097,2.32,5.459 c1.466,3.983,0.772,13.806,0.381,17.257l-0.602,5.308l9.568-12.69c0.493,1.707,1.058,4.21,1.259,7.227 c0.39,5.821-2.272,15.731-2.299,15.83l-1.428,5.26l11.125-11.068c0.377,3.586,0.772,9.774-0.304,14.302 c-1.2,5.057-5.778,12.588-5.823,12.664l-1.806,3.992l16.878-14.09c-0.116,1.366-0.262,2.944-0.423,4.435 c-0.312,2.935-3.954,11.389-5.335,14.399l-1.827,4.002l3.856-2.115c0.381-0.208,8.027-4.41,12.979-7.778 c-0.039,3.484-0.537,6.042-2.139,8.4c-2.189,3.234-9.05,10.198-9.118,10.268l-4.352,4.408l5.861-2.004 c0.08-0.025,6.868-2.34,11.188-3.41c-0.675,2.445-2.208,5.125-3.11,6.118c-1.319,1.449-6.429,6.429-6.48,6.482l-2.682,2.614 l13.475-0.404c-1.06,1.837-2.89,4.549-5.457,6.783c-3.727,3.244-12.956,7.341-13.048,7.383l-3.952,1.746l4.201,1.008 c0.062,0.015,5.637,1.354,10.266,2.67c-3.412,2.191-9.291,3.081-10.948,3.138c-2.06,0.072-11.075,0.125-11.075,0.125l-11.51,0.069 l11.162,2.804c0,0,12.587,3.164,19.486,4.894c-4.398,2.216-10.717,3.493-17.657,3.493c-3.102,0-10.335-0.284-15.048-0.483 c4.064,6.069,7.041,11.004,7.992,13.681c2.813,7.915,6.777,28.269,6.889,48.907c0.039,6.572-1.081,11.649-9.022,11.649 c-0.288,0-0.597-0.038-0.908-0.092c-1.846,0.339-4.351,0.595-5.438-0.095c-1.805-1.149-3.163-2.627-3.544-3.957 c-0.383-1.334-1.146-9.374-3.106-20.675c-1.92-11.046-4.038-19.431-4.237-19.525c-1.535-0.731-9.358-18.45-9.358-18.45 l-37.23-47.615c0,0-20.737,23.917-37.455,47.8c-0.867,1.235-5.994,11.251-9.275,17.989c-0.212,0.437-0.181,0.475-0.281,0.808 c-0.604,2.015-2.396,9.525-4.039,18.994c-1.962,11.301-2.725,19.341-3.105,20.675c-0.384,1.33-1.74,2.808-3.546,3.957 c-1.085,0.689-3.592,0.434-5.437,0.095c-0.313,0.054-0.621,0.092-0.909,0.092c-7.941,0-9.061-5.077-9.024-11.649 c0.114-20.639,4.078-40.992,6.892-48.907c0.95-2.677,3.926-7.611,7.993-13.681c-4.714,0.199-11.946,0.483-15.051,0.483 c-6.939,0-13.26-1.277-17.653-3.493c6.896-1.729,19.486-4.894,19.486-4.894l11.159-2.804l-11.508-0.069 c0,0-9.019-0.053-11.076-0.125c-1.66-0.057-7.537-0.946-10.949-3.138c4.629-1.315,10.202-2.655,10.264-2.67l4.201-1.008l-3.95-1.746 c-0.094-0.042-9.324-4.139-13.049-7.383c-2.566-2.234-4.397-4.946-5.458-6.783l13.477,0.404l-2.684-2.614 c-0.05-0.054-5.16-5.033-6.48-6.482c-0.9-0.993-2.436-3.673-3.108-6.118c4.319,1.069,11.108,3.384,11.188,3.41l5.861,2.004 l-4.352-4.408c-0.069-0.069-6.928-7.033-9.12-10.268c-1.601-2.358-2.099-4.916-2.139-8.4c4.953,3.368,12.601,7.57,12.98,7.778 l3.858,2.115l-1.829-4.002c-1.379-3.011-5.022-11.465-5.334-14.399c-0.161-1.491-0.305-3.068-0.421-4.435l16.877,14.09l-1.806-3.992 c-0.046-0.076-4.622-7.607-5.821-12.664c-1.078-4.528-0.682-10.716-0.307-14.302L58.57,89.672l-1.426-5.26 c-0.025-0.098-2.688-10.008-2.3-15.83c0.203-3.017,0.767-5.52,1.26-7.227l9.566,12.69l-0.601-5.308 c-0.391-3.451-1.083-13.274,0.381-17.257c0.871-2.362,1.693-4.189,2.32-5.459l6.435,10.212l-0.382-5.752 c-0.006-0.091-0.604-9.295,0.416-13.173c0.401-1.521,0.854-2.681,1.251-3.524l5.249,8.744l-0.52-6.238 c-0.181-2.221-0.144-8.129,1.836-11.469c0.596,0.522,1.248,1.148,1.67,1.575l2.215,2.245l0.276-3.142 c0.162-1.838,0.783-7.003,1.703-8.813c1.342-2.635,4.69-3.91,7.104-4.505c-6.691,13.614-36.889,77.59-36.889,122.937 c0,23.658,16.206,23.931,16.368,23.931c4.881,0,6.947-7.914,6.947-11.063V133.45c0-2.744,1.148-2.744,1.835-2.744 c5.807,0,10.48,3.196,13.855,6.69c8.813-11.615,15.81-20.526,15.81-20.526s0.16-0.182,0.248-0.345 c-1.03-2.443-7.165-16.995-7.165-16.995l1.708-43.717c0,0-0.278-3.797,1.044-6.052c1.314-2.245,4.247-3.175,4.247-3.175 l13.307,41.443c0,0-4.107,0.866-4.107,5.585c0,2.982,2.658,4.99,6.227,5.013c3.572-0.022,6.227-2.031,6.227-5.013 c0-4.719-4.109-5.585-4.109-5.585l13.311-41.443c0,0,2.93,0.93,4.245,3.175c1.322,2.255,1.043,6.052,1.043,6.052l1.709,43.717 l-7.309,17.34c0,0,6.997,8.911,15.809,20.526c3.375-3.494,8.048-6.69,13.855-6.69c0.687,0,1.833,0,1.833,2.744v14.538 c0,3.148,2.068,11.063,6.95,11.063c0.159,0,16.367-0.272,16.367-23.931c0-45.347-30.197-109.322-36.888-122.937 c2.412,0.595,5.761,1.87,7.104,4.505c0.92,1.809,1.541,6.975,1.705,8.813l0.275,3.142l2.213-2.245 C173.226,25.972,173.875,25.345,174.473,24.823z M176.157,181.396c-1.644-2.189-41.07-55.856-41.07-55.856l-6.723,8.809 l-0.946-1.233l-0.829-1.082l-5.053-6.594l-0.095,0.101c0,0-39.427,53.667-41.07,55.856c-1.643,2.191-4.777,6.708-6.058,9.322 c-1.279,2.614-8.946,39.306-8.946,42.592c0,2.005,0.041,8.618,0.071,13.47c1.536,0.2,3.411,0.761,4.357,0.125 c1.624-1.093,2.363-2.323,2.491-3.372c0.128-1.048,1.367-12.969,2.69-20.812c1.779-10.547,4.571-19.005,4.415-18.97 c3.213-6.672,8.966-17.938,9.887-19.252c17.808-25.439,38.994-49.947,38.994-49.947s21.166,24.502,38.978,49.947 c0.921,1.313,6.672,12.58,9.888,19.252c-0.158-0.035,2.635,8.423,4.414,18.97c1.322,7.843,2.562,19.764,2.688,20.812 c0.131,1.049,0.87,2.279,2.493,3.372c0.944,0.636,2.818,0.075,4.355-0.125c0.032-4.852,0.073-11.465,0.073-13.47 c0-3.286-7.667-39.978-8.948-42.592C180.936,188.104,177.801,183.588,176.157,181.396z M82.538,21.517l-1.014-0.623l-0.813,0.872 c-2.231,2.394-3.063,6.287-3.342,9.478l-1.624-2.705l-1.323,1.433c-0.179,0.197-1.801,2.049-3.004,6.592 c-0.581,2.205-0.709,5.712-0.689,8.68l-3.057-4.85l-1.234,1.958c-0.072,0.114-1.787,2.859-3.722,8.121 c-1.22,3.307-1.179,9.262-0.949,13.547l-6.463-8.577l-1.012,2.251c-0.08,0.177-1.934,4.373-2.359,10.694 c-0.234,3.536,0.51,8.253,1.231,11.789l-7.778-7.739l-0.453,2.807c-0.073,0.446-1.754,11.048-0.02,18.338 c0.433,1.819,1.231,3.879,2.117,5.832l-10.759-9.394c0,0-0.749,5.515-0.248,10.196c0.271,2.523,2.272,7.632,3.813,11.276 c-3.503-2.016-8.539-5.019-11.099-7.047l-2.259-1.79l-0.106,2.881c-0.162,4.545-0.087,8.952,2.6,12.916 c1.161,1.717,3.433,4.291,5.459,6.484c-2.877-0.894-6.201-1.851-8.179-2.173l-1.763-0.288l0.071,1.787 c0.148,3.675,2.771,8.324,4.198,9.896c0.723,0.794,2.436,2.508,3.941,3.991L21.93,137.83l0.896,2.098 c0.1,0.234,2.493,5.74,7.324,9.943c2.464,2.146,6.876,4.516,10.047,6.088c-2.57,0.653-5.908,1.536-8.518,2.335l-2.402,0.735 l1.246,1.664c0.13,0.173,0.27,0.343,0.407,0.494c3.608,4.04,12.229,5.234,14.412,5.339c-4.774,1.197-9.767,2.451-11.896,2.979 l-2.911,0.728l2.371,1.843c4.708,3.656,13.02,5.841,22.233,5.841c2.588,0,4.539,0.099,8.954-0.081l-6.105,11.467 c0,0-2.038,9.36-3.02,12.658c-2.304-2.226-2.133-3.205-15.52-15.09c-4.829-4.284-15.411-10.026-18.429-13.813 c-1.005-1.263,5.449-1.422,6.179-1.422c0.73,0-6.393-3.385-8.582-6.123c-2.191-2.739-2.895-5.36-2.895-5.36s-0.38-0.847,0.637-1.001 c1.018-0.157,8.65-1.316,9.084-1.611c0.395-0.266,0.332-0.517-0.137-0.75c-0.469-0.236-9.248-4.724-12.548-10.672 c-2.375-4.281-2.357-6.923-2.364-7.32c-0.01-0.64,0.17-0.803,1.385-0.708c0.862,0.068,7.226,0.046,7.774-0.032 c0.546-0.08,0.453-0.324,0.019-0.576c-9.483-5.484-8.546-14.054-8.624-14.601c-0.079-0.548,0-0.783,0.548-0.704 c0.546,0.077,9.342,0.263,9.812,0.263c0.469,0,0.218-0.519,0.218-0.519s-3.452-4.27-6.056-11.001 c-2.077-5.366-2.377-11.169-2.533-11.639c-0.157-0.469-0.034-0.887,0.514-0.808c0.549,0.079,8.558,3.488,8.87,3.567 c0.313,0.077,0.548-0.103,0.235-0.259c-0.314-0.157-2.896-6.383-3.855-12.033c-1.384-8.17-0.488-10.725-0.42-11.269 c0.063-0.502,0.397-0.874,1.105-0.507c0.743,0.385,12.255,10.245,12.646,10.402c0.391,0.157,0.79-0.164,0.477-0.555 c-0.313-0.392-2.392-6.574-2.938-13.145c-0.548-6.571,0.1-14.571,0.274-15.225c0.161-0.604,0.635-0.581,1.339,0.046 c0.704,0.626,10.381,8.489,11.006,9.038c0.625,0.547,0.727,0.252,0.492-0.53c-0.235-0.782-0.484-8.435,0.375-14.381 c0.965-6.686,3.372-10.979,3.685-11.448s0.536-0.474,0.927-0.161c0.391,0.313,5.106,9.045,5.497,9.515 c0.391,0.469,0.809,0.336,0.732-0.524c-0.104-1.14-0.057-4.547,1.845-12.682c1.956-8.371,3.789-9.758,4.052-10.088 c0.313-0.396,0.521-0.392,0.833-0.002c0.309,0.387,3.945,8.536,4.519,9.377c-0.005,0,0,0.008,0.031,0.049 c-0.007-0.009-0.022-0.036-0.031-0.049c0.025,0.008,0.446,0.395,0.34-0.883c-0.058-0.707,0.396-10.055,1.574-12.653 c1.941-4.282,4.404-6.214,4.899-6.463c0.54-0.272,0.658-0.171,0.737,0.212c0.146,0.721,0.478,7.705,0.625,8.312 c0.146,0.606,0.444,0.232,0.437-0.151c-0.015-0.72,1.081-7.977,3.115-12.044c2.033-4.069,4.292-5.681,5.188-6.133 c0.742-0.376,0.989-0.156,1.018,0.391c0.022,0.422,0.645,5.719,1.206,10.452c-0.272,1.24-0.484,2.556-0.639,3.691 C83.251,22.014,82.866,21.718,82.538,21.517z M127.35,141.814c-1.158,12.032-4.978,23.045-6.326,29.486 c-1.643,7.849-4.788,18.061-6.793,20.931c-4.433,6.343-18.036,18.547-20.403,19.732c-1.094,0.547-6.376-4.115-6.56-4.846 c-0.182-0.728,2.883-3.993,2.154-3.627c-0.731,0.364-4.104,0.906-5.06,0.87c-0.753-0.026,0.633-2.728,0.633-2.728 s-1.484,2.217-3.021,2.947c-0.03,0.015,9.433-18.119,9.433-18.119S127.52,140.043,127.35,141.814z M119.7,169.39l3.104-10.647 l-1.869-0.559l-3.152,10.656L119.7,169.39z M114.072,167.242l4.687-10.051l-1.764-0.838l-4.735,10.055L114.072,167.242z  M126.961,159.319l-0.82,11.06l-1.991-0.139l0.867-11.079L126.961,159.319z M131.727,170.391l-1.986,0.167l-0.828-11.078 l1.944-0.144L131.727,170.391z M164.422,186.462c0,0,9.463,18.134,9.434,18.119c-1.54-0.73-3.021-2.947-3.021-2.947 s1.384,2.701,0.633,2.728c-0.957,0.036-4.33-0.506-5.06-0.87c-0.731-0.366,2.334,2.899,2.153,3.627 c-0.185,0.73-5.467,5.393-6.56,4.846c-2.368-1.186-15.973-13.39-20.404-19.732c-2.007-2.87-5.149-13.082-6.792-20.931 c-1.349-6.441-4.621-17.127-5.778-29.16C128.854,140.373,164.422,186.462,164.422,186.462z M142.029,167.242l1.813-0.834 l-4.735-10.055l-1.762,0.838L142.029,167.242z M136.402,169.39l1.917-0.55l-3.152-10.656l-1.868,0.559L136.402,169.39z" })));
}
function ClosedCaption() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ClosedCaption", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "CCBox", fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", d: "M238,210c0,6.627-5.373,12-12,12H30 c-6.627,0-12-5.373-12-12V46c0-6.627,5.373-12,12-12h196c6.627,0,12,5.373,12,12V210z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "C1", d: "M90.505,173.207c11.431,0,22.338-4.276,30.72-12.036c2.6-2.407,2.753-6.47,0.347-9.068c-2.41-2.604-6.47-2.757-9.072-0.349 c-5.998,5.559-13.811,8.62-21.995,8.62c-17.852,0-32.373-14.524-32.373-32.372c0-17.849,14.521-32.373,32.373-32.373 c8.177,0,15.981,3.055,21.979,8.603c2.603,2.407,6.662,2.25,9.072-0.353c2.407-2.602,2.249-6.662-0.353-9.068 c-8.375-7.751-19.276-12.019-30.694-12.019c-24.931,0-45.209,20.281-45.209,45.209C45.3,152.93,65.574,173.207,90.505,173.207z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "C1", d: "M177.926,173.207c11.431,0,22.338-4.276,30.721-12.036c2.6-2.407,2.754-6.47,0.347-9.068 c-2.41-2.604-6.47-2.757-9.072-0.349c-5.998,5.559-13.812,8.62-21.995,8.62c-17.852,0-32.372-14.524-32.372-32.372 c0-17.849,14.521-32.373,32.372-32.373c8.178,0,15.981,3.055,21.979,8.603c2.604,2.407,6.663,2.25,9.072-0.353 c2.407-2.602,2.25-6.662-0.353-9.068c-8.375-7.751-19.277-12.019-30.694-12.019c-24.932,0-45.209,20.281-45.209,45.209 C132.721,152.93,152.996,173.207,177.926,173.207z" })));
}
function Hidden() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Hidden", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M62.499,172.263 c-32.755-16.197-47.415-39.509-47.415-39.509" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M177.948,85.392 c48.213,14.998,68.451,47.362,68.451,47.362s-36.393,54.737-115.689,54.737c-17.938,0-33.591-2.671-47.096-6.832" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M15.084,132.754 c0,0,32.933-56.576,115.674-54.785c8.505,0.185,16.486,0.913,23.96,2.072" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M93.981,141.131 c-0.475-2.385-0.725-4.852-0.725-7.377c0-20.711,16.789-37.5,37.5-37.5c2.42,0,4.787,0.229,7.08,0.668" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", d: "M156.528,106.512 c7.223,6.836,11.729,16.513,11.729,27.242c0,20.711-16.789,37.5-37.5,37.5c-10.609,0-20.189-4.405-27.012-11.487" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#FFFFFF", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", x1: "53.007", y1: "210.504", x2: "208.507", y2: "55.004" })));
}
function Star(props) {
    const className = (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', props.filled ? 'SVGIcon_Star_Filled' : 'SVGIcon_Star_Unfilled');
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: props.filled ? "#currentColor" : "none", stroke: "#currentColor", strokeWidth: "10", strokeMiterlimit: "10", d: "M127.755,18.624 c-2.061,0.101-3.846,1.465-4.485,3.427L98.312,96.933H18.379c-2.745,0.01-4.963,2.242-4.955,4.989 c0.006,1.572,0.754,3.05,2.019,3.984l64.925,47.476L55.41,230.873c-0.848,2.612,0.582,5.417,3.192,6.265 c1.521,0.495,3.186,0.228,4.475-0.719L128,188.945l64.926,47.474c2.212,1.624,5.324,1.144,6.947-1.071 c0.944-1.29,1.211-2.954,0.719-4.475l-24.959-77.492l64.922-47.476c2.211-1.63,2.681-4.743,1.049-6.953 c-0.934-1.265-2.41-2.015-3.984-2.02H157.69l-24.959-74.882C132.033,19.917,129.997,18.513,127.755,18.624z" })));
}
function CornerRibbon() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_CornerRibbon", x: "0px", y: "0px", width: "254.154px", height: "146.13px", viewBox: "1 1 254.154 146.13" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#ffffff", d: "M9.322,147.13c-4.577,0-8.322-3.745-8.322-8.321V9.322C1,4.745,4.745,1,9.322,1h239.084 c4.576,0,7.531,3.661,6.564,8.135l-28.037,129.86c-0.967,4.475-5.502,8.135-10.078,8.135H9.322z" })));
}
function Download() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Download", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "arrow" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", x1: "129", y1: "182", x2: "129", y2: "24" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", points: "174.25,141.25 128.732,183.625 84.25,141.25" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "catch" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", points: "23.25,173.5 23.25,235.75 234.75,235.75 234.75,173.5" }))));
}
function CloudDownload(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "25", height: "15", viewBox: "0 0 25 15", fill: "black", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M20.4983 14.9998H5.50068C4.77794 15.0049 4.05853 14.901 3.36635 14.6914C2.73245 14.5017 2.13941 14.1939 1.6178 13.7838C1.09666 13.3667 0.67927 12.8325 0.398748 12.2237C0.118225 11.615 -0.0177451 10.9486 0.00185477 10.2775C-0.0054678 9.70509 0.0977818 9.13666 0.305747 8.60408C0.498657 8.12872 0.785143 7.69778 1.14794 7.33745C1.81398 6.67001 2.78944 6.15547 4.04731 5.80829C4.10841 4.25269 4.75842 2.77984 5.86348 1.69365C6.96903 0.60364 8.45437 -0.00449463 9.99987 2.50132e-05C11.0001 0.00807229 11.9825 0.267715 12.8582 0.7555C13.7339 1.24329 14.4753 1.9437 15.0152 2.79335C15.4947 2.6343 15.994 2.54414 16.4984 2.52541C17.9193 2.52443 19.2832 3.08972 20.2932 4.09833C21.3094 5.10022 21.9038 6.45906 21.9527 7.89189C22.9609 8.23234 23.6526 8.60787 24.1302 9.07289C24.7185 9.65279 25.0339 10.4583 24.9971 11.2875C25.0059 11.8527 24.8841 12.4122 24.6414 12.9216C24.4147 13.3796 24.0837 13.7769 23.6754 14.0808C22.8776 14.6823 21.7794 14.9998 20.4983 14.9998ZM10.6373 8.62986L9.91893 9.35485L12.1391 11.6L12.4984 11.9464L12.8573 11.6L15.0793 9.35506L14.361 8.63007L12.9987 10.005V5.55515H11.9997V10.005L10.6373 8.62986Z", fill: 'currentColor' })));
}
function Installed() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Installed", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "Catch", fill: "none", stroke: "#000000", strokeWidth: "10", strokeLinecap: "round", strokeMiterlimit: "10", points: "23.25,173.5 23.25,235.75 234.75,235.75 234.75,173.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { points: "51,126.875 51,209.958 206.683,209.958 206.683,126.875" })));
}
function Library() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Library", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "34", y: "12", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", width: "64", height: "232" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "98", y: "64", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", width: "64", height: "180" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "162", y: "12", fill: "none", stroke: "#ffffff", strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", width: "64", height: "232" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "14", strokeMiterlimit: "10", x1: "58", y1: "38", x2: "80", y2: "38" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "14", strokeMiterlimit: "10", x1: "120", y1: "94", x2: "140", y2: "94" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "14", strokeMiterlimit: "10", x1: "184", y1: "38", x2: "206", y2: "38" })));
}
function Achievement(props) {
    const { fullcolor, className } = props;
    let ribbonFill = fullcolor ? 'rgb(102, 185, 255)' : 'none';
    let circleFill = fullcolor ? 'rgb(255, 208, 0)' : 'none';
    let circleStroke = fullcolor ? 'rgb(255, 145, 0)' : 'rgba(255, 255, 255, .2)';
    let ribbonStroke = fullcolor ? 'rgb(34, 98, 150)' : 'rgb(255, 255, 255, .4)';
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])('SVGIcon_Button', 'SVGIcon_Achievement', className), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: ribbonFill, stroke: ribbonStroke, strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "111.689,174.543 97.276,245.256 78.612,208.64 41.298,217.794 66.575,149.584 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: ribbonFill, stroke: ribbonStroke, strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "189.403,149.584 214.68,217.794 177.359,208.64 158.701,245.256 144.289,174.544 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { fill: ribbonFill, stroke: ribbonStroke, strokeWidth: "10", strokeLinejoin: "round", strokeMiterlimit: "10", points: "108.668,171.035 81.336,179.573 75.21,152.086 47.185,146.07 55.893,119.256 34.693,100.302 55.893,81.349 47.185,54.533 75.21,48.52 81.343,21.031 108.668,29.567 127.985,8.766 147.304,29.567 174.636,21.031 180.768,48.52 208.787,54.533 200.078,81.349 221.285,100.302 200.086,119.256 208.787,146.072 180.768,152.086 174.636,179.573 147.311,171.035 127.992,191.84 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: circleFill, stroke: circleStroke, strokeWidth: "6", strokeMiterlimit: "10", d: "M127.985,45.378 c30.868,0,55.979,24.638,55.979,54.923c0,30.282-25.111,54.924-55.979,54.924c-30.862,0-55.978-24.642-55.978-54.924 C72.007,70.017,97.124,45.378,127.985,45.378" })));
}
function PlayTime() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_PlayTime", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#000000", strokeWidth: "16", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", points: "85.5,149.167 128,128 128,55.167 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#000000", strokeWidth: "16", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "M128,17.5c61.027,0,110.5,49.473,110.5,110.5S189.027,238.5,128,238.5S17.5,189.027,17.5,128" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { stroke: "#000000", strokeWidth: "7", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", cx: "26.448", cy: "85.833", r: "5.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { stroke: "#000000", strokeWidth: "7", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", cx: "50.167", cy: "50.5", r: "5.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { stroke: "#000000", strokeWidth: "7", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", cx: "86", cy: "26.667", r: "5.5" })));
}
function Filter() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Filter", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M236.445,23.522c-1.085-2.35-3.438-3.855-6.025-3.855H25.58c-2.586,0-4.936,1.501-6.024,3.855 c-1.08,2.349-0.698,5.112,0.983,7.083l80.328,94.039v104.181c0,2.74,1.682,5.194,4.237,6.188c0.778,0.3,1.588,0.445,2.392,0.445 c1.832,0,3.626-0.762,4.91-2.17l41.012-45.13c1.111-1.219,1.724-2.811,1.724-4.459v-59.054l80.325-94.04 C237.144,28.634,237.526,25.867,236.445,23.522z" })));
}
function Home() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_4", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Home", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "42.054,228.271 113.669,228.271 113.669,170.973 142.324,170.973 142.324,228.271 213.946,228.271 213.946,142.324 242.595,142.324 128,27.729 13.405,142.324 42.054,142.324 " })));
}
function ProgressCircle(props) {
    const { percentComplete, startOffset } = props;
    let nDashOffset = shared_utils_mathutils__WEBPACK_IMPORTED_MODULE_2__.RemapVal(percentComplete, 0, 100, 800, 0);
    let nStartOffset = startOffset ? startOffset + 270 : 270;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_4", xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(props.className, "SVGIcon_Button SVGIcon_ProgressCircle"), x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256", style: { transform: `rotate(${nStartOffset}deg)` } },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "128", cy: "128", r: "128", stroke: "#ffffff", strokeWidth: "10", fill: "#00000000", strokeDasharray: "800", strokeDashoffset: nDashOffset })));
}
function ReadyToPlay() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_ReadyToPlay", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "-305.5 396.5 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#000000", strokeWidth: "10", strokeMiterlimit: "10", cx: "-177.5", cy: "520.5", r: "64" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-194.852,487.664c-3.918-2.299-7.07-0.511-7.07,4.004v57.665c0,4.515,3.152,6.303,7.07,4.003l47.699-28.619 c3.918-2.3,3.918-6.133,0-8.519L-194.852,487.664z" })));
}
function Edit() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Edit", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M16.757,233.795c-1.324,3.973,2.455,7.752,6.427,6.428l50.912-16.971l-40.368-40.367L16.757,233.795z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "83.614", y: "75.466", transform: "matrix(-0.7071 -0.7071 0.7071 -0.7071 93.7468 324.5916)", width: "60.971", height: "134.827" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "149.28", y: "68.116", transform: "matrix(-0.7071 -0.7071 0.7071 -0.7071 252.0431 259.4951)", width: "60.971", height: "18.862" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M233.545,37.803l-14.368-14.369c-7.928-7.928-20.846-7.897-28.809,0.064l-14.305,14.307l43.112,43.111l14.306-14.305 C241.511,58.582,241.513,45.771,233.545,37.803z" })));
}
function Information() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Information", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { className: "I", points: "86.883,110.957 152.894,110.957 152.894,181.406 177.117,181.406 177.117,202.485 86.883,202.485 86.883,181.775 109.441,181.775 109.441,130.372 86.883,130.372 " }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { className: "I", cx: "128.47", cy: "67.607", r: "25.517" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#000000", strokeWidth: "14", strokeMiterlimit: "10", cx: "128", cy: "128", r: "116.833" })));
}
function Flag() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Flag", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Information", height: "100px", width: "100px", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M82.5,10.8c-0.8-0.7-1.9-0.8-2.9-0.7l-7.2,1.8c-7.3,1.8-15.1,1.4-22.3-1.2h-0.1c-7.8-2.9-16.2-3.5-24.2-1.9l-2.8,0.6V8.5  c0-1.9-1.5-3.5-3.5-3.5S16,6.5,16,8.5v5.1v38.8v39.2c0,1.9,1.5,3.5,3.5,3.5s3.5-1.5,3.5-3.5V55.1l4-0.8c6.9-1.4,14-0.8,20.5,1.7  l0.3,0.1c5,1.8,10.2,2.8,15.5,2.8c3.6,0,7.3-0.4,10.9-1.4l7.2-1.8c1.5-0.4,2.6-1.8,2.6-3.3V13.6C83.9,12.5,83.3,11.5,82.5,10.8z" })));
}
function Sliders() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Slider", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M203.738,92.759h45.502V79.943h-45.502c-2.974-14.606-15.919-25.629-31.387-25.629c-15.469,0-28.414,11.023-31.387,25.629 H5.76v12.815h135.206c2.972,14.605,15.918,25.629,31.386,25.629C187.82,118.388,200.766,107.364,203.738,92.759z M153.13,86.352 c0-10.601,8.622-19.222,19.222-19.222c10.601,0,19.224,8.621,19.224,19.222c0,10.602-8.623,19.222-19.224,19.222 C161.752,105.573,153.13,96.952,153.13,86.352z M114.034,176.055H249.24v-12.815H114.034c-2.972-14.604-15.918-25.629-31.386-25.629 s-28.414,11.024-31.386,25.629H5.76v12.815h45.503c2.973,14.604,15.918,25.63,31.386,25.63S111.063,190.659,114.034,176.055z  M63.427,169.647c0-10.603,8.62-19.222,19.222-19.222s19.223,8.621,19.223,19.222c0,10.6-8.621,19.223-19.223,19.223 S63.427,180.247,63.427,169.647z" })));
}
function DynamicCollection(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { style: { height: props.height, width: props.height }, version: "1.1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_DynamicCollection", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { style: { opacity: .2 }, points: "27.875,27.875 73.692,27.893 51.91,154.75 74.672,155 62.787,227.93 27.875,228.125" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { style: { opacity: .2 }, points: "202.723,27.875 228.147,27.875 228.541,227.93 111.667,227.93 209.345,91.25 175.523,91.218" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { points: "178.671,16.667 103.833,16.667 75.506,140.146 103.83,140.025 75.506,242.5 174.837,107.74 142.5,107.5" })));
}
function SmallMediumLarge(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_SmallMediumLarge", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        props.large && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "large" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M54.924,153.407l3.747,26.297l-18.739,3.756l-14.989-3.756L2.457,142.141l7.498-67.62l26.23-33.807l33.728-3.758 l33.728-18.782l44.973,22.54L137.368,51.98c32.48,5.01,53.717,8.767,63.708,11.272c14.992,3.754,41.222,22.537,44.969,26.295 c3.747,3.756,1.963,21.021,0,33.81c-1.307,8.521-3.804,14.782-7.494,18.783l14.992,86.396h-33.729l7.494-7.51l-29.979-63.864 l-82.447,11.271l-29.977,60.104H51.177l11.241-18.783l22.486-78.887l-14.992-15.023l-33.728,7.514l-3.747,30.051l11.241,11.271 L54.924,153.407z M107.642,197.774l11.197-23.071l14.929-3.846l11.196,57.68h-37.322l7.466-3.846L107.642,197.774z M179.572,171.656l11.197-7.584l18.662,32.232l-3.73,32.231H172.11l7.462-11.375V171.656z" }))),
        props.medium && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "medium" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M46.93,126.497l-6.513-4.341l15.196-17.368l2.172-6.513l4.341-4.344V83.077l8.685,10.854 c5.891,1.517,13.128,5.133,21.711,10.855c12.874,8.583,17.367,17.368,21.709,19.539c4.343,2.17,10.856,2.17,21.71,0 c14.203-2.841,17.384-6.043,28.225-6.513c10.838-0.472,17.367,2.17,21.709,6.513c4.343,4.343,4.343,10.854,4.343,19.54 c0,5.788-1.446,11.579-4.343,17.367l8.686,19.539l6.513,47.764h-8.686l4.345-6.513l-6.514-32.565l-32.564-28.225l-60.79,6.513 l-2.172,54.277l-2.169,6.513H81.666l8.685-10.855l-2.172-39.079l-6.513-17.367l-2.169-26.053l-8.685-15.197L46.93,126.497z M157.653,167.747l17.368,13.026v8.687v32.564l-2.172,6.513h-10.854l6.513-6.513V189.46L157.653,167.747z M194.561,130.841 l10.854,21.709v39.078l-4.341-17.367l-6.513-19.539V130.841z M99.035,169.919h6.513l-2.171,52.104l-2.172,6.513h-6.513 l4.343-10.855V169.919z" }))),
        props.small && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "small" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M65.99,200.189l-5.315-3.543l7.085-7.087l3.543-8.858v-7.087l12.399,10.631c5.904,2.36,10.039,3.543,12.399,3.543 c3.544,0,11.906-2.729,21.257-3.543c6.234-0.543,12.73-0.543,19.485,0c5.904,0,10.628,1.181,14.171,3.543 c5.314,3.545,9.848,8.84,15.942,14.175c6.096,5.333,8.858,8.856,12.399,10.63c3.543,1.771,15.434-0.779,15.943,1.771 s-6.709,6.259-14.172,7.089c-7.462,0.827-12.398,0-17.714-3.544c-3.543-2.363-8.856-7.088-15.942-14.175l-3.543-1.771l1.772,7.086 l7.085,8.858l-3.544,10.631h-7.084l5.313-3.545v-5.314l-23.027-10.63l-12.399,1.771l-5.313,10.631l-3.544,7.088H96.1l5.315-5.315 l1.771-12.402l-23.028-12.401l-7.086-1.771L65.99,200.189z M126.228,214.362l12.402,5.315l-3.544,8.858h-7.085l3.543-1.771 l1.772-5.314L126.228,214.362z M94.338,210.819l3.543,1.772l-1.771,8.857l-5.316,7.087h-5.315l6.2-7.087L94.338,210.819z" }),
                "\t\t\t"))));
}
function SketchArrowTopLeft() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_SketchArrowTopLeft", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "M5,52.991l10.823-27.306C68.038,201.104,124.475,254.751,251,220.579" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", strokeWidth: "10", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", x1: "15.823", y1: "25.686", x2: "40.363", y2: "41.714" })));
}
function Reviews() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Reviews", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: "GrayThumb", fill: "#4F4F4F", d: "M235.499,100.134h-89.455c-7.571,0-13.725,6.034-13.725,13.608v47.447c0,7.455,6.153,13.607,13.725,13.607 h42.007l30.765,22.127l3.668-22.127h13.135c7.572,0,13.726-6.033,13.726-13.607v-47.447 C249.226,106.168,243.073,100.134,235.499,100.134z M209.941,135.041c0.472,0.592,0.71,1.066,0.828,1.537 c0.238,1.184,0.117,2.248-0.474,3.078c-0.71,0.945-1.657,1.539-2.958,1.773c-2.012,0.355-6.035,0.355-7.928,0.236 c-0.71,0-1.303,0-2.013,0c0.237,0.473,0.474,0.711,0.71,1.064l0.593,0.828c0.118,0.236,0.354,0.475,0.474,0.709 c0.473,0.594,0.828,1.184,1.183,1.895c1.657,2.959,3.668,5.916,2.368,8.756c-0.829,2.131-2.368,2.959-4.734,2.723 c-1.773-0.117-2.722-1.184-2.722-2.84c-0.118-1.893-0.709-3.432-1.774-4.732c-1.064-0.945-2.13-2.131-3.432-3.195 c-2.484-2.129-4.732-4.021-6.271-6.508c-0.119-0.117-0.119-0.355-0.236-0.475l0.117,0.119c-0.59-0.711-1.419-1.184-2.248-1.303 c-0.59,0-1.063-0.117-1.654-0.117l-0.711-0.117c-0.474-0.117-0.711-0.355-0.711-0.711c-0.827-7.455-0.117-14.082,2.013-20.353 c0.118-0.475,0.474-0.709,0.946-0.593l1.302,0.118c0.592,0.118,1.183,0.118,1.774,0.118c2.604,0.119,5.443-0.118,8.638-0.945 c2.368-0.592,2.84-0.946,4.97-0.946c1.421,0,4.734,0.118,6.153,0.354c1.064,0.236,1.774,0.71,2.249,1.656 c0.117,0.354,0.354,0.71,0.474,1.064c0.236,0.828,0.118,1.655-0.235,2.366c1.774,0.475,2.72,1.421,3.075,3.076 c0.237,1.304-1.893,2.367-2.721,3.313c0.473,0.236,2.721,0.591,3.077,0.945c0.709,0.592,1.183,1.54,1.301,2.366 c0.118,0.947-0.118,1.895-0.828,2.605c-0.355,0.473-0.711,0.709-1.185,1.064h-1.895C207.574,134.33,209.704,134.686,209.941,135.041 z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M141.43,59.076H24.641c-9.94,0-17.985,7.927-17.985,17.63v61.648c0,9.701,8.045,17.631,17.985,17.631h17.04l5.68,25.086 l39.284-25.203h54.784c9.939,0,17.985-7.93,17.985-17.631V76.706C159.415,66.884,151.369,59.076,141.43,59.076z M110.073,116.818 c-0.709,0.475-4.496,1.065-5.206,1.422c1.419,1.419,5.088,3.313,4.614,5.207c-0.591,2.603-2.13,4.14-5.088,4.851 c0.71,1.064,0.828,2.367,0.474,3.667c-0.119,0.709-0.474,1.184-0.711,1.656c-0.71,1.422-1.893,2.25-3.667,2.604 c-2.366,0.236-7.927,0.475-10.295,0.475c-3.549,0-4.258-0.475-8.281-1.42c-5.208-1.303-9.94-1.658-14.318-1.422 c-0.947,0.119-2.012,0.119-2.958,0.236l-2.13,0.236c-0.709,0.119-1.301-0.236-1.539-0.945c-3.549-9.821-4.732-20.235-3.313-31.83 c0-0.711,0.592-1.064,1.303-1.184l1.301-0.119c0.947-0.118,1.893-0.236,2.839-0.236c1.421-0.118,2.722-0.829,3.669-2.012 l0.118-0.236c0.118-0.118,0.236-0.354,0.472-0.709c2.604-3.905,6.271-6.863,10.295-10.178c2.13-1.656,4.022-3.431,5.679-4.968 c1.894-2.014,2.84-4.497,2.958-7.338c0-2.604,1.539-4.142,4.497-4.496c3.786-0.236,6.39,1.063,7.81,4.26 c2.13,4.378-1.184,8.993-3.905,13.727c-0.591,1.063-1.301,2.012-2.011,2.84c-0.237,0.354-0.591,0.828-0.829,1.184l-0.946,1.301 c-0.473,0.475-0.829,1.066-1.302,1.657c1.184,0,2.13,0,3.313,0c3.077-0.117,9.704-0.117,13.135,0.354 c2.13,0.236,3.785,1.303,4.97,2.723c0.946,1.301,1.301,2.958,0.828,4.851c-0.118,0.829-0.592,1.538-1.42,2.485 c-0.473,0.474-4.024,1.064-4.615,1.419h3.077c0.709,0.474,1.419,1.065,2.011,1.657c1.183,1.184,1.539,2.484,1.42,4.021 C111.966,114.453,111.257,115.872,110.073,116.818z" })));
}
function Patch() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Patch", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M171.176,136.219c-5.516-5.516-14.166-5.948-20.223-1.406L92.125,75.984l-8.002-29.738c-0.324-1.406-1.73-3.027-3.028-3.785 L46.49,24.186c-1.298-0.648-3.136-0.433-4.218,0.648L25.295,41.813c-0.974,0.973-1.298,2.92-0.649,4.217l18.276,34.605 c0.648,1.297,2.379,2.596,3.785,3.027l29.739,8.003l58.828,58.828c-4.542,6.056-4.109,14.707,1.405,20.222l56.882,56.882 c6.056,6.056,15.896,6.056,21.845,0l12.544-12.544c6.056-6.056,6.056-15.788,0-21.845L171.176,136.219z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M153.116,122.16c2.271-0.648,4.65-0.973,7.138-0.973c0.865,0,1.622,0,2.486,0.107l26.928-26.927 c12.328,2.92,25.846-0.324,35.361-9.948c9.517-9.625,12.869-23.034,9.949-35.254l-20.33,20.33l-21.845-5.84l-5.84-21.952 l20.331-20.33c-12.221-2.92-25.738,0.324-35.254,9.948c-9.625,9.625-12.869,23.143-9.949,35.362L129.866,98.91L153.116,122.16z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M99.371,129.406l-32.226,32.226c-12.328-2.92-25.845,0.324-35.362,9.948c-9.517,9.625-12.869,23.034-9.949,35.254 l20.331-20.33l21.953,5.84l5.839,21.952l-20.331,20.33c12.22,2.92,25.737-0.324,35.254-9.949 c9.625-9.624,12.869-23.142,9.949-35.361l27.035-27.035c-0.325-3.136,0-6.38,0.865-9.517L99.371,129.406z" })));
}
function AppleLogo() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_AppleLogo", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M138.365,26.557c16.139-21.272,38.578-21.376,38.578-21.376s3.336,19.999-12.696,39.266 c-17.12,20.572-36.58,17.206-36.58,17.206S124.012,45.473,138.365,26.557z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M129.719,75.662c8.305,0,23.713-11.413,43.771-11.413c34.527,0,48.109,24.566,48.109,24.566s-26.565,13.583-26.565,46.54 c0,37.179,33.093,49.991,33.093,49.991s-23.134,65.112-54.38,65.112c-14.353,0-25.509-9.672-40.631-9.672 c-15.41,0-30.702,10.032-40.662,10.032c-28.533,0-64.581-61.765-64.581-111.414c0-48.849,30.512-74.474,59.13-74.474 C105.61,64.933,120.047,75.662,129.719,75.662z" })));
}
function LinuxLogo() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_LinuxLogo", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M234.16,207.854c-3.953-2.455-13.301-5.047-14.086-22.99c-3.539,3.146-3.13,19.863,6.746,23.182 c11.031,3.705,17.923,9.91-2.586,16.922c-13.577,4.645-15.887,6.074-26.637,15.021c-10.875,9.055-27.017,5.457-24.197-13.602 c1.469-9.934,2.313-18.141-0.158-26.773c-1.206-4.217-1.807-9.625-0.982-13.418c1.604-7.377,5.596-9.6,9.512-2.516 c2.457,4.441,3.315,9.641,12.111,10.064c13.819,0.66,16.555-13.354,20.973-13.99c2.944-0.428,5.889-8.764,3.646-22.25 c-2.403-14.438-10.897-37.234-21.791-48.795c-9.055-9.609-14.762-18.033-18.351-30.057c-3.017-10.103-4.7-19.936-4.079-29.335 c0.806-12.18-5.95-29.129-16.703-37.103c-6.73-4.993-17.287-7.667-26.841-7.562c-5.358,0.058-10.401,0.841-14.276,2.944 c-15.949,8.658-18.177,21.024-17.938,35.14c0.223,13.26,0.675,28.39,2.181,42.783c-1.782,6.609-11.068,19.138-17.013,26.762 c-7.993,7.896-12.03,23.157-17.203,36.491c-2.759,7.107-7.407,10.318-7.798,19.457c-0.108,2.555-0.021,9.168,2.423,7.277 c9.348-7.232,21.049,11,38.722,38.82c3.389,5.334,15.329,27.793-5.602,30.705c-7,0.979-18.271-4.07-29.192-6.742 c-9.812-2.398-19.775-3.822-25.352-5.391c-3.358-0.943-4.762-2.146-5.053-3.553c-0.773-3.729,4.075-8.955,4.321-13.369 c0.246-4.416-1.609-6.709-3.129-10.311c-1.522-3.609-1.919-6.313-0.701-7.859c0.948-1.205,2.873-1.707,6.005-1.4 c3.97,0.391,8.766-0.422,11.342-1.996c4.339-2.645,6.381-8.068,4.428-14.604c0,6.395-2.097,8.816-7.354,11.74 c-4.954,2.758-12.604,0.527-16.117,3.576c-4.229,3.672,1.509,13.146,1.04,20.104c-0.361,5.346-5.938,11.365-3.451,16.727 c2.502,5.395,14.17,5.979,26.336,8.523c17.293,3.619,27.375,9.912,35.365,10.211c11.656,0.432,13.441-11.531,31.743-11.693 c5.338-0.281,10.559-0.447,15.773-0.514c5.91-0.072,11.813-0.025,17.873,0.119c12.182,0.295,7.99,6.648,15.894,10.713 c6.667,3.426,18.654,2.072,21.522-0.664c3.88-3.701,14.298-12.604,22.28-16.625C227.758,227.004,251.121,218.375,234.16,207.854 z M170.973,212.664c-0.609,7.697-2.744,15.326-3.947,23.057c-4.075-0.154-3.679-3.139-2.37-7.322 c1.153-3.689,3.014-8.316,3.135-12.75c0.11-4.016-0.328-6.525-1.34-7.148c-1.013-0.623-2.599,0.643-4.787,4.168 c-4.677,7.529-14.802,10.84-24.258,12.023c-9.456,1.186-18.246,0.246-22.9-4.967c-1.592-1.783-4.232,0.486-4.546,0.959 c-0.42,0.635,1.541,1.865,3.019,4.578c2.159,3.959,4.212,9.969-0.902,12.711c0.061-13.943-4.352-14.76-8.862-23.277 c8.825-0.912,9.99-10.254,5.833-14.33c-3.424-3.359-22.319-17.387-27.251-22.902c-2.287-2.559-5.39-3.814-6.704-6.689 c-3.021-6.617-5.139-16.063-1.305-22.846c0.693-1.225,1.14-0.676,0.608,1.877c-3.01,14.473,6.413,26.293,8.486,20.23 c1.435-4.188,0.105-11.68,0.87-17.629c1.355-10.533,10.94-30.749,15.15-31.902c-6.494-12.026,7.613-21.441,7.441-31.997 c-0.113-6.864,6.029,8.439,12.202,11.685c6.894,3.623,14.472-6.829,25.228-12.131c3.043-1.501,6.945-3.225,6.685-4.504 c-1.265-6.171-14.129,7.613-25.618,8.078c-5.243,0.211-7.188-1.03-9.215-2.986c-6.123-5.918,0.624-0.979,9.729-2.626 c4.045-0.732,5.405-1.406,9.698-3.141c4.295-1.736,9.201-4.305,14.06-5.624c3.383-0.92,3.103-3.462,1.785-4.225 c-0.758-0.439-1.88-0.396-2.771,1.141c-2.085,3.604-11.887,5.688-14.945,6.623c-3.928,1.202-8.273,2.325-14.046,2.09 c-8.771-0.356-6.726-4.376-12.999-7.973c-1.839-1.054-1.343-3.824,1.103-6.269c1.28-1.282,4.79-2.005,6.53-4.919 c0.245-0.408,2.488-2.754,4.246-3.968c0.607-0.421,1.988-3.235,9.988-1.235l9.5,1c2.088,0.267,8.388,6.752,12.059,7.467 c12.047,2.345,3.195,9.25,4.761,17.61c1.766,9.442,7.984,6.948,13.573,31.949c1.17,1.522,5.797,2.964,10.309,22.17 c4.057,17.281-1.688,29.85,8.07,28.816c2.195-0.23,5.407-0.848,6.805-5.742c3.65-12.801-1.828-28.049-7.362-38.34 c-3.224-6-6.258-10.086-7.86-11.49c6.343,3.749,14.449,15.72,16.317,24.605c2.458,11.676,4.212,16.619,0.494,28.965 c2.146,1.074,7.483,3.34,7.483,5.889c-5.56-4.57-22.586-5.383-23.022,5.549c-2.904,0.059-5.098,0.295-6.969,2.514 C165.313,187.604,171.669,203.916,170.973,212.664z" })));
}
function LinuxLogo2() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_LinuxLogo2", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "g4768_2_", transform: "translate(-6.9308024,-10)" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "g4763_2_" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M235.4,158.1c-14.6-33.7-46.9-69.7-49.3-80.3c-2-6.4-2.3-32.5-16.5-52.3c-11.8-13.8-25.2-23.1-42.7-23.1 c-17.4,0-32.5,8.7-43,23.1C69.7,45.2,69.4,70,67.4,77.8c-0.9,9.9-33.1,43.8-48,77.5c-6.8,15.3-11.1,27.4-9.3,30.6 c4.4,4,5.4-1.5,31.1-8.4c0.2,26.2,8.7,76,84.8,76c0.3,0,0.5,0,0.7,0c0.3,0,0.5,0,0.7,0c77.4,0,85.6-59.8,84.8-77.4 c-0.1-2.6,28,15.6,31.1,9.8C245.1,182.8,241.4,172,235.4,158.1z M182,213.8c-4.9,8.9-16.4,24.1-52.6,24.6c-0.9,0-1.7,0-2.6,0 c-0.9,0-1.7,0-2.6,0c-36.2-0.5-47.7-15.7-52.6-24.6c-15.9-28.5,0.1-83.4,10.1-109.2c5.7-14.7,12.9-23.5,22.1-28.3 c5.8,9.9,19.4,21.6,23.7,21.6c4.5,0,17.2-11,23.2-20.7c9,5.4,15.9,14.5,21.2,27.4C181,126.7,197.8,185.3,182,213.8z" })));
}
function WindowsLogo() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", className: "SVGIcon_Button SVGIcon_WindowsLogo", width: "100%", height: "100%", viewBox: "0 0 128 128", enableBackground: "new 0 0 128 128" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { fill: "#FFFFFF", width: "60.834", height: "60.835" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "67.165", fill: "#FFFFFF", width: "60.835", height: "60.835" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { y: "67.164", fill: "#FFFFFF", width: "60.834", height: "60.836" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "67.165", y: "67.164", fill: "#FFFFFF", width: "60.835", height: "60.836" })));
}
function AdvancedSearch() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_3_copy", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_3_copy" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "g4768_1_", transform: "translate(-6.9308024,-10)" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "g4763_1_" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M206.3,36.6c-19.4,0-35.8,14.1-40.3,33H24.8c-6,0-10.8,4.8-10.8,10.8s4.8,10.8,10.8,10.8h141.3\r\n\t\t\t\tc4.7,18.6,20.9,32.4,40.2,32.4c22.9,0,41.5-19.5,41.5-43.5C247.9,56.2,229.2,36.6,206.3,36.6z M206.3,109.7\r\n\t\t\t\tc-15.2,0-27.5-13.2-27.5-29.5c0-16.3,12.4-29.5,27.5-29.5s27.5,13.2,27.5,29.5C233.9,96.4,221.5,109.7,206.3,109.7z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M230.4,157.3H107.9c-4.6-14.6-18.3-25.2-34.3-25.2s-29.7,10.6-34.3,25.2H24.8c-6,0-10.8,4.8-10.8,10.8\r\n\t\t\t\tS18.9,179,24.8,179h14.3c4.6,14.6,18.3,25.2,34.3,25.2s29.7-10.6,34.3-25.2h122.5c6,0,10.8-4.8,10.8-10.8S236.4,157.3,230.4,157.3z\r\n\t\t\t\tM73.5,189.8c-8,0-14.9-4.3-18.7-10.8l0,0c-0.7-1.2-1.3-2.4-1.7-3.7c0,0,0-0.1,0-0.1c-0.1-0.4-0.2-0.8-0.4-1.2c0-0.1,0-0.1,0-0.2\r\n\t\t\t\tc-0.2-0.8-0.4-1.7-0.5-2.6c0-0.1,0-0.2,0-0.3c0-0.3-0.1-0.7-0.1-1c0-0.1,0-0.2,0-0.4c0-0.4,0-0.9,0-1.3s0-0.9,0-1.3\r\n\t\t\t\tc0-0.1,0-0.2,0-0.4c0-0.3,0.1-0.7,0.1-1c0-0.1,0-0.2,0-0.3c0.1-0.9,0.3-1.8,0.5-2.6c0-0.1,0-0.1,0-0.2c0.1-0.4,0.2-0.8,0.4-1.2\r\n\t\t\t\tc0,0,0-0.1,0-0.1c0.5-1.3,1-2.6,1.7-3.7c3.7-6.4,10.7-10.8,18.7-10.8c8,0,14.9,4.3,18.7,10.8c0.7,1.2,1.3,2.4,1.7,3.7\r\n\t\t\t\tc0,0,0,0.1,0,0.1c0.1,0.4,0.3,0.8,0.4,1.2c0,0.1,0,0.1,0,0.2c0.2,0.8,0.4,1.7,0.5,2.6c0,0.1,0,0.2,0,0.3c0,0.3,0.1,0.7,0.1,1\r\n\t\t\t\tc0,0.1,0,0.2,0,0.4c0,0.4,0,0.9,0,1.3s0,0.9,0,1.3c0,0.1,0,0.2,0,0.4c0,0.3-0.1,0.7-0.1,1c0,0.1,0,0.2,0,0.3\r\n\t\t\t\tc-0.1,0.9-0.3,1.8-0.5,2.6c0,0.1,0,0.1,0,0.2c-0.1,0.4-0.2,0.8-0.4,1.2c0,0,0,0.1,0,0.1c-0.5,1.3-1,2.6-1.7,3.7l0,0\r\n\t\t\t\tC88.5,185.4,81.5,189.8,73.5,189.8z" }))));
}
function SteamLogo_Piston() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M216.3,84.7c-18,0-32.7,14.7-32.7,32.7c0,0.1,0,0.3,0,0.4l-21.1,30.6c-3.4-0.1-6.8,0.4-10.1,1.8c-1.4,0.6-2.8,1.3-4,2.1 l-95.1-39.3c-1.6-7.4-6.7-13.9-14.2-17.1c-12.2-5.1-26.2,0.7-31.3,12.9c-5.1,12.2,0.7,26.2,12.9,31.3c5.9,2.5,12.4,2.5,18.3,0 c1.4-0.6,2.6-1.2,3.9-2l95.3,39.4c1.6,7.3,6.7,13.8,14.1,16.9c12.2,5.1,26.2-0.7,31.3-12.9c1.3-3.2,1.9-6.5,1.8-9.8l30.2-21.5 c0.2,0,0.5,0,0.7,0c18.1,0,32.7-14.7,32.7-32.7C249,99.4,234.3,84.7,216.3,84.7z M22.8,135.1c-7.1-2.9-11.3-9.8-11.3-17 c0-2.4,0.5-4.8,1.4-7.1c3.9-9.4,14.7-13.8,24.1-9.9c4.4,1.8,7.7,5.2,9.6,9.3l-10.9-4.5c-6.9-2.9-14.9,0.4-17.8,7.3 c-2.9,6.9,0.4,14.9,7.3,17.8l10.9,4.5C31.8,137,27.1,136.9,22.8,135.1z M178.5,179.4c-3.9,9.4-14.7,13.8-24.1,9.9 c-4.3-1.8-7.6-5.1-9.5-9l10.7,4.4c6.9,2.9,14.9-0.4,17.8-7.3c2.9-6.9-0.4-14.9-7.3-17.8l-11-4.6c4.2-1.6,9.1-1.7,13.6,0.2 c4.5,1.9,8.1,5.4,10,10C180.4,169.9,180.4,174.9,178.5,179.4z M216.3,139.3c-12,0-21.8-9.8-21.8-21.8c0-12,9.8-21.8,21.8-21.8 c12,0,21.8,9.8,21.8,21.8C238.1,129.5,228.3,139.3,216.3,139.3z M216.3,133.8c-9,0-16.4-7.3-16.4-16.4s7.3-16.4,16.4-16.4 c9.1,0,16.4,7.3,16.4,16.4S225.4,133.8,216.3,133.8z" }))));
}
function MenuMoreDots() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "126", cy: "134", r: "20.6" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "189.4", cy: "134", r: "20.6" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "62.6", cy: "134", r: "20.6" })));
}
function MenuMoreDotsVertical() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { style: { fill: 'currentColor' }, cx: "51.8", cy: "22.5", r: "6.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { style: { fill: 'currentColor' }, cx: "51.8", cy: "48.3", r: "6.5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { style: { fill: 'currentColor' }, cx: "51.8", cy: "74.2", r: "6.5" })));
}
function Invalid() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", className: "SVGIcon_Button SVGIcon_Invalid", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M128.5,27.4C74.1,27.4,30,71.5,30,125.9c0,54.4,44.1,98.5,98.5,98.5s98.5-44.1,98.5-98.5C226.9,71.5,182.9,27.4,128.5,27.4 z M206.8,125.9c0,17.7-5.9,34-15.8,47.2L81.3,63.3c13.1-9.9,29.5-15.8,47.2-15.8C171.7,47.5,206.8,82.6,206.8,125.9z M50.2,125.9 c0-17.7,5.9-34,15.8-47.2l109.7,109.7c-13.1,9.9-29.5,15.8-47.2,15.8C85.2,204.2,50.2,169.1,50.2,125.9z" })));
}
function NavArrow() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("title", null, "Forward"),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M97.64,44.1,64.72,11.18a8.06,8.06,0,1,0-11.4,11.39L72.78,42H8.06a8.06,8.06,0,0,0,0,16.12H72.6L53.32,77.43a8.06,8.06,0,0,0,11.4,11.39L97.64,55.9A8,8,0,0,0,100,50.2a1.27,1.27,0,0,0,0-.2,1.41,1.41,0,0,0,0-.2A8.07,8.07,0,0,0,97.64,44.1Z" }));
}
function Bookmark() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 64 64" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M52,3H12c-0.6,0-1,0.4-1,1v56c0,0.4,0.2,0.7,0.5,0.9s0.7,0.2,1,0L32,49.2l19.5,11.7C51.6,61,51.8,61,52,61s0.3,0,0.5-0.1  c0.3-0.2,0.5-0.5,0.5-0.9V4C53,3.4,52.6,3,52,3z" }));
}
function Collapse() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", version: "1.1", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { fill: "#000000" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M50.521427,52.4439592 C49.9424253,51.8494093 49.0014186,51.8546237 48.4309045,52.4439592 L40.4649213,60.6727429 C39.0549323,62.1047101 41.1704143,64.2531672 42.5804033,62.8212 L47.3064752,58.0214605 C47.6919689,57.6299579 48.0044733,57.763549 48.0044733,58.3116859 L48.0044733,71.8483713 C48.0044733,72.6873988 48.6740685,73.3674313 49.5002183,73.3674313 C50.3263681,73.3674313 50.9959633,72.6873988 50.9959633,71.8483713 L50.9959633,58.3116859 C50.9959633,57.7598962 51.3030976,57.6245328 51.6938973,58.0214605 L56.4195347,62.8212 C57.8300222,64.2531672 59.9450057,62.1047101 58.5350167,60.6727429 L50.521427,52.4439592 Z M48.4547424,46.923472 C49.0320222,47.518022 49.973044,47.5128076 50.5452648,46.923472 L58.5350787,38.6946884 C59.9450677,37.2627212 57.8295857,35.1142641 56.4195967,36.5462313 L51.6935248,41.3459708 C51.3080311,41.7374734 50.9955267,41.6038823 50.9955267,41.0557453 L50.9955267,27.5190599 C50.9955267,26.6800325 50.3259315,26 49.4997817,26 C48.6736319,26 48.0040367,26.6800325 48.0040367,27.5190599 L48.0040367,41.0557453 C48.0040367,41.607535 47.6969024,41.7428985 47.3061027,41.3459708 L42.5804653,36.5462313 C41.1699778,35.1142641 39.0549943,37.2627212 40.4649833,38.6946884 L48.4547424,46.923472 Z" }))));
}
function Expand() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", version: "1.1", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { fill: "#000000" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M48.0044733,43.4819881 L48.0044733,34.3099951 C48.0044733,33.7627432 47.6919689,33.6299579 47.3064752,34.0214605 L42.5804033,38.8212 C41.1704143,40.2531672 39.0549323,38.1047101 40.4649213,36.6727429 L48.4309045,28.4439592 C49.0014186,27.8546237 49.9424253,27.8494093 50.521427,28.4439592 L58.5350167,36.6727429 C59.9450057,38.1047101 57.8300222,40.2531672 56.4195347,38.8212 L51.6938973,34.0214605 C51.3030976,33.6245328 50.9959633,33.7591392 50.9959633,34.3099951 L50.9959633,55.8483713 C50.9959633,55.8607639 50.9958172,55.8731217 50.9955267,55.8854432 L50.9955267,65.0574362 C50.9955267,65.604688 51.3080311,65.7374734 51.6935248,65.3459708 L56.4195967,60.5462313 C57.8295857,59.1142641 59.9450677,61.2627212 58.5350787,62.6946884 L50.5452648,70.923472 C49.973044,71.5128076 49.0320222,71.518022 48.4547424,70.923472 L40.4649833,62.6946884 C39.0549943,61.2627212 41.1699778,59.1142641 42.5804653,60.5462313 L47.3061027,65.3459708 C47.6969024,65.7428985 48.0040367,65.6082921 48.0040367,65.0574362 L48.0040367,43.5190599 C48.0040367,43.5066674 48.0041828,43.4943096 48.0044733,43.4819881 L48.0044733,43.4819881 Z" }))));
}
function ExternalLink() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 18 18", version: "1.1", x: "0px", y: "0px", fillRule: "evenodd", clipRule: "evenodd", strokeLinejoin: "round", strokeMiterlimit: "1.41421" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M12.621,2.491c-0.021,0.019 -0.042,0.039 -0.063,0.06l-5.125,5.201c-0.579,0.587 -0.575,1.527 -0.001,2.109l0.691,0.702c0.576,0.584 1.505,0.582 2.079,-0.001l5.126,-5.201c0.021,-0.021 0.04,-0.042 0.059,-0.063l1.573,1.595c0.573,0.582 1.04,0.386 1.04,-0.439l0,-5.957c0,-0.276 -0.219,-0.497 -0.49,-0.497l-5.87,0c-0.82,0 -1.008,0.473 -0.434,1.056l1.415,1.435Zm-9.618,-2.491c-1.665,0 -3.003,1.344 -3.003,3.003l0,11.994c0,1.665 1.344,3.003 3.003,3.003l11.994,0c1.665,0 3.003,-1.344 3.003,-3.003l0,-7.746l0,4.249l-3,-2.488l0,4.492c0,0.826 -0.671,1.496 -1.496,1.496l-9.008,0c-0.826,0 -1.496,-0.671 -1.496,-1.496l0,-9.008c0,-0.826 0.671,-1.496 1.496,-1.496l4.504,0l-2.5,-3l4.249,0l-7.746,0Z" }));
}
function Help() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100", x: "0px", y: "0px" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M50,7A43,43,0,1,1,7,50,43,43,0,0,1,50,7m0-7a50,50,0,1,0,50,50A50,50,0,0,0,50,0h0Z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M50.79,25a45.51,45.51,0,0,1,5.29.87c5.33,1.51,8.5,5.77,8.9,11.43a10.4,10.4,0,0,1-4.21,9.5c-1.42,1.1-2.91,2.1-4.34,3.18a7.06,7.06,0,0,0-3.18,6.3,4,4,0,0,1-2.88,4,4.42,4.42,0,0,1-5.18-1.55,4.19,4.19,0,0,1-.59-2.07A13.89,13.89,0,0,1,50.3,45,41.55,41.55,0,0,0,54.83,41,5,5,0,0,0,56,38.19c0.23-2.83-1.59-4.65-4.52-4.84-3.54-.23-6.52.69-8.6,3.82a4.19,4.19,0,0,1-4.35,2c-3-.5-4.29-2.94-3.06-5.75a12.84,12.84,0,0,1,6.25-6.2A21.71,21.71,0,0,1,50.79,25Z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M53.78,69.88C53.8,73.09,52,75,48.85,75s-5.25-1.84-5.26-4.53c0-3.73,1.67-5.59,5-5.69C51.3,64.7,54.12,66.36,53.78,69.88Z" }));
}
function Person() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("switch", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("foreignObject", { requiredExtensions: "http://ns.adobe.com/AdobeIllustrator/10.0/", x: "0", y: "0", width: "1", height: "1" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M70.3,47.7c-5.3,5-12.5,8-20.3,8c-7.8,0-15-3-20.3-8c-9.8,7.9-16.2,20.2-16.2,29.7c0,15.1,5.5,20.1,36.5,20.1     c31,0,36.5-5,36.5-20.1C86.5,67.9,80.1,55.6,70.3,47.7z" }),
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "50", cy: "25.8", r: "23.3" })))));
}
function Flair() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", x: "0px", y: "0px", width: "32px", height: "32px", viewBox: "0 0 32 32", "enable-background": "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("symbol", { id: "dude-transit", viewBox: "0 -25.1 21.25 25.118" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", fill: "#FFFFFF", d: "M15.5-4.2l0.75-1.05l1-3.1l3.9-2.65v-0.05\r\n\t\t\tc0.067-0.1,0.1-0.233,0.1-0.4c0-0.2-0.05-0.383-0.15-0.55c-0.167-0.233-0.383-0.35-0.65-0.35l-4.3,1.8l-1.2,1.65l-1.5-3.95\r\n\t\t\tl2.25-5.05l-3.25-6.9c-0.267-0.2-0.633-0.3-1.1-0.3c-0.3,0-0.55,0.15-0.75,0.45c-0.1,0.133-0.15,0.25-0.15,0.35\r\n\t\t\tc0,0.067,0.017,0.15,0.05,0.25c0.033,0.1,0.067,0.184,0.1,0.25l2.55,5.6L10.7-14l-3.05-4.9L0.8-18.7\r\n\t\t\tc-0.367,0.033-0.6,0.184-0.7,0.45c-0.067,0.3-0.1,0.467-0.1,0.5c0,0.5,0.2,0.767,0.6,0.8l5.7,0.15l2.15,5.4l3.1,5.65L9.4-5.6\r\n\t\t\tc-1.367-2-2.1-3.033-2.2-3.1C7.1-8.8,6.95-8.85,6.75-8.85C6.35-8.85,6.1-8.667,6-8.3C5.9-8,5.9-7.8,6-7.7H5.95l2.5,4.4l3.7,0.3\r\n\t\t\tL14-3.5L15.5-4.2z M14.55-2.9c-0.333,0.4-0.45,0.85-0.35,1.35c0.033,0.5,0.25,0.9,0.65,1.2S15.7,0.066,16.2,0\r\n\t\t\tc0.5-0.067,0.9-0.3,1.2-0.7c0.333-0.4,0.467-0.85,0.4-1.35c-0.066-0.5-0.3-0.9-0.7-1.2c-0.4-0.333-0.85-0.45-1.35-0.35\r\n\t\t\tC15.25-3.533,14.85-3.3,14.55-2.9z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_1" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_2" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.9059", strokeMiterlimit: "10", cx: "16.023", cy: "8.383", r: "4.948" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.9059", strokeMiterlimit: "10", d: "M24.248,20.166\r\n\t\t\t\tc-0.323-2.28-3.851-4.078-8.166-4.078s-7.843,1.798-8.165,4.078H7.886v8.244c0,0-0.025,0.241,0.181,0.241\r\n\t\t\t\tc0.326,0,16.004,0,16.004,0s0.208,0.057,0.208-0.227s0-8.259,0-8.259H24.248z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM12.445,13.957c-0.857,0.865-2.048,1.402-3.362,1.402c-2.614,0-4.732-2.119-4.732-4.733s2.118-4.731,4.732-4.731\r\n\t\t\t\tc0.269,0,0.531,0.021,0.786,0.064" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM7.328,17.208c-3.473,0.46-6.095,2.082-6.373,4.059H0.922v5.5h4.76" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM17.914,20.559" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM19.588,13.957c0.856,0.865,2.048,1.402,3.362,1.402c2.614,0,4.731-2.119,4.731-4.733s-2.117-4.731-4.731-4.731\r\n\t\t\t\tc-0.268,0-0.531,0.021-0.787,0.064" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM24.672,17.208c3.474,0.46,6.095,2.082,6.373,4.059h0.033v5.5h-4.76" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "none", stroke: "#FFFFFF", strokeWidth: "0.885", strokeLinecap: "round", strokeLinejoin: "round", strokeMiterlimit: "10", d: "\r\n\t\t\t\tM14.822,20.559" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#FFFFFF", d: "M5.25,24.985" }))));
}
function CommentThread(props, className) {
    if (!(0,shared_webui_config__WEBPACK_IMPORTED_MODULE_4__.useInGamepadUI)()) {
        return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 409.6 409.6" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M109.9,96.2H302c16.3,0,29.6,13,29.6,29v101.4c0,16-13.2,29-29.6,29h-90.1l-57.6,57.9L138,255.6h-28.1\r\n\t\t\t\tc-16.3,0-29.6-13-29.6-29V125.2C80.4,109.2,93.6,96.2,109.9,96.2z" }));
    }
    else {
        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 36 36", fill: "none" }, props),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2 4V16V20L7 16H24V4H2ZM12 20V32H29L34 36V32V20H12Z", fill: "currentColor" })));
    }
}
function DeleteUserNews(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 409.6 409.6" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M275.1,153c-4.3-0.2-8,3.9-8.2,9.1l-5.8,136.5c-0.1,3.3-2.5,6.1-5.3,6.1H155.1c-2.7,0-5.1-2.8-5.3-6.1\r\n\t\t\t\t\t\tl-5.8-136.5c-0.2-5.2-3.9-9.3-8.2-9.1c-4.3,0.2-7.7,4.6-7.5,9.9l5.8,136.5c0.5,13.4,9.8,24.2,21,24.2h100.8\r\n\t\t\t\t\t\tc11.2,0,20.5-10.8,21-24.2l5.8-136.5C282.9,157.6,279.5,153.2,275.1,153z M211.8,276.1v-98.4c0-4.2-2.8-7.6-6.3-7.6\r\n\t\t\t\t\t\tc-3.5,0-6.3,3.4-6.3,7.6v98.4c0,4.2,2.8,7.6,6.3,7.6C209,283.7,211.8,280.3,211.8,276.1z M174.2,283.7c3.5-0.1,6.2-3.6,6.1-7.8\r\n\t\t\t\t\t\tl-3.1-98.4c-0.1-4.2-3-7.5-6.5-7.4c-3.5,0.1-6.2,3.6-6.1,7.8l3.1,98.4C167.8,280.5,170.7,283.8,174.2,283.7z M243.3,276.3l3.2-98.4\r\n\t\t\t\t\t\tc0.1-4.2-2.6-7.7-6.1-7.8c-3.5-0.1-6.4,3.2-6.5,7.4l-3.2,98.4c-0.1,4.2,2.6,7.7,6.1,7.8C240.3,283.8,243.2,280.5,243.3,276.3z\r\n\t\t\t\t\t\tM284.3,120.7h-40l-3-12.6c-2.6-11.1-12-19.6-21.6-19.6h-28.4c-9.6,0-19,8.5-21.6,19.6l-3,12.6h-40c-4.3,0-7.9,4.3-7.9,9.5\r\n\t\t\t\t\t\ts3.5,9.5,7.9,9.5h157.5c4.3,0,7.9-4.2,7.9-9.5S288.6,120.7,284.3,120.7z M183.1,120.7l1.8-7.4c0.7-3,3.9-5.9,6.4-5.9h28.4\r\n\t\t\t\t\t\tc2.6,0,5.7,2.9,6.4,5.9l1.8,7.4H183.1z" }));
}
function ThumbsUpUserNews(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 409.6 409.6" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M225.1,328.8c-12.6,0-15.3-1.9-29.5-5.3c-18.7-4.8-35.3-6.3-51-5.3c-3.5,0.5-7.1,0.5-10.6,1l-7.6,1\r\n\t\t\t\tc-2.5,0.5-4.5-1-5.6-3.4c-12.6-36.2-16.6-74.7-11.6-117.6c0-2.4,2-3.9,4.5-4.3l4.5-0.5c3.5-0.5,6.6-1,10.1-1c5-0.5,9.6-2.9,13.1-7.2\r\n\t\t\t\tl0.5-1c0.5-0.5,1-1.4,1.5-2.4c9.1-14.5,22.2-25.6,36.8-37.6c7.6-6.3,14.1-12.5,20.2-18.3c6.6-7.2,10.1-16.4,10.6-27\r\n\t\t\t\tc0-9.6,5.6-15.4,16.1-16.4c13.6-1,22.7,3.9,27.8,15.9c7.6,16.4-4.4,33.3-13.9,50.6c-2,3.9-4.5,7.2-7.1,10.6c-1,1.4-2,2.9-3,4.3\r\n\t\t\t\tl-3.5,4.8c-1.5,1.9-3,3.9-4.5,6.3c4,0,7.6,0,11.6,0c11.1-0.5,34.6-0.5,46.7,1.4c7.6,1,13.6,4.8,17.7,10.1c3.5,4.8,4.5,11.1,3,17.8\r\n\t\t\t\tc-0.5,2.9-2,5.8-5,9.2c-1.5,1.9-14.4,3.9-16.5,5.3h10.9c2.5,1.9,5,3.9,7.1,6.3c4,4.3,5.6,9.2,5,14.9c-0.5,5.3-3,10.6-7.6,14\r\n\t\t\t\tc-2.5,1.9-16,3.9-18.5,5.3c5,5.3,18,12.1,16.5,19.3c-2,9.6-7.6,15.4-18.2,17.8c2.5,3.9,3,8.7,1.5,13.5c-0.5,2.4-1.5,4.3-2.5,6.3\r\n\t\t\t\tc-2.5,5.3-6.6,8.2-13.1,9.6C253.2,327.8,233.7,328.8,225.1,328.8z" }));
}
function ThumbsUp(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("title", null, props.title),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M126.16,44c-0.18-1.38-0.8-3.93-2.71-4.15c0,0-16.02-1.85-18.59,12.29c0,0-5.13,18.82,9.41,46.21l-15.08,0.64\r\n\t\t\tH68.51c-10.2,0-18.45,10.81-18.51,24.16h44.89c1.87,0,3.38,1.51,3.38,3.38c0,1.86-1.51,3.38-3.38,3.38H51.86l5.43,19.22h43.68\r\n\t\t\tc1.86,0,3.38,1.51,3.38,3.38c0,1.86-1.52,3.37-3.38,3.37H59.2l5.43,19.23h33.45c1.86,0,3.38,1.51,3.38,3.37\r\n\t\t\tc0,1.86-1.51,3.38-3.38,3.38H67.09c5.27,11.59,13.82,20.4,23.03,20.4h68.13l21.34-62.23C174.13,134.96,132.53,92.42,126.16,44z\r\n\t\t\t M208.44,154.04c-1.8-3.64-4.9-6.36-8.74-7.67l-7.55-2.57L170.86,206l7.56,2.59c3.84,1.32,7.99,1.05,11.64-0.74\r\n\t\t\tc3.65-1.79,6.36-4.89,7.67-8.73l11.45-33.45C210.49,161.82,210.23,157.69,208.44,154.04z" }));
}
function ReviewHelp(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("title", null, props.title),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M128.55,137.4c0-21,17.02-38.02,38.02-38.02c0,0,0.01,0,0.01,0c-7.68-19.04-26.32-32.47-48.11-32.47\r\n\t\t\t\t\t\t\t\t\t\t\t\tc-28.64,0-51.86,23.22-51.86,51.86c0,9.48,2.54,18.37,6.99,26.01c0.03,0.05,0.06,0.1,0.09,0.16l-6.85,29.66l32.69-7.54\r\n\t\t\t\t\t\t\t\t\t\t\t\tc5.87,2.3,12.26,3.57,18.94,3.57c8.06,0,15.68-1.84,22.49-5.12C133.34,158.55,128.55,148.53,128.55,137.4z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M196.36,154.8c2.95-5.08,4.64-10.97,4.64-17.27c0-19.01-15.41-34.42-34.42-34.42s-34.42,15.41-34.42,34.42\r\n\t\t\t\t\t\tc0,19.01,15.41,34.42,34.42,34.42c4.44,0,8.68-0.84,12.57-2.37l21.7,5.01l-4.54-19.69C196.32,154.87,196.34,154.84,196.36,154.8z\r\n\t\t\t\t\t\tM167.05,157.78c-2.3,0-4.16-1.86-4.16-4.16c0-2.3,1.86-4.16,4.16-4.16c2.3,0,4.16,1.86,4.16,4.16\r\n\t\t\t\t\t\tC171.21,155.91,169.34,157.78,167.05,157.78z M171.21,140.62v0.52c0,2.3-1.86,4.16-4.16,4.16s-4.16-1.86-4.16-4.16v-4.16\r\n\t\t\t\t\t\tc0-2.3,1.86-4.16,4.16-4.16c3.32,0,6.24-1.94,6.24-4.16c0-2.22-2.91-4.16-6.24-4.16c-2.13,0-4.1,0.75-5.29,2.01\r\n\t\t\t\t\t\tc-1.57,1.67-4.2,1.76-5.88,0.19c-1.67-1.57-1.76-4.2-0.19-5.88c2.77-2.95,6.9-4.64,11.35-4.64c8.02,0,14.55,5.6,14.55,12.47\r\n\t\t\t\t\t\tC181.6,134.31,177.18,139.08,171.21,140.62z" }));
}
function WriteReview(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_2", xmlns: "http://www.w3.org/2000/svg", className: props.className, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("title", null, props.title),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M152.07,132.73c0,0,4.05,3.28,7.04,6.86s5.74,7.59,5.74,7.59c1.45-0.55,3.27-1.36,4.09-2.05l55.4-47.84\r\n\t\t\t\t\t\t\t\t\t\t\t\tl-14.19-16.04l-55.45,47.88C153.88,129.82,152.83,131.42,152.07,132.73z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M192.74,71.58c0-1.97-1.61-3.58-3.58-3.58H49.56c-1.97,0-3.58,1.61-3.58,3.58v97.84\r\n\t\t\t\t\t\tc0,1.97,1.61,3.58,3.58,3.58h139.6c1.97,0,3.58-1.61,3.58-3.58v-40.11l-21.48,18.54c-1.95,1.65-5.95,2.98-6.41,3.12\r\n\t\t\t\t\t\tc-0.18,0.06-0.37,0.09-0.55,0.09c-0.5,0-1-0.21-1.34-0.6l-0.68-0.76c0,0.15,0,0.3-0.02,0.45c-0.14,1.25-0.97,2.3-2.16,2.75\r\n\t\t\t\t\t\tl-1.98,0.79c-0.12,0.05-0.25,0.08-0.38,0.1l-14.52,2.33c-0.36,0.12-0.73,0.18-1.1,0.18c-0.96,0-1.9-0.39-2.56-1.11\r\n\t\t\t\t\t\tc-0.99-1.09-1.16-2.62-0.45-3.87l2.95-6.95H67.76c-0.99,0-1.79-0.8-1.79-1.79c0-0.99,0.8-1.79,1.79-1.79h75.84l1.6-3.76\r\n\t\t\t\t\t\tc0.04-0.09,0.09-0.19,0.15-0.27c0.6-0.92,1.68-1.48,2.89-1.5c0.55-0.02,1.11,0.12,1.62,0.38l-1.29-1.46\r\n\t\t\t\t\t\tc-0.49-0.55-0.59-1.35-0.25-2c0.21-0.42,2.14-4.11,4.06-5.75l2.19-1.89h-86.8c-0.99,0-1.79-0.8-1.79-1.79\r\n\t\t\t\t\t\tc0-0.99,0.8-1.79,1.79-1.79h90.94l34.04-29.4V71.58z M170.97,104.69H67.76c-0.99,0-1.79-0.8-1.79-1.79c0-0.99,0.8-1.79,1.79-1.79\r\n\t\t\t\t\t\th103.21c0.99,0,1.79,0.8,1.79,1.79C172.76,103.89,171.95,104.69,170.97,104.69z" }));
}
function Update(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: props.className, height: '100px', width: '100px', version: "1.1", x: "0px", y: "0px", viewBox: "0 0 100 100", enableBackground: "new 0 0 100 100" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { display: "none" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "-660.877", y: "-37.172", display: "inline", width: "1370.931", height: "1263.231" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M34.367,31.803c0.49,0.443,1.228,0.404,1.698-0.06c3.869-3.823,8.894-6.045,14.425-6.337   c11.044-0.495,20.558,7.281,22.518,17.866c0.133,0.717-0.429,1.379-1.157,1.413l-4.83,0.223c-1.092,0.05-1.578,1.397-0.769,2.133   l13.999,12.733c0.502,0.456,1.279,0.419,1.734-0.084L94.68,45.676c0.733-0.809,0.123-2.1-0.967-2.048l-6.486,0.309   c-1.82-18.94-18.238-33.327-37.455-32.439c-9.122,0.484-17.619,4.28-23.984,10.844c-0.48,0.495-0.439,1.299,0.072,1.762   L34.367,31.803z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M6.229,53.869h6.11c0.622,0,1.132,0.468,1.207,1.085c1.029,8.437,4.787,16.288,10.854,22.357   c7.249,7.217,16.85,11.23,27.047,11.23c9.778,0.07,19.009-3.568,26.131-10.258c0.502-0.471,0.502-1.276,0.015-1.763l-9.587-9.587   c-4.379,4.389-10.288,6.838-16.559,6.838c-6.224,0-12.068-2.506-16.541-6.934c-3.179-3.179-5.282-7.178-6.168-11.481   c-0.154-0.746,0.447-1.436,1.209-1.436h5.183c1.092,0,1.639-1.319,0.869-2.092L21.572,37.352c-0.478-0.48-1.255-0.481-1.734-0.003   L5.363,51.773C4.589,52.545,5.135,53.869,6.229,53.869z" })));
}
function Burger(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 50 50" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "0", y: "10", width: "40", height: "5", rx: "5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "0", y: "20", width: "40", height: "5", rx: "5" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { x: "0", y: "30", width: "40", height: "5", rx: "5" }));
}
function PartyPopper() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "-8 -8 80 80" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_2", "data-name": "Layer 2" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_1-2", "data-name": "Layer 1" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_2-2", "data-name": "Layer 2" },
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_1-2-2", "data-name": "Layer 1-2" },
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#4ef4a8' }, d: "M.74,10.86l3.4,1.91.78.18L9,13a.92.92,0,0,0,.72-.19l4.56-3.57a1,1,0,0,0,.36-.72l0-2.6a.9.9,0,0,0-.1-.42l-.63-2.89-.5-.56-.84-.4a.92.92,0,0,0-1.25-.33.84.84,0,0,0-.31.31L10.09,1C10,1.22,10.2,2.83,10,2.9L6.73,4a.82.82,0,0,0-.26.14L5.65,5.94c-.15,1.35-.8.91-.8,1l-.61.84c-.28.44-1.52,0-1.95-.33h0A.92.92,0,0,0,1,7.61a1.17,1.17,0,0,0-.15.27l.41.79C1.06,9.2.24,10.69.74,10.86Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#4ef4a8' }, d: "M62.09,44.34,57.51,44s-.62.28-.67.29L53.68,45.7a.88.88,0,0,0-.58.45l-2.72,5.12a.86.86,0,0,0,0,.78l1,2.37a1,1,0,0,0,.33.34l2.93,2.49.08.06.32.22a.92.92,0,0,0,1.27-.26.83.83,0,0,0,.14-.38l.45.47a10.49,10.49,0,0,1,0-2L59.44,53a1.3,1.3,0,0,0,.18-.23l.64-1.88a8.56,8.56,0,0,0-.19-.9l1-1.16a.91.91,0,0,1,1-.77h0a.94.94,0,0,0,1.08-.74,1.09,1.09,0,0,0,0-.18l-.1-1.9a.93.93,0,0,0-.94-.91Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { style: { fill: '#4ef4a8' }, points: "31.35 25.11 17.79 8.15 13.3 10.53 6.82 16.87 10.21 21.98 20.05 34.1 20.1 30.19 23.87 31.08 24.28 27.35 27.78 28.07 27.79 24.43 31.35 25.11" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { style: { fill: '#4ef4a8' }, points: "51.85 47.94 55.09 42.43 53.48 39.55 39.7 31.6 34.82 31.83 37.15 35.34 33.49 36.69 33.7 39.88 30 40.06 31.01 43.95 47.77 53.28 51.85 47.94" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M26.26,45.38h.14a1.14,1.14,0,0,1,1,1.28l-.8,5.9a1.13,1.13,0,1,1-2.25-.3h0l.8-5.93A1.14,1.14,0,0,1,26.26,45.38Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M13,38.5l6-.58h.14a1.14,1.14,0,1,1,.08,2.27l-5.95.59A1.15,1.15,0,0,1,13,38.51Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M21.4,44a1.14,1.14,0,0,1,0,1.61h0l-3.89,3.75a1.14,1.14,0,1,1-1.7-1.51l.13-.12L19.76,44a1.17,1.17,0,0,1,1.64,0Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#4ef4a8' }, d: "M63.09,44.25a8.7,8.7,0,0,0-8.42-.15l.21-.36a3.13,3.13,0,0,0-1.1-4.28L39.25,30.88h-.08L39,30.83h-.23l-4.12.33h-.14a.79.79,0,0,0-.55,1,.56.56,0,0,0,0,.12L35.26,35l-3,.25a.77.77,0,0,0-.71.84,1.1,1.1,0,0,0,.06.26l1.25,2.75-3,.25a.77.77,0,0,0-.65,1.1l1.7,3.76a.07.07,0,0,0,.05.06.6.6,0,0,0,.09.13l.12.1.06.06,14.52,8.53A3.13,3.13,0,0,0,50,52l.21-.35a8.53,8.53,0,0,0,4.19,7.31.78.78,0,0,0,1.07-.27c.14-.23.27-.28.79-.38a2.4,2.4,0,0,0,1.78-1.06,2.36,2.36,0,0,0,.1-2.12c-.15-.48-.18-.62,0-.85s.28-.28.79-.38a2.37,2.37,0,0,0,1.8-1.12,2.31,2.31,0,0,0,.1-2.11c-.14-.47-.17-.62,0-.85s.28-.28.79-.37a2.36,2.36,0,0,0,1.75-1.14,2.43,2.43,0,0,0,.1-2.12c-.16-.47-.18-.62,0-.86A.78.78,0,0,0,63.09,44.25ZM49.57,47.08A2.51,2.51,0,0,1,52.9,44l-2.52,4.28A2.48,2.48,0,0,1,49.57,47.08Zm-7.63,2-4.26-2.51a2.52,2.52,0,0,1,4.26,2.51Zm2.48-12a2.17,2.17,0,1,1-2.65-1.55h0A2.17,2.17,0,0,1,44.42,37.11Zm9.24,5.55A4,4,0,0,0,51,42.41a4.08,4.08,0,0,0-1.39,7.25l-.91,1.55a1.57,1.57,0,0,1-2.14.55l-3.24-1.92a4.07,4.07,0,0,0-7-4.11l-4.11-2.42-1.15-2.53,3-.24a.78.78,0,0,0,.75-.81,1,1,0,0,0-.07-.29l-1.24-2.75,3-.22a.75.75,0,0,0,.61-.39.76.76,0,0,0,0-.72L35.9,32.55l2.77-.23L41.48,34h-.09a3.74,3.74,0,1,0,4.55,2.69h0v-.08L53,40.76A1.57,1.57,0,0,1,53.66,42.66Zm8.07,2.64a3,3,0,0,0,.18,1.34c.16.48.18.62,0,.86s-.27.27-.79.37a2.27,2.27,0,0,0-1.9,3.23c.14.47.17.62,0,.85s-.27.28-.79.37a2.41,2.41,0,0,0-1.8,1.12,2.36,2.36,0,0,0-.1,2.12c.15.48.17.62,0,.85s-.28.28-.79.38a2.91,2.91,0,0,0-1.27.49,7,7,0,0,1-1.94-9.22,7.06,7.06,0,0,1,9.09-2.76Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#4ef4a8' }, d: "M.3,9.83a.77.77,0,0,0-.13,1.09,8.45,8.45,0,0,0,5.71,3.19,8.21,8.21,0,0,0,2.1,0l-.33.26a3.13,3.13,0,0,0-.5,4.37l12.56,15.9.06,0,.11.1.14.08.13,0h.3a1,1,0,0,0,.29-.11l.07,0,.05-.06a.52.52,0,0,0,.1-.11l.08-.13a.2.2,0,0,1,0-.14.38.38,0,0,0,0-.15v-.07l-.17-3,2.9.84a.78.78,0,0,0,1-.53,1,1,0,0,0,0-.24l-.17-3,2.89.83a.79.79,0,0,0,1-.8l-.17-3,2.9.83h.37l.14-.05.14-.07h0l.06-.05a.91.91,0,0,0,.1-.13l.08-.14v-.3a.33.33,0,0,0,0-.14.7.7,0,0,0,0-.14,1,1,0,0,0-.08-.14v-.06L19.53,8.85a3.15,3.15,0,0,0-2.09-1.17h0a3.13,3.13,0,0,0-2.3.67l-.33.25A8.54,8.54,0,0,0,13.53.3.8.8,0,0,0,12.42.17c-.2.17-.35.16-.84.08a2.28,2.28,0,0,0-2.85,1.5,2.37,2.37,0,0,0-.09.79c0,.51-.06.65-.27.78s-.35.17-.84.08A2.29,2.29,0,0,0,4.68,4.91a2.35,2.35,0,0,0-.1.79c0,.49,0,.63-.26.78s-.36.16-.84.08A2.35,2.35,0,0,0,1.4,7a2.42,2.42,0,0,0-.82,2C.53,9.52.5,9.66.3,9.83Zm25.24,11a2.17,2.17,0,1,1-1.93-2.39h0A2.19,2.19,0,0,1,25.54,20.86Zm-9,7.21-3.06-3.89a2.5,2.5,0,0,1,3.12.61,2.46,2.46,0,0,1,.56,1.84A2.5,2.5,0,0,1,16.53,28.07Zm-7.9-12.5,7.5-6a1.64,1.64,0,0,1,1.15-.33h0a1.58,1.58,0,0,1,1,.59l5.6,7.07h-.12a3.73,3.73,0,1,0,3.28,4.14h0V21l2.3,2.87-1.56-.47H27.7a.78.78,0,0,0-.57.16.79.79,0,0,0-.31.66l.18,3-2.9-.83a.75.75,0,0,0-.71.13.77.77,0,0,0-.29.66l.08,3-2.89-.84a.78.78,0,0,0-1,.54.59.59,0,0,0,0,.23l.09,1.66-1.9-2.39a4.07,4.07,0,0,0-5-6.36L8.34,17.76A1.55,1.55,0,0,1,8.63,15.57ZM1.8,10.43a2.78,2.78,0,0,0,.33-1.32c0-.49.05-.63.26-.78s.36-.16.84-.08A2.27,2.27,0,0,0,6.07,6.74,2.33,2.33,0,0,0,6.17,6c0-.5.06-.64.26-.78s.36-.17.85-.08a2.35,2.35,0,0,0,2.09-.4,2.41,2.41,0,0,0,.81-1.94c0-.49.06-.64.27-.78s.36-.16.85-.08l.37.06a2.69,2.69,0,0,0,1-.06A7,7,0,0,1,1.76,10.54Z" }),
                        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#4ef4a8' }, d: "M11.58,16.28A3.73,3.73,0,1,0,15.71,13,3.72,3.72,0,0,0,11.58,16.28Zm1.56.18a2.16,2.16,0,1,1,1.91,2.39h0a2.18,2.18,0,0,1-1.91-2.38Z" }))),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M35.25,21.41h-.13a1.13,1.13,0,0,1-1-1.22l.42-5.94a1.13,1.13,0,1,1,2.26.16h0l-.42,6A1.14,1.14,0,0,1,35.25,21.41Z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M48.89,27.43l-5.9,1h-.13a1.14,1.14,0,1,1-.23-2.26l5.9-1a1.14,1.14,0,1,1,.36,2.26Z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { style: { fill: '#f9f9f9' }, d: "M40.2,22.49a1.13,1.13,0,0,1-.08-1.6h0l3.65-4a1.12,1.12,0,0,1,1.59-.2,1.13,1.13,0,0,1,.2,1.6l-.12.13-3.61,4a1.17,1.17,0,0,1-1.63.08Z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { style: { fill: '#acfcd2' }, x: "19.85", y: "10.23", width: "3.74", height: "16.45", transform: "translate(-6.75 17.12) rotate(-37.67)" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("rect", { style: { fill: '#acfcd2' }, x: "42.62", y: "31.13", width: "3.74", height: "16.45", transform: "translate(-11.84 58.21) rotate(-60)" }))));
}
function Snowball() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { xmlns: "http://www.w3.org/2000/svg", version: "1.1", x: "0px", y: "0px", viewBox: "0 0 92 80", "enable-background": "new 0 0 110 110" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#ffffff", d: "M18.987,47.334c-1.475,0-2.671,1.196-2.671,2.671c0,1.475,1.196,2.671,2.671,2.671h6.563   c1.475,0,2.671-1.196,2.671-2.671c0-1.475-1.196-2.671-2.671-2.671H18.987z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "#ffffff", cx: "32.584", cy: "60.683", r: "2.673" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#ffffff", d: "M58.85,36.655h-6.461h-9.295c-0.038-0.002-0.073-0.011-0.111-0.011H29.667   c-1.475,0-2.671,1.196-2.671,2.671c0,1.475,1.196,2.671,2.671,2.671h11.872h1.443h2.602c1.344,0,2.433,1.196,2.433,2.671   s-1.089,2.671-2.433,2.671h-4.045v0h-6.426c-1.475,0-2.671,1.196-2.671,2.671v0c0,1.475,1.196,2.671,2.671,2.671h6.563   c0,0,0,0,0.001,0h4.2c1.344,0,2.433,1.196,2.433,2.671s-1.09,2.671-2.433,2.671h-4.337v0h-0.452c-1.475,0-2.671,1.196-2.671,2.671   c0,1.475,1.196,2.671,2.671,2.671h0.452h12.827h4.484v-0.023h2.209h0h0.305c7.363,0,13.332-5.969,13.332-13.332v0   c0-7.363-5.969-13.332-13.332-13.332h-0.305v-0.012H58.85z" })));
}
function EmoticonBow(props) {
    let strClasses = (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow);
    if (props.className)
        strClasses += ' ' + props.className;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 47 63.08", className: strClasses },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_2_1_" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { id: "Layer_2-2" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st0), points: "26.54,63.08 47,38.88 47,50.98 36.77,63.08                               " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "23,63.08 47,35.08 47,49.08 35,63.08                            " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st0), points: "42.86,22.41 37.42,16.08 12.84,16.08 0,31.06 0,46.3 25.66,16.36 37.64,30.29 38.78,24.06\r\n\t\t\t\t\t\t\t\t\t43.58,24.06 44.28,24.06                                " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "24.22,16.08 0,44.08 0,30.08 12.11,16.08                    " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "34.45,10.49 44.06,21.71 38.45,21.71 37.39,27.36 26.92,15.14 28.76,10.49                        " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "27.81,6.41 40.57,0 44.35,0 44.9,11.7 39.23,12.84 35.49,8.17 35.49,8.17 28.83,8                                 " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st0), points: "12.09,16.08 5.15,24.12 9.58,24.08 10.72,30.29 22.99,16.08                               " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "14.17,10.49 4.55,21.71 10.16,21.71 11.23,27.36 21.7,15.14 19.86,10.49                                 " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "20.71,6.41 7.95,0 4.17,0 3.62,11.7 9.28,12.84 13.02,8.17 13.02,8.17 19.68,8                                 " }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polygon", { className: (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().EmoticonBow_st1), points: "25.78,7.22 24.52,7.22 24.05,7.22 22.79,7.22 21.99,8.67 24.05,13.98 24.52,13.98 26.58,8.67                  " })))));
}
function ChatSticker(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "59px", height: "59px", viewBox: "0 0 59 59", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M57.9907 30.2382L57.9932 30.1318L23.3635 58.4652L23.159 58.2152L23.0596 58.295C9.86456 55.3567 0 43.5804 0 29.5C0 13.2076 13.2076 0 29.5 0C45.7683 0 58.9609 13.1684 59 29.4275L57.9907 30.2382ZM57.9886 28.6833C52.956 26.4605 41.9077 24.7254 31.9404 33.2687C22.1502 41.6604 21.6264 52.0873 22.7598 57.1984C10.2728 54.1704 1 42.9181 1 29.5C1 13.7599 13.7599 1 29.5 1C44.967 1 57.5563 13.3209 57.9886 28.6833ZM57.2445 29.4523L23.7148 56.8857C22.676 52.0493 23.1845 42.0909 32.5912 34.028C41.9759 25.984 52.3311 27.4183 57.2445 29.4523Z", fill: "" }));
}
function Coupon(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ viewBox: "0 0 69 41", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20.2597 0.604492H67.013C67.2177 0.604371 67.4204 0.644169 67.6095 0.721611C67.7987 0.799053 67.9705 0.912619 68.1152 1.05582C68.26 1.19901 68.3748 1.36903 68.453 1.55615C68.5313 1.74327 68.5715 1.94382 68.5714 2.14634V39.1506C68.5715 39.3531 68.5313 39.5536 68.453 39.7407C68.3748 39.9279 68.26 40.0979 68.1152 40.2411C67.9705 40.3843 67.7987 40.4978 67.6095 40.5753C67.4204 40.6527 67.2177 40.6925 67.013 40.6924H20.2597C20.0551 40.6924 19.8524 40.6526 19.6634 40.5751C19.4743 40.4976 19.3025 40.3839 19.1578 40.2407L17.1429 38.2471L15.1279 40.2407C14.9832 40.3839 14.8114 40.4976 14.6224 40.5751C14.4333 40.6526 14.2306 40.6924 14.026 40.6924H1.55844C1.35375 40.6925 1.15104 40.6527 0.961907 40.5753C0.772773 40.4978 0.600923 40.3843 0.456183 40.2411C0.311444 40.0979 0.196655 39.9279 0.11838 39.7407C0.0401044 39.5536 -0.000122183 39.3531 2.78766e-07 39.1506V2.14634C-0.000122183 1.94382 0.0401044 1.74327 0.11838 1.55615C0.196655 1.36903 0.311444 1.19901 0.456183 1.05582C0.600923 0.912619 0.772773 0.799053 0.961907 0.721611C1.15104 0.644169 1.35375 0.604371 1.55844 0.604492H14.026C14.2306 0.604453 14.4333 0.644324 14.6224 0.721827C14.8114 0.799331 14.9832 0.912945 15.1279 1.05617L17.1429 3.04978L19.1578 1.05617C19.3025 0.912952 19.4743 0.799342 19.6634 0.721839C19.8524 0.644336 20.0551 0.604461 20.2597 0.604492ZM20.905 37.6087H65.4545V3.68818H20.905L18.7013 5.86842V8.31371C18.7013 8.72263 18.5371 9.1148 18.2448 9.40395C17.9526 9.69311 17.5562 9.85555 17.1429 9.85555C16.7295 9.85555 16.3331 9.69311 16.0409 9.40395C15.7486 9.1148 15.5844 8.72263 15.5844 8.31371V5.86842L13.3807 3.68818H3.11688V37.6087H13.3807L15.5844 35.4285V32.9832C15.5844 32.5743 15.7486 32.1821 16.0409 31.8929C16.3331 31.6038 16.7295 31.4413 17.1429 31.4413C17.5562 31.4413 17.9526 31.6038 18.2448 31.8929C18.5371 32.1821 18.7013 32.5743 18.7013 32.9832V35.4285L20.905 37.6087ZM16.5463 13.0564C16.7355 12.979 16.9382 12.9392 17.1429 12.9393C17.3475 12.9392 17.5503 12.979 17.7394 13.0564C17.9285 13.1339 18.1004 13.2474 18.2451 13.3906C18.3899 13.5338 18.5046 13.7039 18.5829 13.891C18.6612 14.0781 18.7014 14.2786 18.7013 14.4812V17.5648C18.7013 17.9738 18.5371 18.3659 18.2448 18.6551C17.9526 18.9442 17.5562 19.1067 17.1429 19.1067C16.7295 19.1067 16.3331 18.9442 16.0409 18.6551C15.7486 18.3659 15.5844 17.9738 15.5844 17.5648V14.4812C15.5843 14.2786 15.6245 14.0781 15.7028 13.891C15.7811 13.7039 15.8959 13.5338 16.0406 13.3906C16.1853 13.2474 16.3572 13.1339 16.5463 13.0564ZM35.8441 19.1068C36.7688 19.1068 37.6727 18.8355 38.4416 18.3273C39.2104 17.819 39.8097 17.0966 40.1635 16.2514C40.5174 15.4062 40.61 14.4761 40.4296 13.5789C40.2492 12.6816 39.8039 11.8574 39.15 11.2105C38.4962 10.5636 37.6631 10.1231 36.7562 9.94461C35.8493 9.76614 34.9092 9.85774 34.0549 10.2078C33.2006 10.5579 32.4704 11.1508 31.9567 11.9115C31.443 12.6721 31.1688 13.5664 31.1688 14.4813C31.1701 15.7076 31.6631 16.8834 32.5396 17.7505C33.4161 18.6177 34.6045 19.1054 35.8441 19.1068ZM35.8441 12.9394C36.1523 12.9394 36.4536 13.0298 36.7099 13.1993C36.9662 13.3687 37.1659 13.6095 37.2839 13.8912C37.4019 14.173 37.4327 14.483 37.3726 14.7821C37.3124 15.0812 37.164 15.3559 36.9461 15.5715C36.7281 15.7871 36.4504 15.934 36.1481 15.9935C35.8458 16.053 35.5325 16.0224 35.2477 15.9057C34.9629 15.789 34.7195 15.5914 34.5483 15.3379C34.377 15.0843 34.2856 14.7862 34.2856 14.4813C34.2862 14.0725 34.4505 13.6806 34.7427 13.3916C35.0348 13.1026 35.4309 12.94 35.8441 12.9394ZM33.3238 31.3243C33.1347 31.4018 32.932 31.4416 32.7273 31.4414C32.4191 31.4413 32.1178 31.3509 31.8616 31.1815C31.6053 31.012 31.4056 30.7712 31.2877 30.4895C31.1697 30.2078 31.1389 29.8978 31.199 29.5988C31.2591 29.2997 31.4075 29.025 31.6254 28.8094L50.3267 10.3073C50.4707 10.1611 50.6427 10.0447 50.8325 9.96479C51.0224 9.88489 51.2264 9.84308 51.4327 9.84178C51.639 9.84049 51.8435 9.87974 52.0344 9.95726C52.2253 10.0348 52.3987 10.149 52.5446 10.2933C52.6905 10.4377 52.8059 10.6092 52.8843 10.7981C52.9626 10.9869 53.0023 11.1892 53.001 11.3934C52.9997 11.5975 52.9574 11.7993 52.8767 11.9871C52.7959 12.175 52.6782 12.3451 52.5305 12.4876L33.8292 30.9897C33.6847 31.1331 33.5129 31.2468 33.3238 31.3243ZM48.3117 22.1901C47.387 22.1901 46.4831 22.4614 45.7142 22.9697C44.9454 23.4779 44.3461 24.2003 43.9923 25.0455C43.6384 25.8907 43.5458 26.8208 43.7262 27.7181C43.9066 28.6153 44.3519 29.4395 45.0057 30.0864C45.6596 30.7333 46.4927 31.1738 47.3996 31.3523C48.3065 31.5308 49.2466 31.4392 50.1009 31.0891C50.9552 30.739 51.6854 30.1461 52.1991 29.3855C52.7128 28.6248 52.987 27.7305 52.987 26.8157C52.9857 25.5893 52.4926 24.4136 51.6162 23.5464C50.7397 22.6792 49.5513 22.1915 48.3117 22.1901ZM48.3117 28.3575C48.0035 28.3575 47.7022 28.2671 47.4459 28.0977C47.1896 27.9282 46.9898 27.6874 46.8719 27.4057C46.7539 27.124 46.7231 26.8139 46.7832 26.5149C46.8433 26.2158 46.9918 25.941 47.2097 25.7254C47.4277 25.5098 47.7053 25.3629 48.0077 25.3034C48.31 25.2439 48.6233 25.2745 48.9081 25.3912C49.1929 25.5079 49.4362 25.7055 49.6075 25.9591C49.7787 26.2126 49.8701 26.5107 49.8701 26.8157C49.8696 27.2244 49.7052 27.6163 49.4131 27.9053C49.1209 28.1944 48.7249 28.357 48.3117 28.3575ZM16.5463 22.3072C16.7355 22.2298 16.9382 22.19 17.1429 22.1901C17.3475 22.19 17.5503 22.2298 17.7394 22.3072C17.9285 22.3847 18.1004 22.4983 18.2451 22.6415C18.3899 22.7847 18.5046 22.9547 18.5829 23.1418C18.6612 23.3289 18.7014 23.5295 18.7013 23.732V26.8157C18.7013 27.2246 18.5371 27.6168 18.2448 27.9059C17.9526 28.1951 17.5562 28.3575 17.1429 28.3575C16.7295 28.3575 16.3331 28.1951 16.0409 27.9059C15.7486 27.6168 15.5844 27.2246 15.5844 26.8157V23.732C15.5843 23.5295 15.6245 23.3289 15.7028 23.1418C15.7811 22.9547 15.8959 22.7847 16.0406 22.6415C16.1853 22.4983 16.3572 22.3847 16.5463 22.3072Z" }));
}
function ChatEmoticon(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "60px", height: "52px", viewBox: "0 0 60 52", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M0.5 5.5C0.5 2.46243 2.96243 0 6 0H54C57.0376 0 59.5 2.46243 59.5 5.5V35C59.5 38.0376 57.0376 40.5 54 40.5H52.5C51.6716 40.5 51 41.1716 51 42V50.0858C51 51.4221 49.3843 52.0914 48.4393 51.1464L37.7929 40.5H6C2.96243 40.5 0.5 38.0376 0.5 35V5.5ZM6 1C3.51472 1 1.5 3.01472 1.5 5.5V35C1.5 37.4853 3.51472 39.5 6 39.5H38H38.2071L38.3536 39.6464L49.1464 50.4393C49.4614 50.7543 50 50.5312 50 50.0858V42C50 40.6193 51.1193 39.5 52.5 39.5H54C56.4853 39.5 58.5 37.4853 58.5 35V5.5C58.5 3.01472 56.4853 1 54 1H6ZM30 32C36.6274 32 42 26.6274 42 20C42 13.3726 36.6274 8 30 8C23.3726 8 18 13.3726 18 20C18 26.6274 23.3726 32 30 32ZM30 33C37.1797 33 43 27.1797 43 20C43 12.8203 37.1797 7 30 7C22.8203 7 17 12.8203 17 20C17 27.1797 22.8203 33 30 33ZM26.5 18C27.3284 18 28 17.3284 28 16.5C28 15.6716 27.3284 15 26.5 15C25.6716 15 25 15.6716 25 16.5C25 17.3284 25.6716 18 26.5 18ZM35 16.5C35 17.3284 34.3284 18 33.5 18C32.6716 18 32 17.3284 32 16.5C32 15.6716 32.6716 15 33.5 15C34.3284 15 35 15.6716 35 16.5ZM24.5 22C24.5 24.4853 26.5147 26.5 29 26.5H31C33.4853 26.5 35.5 24.4853 35.5 22H34.5C34.5 23.933 32.933 25.5 31 25.5H29C27.067 25.5 25.5 23.933 25.5 22H24.5Z", fill: "" }));
}
function ChatEffect(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "60px", height: "52px", viewBox: "0 0 60 52", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M6 0C2.96243 0 0.5 2.46243 0.5 5.5V35C0.5 38.0376 2.96243 40.5 6 40.5H37.7929L48.4393 51.1464C49.3843 52.0914 51 51.4221 51 50.0858V42C51 41.1716 51.6716 40.5 52.5 40.5H54C57.0376 40.5 59.5 38.0376 59.5 35V5.5C59.5 2.46243 57.0376 0 54 0H6ZM1.5 5.5C1.5 3.01472 3.51472 1 6 1H54C56.4853 1 58.5 3.01472 58.5 5.5V35C58.5 37.4853 56.4853 39.5 54 39.5H52.5C51.1193 39.5 50 40.6193 50 42V50.0858C50 50.5312 49.4614 50.7543 49.1464 50.4393L38.3536 39.6464L38.2071 39.5H38H6C3.51472 39.5 1.5 37.4853 1.5 35V5.5ZM16 8.88154L17.8736 13.9448C18.0761 14.4922 18.5078 14.9239 19.0552 15.1264L24.1185 17L19.0552 18.8736C18.5078 19.0761 18.0761 19.5078 17.8736 20.0552L16 25.1185L14.1264 20.0552C13.9239 19.5078 13.4922 19.0761 12.9448 18.8736L7.88154 17L12.9448 15.1264C13.4922 14.9239 13.9239 14.4922 14.1264 13.9448L16 8.88154ZM15.0621 8.53451C15.3843 7.66389 16.6157 7.66389 16.9379 8.5345L18.8114 13.5978C18.9127 13.8715 19.1285 14.0873 19.4022 14.1886L24.4655 16.0621C25.3361 16.3843 25.3361 17.6157 24.4655 17.9379L19.4022 19.8114C19.1285 19.9127 18.9127 20.1285 18.8114 20.4022L16.9379 25.4655C16.6157 26.3361 15.3843 26.3361 15.0621 25.4655L13.1886 20.4022C13.0873 20.1285 12.8715 19.9127 12.5978 19.8114L7.53451 17.9379C6.66389 17.6157 6.66389 16.3843 7.5345 16.0621L12.5978 14.1886C12.8715 14.0873 13.0873 13.8715 13.1886 13.5978L15.0621 8.53451ZM32.8736 23.9448L31 18.8815L29.1264 23.9448C28.9239 24.4922 28.4922 24.9239 27.9448 25.1264L22.8815 27L27.9448 28.8736C28.4922 29.0761 28.9239 29.5078 29.1264 30.0552L31 35.1185L32.8736 30.0552C33.0761 29.5078 33.5078 29.0761 34.0552 28.8736L39.1185 27L34.0552 25.1264C33.5078 24.9239 33.0761 24.4922 32.8736 23.9448ZM31.9379 18.5345C31.6157 17.6639 30.3843 17.6639 30.0621 18.5345L28.1886 23.5978C28.0873 23.8715 27.8715 24.0873 27.5978 24.1886L22.5345 26.0621C21.6639 26.3843 21.6639 27.6157 22.5345 27.9379L27.5978 29.8114C27.8715 29.9127 28.0873 30.1285 28.1886 30.4022L30.0621 35.4655C30.3843 36.3361 31.6157 36.3361 31.9379 35.4655L33.8114 30.4022C33.9127 30.1285 34.1285 29.9127 34.4022 29.8114L39.4655 27.9379C40.3361 27.6157 40.3361 26.3843 39.4655 26.0621L34.4022 24.1886C34.1285 24.0873 33.9127 23.8715 33.8114 23.5978L31.9379 18.5345ZM43 4.88154L44.8736 9.9448C45.0761 10.4922 45.5078 10.9239 46.0552 11.1264L51.1185 13L46.0552 14.8736C45.5078 15.0761 45.0761 15.5078 44.8736 16.0552L43 21.1185L41.1264 16.0552C40.9239 15.5078 40.4922 15.0761 39.9448 14.8736L34.8815 13L39.9448 11.1264C40.4922 10.9239 40.9239 10.4922 41.1264 9.9448L43 4.88154ZM42.0621 4.53451C42.3843 3.66389 43.6157 3.66389 43.9379 4.5345L45.8114 9.59776C45.9127 9.87148 46.1285 10.0873 46.4022 10.1886L51.4655 12.0621C52.3361 12.3843 52.3361 13.6157 51.4655 13.9379L46.4022 15.8114C46.1285 15.9127 45.9127 16.1285 45.8114 16.4022L43.9379 21.4655C43.6157 22.3361 42.3843 22.3361 42.0621 21.4655L40.1886 16.4022C40.0873 16.1285 39.8715 15.9127 39.5978 15.8114L34.5345 13.9379C33.6639 13.6157 33.6639 12.3843 34.5345 12.0621L39.5978 10.1886C39.8715 10.0873 40.0873 9.87148 40.1886 9.59776L42.0621 4.53451Z", fill: "" }));
}
function Effect(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "46", height: "33", viewBox: "0 0 46 33", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "m47.18242,-3.65343zm-38,8.88154l1.8736,5.06326c0.2025,0.5474 0.6342,0.9791 1.1816,1.1816l5.0633,1.8736l-5.0633,1.8736c-0.5474,0.2025 -0.9791,0.6342 -1.1816,1.1816l-1.8736,5.0633l-1.8736,-5.0633c-0.2025,-0.5474 -0.6342,-0.9791 -1.1816,-1.1816l-5.06326,-1.8736l5.06326,-1.8736c0.5474,-0.2025 0.9791,-0.6342 1.1816,-1.1816l1.8736,-5.06326zm-0.9379,-0.34703c0.3222,-0.87062 1.5536,-0.87062 1.8758,-0.00001l1.8735,5.0633c0.1013,0.2737 0.3171,0.4895 0.5908,0.5908l5.0633,1.8735c0.8706,0.3222 0.8706,1.5536 0,1.8758l-5.0633,1.8735c-0.2737,0.1013 -0.4895,0.3171 -0.5908,0.5908l-1.8735,5.0633c-0.3222,0.8706 -1.5536,0.8706 -1.8758,0l-1.8735,-5.0633c-0.1013,-0.2737 -0.3171,-0.4895 -0.5908,-0.5908l-5.06329,-1.8735c-0.87062,-0.3222 -0.87062,-1.5536 -0.00001,-1.8758l5.0633,-1.8735c0.2737,-0.1013 0.4895,-0.3171 0.5908,-0.5908l1.8735,-5.06329zm17.8115,15.41029l-1.8736,-5.0633l-1.8736,5.0633c-0.2025,0.5474 -0.6342,0.9791 -1.1816,1.1816l-5.0633,1.8736l5.0633,1.8736c0.5474,0.2025 0.9791,0.6342 1.1816,1.1816l1.8736,5.0633l1.8736,-5.0633c0.2025,-0.5474 0.6342,-0.9791 1.1816,-1.1816l5.0633,-1.8736l-5.0633,-1.8736c-0.5474,-0.2025 -0.9791,-0.6342 -1.1816,-1.1816zm-0.9357,-5.4103c-0.3222,-0.8706 -1.5536,-0.8706 -1.8758,0l-1.8735,5.0633c-0.1013,0.2737 -0.3171,0.4895 -0.5908,0.5908l-5.0633,1.8735c-0.8706,0.3222 -0.8706,1.5536 0,1.8758l5.0633,1.8735c0.2737,0.1013 0.4895,0.3171 0.5908,0.5908l1.8735,5.0633c0.3222,0.8706 1.5536,0.8706 1.8758,0l1.8735,-5.0633c0.1013,-0.2737 0.3171,-0.4895 0.5908,-0.5908l5.0633,-1.8735c0.8706,-0.3222 0.8706,-1.5536 0,-1.8758l-5.0633,-1.8735c-0.2737,-0.1013 -0.4895,-0.3171 -0.5908,-0.5908l-1.8735,-5.0633zm11.0621,-13.65296l1.8736,5.06326c0.2025,0.5474 0.6342,0.9791 1.1816,1.1816l5.0633,1.8736l-5.0633,1.8736c-0.5474,0.2025 -0.9791,0.6342 -1.1816,1.1816l-1.8736,5.0633l-1.8736,-5.0633c-0.2025,-0.5474 -0.6342,-0.9791 -1.1816,-1.1816l-5.0633,-1.8736l5.0633,-1.8736c0.5474,-0.2025 0.9791,-0.6342 1.1816,-1.1816l1.8736,-5.06326zm-0.9379,-0.34703c0.3222,-0.87062 1.5536,-0.87062 1.8758,-0.00001l1.8735,5.06326c0.1013,0.27372 0.3171,0.48954 0.5908,0.59084l5.0633,1.8735c0.8706,0.3222 0.8706,1.5536 0,1.8758l-5.0633,1.8735c-0.2737,0.1013 -0.4895,0.3171 -0.5908,0.5908l-1.8735,5.0633c-0.3222,0.8706 -1.5536,0.8706 -1.8758,0l-1.8735,-5.0633c-0.1013,-0.2737 -0.3171,-0.4895 -0.5908,-0.5908l-5.0633,-1.8735c-0.8706,-0.3222 -0.8706,-1.5536 0,-1.8758l5.0633,-1.8735c0.2737,-0.1013 0.4895,-0.31712 0.5908,-0.59084l1.8735,-5.06325z", fill: "" }));
}
function Backgrounds(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "78px", height: "59px", viewBox: "0 0 78 59", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M3 2H75C75.5523 2 76 2.44772 76 3V25.6362L68.5063 32.7893L55.6643 18.4365L54.9851 17.6774L54.2386 18.3705L47.6334 24.504L33.3138 11.2072L32.6449 10.5861L31.9655 11.1958L17.0936 24.5423L12.5854 20.7277L11.9914 20.2251L11.3582 20.6773L2 27.3618V3C2 2.44772 2.44772 2 3 2ZM2 44.3885V55.898C2 56.4502 2.44772 56.898 3 56.898H75C75.5523 56.898 76 56.4502 76 55.898V44.4179L70.3673 42.7281C69.6315 42.5074 68.8478 42.5032 68.1097 42.716L62.7717 44.2552C61.5774 44.5995 60.3057 44.5645 59.1323 44.1549L55.3406 42.8316C54.5367 42.5511 53.6643 42.5343 52.8502 42.7838L48.1375 44.2284C46.9576 44.5901 45.6948 44.5791 44.5213 44.197L40.1648 42.7783C39.397 42.5283 38.5714 42.5165 37.7968 42.7446L32.6112 44.271C31.4845 44.6027 30.2852 44.5963 29.162 44.2528L24.2385 42.7469C23.483 42.5158 22.6759 42.5137 21.9192 42.7407L16.9269 44.2384C15.7429 44.5936 14.4782 44.5744 13.3055 44.1835L9.22505 42.8234C8.40398 42.5497 7.5163 42.5497 6.69523 42.8234L2 44.3885ZM2 42.2803L6.06277 40.926C7.29438 40.5155 8.62591 40.5155 9.85751 40.926L13.9379 42.2862C14.7197 42.5468 15.5629 42.5595 16.3522 42.3227L21.3445 40.8251C22.4796 40.4845 23.6902 40.4878 24.8235 40.8344L29.747 42.3403C30.4957 42.5693 31.2953 42.5735 32.0464 42.3524L37.232 40.826C38.394 40.4839 39.6323 40.5016 40.7841 40.8766L45.1406 42.2953C45.9229 42.55 46.7647 42.5573 47.5514 42.3162L52.2641 40.8716C53.4852 40.4974 54.7938 40.5225 55.9996 40.9433L59.7913 42.2667C60.5736 42.5397 61.4214 42.563 62.2176 42.3335L67.5556 40.7943C68.6627 40.4751 69.8383 40.4814 70.942 40.8125L76 42.3299V28.4011L69.1402 34.9491L68.3931 35.6622L67.7044 34.8925L54.8531 20.5292L44.4567 30.183L43.0958 28.7174L46.1637 25.8686L32.6219 13.294L18.6349 25.8464L22.9324 29.4828L21.6405 31.0095L16.467 26.632L11.8875 22.7571L2 29.8196V42.2803ZM0 3C0 1.34315 1.34315 0 3 0H75C76.6569 0 78 1.34315 78 3V55.898C78 57.5548 76.6569 58.898 75 58.898H3C1.34315 58.898 0 57.5548 0 55.898V3ZM17.6094 13.1832C18.414 11.5742 18.9328 10.7593 19.4551 10.3118C19.8967 9.93322 20.4163 9.75659 21.4905 9.75659C22.0428 9.75659 22.4905 9.30888 22.4905 8.75659C22.4905 8.20431 22.0428 7.75659 21.4905 7.75659C20.177 7.75659 19.1047 7.97793 18.1535 8.79321C17.4662 9.38227 16.9009 10.2384 16.3059 11.3474C13.8336 10.1236 11.0561 10.2073 9.15781 11.0209C8.65018 11.2384 8.41503 11.8263 8.63259 12.334C8.85014 12.8416 9.43802 13.0767 9.94565 12.8592C11.5101 12.1887 14.0696 12.1744 16.1604 13.568L17.1028 14.1963L17.6094 13.1832ZM62.8781 15.5106C64.8505 15.5106 66.4495 13.9116 66.4495 11.9392C66.4495 9.96674 64.8505 8.36776 62.8781 8.36776C60.9056 8.36776 59.3066 9.96674 59.3066 11.9392C59.3066 13.9116 60.9056 15.5106 62.8781 15.5106ZM62.8781 17.5106C65.9551 17.5106 68.4495 15.0162 68.4495 11.9392C68.4495 8.86217 65.9551 6.36776 62.8781 6.36776C59.8011 6.36776 57.3066 8.86217 57.3066 11.9392C57.3066 15.0162 59.8011 17.5106 62.8781 17.5106Z", fill: "" }));
}
function Avatar(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "34px", height: "32px", viewBox: "0 0 34 32", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M25.6612 11.5011H29.071C29.513 11.5011 29.8919 11.8713 29.8919 12.3339V30.1005C29.8919 30.5632 29.513 30.9333 29.0394 30.9333H5.20243C4.72884 30.9333 4.34998 30.5632 4.34998 30.1005V12.3339C4.34998 11.8713 4.72884 11.5011 5.20243 11.5011H8.61222L14.0742 6.62767C13.7901 6.16499 13.6322 5.60979 13.6322 5.02374C13.6322 3.14221 15.2108 1.59998 17.1367 1.59998C19.0626 1.59998 20.6412 3.14221 20.6412 5.02374C20.6412 5.60979 20.4834 6.13415 20.1992 6.62767L25.6612 11.5011ZM18.9363 4.99289C18.9363 4.03671 18.147 3.23475 17.1367 3.23475C16.1264 3.23475 15.3371 4.03671 15.3371 4.99289C15.3371 5.94908 16.158 6.75104 17.1367 6.75104C18.1155 6.75104 18.9363 5.94908 18.9363 4.99289ZM17.1367 8.41666C16.4421 8.41666 15.7791 8.20075 15.2108 7.83061L11.1064 11.4703H23.1354L19.0626 7.83061C18.5259 8.20075 17.8313 8.41666 17.1367 8.41666ZM6.05487 13.1359V29.2677H28.2186V13.1359H6.05487ZM8.51766 15.1407H25.7561C25.9771 15.1407 26.1665 15.3257 26.135 15.5725V26.8308C26.135 27.0467 25.9455 27.2318 25.7245 27.2318H8.51766C8.29666 27.2318 8.10722 27.0467 8.10722 26.8308V15.5416C8.10722 15.3257 8.29666 15.1407 8.51766 15.1407ZM9.78055 25.597H24.4616V16.8063H9.78055V25.597Z", fill: "" }));
}
function Profile(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), viewBox: "0 0 40 57", fill: "none", width: "1em", height: "1em" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("mask", { id: "prefix__a", maskUnits: "userSpaceOnUse", x: -0.2, y: 0.333, width: 40, height: 56 },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M-.2.333h40v56h-40z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M34.237 1.333H5.83c-1.384 0-2.642.57-3.553 1.488A5.067 5.067 0 00.8 6.397v44.271c0 1.394.566 2.66 1.477 3.578a4.998 4.998 0 003.553 1.486h28.407c1.384 0 2.642-.569 3.553-1.486a5.066 5.066 0 001.477-3.578V6.398c0-1.394-.565-2.66-1.477-3.577a4.998 4.998 0 00-3.553-1.488zM5.83 3.022h28.407c.921 0 1.76.38 2.368.992.608.612.986 1.456.986 2.384v44.271c0 .928-.378 1.772-.986 2.384a3.332 3.332 0 01-2.368.992H5.83c-.921 0-1.76-.38-2.367-.992a3.377 3.377 0 01-.986-2.384V6.398c0-.928.377-1.772.986-2.384a3.332 3.332 0 012.367-.992zm.666 30.035c0-.466.376-.844.839-.844h25.398c.463 0 .838.378.838.844a.841.841 0 01-.838.844H7.335a.841.841 0 01-.839-.844zm.839 6.467a.841.841 0 00-.839.844c0 .466.376.844.839.844h25.398a.841.841 0 00.838-.844.841.841 0 00-.838-.844H7.335zm-.839 8.154c0-.466.376-.844.839-.844h25.398c.463 0 .838.378.838.844a.841.841 0 01-.838.844H7.335a.841.841 0 01-.839-.844zm24.51-22.297a15.198 15.198 0 01-4.98 3.495 15.02 15.02 0 01-5.992 1.24 15.02 15.02 0 01-5.992-1.24 15.2 15.2 0 01-5.024-3.54h-.002a.849.849 0 01-.164-.905 9.449 9.449 0 013.373-4.664 9.245 9.245 0 014.391-1.745 5.365 5.365 0 01-1.91-4.114c0-1.481.597-2.822 1.56-3.792a5.293 5.293 0 013.768-1.571c1.47 0 2.802.6 3.766 1.57a5.365 5.365 0 011.56 3.793 5.364 5.364 0 01-1.909 4.114 9.246 9.246 0 014.392 1.745 9.447 9.447 0 013.395 4.733l-.796.257.799-.258a.848.848 0 01-.234.882zm-5.641 1.946a13.502 13.502 0 004.114-2.784 7.774 7.774 0 00-2.626-3.418 7.558 7.558 0 00-4.496-1.48h-4.646c-1.68 0-3.234.55-4.497 1.48a7.775 7.775 0 00-2.626 3.418 13.502 13.502 0 004.115 2.784 13.36 13.36 0 005.33 1.101c1.896 0 3.698-.393 5.331-1.101zm-5.331-17.094c1.008 0 1.92.411 2.58 1.076a3.676 3.676 0 011.07 2.599 3.676 3.676 0 01-1.07 2.598 3.627 3.627 0 01-2.58 1.077 3.627 3.627 0 01-2.581-1.076 3.676 3.676 0 01-1.07-2.6c0-1.014.409-1.933 1.07-2.598a3.627 3.627 0 012.58-1.076z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M34.237 1.333H5.83c-1.384 0-2.642.57-3.553 1.488A5.067 5.067 0 00.8 6.397v44.271c0 1.394.566 2.66 1.477 3.578a4.998 4.998 0 003.553 1.486h28.407c1.384 0 2.642-.569 3.553-1.486a5.066 5.066 0 001.477-3.578V6.398c0-1.394-.565-2.66-1.477-3.577a4.998 4.998 0 00-3.553-1.488zM5.83 3.022h28.407c.921 0 1.76.38 2.368.992.608.612.986 1.456.986 2.384v44.271c0 .928-.378 1.772-.986 2.384a3.332 3.332 0 01-2.368.992H5.83c-.921 0-1.76-.38-2.367-.992a3.377 3.377 0 01-.986-2.384V6.398c0-.928.377-1.772.986-2.384a3.332 3.332 0 012.367-.992zm.666 30.035c0-.466.376-.844.839-.844h25.398c.463 0 .838.378.838.844a.841.841 0 01-.838.844H7.335a.841.841 0 01-.839-.844zm.839 6.467a.841.841 0 00-.839.844c0 .466.376.844.839.844h25.398a.841.841 0 00.838-.844.841.841 0 00-.838-.844H7.335zm-.839 8.154c0-.466.376-.844.839-.844h25.398c.463 0 .838.378.838.844a.841.841 0 01-.838.844H7.335a.841.841 0 01-.839-.844zm24.51-22.297a15.198 15.198 0 01-4.98 3.495 15.02 15.02 0 01-5.992 1.24 15.02 15.02 0 01-5.992-1.24 15.2 15.2 0 01-5.024-3.54h-.002a.849.849 0 01-.164-.905 9.449 9.449 0 013.373-4.664 9.245 9.245 0 014.391-1.745 5.365 5.365 0 01-1.91-4.114c0-1.481.597-2.822 1.56-3.792a5.293 5.293 0 013.768-1.571c1.47 0 2.802.6 3.766 1.57a5.365 5.365 0 011.56 3.793 5.364 5.364 0 01-1.909 4.114 9.246 9.246 0 014.392 1.745 9.447 9.447 0 013.395 4.733l-.796.257.799-.258a.848.848 0 01-.234.882zm-5.641 1.946a13.502 13.502 0 004.114-2.784 7.774 7.774 0 00-2.626-3.418 7.558 7.558 0 00-4.496-1.48h-4.646c-1.68 0-3.234.55-4.497 1.48a7.775 7.775 0 00-2.626 3.418 13.502 13.502 0 004.115 2.784 13.36 13.36 0 005.33 1.101c1.896 0 3.698-.393 5.331-1.101zm-5.331-17.094c1.008 0 1.92.411 2.58 1.076a3.676 3.676 0 011.07 2.599 3.676 3.676 0 01-1.07 2.598 3.627 3.627 0 01-2.58 1.077 3.627 3.627 0 01-2.581-1.076 3.676 3.676 0 01-1.07-2.6c0-1.014.409-1.933 1.07-2.598a3.627 3.627 0 012.58-1.076z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M2.277 2.82l-.355-.352.355.353zm0 51.426l-.355.353.355-.352zm35.513 0l-.355-.352.355.352zm0-51.425l.355-.353-.355.353zm-1.185 1.193l-.355.352.355-.352zm0 49.039l-.355-.352.355.352zM3.463 4.014l.354.352-.354-.352zm22.563 24.862l-.199-.458.2.458zm4.98-3.495l-.175-.468-.108.04-.08.084.364.344zm-16.964 3.495l-.2.46.2-.46zm-5.024-3.54l.364-.343-.345-.367-.364.347.345.362zm-.002 0l-.364.343.344.367.365-.347-.345-.363zm-.164-.905l.462.191.007-.017.006-.019-.475-.155zm3.373-4.664l-.296-.403.296.403zm4.391-1.745l.06.496 1.143-.136-.88-.742-.323.382zm-.349-.322l.355-.352-.355.352zm0-7.584l.355.352-.355-.352zm7.533 0l.355-.353-.355.353zm0 7.584l.355.352-.355-.352zm-.349.322l-.322-.382-.88.742 1.143.136.06-.496zm4.392 1.745l.296-.403-.296.403zm3.395 4.733l.154.475.474-.153-.151-.474-.477.152zm-.796.257l-.153-.476.307.952-.154-.476zm.799-.258l.476-.151-.152-.479-.478.154.154.476zm-.234.882l.175.468.091-.034.072-.066-.338-.368zm-1.528-.838l.352.355.234-.231-.12-.307-.466.183zm-4.114 2.784v.5h.103l.096-.042-.2-.458zm1.488-6.202l.297-.402-.297.402zm-13.639 0l-.296-.402.296.402zm-2.626 3.418l-.465-.183-.12.307.234.231.351-.355zm4.115 2.784l.2-.459-.2.459zm10.662 0v-.5h-.104l-.095.041.198.459zm-2.75-16.018l.355-.352-.355.352zm0 5.197l.355.353-.355-.353zm-5.162 0l.354-.352-.354.352zm0-5.197l.354.353-.355-.353zM5.83 1.834h28.407v-1H5.83v1zM2.632 3.173a4.498 4.498 0 013.198-1.34v-1a5.498 5.498 0 00-3.908 1.635l.71.705zM1.3 6.398c0-1.256.51-2.397 1.332-3.225l-.71-.705A5.567 5.567 0 00.3 6.398h1zm0 44.271V6.398h-1v44.271h1zm1.332 3.225A4.566 4.566 0 011.3 50.67h-1c0 1.532.622 2.923 1.622 3.93l.71-.705zm3.198 1.34a4.498 4.498 0 01-3.198-1.34l-.71.705a5.498 5.498 0 003.908 1.635v-1zm28.407 0H5.83v1h28.407v-1zm3.198-1.34a4.498 4.498 0 01-3.198 1.34v1a5.498 5.498 0 003.908-1.635l-.71-.705zm1.332-3.225c0 1.256-.51 2.397-1.332 3.225l.71.705a5.566 5.566 0 001.622-3.93h-1zm0-44.271v44.271h1V6.398h-1zm-1.332-3.225a4.566 4.566 0 011.332 3.225h1a5.566 5.566 0 00-1.622-3.93l-.71.705zm-3.198-1.34c1.244 0 2.376.512 3.198 1.34l.71-.705A5.498 5.498 0 0034.237.833v1zm0 .689H5.83v1h28.407v-1zm2.722 1.14a3.831 3.831 0 00-2.722-1.14v1c.781 0 1.493.321 2.013.844l.71-.704zm1.131 2.736a3.877 3.877 0 00-1.13-2.736l-.71.704c.52.524.84 1.242.84 2.032h1zm0 44.271V6.398h-1v44.271h1zm-1.13 2.736a3.877 3.877 0 001.13-2.736h-1c0 .79-.32 1.509-.84 2.032l.71.704zm-2.723 1.14a3.832 3.832 0 002.722-1.14l-.709-.704a2.832 2.832 0 01-2.013.844v1zm-28.407 0h28.407v-1H5.83v1zm-2.722-1.14a3.832 3.832 0 002.722 1.14v-1c-.78 0-1.493-.321-2.013-.844l-.71.704zM1.977 50.67c0 1.066.434 2.035 1.13 2.736l.71-.704a2.877 2.877 0 01-.84-2.032h-1zm0-44.271v44.271h1V6.398h-1zm1.13-2.736a3.877 3.877 0 00-1.13 2.736h1c0-.79.32-1.508.84-2.032l-.71-.704zm2.723-1.14a3.832 3.832 0 00-2.722 1.14l.71.704a2.832 2.832 0 012.012-.844v-1zm1.505 29.191c-.743 0-1.339.605-1.339 1.344h1c0-.193.155-.344.339-.344v-1zm25.398 0H7.335v1h25.398v-1zm1.338 1.344c0-.739-.596-1.344-1.338-1.344v1c.184 0 .338.151.338.344h1zm-1.338 1.344c.742 0 1.338-.605 1.338-1.344h-1a.341.341 0 01-.338.344v1zm-25.398 0h25.398v-1H7.335v1zm-1.339-1.344c0 .74.596 1.344 1.339 1.344v-1a.341.341 0 01-.339-.344h-1zm1 7.31c0-.192.155-.343.339-.343v-1c-.743 0-1.339.605-1.339 1.344h1zm.339.345a.341.341 0 01-.339-.344h-1c0 .739.596 1.344 1.339 1.344v-1zm25.398 0H7.335v1h25.398v-1zm.338-.344a.341.341 0 01-.338.344v1c.742 0 1.338-.605 1.338-1.344h-1zm-.338-.344c.184 0 .338.15.338.344h1c0-.74-.596-1.344-1.338-1.344v1zm-25.398 0h25.398v-1H7.335v1zm0 6.31c-.743 0-1.339.605-1.339 1.344h1c0-.193.155-.344.339-.344v-1zm25.398 0H7.335v1h25.398v-1zm1.338 1.344c0-.739-.596-1.344-1.338-1.344v1c.184 0 .338.151.338.344h1zm-1.338 1.344c.742 0 1.338-.605 1.338-1.344h-1a.341.341 0 01-.338.344v1zm-25.398 0h25.398v-1H7.335v1zm-1.339-1.344c0 .74.596 1.344 1.339 1.344v-1a.341.341 0 01-.339-.344h-1zm20.23-18.343a15.697 15.697 0 005.144-3.61l-.726-.688a14.698 14.698 0 01-4.817 3.38l.398.918zm-6.192 1.281c2.197 0 4.29-.456 6.191-1.28l-.398-.918a14.52 14.52 0 01-5.793 1.198v1zm-6.191-1.28a15.52 15.52 0 006.19 1.28v-1a14.52 14.52 0 01-5.792-1.198l-.398.917zm-5.19-3.659a15.7 15.7 0 005.19 3.658l.398-.917a14.7 14.7 0 01-4.859-3.425l-.729.684zm.708.022l.001-.002-.69-.724v.001l.689.725zm-.971-1.46a1.349 1.349 0 00.262 1.44l.729-.685a.349.349 0 01-.067-.372l-.924-.383zm3.539-4.875a9.948 9.948 0 00-3.553 4.912l.951.31a8.949 8.949 0 013.195-4.417l-.593-.805zm4.628-1.839a9.744 9.744 0 00-4.628 1.84l.593.804a8.745 8.745 0 014.153-1.65l-.118-.994zm.381.115a4.884 4.884 0 01-.316-.292l-.71.704c.122.123.25.24.382.352l.644-.764zm-.316-.292a4.864 4.864 0 01-1.415-3.44h-1c0 1.618.652 3.084 1.705 4.144l.71-.704zm-1.415-3.44c0-1.344.54-2.56 1.415-3.44l-.71-.705a5.864 5.864 0 00-1.705 4.145h1zm1.415-3.44a4.792 4.792 0 013.412-1.423v-1c-1.61 0-3.068.657-4.122 1.718l.71.705zm3.412-1.423c1.331 0 2.537.543 3.412 1.423l.709-.705a5.793 5.793 0 00-4.121-1.718v1zm3.411 1.423a4.865 4.865 0 011.415 3.44h1a5.865 5.865 0 00-1.705-4.145l-.71.705zm1.415 3.44c0 1.344-.54 2.56-1.415 3.44l.71.704a5.865 5.865 0 001.705-4.144h-1zm-1.415 3.44c-.1.102-.206.199-.316.292l.644.764c.133-.111.26-.229.382-.352l-.71-.704zm4.694 2.016a9.745 9.745 0 00-4.629-1.839l-.118.993a8.745 8.745 0 014.154 1.651l.593-.805zm3.576 4.984a9.946 9.946 0 00-3.576-4.984l-.593.805a8.947 8.947 0 013.216 4.482l.953-.303zm-1.119.884l.796-.257-.308-.951-.795.257.307.951zm.491-1.209l-.798.258.307.952.798-.258-.307-.952zm.258 1.726c.373-.343.537-.885.372-1.401l-.953.303a.348.348 0 01-.095.362l.676.736zm-.163.1l-.35-.936.35.936zm-2.054-1.662a13.002 13.002 0 01-3.962 2.681l.398.917a14.002 14.002 0 004.267-2.887l-.703-.711zm-2.571-2.66a7.275 7.275 0 012.457 3.198l.931-.365a8.275 8.275 0 00-2.795-3.637l-.593.805zm-4.2-1.382c1.568 0 3.02.514 4.2 1.383l.593-.805a8.058 8.058 0 00-4.793-1.578v1zm-4.646 0h4.646v-1h-4.646v1zm-4.2 1.383a7.059 7.059 0 014.2-1.383v-1c-1.79 0-3.449.587-4.793 1.578l.593.805zm-2.457 3.197a7.275 7.275 0 012.457-3.197l-.593-.805a8.275 8.275 0 00-2.795 3.637l.93.365zm3.848 2.143a13.003 13.003 0 01-3.962-2.681l-.703.711a14.002 14.002 0 004.267 2.887l.398-.917zm5.132 1.06a12.86 12.86 0 01-5.132-1.06l-.398.917a13.86 13.86 0 005.53 1.143v-1zm5.132-1.06a12.858 12.858 0 01-5.132 1.06v1a13.86 13.86 0 005.53-1.143l-.398-.917zm.199-.041v1-1zm-2.396-15.87a4.127 4.127 0 00-2.935-1.224v1c.869 0 1.655.354 2.226.928l.71-.704zm1.215 2.95a4.177 4.177 0 00-1.215-2.95l-.71.704c.572.575.925 1.369.925 2.247h1zm-1.215 2.952a4.176 4.176 0 001.215-2.951h-1c0 .878-.353 1.671-.924 2.246l.71.705zm-2.935 1.224a4.127 4.127 0 002.936-1.224l-.71-.705a3.126 3.126 0 01-2.226.929v1zm-2.936-1.224a4.127 4.127 0 002.936 1.224v-1a3.126 3.126 0 01-2.227-.929l-.71.705zm-1.215-2.951c0 1.152.465 2.196 1.215 2.95l.71-.704a3.176 3.176 0 01-.925-2.246h-1zm1.215-2.951a4.176 4.176 0 00-1.215 2.95h1c0-.877.353-1.67.924-2.245l-.71-.705zm2.936-1.224a4.127 4.127 0 00-2.936 1.224l.71.705a3.127 3.127 0 012.226-.93v-1z", mask: "url(#prefix__a)" })));
}
function Badge(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "46px", height: "62px", viewBox: "0 0 46 62", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M24.425 1.87316L27.6636 5.16235C28.5084 6.02034 29.6947 6.45213 30.8934 6.33789L35.4885 5.89995C36.6002 5.794 37.5833 6.61889 37.672 7.73207L38.0386 12.3335C38.1343 13.5337 38.7655 14.6271 39.7571 15.31L43.5587 17.9282C44.4784 18.5616 44.7013 19.8255 44.0537 20.7352L41.3768 24.4958C40.6786 25.4767 40.4594 26.72 40.78 27.8806L42.0092 32.3299C42.3066 33.4063 41.6649 34.5176 40.5841 34.7983L36.1163 35.9584C34.9508 36.261 33.9837 37.0725 33.4833 38.1677L31.565 42.3662C31.101 43.3819 29.895 43.8208 28.8867 43.341L24.7184 41.3579C23.6311 40.8405 22.3687 40.8405 21.2814 41.3579L17.1131 43.341C16.1047 43.8208 14.8988 43.3819 14.4347 42.3662L12.5164 38.1677C12.0161 37.0725 11.0489 36.261 9.88351 35.9584L5.41569 34.7983C4.33483 34.5176 3.69318 33.4063 3.99056 32.3299L5.21979 27.8806C5.54043 26.72 5.32121 25.4767 4.62295 24.4958L1.9461 20.7352C1.29852 19.8255 1.52136 18.5617 2.44105 17.9282L6.24264 15.31C7.23429 14.6271 7.86553 13.5337 7.96117 12.3335L8.32782 7.73206C8.41652 6.61889 9.39959 5.794 10.5112 5.89995L15.1064 6.33789C16.305 6.45213 17.4914 6.02034 18.3362 5.16235L21.5748 1.87316C22.3582 1.07744 23.6415 1.07744 24.425 1.87316ZM20.8622 1.17156C22.0374 -0.0220298 23.9624 -0.0220289 25.1376 1.17156L28.3762 4.46075C29.0098 5.10424 29.8995 5.42808 30.7985 5.34241L35.3937 4.90446C37.0612 4.74554 38.5358 5.98288 38.6688 7.65264L39.0355 12.254C39.1072 13.1542 39.5806 13.9742 40.3243 14.4865L44.1259 17.1047C45.5055 18.0548 45.8397 19.9505 44.8684 21.3151L42.1915 25.0757C41.6678 25.8114 41.5034 26.7438 41.7439 27.6143L42.9731 32.0636C43.4192 33.6782 42.4567 35.3452 40.8354 35.7662L36.3676 36.9263C36.0989 36.9961 35.8442 37.1019 35.6095 37.2389L42.0805 56.2205C42.5334 57.5492 41.0763 58.7164 39.8785 57.9845L34.3458 54.6034C34.0661 54.4324 33.7003 54.5724 33.6061 54.8863L31.865 60.6901C31.4472 62.0828 29.4909 62.126 29.012 60.7531L22.9999 43.5185L16.9878 60.7531C16.5089 62.126 14.5526 62.0828 14.1348 60.6901L12.3936 54.8863C12.2994 54.5724 11.9337 54.4324 11.654 54.6034L6.12127 57.9845C4.9235 58.7164 3.46639 57.5492 3.91933 56.2205L10.3903 37.2389C10.1556 37.1019 9.90091 36.9961 9.63218 36.9263L5.16437 35.7662C3.54308 35.3452 2.5806 33.6782 3.02667 32.0636L4.2559 27.6143C4.49638 26.7439 4.33196 25.8114 3.80827 25.0757L1.13142 21.3151C0.160044 19.9505 0.494311 18.0548 1.87384 17.1047L5.67543 14.4865C6.41917 13.9742 6.8926 13.1542 6.96433 12.254L7.33098 7.65263C7.46402 5.98288 8.93863 4.74554 10.6061 4.90446L15.2013 5.34241C16.1003 5.42808 16.99 5.10424 17.6236 4.46075L20.8622 1.17156ZM34.3929 38.5833C34.4993 38.3504 34.6338 38.1347 34.7919 37.9398L41.1339 56.5432C41.2849 56.9861 40.7992 57.3752 40.4 57.1312L34.8672 53.7501C34.0281 53.2373 32.9309 53.6571 32.6483 54.599L30.9072 60.4027C30.7679 60.867 30.1158 60.8814 29.9562 60.4238L23.5356 42.0181C23.7936 42.0649 24.047 42.1458 24.2888 42.2609L28.457 44.244C29.9696 44.9637 31.7785 44.3053 32.4746 42.7818L34.3929 38.5833ZM22.9999 42.0004L22.9156 41.9711C22.9718 41.9695 23.028 41.9695 23.0841 41.9711L22.9999 42.0004ZM11.2079 37.9398L4.86584 56.5432C4.71486 56.9861 5.20057 57.3752 5.59982 57.1312L11.1326 53.7501C11.9716 53.2373 13.0689 53.6571 13.3515 54.599L15.0926 60.4027C15.2319 60.867 15.884 60.8814 16.0436 60.4238L22.4642 42.0181C22.2061 42.0649 21.9528 42.1458 21.711 42.2609L17.5428 44.244C16.0302 44.9637 14.2213 44.3053 13.5252 42.7818L11.6069 38.5833C11.5005 38.3504 11.366 38.1347 11.2079 37.9398ZM33.9999 23.0004C33.9999 29.0756 29.075 34.0005 22.9999 34.0005C16.9248 34.0005 11.9999 29.0756 11.9999 23.0004C11.9999 16.9253 16.9248 12.0004 22.9999 12.0004C29.075 12.0004 33.9999 16.9253 33.9999 23.0004ZM34.9999 23.0004C34.9999 29.6279 29.6273 35.0005 22.9999 35.0005C16.3725 35.0005 10.9999 29.6279 10.9999 23.0004C10.9999 16.373 16.3725 11.0004 22.9999 11.0004C29.6273 11.0004 34.9999 16.373 34.9999 23.0004Z" }));
}
function TimeWarning(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ width: "29", height: "26", viewBox: "0 0 29 26", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M18.6753 0C13.7187 0 9.58825 3.59513 8.90967 8.25443C9.11619 8.22567 9.32272 8.19691 9.55875 8.19691C11.1224 8.19691 12.5681 9.00221 13.3647 10.2965L18.7934 19.1836C24.163 19.0974 28.5 14.8407 28.5 9.57744C28.5295 4.31416 24.104 0 18.6753 0ZM22.7468 10.6704H18.6753C18.0558 10.6704 17.5837 10.1814 17.5837 9.6062V4.63053C17.5837 4.02655 18.0853 3.56637 18.6753 3.56637C19.2949 3.56637 19.767 4.05531 19.767 4.63053V8.54204H22.7468C23.3664 8.54204 23.8385 9.03098 23.8385 9.6062C23.868 10.2102 23.3664 10.6704 22.7468 10.6704Z", fill: "#E1E7EA" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M11.3288 11.5332C10.5322 10.2389 8.58496 10.2389 7.78836 11.5332L0.796018 22.9801C-0.0300818 24.3031 0.973039 26 2.56623 26H16.5804C18.1736 26 19.1472 24.3031 18.3506 22.9801L11.3288 11.5332ZM9.47007 14.1217C10.1191 14.0642 10.6797 14.5243 10.7092 15.1571C10.7092 15.2146 10.7092 15.3009 10.7092 15.3584L10.3257 19.6438C10.2962 20.0465 9.91262 20.3628 9.49957 20.3341C9.11602 20.3053 8.82099 20.0177 8.79148 19.6438L8.40794 15.3584C8.34893 14.7257 8.82099 14.1792 9.47007 14.1217ZM9.55858 23.6704C8.87999 23.6704 8.31943 23.1239 8.31943 22.4624C8.31943 21.8009 8.87999 21.2544 9.55858 21.2544C10.2372 21.2544 10.7977 21.8009 10.7977 22.4624C10.7977 23.1239 10.2372 23.6704 9.55858 23.6704Z", fill: "#E1E7EA" }));
}
function RewardsIcon(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className, 'SVGIcon_Button'), width: "1em", height: "1em", viewBox: "0 0 148 148", fill: "none" }, rest),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M151.309 62.585L87.852.305 25.31 63.348l12.204 12.365 50.338-49.458 63.457 61.059V62.585z", fill: "#189AD3" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M151.309 62.585L87.852.305 25.31 63.348l12.204 12.365 50.338-49.458 63.457 61.059V62.585z", fill: "url(#prefix__paint0_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M151.309 62.585L87.852.305 25.31 63.348l12.204 12.365 50.338-49.458 63.457 61.059V62.585z", fill: "url(#prefix__paint1_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M88.31 0H63.444L.294 63.501l62.236 62.891 13.424-12.823L25.31 63.501 88.31 0z", fill: "#B1AEAE" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M88.31 0H63.444L.294 63.501l62.236 62.891 13.424-12.823L25.31 63.501 88.31 0z", fill: "url(#prefix__paint2_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M88.31 0H63.444L.294 63.501l62.236 62.891 13.424-12.823L25.31 63.501 88.31 0z", fill: "url(#prefix__paint3_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M87.547 26.255L75.954 38.162l50.033 49.152-63.457 63.501h25.017l63.914-63.501-63.914-61.059z", fill: "#B1AEAE" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M87.547 26.255L75.954 38.162l50.033 49.152-63.457 63.501h25.017l63.914-63.501-63.914-61.059z", fill: "url(#prefix__paint4_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M87.547 26.255L75.954 38.162l50.033 49.152-63.457 63.501h25.017l63.914-63.501-63.914-61.059z", fill: "url(#prefix__paint5_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M.904 88.23V63.5l61.931 62.585 51.406-50.22 11.746 11.448-63.152 63.196L.904 88.23z", fill: "#1351CB" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M.904 88.23V63.5l61.931 62.585 51.406-50.22 11.746 11.448-63.152 63.196L.904 88.23z", fill: "url(#prefix__paint6_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M.904 88.23V63.5l61.931 62.585 51.406-50.22 11.746 11.448-63.152 63.196L.904 88.23z", fill: "url(#prefix__paint7_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("defs", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint0_linear", x1: 88.309, y1: 0.305, x2: 39.697, y2: 70.698, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.458, stopColor: "#2682D7" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.88, stopColor: "#13538E" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#0F2C64" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint1_linear", x1: 151.461, y1: 63.725, x2: 113.241, y2: 31.243, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.005, stopColor: "#114B82" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.672, stopColor: "#1974C7" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#166588", stopOpacity: 0 })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint2_linear", x1: 72.598, y1: 0, x2: 151.522, y2: 89.161, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "#9D99A9" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.484, stopColor: "#DFDEE1" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.734, stopColor: "#6D6B74" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#22202D" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint3_linear", x1: 65.886, y1: 141.046, x2: 80.542, y2: 158.743, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.531, stopColor: "#7B7474", stopOpacity: 0 }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#535661" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint4_linear", x1: 72.598, y1: 0, x2: 151.522, y2: 89.161, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "#9D99A9" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.484, stopColor: "#DFDEE1" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.734, stopColor: "#6D6B74" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#22202D" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint5_linear", x1: 65.886, y1: 141.046, x2: 80.542, y2: 158.743, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.531, stopColor: "#7B7474", stopOpacity: 0 }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#535661" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint6_linear", x1: 0.904, y1: 81.208, x2: 80.116, y2: 82.127, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "#234BB3" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.068, stopColor: "#032939" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.547, stopColor: "#45556D", stopOpacity: 0.737 }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#fff", stopOpacity: 0 })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "prefix__paint7_linear", x1: 126.031, y1: 88.506, x2: 75.005, y2: 136.736, gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.089, stopColor: "#0D66A6" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 0.402, stopColor: "#6699D5" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: 1, stopColor: "#fff", stopOpacity: 0 })))));
}
function TopOfQueue(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "arrow" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", x1: "129", y1: "232", x2: "129", y2: "74" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("polyline", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", points: "83.75,116.375 129,74 174.25,116.375 " })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: "top" },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("line", { fill: "none", stroke: "#ffffff", strokeWidth: "12", strokeLinecap: "round", strokeMiterlimit: "10", x1: "40", y1: "44", x2: "216", y2: "44" }))));
}
function AwardIcon(props) {
    const { className, color } = props;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(className), width: "13", height: "21", viewBox: "0 0 13 21", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: color || "#ffc83d", fillRule: "evenodd", clipRule: "evenodd", d: "M5.80814 0.197492L5.19324 0.62086C4.96265 0.774812 4.69363 0.851788 4.38619 0.8133L3.92501 0.736324C3.42541 0.697836 2.96424 0.928764 2.73365 1.39062L2.4262 2.04492C2.27248 2.31433 2.08032 2.50677 1.8113 2.62224L1.38856 2.81468C0.92739 3.00712 0.658372 3.46897 0.696803 3.96932L0.735234 4.70059C0.773665 5.00849 0.696803 5.23942 0.504648 5.47035L0.23563 5.85523C-0.0718184 6.24011 -0.0718184 6.77894 0.197199 7.20231L0.619941 7.81812C0.773665 8.04904 0.812097 8.31846 0.812097 8.62636L0.735234 9.08822C0.696803 9.58856 0.92739 10.0504 1.38856 10.2813L2.04189 10.5893C2.31091 10.7432 2.50306 10.9356 2.61836 11.2051L2.77208 11.6284C3.00267 12.0903 3.42541 12.3597 3.96344 12.3212L4.69363 12.2827C4.96265 12.2442 5.23167 12.3212 5.46226 12.5137L5.84657 12.7831C6.23088 13.091 6.76891 13.091 7.19165 12.8216L7.80655 12.3982C8.03714 12.2442 8.30616 12.2057 8.57517 12.2057L9.03635 12.2827C9.53595 12.3212 10.0356 12.0903 10.2277 11.6284L10.5736 10.9741C10.6889 10.7047 10.881 10.5123 11.1501 10.3968L11.5728 10.2429C12.034 10.0119 12.3414 9.58856 12.303 9.04973L12.2646 8.31846C12.2261 8.04904 12.303 7.77963 12.4951 7.5487L12.7642 7.16382C13.0716 6.77894 13.0716 6.24011 12.8026 5.81674L12.3798 5.20093C12.2261 4.97 12.1493 4.70059 12.1877 4.43117L12.2646 3.96932C12.303 3.46897 12.0724 2.96863 11.6112 2.77619L10.9579 2.4298C10.6889 2.31433 10.4967 2.12189 10.3814 1.85248L10.1893 1.42911C9.99712 0.967252 9.53595 0.659348 9.03635 0.697836L8.30616 0.736324C7.99871 0.774812 7.76812 0.697836 7.53753 0.505396L7.15322 0.23598C6.76891 -0.0719243 6.23088 -0.0719243 5.80814 0.197492ZM6.4999 2.69921C4.38619 2.69921 2.65679 4.39268 2.65679 6.50952C2.65679 8.62636 4.38619 10.3583 6.4999 10.3583C8.6136 10.3583 10.3046 8.62636 10.3046 6.50952C10.3046 4.39268 8.6136 2.69921 6.4999 2.69921Z" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: color || "#ffc83d", fillRule: "evenodd", clipRule: "evenodd", d: "M3.04084 12.7833V20.096L6.49963 17.6328L9.95843 20.096V12.7833C9.65098 12.8988 9.3051 12.9758 8.95922 12.9373L8.53648 12.8603C8.38276 12.8603 8.26746 12.8988 8.15217 12.9758L7.53727 13.3606C6.88394 13.784 6.07689 13.784 5.42356 13.3222L5.07768 13.0143C4.96239 12.9373 4.8471 12.9373 4.7318 12.9373L4.00161 12.9758C3.65573 12.9758 3.30985 12.9373 3.04084 12.7833Z" })));
}
function LoyaltyCoinIcon(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { className: className, width: "32", height: "32", viewBox: "0 0 32 32", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "16", fill: "#BDCCDB" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "16", fill: "url(#paint0_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "14.2745", fill: "#98A8B7" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "14.2745", fill: "url(#paint1_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "14.2745", stroke: "#7A92A9" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "11.1309", fill: "#BDCCDB" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "11.1309", fill: "url(#paint2_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "10.2107", fill: "#5792C8" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "16", cy: "16", r: "10.2107", fill: "url(#paint3_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20.6016 17.9523C22.8425 17.9523 24.6591 16.1357 24.6591 13.8948C24.6591 11.6539 22.8425 9.83727 20.6016 9.83727C18.3607 9.83727 16.5441 11.6539 16.5441 13.8948C16.5441 13.9609 16.5457 14.0266 16.5488 14.0919L14.0477 17.6314C14.0205 17.6306 13.9933 17.6303 13.966 17.6303C13.2606 17.6303 12.6127 17.8767 12.1038 18.2882L6.33398 15.9235C6.33398 17.4638 6.62381 19.1438 6.97803 19.5302C7.16531 19.7345 9.1256 20.4564 11.0502 21.127C11.3013 22.5093 12.5112 23.5574 13.966 23.5574C15.6027 23.5574 16.9296 22.2306 16.9296 20.5939C16.9296 20.5326 16.9277 20.4717 16.924 20.4113L20.2613 17.9382C20.3735 17.9475 20.487 17.9523 20.6016 17.9523ZM12.1995 21.5232C12.5338 22.1572 13.1994 22.5894 13.966 22.5894C15.0681 22.5894 15.9615 21.696 15.9615 20.5939C15.9615 19.4917 15.0681 18.5983 13.966 18.5983C13.7007 18.5983 13.4475 18.65 13.216 18.744L14.1914 19.1438L14.1886 19.1617C14.8832 19.2688 15.4151 19.8692 15.4151 20.5939C15.4151 21.3942 14.7663 22.043 13.966 22.043C13.8901 22.043 13.8157 22.0371 13.743 22.0259L13.7405 22.042L13.6136 21.9998C13.5414 21.9818 13.4713 21.9583 13.4038 21.9299C13.0402 21.8084 12.6309 21.6704 12.1995 21.5232ZM20.6016 16.5998C22.0956 16.5998 23.3066 15.3887 23.3066 13.8948C23.3066 12.4008 22.0956 11.1898 20.6016 11.1898C19.1077 11.1898 17.8966 12.4008 17.8966 13.8948C17.8966 15.3887 19.1077 16.5998 20.6016 16.5998ZM22.4 13.8948C22.4 14.888 21.5948 15.6932 20.6016 15.6932C19.6083 15.6932 18.8032 14.888 18.8032 13.8948C18.8032 12.9015 19.6083 12.0964 20.6016 12.0964C21.5948 12.0964 22.4 12.9015 22.4 13.8948Z", fill: "#BDCCDB" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M20.6016 17.9523C22.8425 17.9523 24.6591 16.1357 24.6591 13.8948C24.6591 11.6539 22.8425 9.83727 20.6016 9.83727C18.3607 9.83727 16.5441 11.6539 16.5441 13.8948C16.5441 13.9609 16.5457 14.0266 16.5488 14.0919L14.0477 17.6314C14.0205 17.6306 13.9933 17.6303 13.966 17.6303C13.2606 17.6303 12.6127 17.8767 12.1038 18.2882L6.33398 15.9235C6.33398 17.4638 6.62381 19.1438 6.97803 19.5302C7.16531 19.7345 9.1256 20.4564 11.0502 21.127C11.3013 22.5093 12.5112 23.5574 13.966 23.5574C15.6027 23.5574 16.9296 22.2306 16.9296 20.5939C16.9296 20.5326 16.9277 20.4717 16.924 20.4113L20.2613 17.9382C20.3735 17.9475 20.487 17.9523 20.6016 17.9523ZM12.1995 21.5232C12.5338 22.1572 13.1994 22.5894 13.966 22.5894C15.0681 22.5894 15.9615 21.696 15.9615 20.5939C15.9615 19.4917 15.0681 18.5983 13.966 18.5983C13.7007 18.5983 13.4475 18.65 13.216 18.744L14.1914 19.1438L14.1886 19.1617C14.8832 19.2688 15.4151 19.8692 15.4151 20.5939C15.4151 21.3942 14.7663 22.043 13.966 22.043C13.8901 22.043 13.8157 22.0371 13.743 22.0259L13.7405 22.042L13.6136 21.9998C13.5414 21.9818 13.4713 21.9583 13.4038 21.9299C13.0402 21.8084 12.6309 21.6704 12.1995 21.5232ZM20.6016 16.5998C22.0956 16.5998 23.3066 15.3887 23.3066 13.8948C23.3066 12.4008 22.0956 11.1898 20.6016 11.1898C19.1077 11.1898 17.8966 12.4008 17.8966 13.8948C17.8966 15.3887 19.1077 16.5998 20.6016 16.5998ZM22.4 13.8948C22.4 14.888 21.5948 15.6932 20.6016 15.6932C19.6083 15.6932 18.8032 14.888 18.8032 13.8948C18.8032 12.9015 19.6083 12.0964 20.6016 12.0964C21.5948 12.0964 22.4 12.9015 22.4 13.8948Z", fill: "url(#paint4_linear)" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("defs", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "paint0_linear", x1: "8.4375", y1: "1.75", x2: "23.1875", y2: "22.9375", gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "white", stopOpacity: "0.54" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "1", stopColor: "white", stopOpacity: "0" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "paint1_linear", x1: "9", y1: "3.125", x2: "22.4375", y2: "24.625", gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "white", stopOpacity: "0.25" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "1", stopColor: "white", stopOpacity: "0" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "paint2_linear", x1: "10.3125", y1: "6.375", x2: "19.6875", y2: "23.125", gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "white", stopOpacity: "0.65" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "1", stopColor: "white", stopOpacity: "0" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "paint3_linear", x1: "10", y1: "8", x2: "20.5", y2: "26.2107", gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "#72A5D3" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "1", stopColor: "#4F7294" })),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("linearGradient", { id: "paint4_linear", x1: "12.1875", y1: "13.5625", x2: "18.5625", y2: "23.5574", gradientUnits: "userSpaceOnUse" },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { stopColor: "white", stopOpacity: "0.44" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("stop", { offset: "1", stopColor: "white", stopOpacity: "0" })))));
}
function RSS() {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { height: "100px", width: "100px", fill: "#000000", x: "0px", y: "0px", viewBox: "0 0 101 101", enableBackground: "new 0 0 101 101", xmlns: "http://www.w3.org/2000/svg", version: "1.1" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M16.929,30.115 M84.446,84.262c0-37.271-30.323-67.613-67.587-67.613l0,0l0.069,13.467   c29.777,0.039,53.995,24.256,54.051,54.042L84.446,84.262z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M16.843,53.089 M61.472,84.262c0-24.616-20.026-44.639-44.628-44.639l0,0v13.466c17.182,0,31.161,13.984,31.161,31.173   H61.472z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { cx: "26.695", cy: "74.305", r: "9.812" }))));
}
function Wishlist(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({}, props, { height: '24px', width: '24px', viewBox: '0 0 24 24', x: '0px', y: '0px' }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: 'white', d: "M3.3,0.5v23h17.5v-23H3.3z M10.2,9.6l-3-2.2h3.7L12,3.9l1.2,3.6H17l-3,2.2l1.2,3.6L12,11l-3,2.2L10.2,9.6z M17.3,16.1 M17.4,18H6.6v-1.2h10.7L17.4,18L17.4,18z M17.3,19.9" }));
}
function BroadcastModerator() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 32 32", enableBackground: "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M24.68,19.53l6.9-5.69c0.98-0.81,0.47-2.39-0.81-2.46l-8.89-0.54c-0.54-0.03-1.01-0.37-1.21-0.88L17.4,1.61\r\n\t\t\tc-0.47-1.18-2.12-1.18-2.59,0l-3.27,8.32c-0.2,0.51-0.67,0.84-1.21,0.88l-8.92,0.54c-1.28,0.07-1.78,1.65-0.81,2.46l6.9,5.66\r\n\t\t\tc0.4,0.34,0.61,0.91,0.47,1.41l-2.26,8.65c-0.3,1.21,1.01,2.19,2.09,1.52l7.51-4.81c0.47-0.3,1.04-0.3,1.48,0l7.54,4.81\r\n\t\t\tc1.08,0.67,2.39-0.3,2.09-1.52l-2.26-8.62C24.07,20.4,24.24,19.86,24.68,19.53z" }));
}
function BroadcastContributor() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 32 32", enableBackground: "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M28.4,1.49H3.79c-1.99,0-3.6,1.61-3.6,3.6v14.88c0,1.99,1.61,3.6,3.6,3.6h2.37c0,1.61-0.38,3.7-1.51,5.88\r\n\t\t\tc-0.28,0.57-0.19,1.33,0.19,1.8c0.28,0.38,0.76,0.47,1.14,0.47c0.19,0,0.38,0,0.57-0.09c4.07-1.61,7.57-5.59,9.47-8.05h12.4\r\n\t\t\tc1.99,0,3.6-1.61,3.6-3.6V5.1C31.91,3.11,30.3,1.49,28.4,1.49z M8.23,14.97c-1.33,0-2.37-1.04-2.37-2.37s1.04-2.37,2.37-2.37\r\n\t\t\ts2.37,1.04,2.37,2.37S9.56,14.97,8.23,14.97z M15.99,14.97c-1.33,0-2.37-1.04-2.37-2.37s1.04-2.37,2.37-2.37\r\n\t\t\tc1.33,0,2.37,1.04,2.37,2.37S17.32,14.97,15.99,14.97z M23.85,14.97c-1.33,0-2.37-1.04-2.37-2.37s1.04-2.37,2.37-2.37\r\n\t\t\tc1.33,0,2.37,1.04,2.37,2.37S25.18,14.97,23.85,14.97z" })));
}
function BroadcastBroadcaster() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 32 32", enableBackground: "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M23.32,28.28C23,25.55,20.68,23.52,18,23.52h-3.78c-2.73,0-5,2.03-5.33,4.76L8.56,30.8h15.09L23.32,28.28z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M16.08,22.15c2.82,0,5.1-2.28,5.1-5.1c0-2.82-2.28-5.1-5.1-5.1s-5.1,2.28-5.1,5.1\r\n\t\t\tC10.98,19.86,13.27,22.15,16.08,22.15z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M24.09,10.21c-0.94-1.22-2.18-2.23-3.57-2.9c-1.39-0.68-2.94-1.02-4.48-1.01l-0.02,0L16,6.3\r\n\t\t\t\tc-0.03,0-0.05,0-0.08,0c-1.52,0-3.04,0.35-4.4,1.01c-1.39,0.68-2.62,1.68-3.57,2.9c-0.94,1.22-1.6,2.67-1.91,4.18\r\n\t\t\t\tc-0.3,1.51-0.25,3.1,0.15,4.59c0.14,0.55,0.62,0.92,1.18,0.92c0.01,0,0.02,0,0.04,0h0.27l0.03-0.01c0.32-0.08,0.59-0.29,0.76-0.57\r\n\t\t\t\tl0.07-0.1c0.14-0.21,0.18-0.46,0.11-0.7L8.6,18.38c-0.18-0.62-0.27-1.27-0.29-1.92c0-4.24,3.45-7.68,7.69-7.68h0.04\r\n\t\t\t\tc4.24,0,7.69,3.45,7.69,7.68c-0.02,0.65-0.11,1.3-0.29,1.92l-0.04,0.15c-0.07,0.24-0.03,0.49,0.11,0.7l0.07,0.1\r\n\t\t\t\tc0.17,0.28,0.44,0.49,0.76,0.57l0.03,0.01l0.26,0c0.01,0,0.02,0,0.04,0c0.56,0,1.04-0.37,1.18-0.92c0.4-1.49,0.46-3.08,0.15-4.59\r\n\t\t\t\tC25.69,12.88,25.04,11.44,24.09,10.21z" }),
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M16.02,0.68c-8.83,0-15.99,7.16-16,15.99h0.01c-0.02,2.68,0.74,5.31,2.18,7.57l0,0.01l0.01,0.01\r\n\t\t\t\tc0.37,0.43,1,0.51,1.47,0.19c0.47-0.32,0.62-0.94,0.36-1.44l0,0l0,0c-1.19-1.89-1.81-4.09-1.79-6.32v0v0\r\n\t\t\t\tc0-7.6,6.16-13.76,13.76-13.76c7.6,0,13.76,6.16,13.76,13.76v0v0c0.03,2.24-0.59,4.43-1.79,6.32l0,0l0,0\r\n\t\t\t\tc-0.26,0.5-0.11,1.12,0.36,1.44c0.47,0.32,1.1,0.24,1.47-0.19l0.01-0.01l0-0.01c1.45-2.26,2.2-4.89,2.18-7.57h0.01\r\n\t\t\t\tC32.02,7.84,24.86,0.68,16.02,0.68" }))));
}
function BroadcastAdminOfficer() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 32 32", enableBackground: "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M19.39,8.13c-1.67,0-3.03,1.36-3.03,3.03c0,1.67,1.36,3.03,3.03,3.03c1.67,0,3.03-1.36,3.03-3.03\r\n\t\tC22.42,9.5,21.06,8.13,19.39,8.13z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M27.97,4.82c-4.73,0-8.86-1.62-11.34-4.45c-0.24-0.28-0.61-0.43-0.98-0.39c-0.37,0.03-0.7,0.24-0.89,0.55\r\n\t\tc-0.81,1.32-2.4,2.44-4.61,3.23C8.27,4.44,6.05,4.82,4.07,4.82c-0.64,0-1.16,0.52-1.16,1.16v14.2c0,1.19,0.39,2.55,1.13,3.93\r\n\t\tc0.69,1.29,1.68,2.58,2.84,3.71c2.64,2.57,5.87,4.09,8.85,4.15c0.07,0,0.14,0,0.2,0c3.02,0,6.29-1.43,9-3.96\r\n\t\tc1.23-1.14,2.26-2.45,3-3.77c0.78-1.41,1.2-2.82,1.2-4.06V5.99C29.14,5.35,28.61,4.82,27.97,4.82z M19.39,15.86\r\n\t\tc-1,0-1.92-0.3-2.7-0.83l-3.86,3.86l1.74,1.74l0.04,0.04l-0.04,0.04l-1.08,1.08l-0.04,0.04l-0.04-0.04l-1.74-1.74l-1.93,1.93\r\n\t\tl1.74,1.74l0.04,0.04l-0.04,0.04l-1.08,1.08l-0.04,0.04l-0.04-0.04l-2.86-2.86l-0.04-0.04l0.04-0.04l8.08-8.08\r\n\t\tc-0.53-0.77-0.83-1.7-0.83-2.7c0-2.58,2.11-4.69,4.69-4.69c2.58,0,4.69,2.11,4.69,4.69C24.08,13.75,21.97,15.86,19.39,15.86z" })));
}
function VACShield() {
    // FIXME help
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 32 32", enableBackground: "new 0 0 32 32" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M19.39,8.13c-1.67,0-3.03,1.36-3.03,3.03c0,1.67,1.36,3.03,3.03,3.03c1.67,0,3.03-1.36,3.03-3.03\r\n\t\tC22.42,9.5,21.06,8.13,19.39,8.13z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "white", d: "M27.97,4.82c-4.73,0-8.86-1.62-11.34-4.45c-0.24-0.28-0.61-0.43-0.98-0.39c-0.37,0.03-0.7,0.24-0.89,0.55\r\n\t\tc-0.81,1.32-2.4,2.44-4.61,3.23C8.27,4.44,6.05,4.82,4.07,4.82c-0.64,0-1.16,0.52-1.16,1.16v14.2c0,1.19,0.39,2.55,1.13,3.93\r\n\t\tc0.69,1.29,1.68,2.58,2.84,3.71c2.64,2.57,5.87,4.09,8.85,4.15c0.07,0,0.14,0,0.2,0c3.02,0,6.29-1.43,9-3.96\r\n\t\tc1.23-1.14,2.26-2.45,3-3.77c0.78-1.41,1.2-2.82,1.2-4.06V5.99C29.14,5.35,28.61,4.82,27.97,4.82z M19.39,15.86\r\n\t\tc-1,0-1.92-0.3-2.7-0.83l-3.86,3.86l1.74,1.74l0.04,0.04l-0.04,0.04l-1.08,1.08l-0.04,0.04l-0.04-0.04l-1.74-1.74l-1.93,1.93\r\n\t\tl1.74,1.74l0.04,0.04l-0.04,0.04l-1.08,1.08l-0.04,0.04l-0.04-0.04l-2.86-2.86l-0.04-0.04l0.04-0.04l8.08-8.08\r\n\t\tc-0.53-0.77-0.83-1.7-0.83-2.7c0-2.58,2.11-4.69,4.69-4.69c2.58,0,4.69,2.11,4.69,4.69C24.08,13.75,21.97,15.86,19.39,15.86z" })));
}
function Share(props) {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({}, props, { height: '100px', width: '100px', fill: "#000000", xmlns: "http://www.w3.org/2000/svg", version: "1.1", viewBox: "0 0 32 32", x: "0px", y: "0px" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M26.286 0c-3.142 0-5.714 2.572-5.714 5.714 0 0.512 0.074 1.006 0.202 1.479l-10.573 5.287c-1.049-1.332-2.67-2.194-4.487-2.194-3.142 0-5.714 2.572-5.714 5.714s2.572 5.714 5.714 5.714c1.815 0 3.437-0.862 4.486-2.193l10.574 5.287c-0.127 0.473-0.202 0.966-0.202 1.478 0 3.142 2.572 5.714 5.714 5.714s5.714-2.572 5.714-5.714c0-3.142-2.572-5.714-5.714-5.714-1.817 0-3.438 0.862-4.487 2.194l-10.573-5.287c0.128-0.473 0.202-0.967 0.202-1.479s-0.074-1.005-0.202-1.478l10.574-5.287c1.049 1.331 2.67 2.193 4.486 2.193 3.142 0 5.714-2.572 5.714-5.714s-2.572-5.714-5.714-5.714zM26.286 2.286c1.907 0 3.429 1.522 3.429 3.429s-1.522 3.429-3.429 3.429c-1.907 0-3.429-1.522-3.429-3.429s1.522-3.429 3.429-3.429zM5.714 12.571c1.907 0 3.429 1.522 3.429 3.429s-1.522 3.429-3.429 3.429c-1.907 0-3.429-1.522-3.429-3.429s1.522-3.429 3.429-3.429zM26.286 22.857c1.907 0 3.429 1.522 3.429 3.429s-1.522 3.429-3.429 3.429c-1.907 0-3.429-1.522-3.429-3.429s1.522-3.429 3.429-3.429z" }));
}
function StoryWidgetBookmarkPage() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 44 44", enableBackground: "new 0 0 44 44" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", null,
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M2 5.90007C2 5.90007 4.92505 2 11.7502 2C18.5753 2 21.5003 5.90007 21.5003 5.90007V33.2005C21.5003 33.2005 18.5753 31.2505 11.7502 31.2505C4.92505 31.2505 2 33.2005 2 33.2005V5.90007Z", stroke: "#fefeef", fill: "none", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { d: "M21.4998 5.90007C21.4998 5.90007 24.4248 2 31.2499 2C38.075 2 41.0001 5.90007 41.0001 5.90007V33.2005C41.0001 33.2005 38.075 31.2505 31.2499 31.2505C24.4248 31.2505 21.4998 33.2005 21.4998 33.2005V5.90007Z", stroke: "#fefeef", fill: "none", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" })));
}
function SteamDeckCompatLogo(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatLogo), className) }, rest, { viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { opacity: "0.84", fillRule: "evenodd", clipRule: "evenodd", d: "M7.77715 4.30197C10.9241 4.30197 13.4752 6.85305 13.4752 9.99997C13.4752 13.1469 10.9241 15.698 7.77715 15.698V18.8889C12.6864 18.8889 16.666 14.9092 16.666 9.99997C16.666 5.09078 12.6864 1.11108 7.77715 1.11108V4.30197ZM7.77756 13.8889C9.92533 13.8889 11.6664 12.1477 11.6664 9.99997C11.6664 7.8522 9.92533 6.11108 7.77756 6.11108C5.62979 6.11108 3.88867 7.8522 3.88867 9.99997C3.88867 12.1477 5.62979 13.8889 7.77756 13.8889Z", fill: "white" }));
}
function SteamDeckCompatVerified(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatIcon), (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatVerified), className) }, rest, { viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.33342 11.9222L14.4945 5.76667L16.4556 7.72779L8.33342 15.8556L3.26675 10.7833L5.22786 8.82223L8.33342 11.9222Z", fill: "currentColor" }));
}
function SteamDeckCompatPlayable(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatIcon), (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatPlayable), className) }, rest, { viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10 19C14.9706 19 19 14.9706 19 10C19 5.02944 14.9706 1 10 1C5.02944 1 1 5.02944 1 10C1 14.9706 5.02944 19 10 19ZM8.61079 9.44444V15H11.3886V9.44444H8.61079ZM9.07372 8.05245C9.34781 8.23558 9.67004 8.33333 9.99967 8.33333C10.4417 8.33333 10.8656 8.15774 11.1782 7.84518C11.4907 7.53262 11.6663 7.10869 11.6663 6.66667C11.6663 6.33703 11.5686 6.0148 11.3855 5.74072C11.2023 5.46663 10.942 5.25301 10.6375 5.12687C10.3329 5.00072 9.99783 4.96771 9.67452 5.03202C9.35122 5.09633 9.05425 5.25507 8.82116 5.48815C8.58808 5.72124 8.42934 6.01821 8.36503 6.34152C8.30072 6.66482 8.33373 6.99993 8.45988 7.30447C8.58602 7.60902 8.79964 7.86931 9.07372 8.05245Z", fill: "currentColor" }));
}
function SteamDeckCompatUnsupported(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatIcon), (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatUnsupported), className) }, rest, { viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M14.1931 15.6064C13.0246 16.4816 11.5733 17 10.001 17C6.13498 17 3.00098 13.866 3.00098 10C3.00098 8.42766 3.51938 6.97641 4.39459 5.80783L14.1931 15.6064ZM15.6074 14.1922C16.4826 13.0236 17.001 11.5723 17.001 10C17.001 6.13401 13.867 3 10.001 3C8.42864 3 6.97739 3.5184 5.80881 4.39362L15.6074 14.1922ZM19.001 10C19.001 14.9706 14.9715 19 10.001 19C5.03041 19 1.00098 14.9706 1.00098 10C1.00098 5.02944 5.03041 1 10.001 1C14.9715 1 19.001 5.02944 19.001 10Z", fill: "currentColor" }));
}
function SteamDeckCompatUnknown(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatIcon), (_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().SteamDeckCompatUnknown), className) }, rest, { viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M17.3972 11.2461L18.8767 11.4932C18.9578 11.0075 19 10.5087 19 10C19 9.49131 18.9578 8.99248 18.8767 8.50682L17.3972 8.75386C17.4647 9.15821 17.5 9.57442 17.5 10C17.5 10.4256 17.4647 10.8418 17.3972 11.2461ZM17.0295 7.3783L18.4348 6.8539C18.0814 5.90668 17.5729 5.03501 16.9403 4.26971L15.7842 5.22538C16.3119 5.86387 16.7354 6.59021 17.0295 7.3783ZM14.7746 4.21582L15.7303 3.05967C14.965 2.42708 14.0933 1.91864 13.1461 1.56519L12.6217 2.97054C13.4098 3.26461 14.1361 3.68805 14.7746 4.21582ZM11.2461 2.60281L11.4932 1.1233C11.0075 1.0422 10.5087 1 10 1C9.49131 1 8.99248 1.0422 8.50682 1.1233L8.75386 2.60281C9.15821 2.5353 9.57442 2.5 10 2.5C10.4256 2.5 10.8418 2.5353 11.2461 2.60281ZM7.3783 2.97054L6.8539 1.56519C5.90668 1.91864 5.03501 2.42708 4.26971 3.05967L5.22538 4.21582C5.86387 3.68805 6.59021 3.26461 7.3783 2.97054ZM4.21582 5.22538L3.05967 4.26971C2.42708 5.03501 1.91864 5.90668 1.56519 6.8539L2.97054 7.3783C3.26461 6.59022 3.68805 5.86387 4.21582 5.22538ZM1 10C1 9.49131 1.0422 8.99248 1.1233 8.50682L2.60281 8.75386C2.5353 9.15821 2.5 9.57442 2.5 10C2.5 10.4256 2.5353 10.8418 2.60281 11.2461L1.1233 11.4932C1.0422 11.0075 1 10.5087 1 10ZM2.97054 12.6217L1.56519 13.1461C1.91864 14.0933 2.42708 14.965 3.05967 15.7303L4.21582 14.7746C3.68805 14.1361 3.26461 13.4098 2.97054 12.6217ZM5.22538 15.7842L4.26971 16.9403C5.03501 17.5729 5.90668 18.0814 6.8539 18.4348L7.3783 17.0295C6.59022 16.7354 5.86387 16.3119 5.22538 15.7842ZM8.75386 17.3972L8.50682 18.8767C8.99248 18.9578 9.49131 19 10 19C10.5087 19 11.0075 18.9578 11.4932 18.8767L11.2461 17.3972C10.8418 17.4647 10.4256 17.5 10 17.5C9.57442 17.5 9.15821 17.4647 8.75386 17.3972ZM12.6217 17.0295L13.1461 18.4348C14.0933 18.0814 14.965 17.5729 15.7303 16.9403L14.7746 15.7842C14.1361 16.3119 13.4098 16.7354 12.6217 17.0295ZM15.7842 14.7746L16.9403 15.7303C17.5729 14.965 18.0814 14.0933 18.4348 13.1461L17.0295 12.6217C16.7354 13.4098 16.3119 14.1361 15.7842 14.7746ZM9.2425 14.7702C9.46679 14.92 9.73048 15 10.0002 15C10.362 15 10.7089 14.8563 10.9646 14.6006C11.2204 14.3448 11.3641 13.998 11.3641 13.6363C11.3641 13.3666 11.2841 13.1029 11.1343 12.8787C10.9844 12.6544 10.7714 12.4796 10.5222 12.3764C10.2729 12.2732 9.99872 12.2462 9.73415 12.2988C9.46958 12.3514 9.22656 12.4813 9.03582 12.672C8.84508 12.8628 8.71518 13.1057 8.66255 13.3703C8.60993 13.6348 8.63694 13.909 8.74016 14.1582C8.84339 14.4074 9.01821 14.6203 9.2425 14.7702ZM11.0981 10.3552C11.1722 10.2348 11.2765 10.1358 11.4005 10.068C11.8099 9.82315 12.1479 9.47526 12.3808 9.05903C12.6137 8.64279 12.7333 8.17276 12.7278 7.69584C12.7223 7.21892 12.5918 6.75179 12.3493 6.34105C12.1069 5.93031 11.7609 5.59033 11.346 5.35502C10.9311 5.11972 10.4617 4.99732 9.98466 5.00004C9.50764 5.00277 9.03969 5.13052 8.62748 5.37054C8.21527 5.61057 7.87321 5.95448 7.63545 6.36796C7.39769 6.78144 7.27253 7.25004 7.27246 7.72699H9.23191C9.23191 7.6261 9.25178 7.52621 9.29039 7.43301C9.32901 7.3398 9.3856 7.25511 9.45694 7.18378C9.52829 7.11244 9.61299 7.05586 9.70621 7.01725C9.79942 6.97865 9.89933 6.95878 10.0002 6.95878C10.1659 6.96387 10.3255 7.02207 10.4556 7.12479C10.5856 7.22751 10.6792 7.3693 10.7225 7.52925C10.7658 7.6892 10.7565 7.85883 10.6961 8.01311C10.6356 8.16739 10.5271 8.29816 10.3867 8.3861C9.97322 8.62846 9.63003 8.97429 9.39088 9.38955C9.15173 9.80482 9.02487 10.2752 9.02278 10.7544V11.3635H10.9777V10.7544C10.9825 10.6131 11.024 10.4755 11.0981 10.3552Z", fill: "currentColor" }));
}
function LeaveVoiceChat(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 22 20", fill: "none" }, props),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", d: "M5.55344 11.3334L7.94011 13.7267L6.06011 15.6067L0.446777 10.0001L6.06011 4.39341L7.94011 6.27341L5.55344 8.66675H13.6668V11.3334H5.55344ZM12.4334 0.666748H11.0001V3.33341H12.4334C14.2016 3.33341 15.8972 4.03579 17.1475 5.28604C18.3977 6.53628 19.1001 8.23197 19.1001 10.0001C19.1001 11.7682 18.3977 13.4639 17.1475 14.7141C15.8972 15.9644 14.2016 16.6667 12.4334 16.6667H11.0001V19.3334H12.4334C14.9088 19.3334 17.2828 18.3501 19.0331 16.5997C20.7834 14.8494 21.7668 12.4754 21.7668 10.0001C21.7668 7.52473 20.7834 5.15076 19.0331 3.40042C17.2828 1.65008 14.9088 0.666748 12.4334 0.666748Z" })));
}
function DLCIcon(props) {
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 36 36", fill: "none" }, props, { preserveAspectRatio: "xMidYMid meet" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "currentColor", d: "M18 3C15.0333 3 12.1332 3.87973 9.66645 5.52796C7.19972 7.17618 5.27713 9.51886 4.14181 12.2597C3.0065 15.0006 2.70945 18.0166 3.28823 20.9264C3.86701 23.8361 5.29562 26.5088 7.3934 28.6066C9.49119 30.7044 12.1639 32.133 15.0737 32.7118C17.9834 33.2906 20.9994 32.9935 23.7403 31.8582C26.4811 30.7229 28.8238 28.8003 30.472 26.3336C32.1203 23.8668 33 20.9667 33 18C33 16.0302 32.612 14.0796 31.8582 12.2597C31.1044 10.4399 29.9995 8.78628 28.6066 7.3934C27.2137 6.00052 25.5601 4.89563 23.7403 4.14181C21.9204 3.38799 19.9698 3 18 3ZM18 28.54L8.23001 18.77L11.77 15.23L15.5 19V8H20.5V19L24.23 15.27L27.77 18.81L18 28.54Z" })));
}
function Circle(props) {
    const { className } = props, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(props, ["className"]);
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])((_shared_svg_library_scss__WEBPACK_IMPORTED_MODULE_3___default().Circke), className) }, rest, { width: "50", height: "50", viewBox: "0 0 50 50", fill: "none" }),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "currentColor", cx: "25", cy: "25", r: "25" })));
}


/***/ }),

/***/ "../../../web_src/shared/js/ui/throbber.tsx":
/*!**************************************************!*\
  !*** ../../../web_src/shared/js/ui/throbber.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Throbber": () => (/* binding */ Throbber)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/classnames */ "../../../web_src/shared/js/utils/classnames.ts");
/* harmony import */ var _throbber_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throbber.scss */ "../../../web_src/shared/js/ui/throbber.scss");
/* harmony import */ var _throbber_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_throbber_scss__WEBPACK_IMPORTED_MODULE_2__);



const Throbber = react__WEBPACK_IMPORTED_MODULE_0___default().memo(function Throbber(props) {
    const { className, size, string, position, static: isStatic, msDelayAppear } = props;
    let vecClasses = [(_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().LoadingWrapper), 'SteamLogoThrobber', GetSizeClass(size)];
    const [bVisible, setVisible] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!msDelayAppear);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (bVisible)
            return undefined;
        const iTimeout = setTimeout(() => setVisible(true), msDelayAppear);
        return () => clearTimeout(iTimeout);
    }, [msDelayAppear, bVisible]);
    if (string === undefined)
        vecClasses.push((_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().noString));
    if (className)
        vecClasses.push(className);
    if (isStatic)
        vecClasses.push((_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().Static));
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", { className: (0,shared_utils_classnames__WEBPACK_IMPORTED_MODULE_1__["default"])(position == 'center' && (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_center_wrapper), msDelayAppear && (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().ThrobberDelayAppear), bVisible && (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().Visible)) },
        bVisible &&
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", { className: vecClasses.join(' ') },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().Throbber) },
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ThrobberInner, { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().base) }),
                    react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ThrobberInner, { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().blur) }))),
        Boolean(string) && react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().ThrobberText) }, string)));
});
function GetSizeClass(size) {
    switch (size) {
        case 'small':
            return (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_small);
        case 'medium':
            return (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_medium);
        case 'xlarge':
            return (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_xlarge);
        case 'xxlarge':
            return (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_xxlarge);
        default:
            return (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().throbber_large);
    }
}
function ThrobberInner(props) {
    let strClasses = 'SVGIcon_Button SVGIcon_Throbber ';
    if (props.className)
        strClasses += props.className;
    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", { version: "1.1", id: "base", xmlns: "http://www.w3.org/2000/svg", className: strClasses, x: "0px", y: "0px", width: "256px", height: "256px", viewBox: "0 0 256 256" },
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().partCircle) },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundOuter), fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundOuter), fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M201.432,101.166" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundOuter), fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().mainOutline) },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundFill), fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundOuterOutline), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber01), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber02), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber03), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber04), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber05), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber06), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber07), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber08), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber09), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber10), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber11), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber12), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber13), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber14), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" }),
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().roundThrobber15), strokeLinecap: "butt", fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", d: "M127.82,23.895 c-54.686,0-99.487,42.167-103.745,95.754l55.797,23.069c4.729-3.231,10.44-5.122,16.584-5.122c0.551,0,1.098,0.014,1.642,0.047 l24.815-35.968c0-0.17-0.004-0.338-0.004-0.509c0-21.647,17.61-39.261,39.26-39.261s39.263,17.613,39.263,39.261 c0,21.65-17.611,39.264-39.263,39.264c-0.299,0-0.593-0.007-0.887-0.014l-35.392,25.251c0.018,0.462,0.035,0.931,0.035,1.396 c0,16.252-13.22,29.472-29.469,29.472c-14.265,0-26.19-10.185-28.892-23.666L27.66,156.37 c12.355,43.698,52.503,75.733,100.16,75.733c57.495,0,104.104-46.61,104.104-104.105S185.314,23.895,127.82,23.895z" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().bottomCircle) },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", { fill: "#ffffff", d: "M89.226,181.579L76.5,176.321c2.256,4.696,6.159,8.628,11.339,10.786 c11.197,4.668,24.11-0.647,28.779-11.854c2.259-5.425,2.274-11.405,0.033-16.841c-2.237-5.436-6.46-9.675-11.886-11.938 c-5.384-2.24-11.151-2.156-16.22-0.244l13.146,5.436c8.261,3.443,12.166,12.93,8.725,21.189 C106.976,181.115,97.486,185.022,89.226,181.579" })),
        react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", { className: (_throbber_scss__WEBPACK_IMPORTED_MODULE_2___default().topCircle) },
            react__WEBPACK_IMPORTED_MODULE_0___default().createElement("circle", { fill: "none", stroke: "#ffffff", strokeWidth: "6", strokeMiterlimit: "10", cx: "161.731", cy: "101.274", r: "23.019" }))));
}


/***/ }),

/***/ "../../../web_src/shared/js/ui/titlebar.tsx":
/*!**************************************************!*\
  !*** ../../../web_src/shared/js/ui/titlebar.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TitleBar": () => (/* binding */ TitleBar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_steamclient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/steamclient */ "../../../web_src/shared/js/steamclient.ts");
/* harmony import */ var shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/ui/shared_svg_library */ "../../../web_src/shared/js/ui/shared_svg_library.tsx");
/* harmony import */ var shared_utils_reactutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/utils/reactutils */ "../../../web_src/shared/js/utils/reactutils/index.ts");





class TitleBar extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(props) {
        super(props);
        this.state = { maximized: undefined };
    }
    BIsMaximized() {
        let xDiff = this.props.popup.screen.availWidth - this.props.popup.innerWidth;
        let yDiff = this.props.popup.screen.availHeight - this.props.popup.innerHeight;
        // Should exactly match screen size if maximized
        let bMaximized = xDiff === 0 && yDiff === 0;
        return bMaximized;
    }
    componentDidMount() {
        this.UpdateMaximizeState();
        this.props.popup.addEventListener("resize", this.UpdateMaximizeState);
    }
    componentWillUnmount() {
        var _a;
        (_a = this.props.popup) === null || _a === void 0 ? void 0 : _a.removeEventListener("resize", this.UpdateMaximizeState);
    }
    UpdateMaximizeState() {
        if ((0,shared_steamclient__WEBPACK_IMPORTED_MODULE_1__.BWindowHasSteamClientMethod)(this.props.popup, 'Window.IsWindowMaximized')) {
            this.props.popup.SteamClient.Window.IsWindowMaximized((bMaximized) => {
                if (bMaximized != this.state.maximized) {
                    this.setState({ maximized: bMaximized });
                }
            });
        }
        else {
            let bMaximized = this.BIsMaximized();
            //console.log( "Currently " + (bMaximized?'true':'false') + ' ' + this.props.popup.screen.availWidth + ' ' + this.props.popup.innerWidth );
            if (bMaximized != this.state.maximized) {
                this.setState({ maximized: bMaximized });
            }
        }
    }
    render() {
        var _a;
        let popup = this.props.popup;
        let fnClose = () => {
            if (popup)
                popup.close();
        };
        let fnMaximize = () => { popup.SteamClient.Window.ToggleMaximize(); };
        let fnMinimize = () => { popup.SteamClient.Window.Minimize(); };
        let maxRestoreClasses = 'title-area-icon';
        if (this.state.maximized)
            maxRestoreClasses += ' restoreButton';
        else
            maxRestoreClasses += ' maximizeButton';
        let strClasses = 'TitleBar title-area';
        if (this.props.className)
            strClasses = strClasses + ' ' + this.props.className;
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: strClasses, style: this.props.style },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'title-area-highlight' }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'title-area-children' }, this.props.children),
            !this.props.hideActions &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "title-bar-actions" },
                    !this.props.hideClose && react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "title-area-icon closeButton", onClick: (_a = this.props.onClose) !== null && _a !== void 0 ? _a : fnClose },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__.X_Line, null)),
                    !this.props.hideMinMax && react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: maxRestoreClasses, onClick: fnMaximize },
                        this.state.maximized &&
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__.Restore, null),
                        !this.state.maximized &&
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__.Maximize, null)),
                    !this.props.hideMinMax && react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "title-area-icon minimizeButton", onClick: fnMinimize },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(shared_ui_shared_svg_library__WEBPACK_IMPORTED_MODULE_2__.Minimize, null)))));
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    shared_utils_reactutils__WEBPACK_IMPORTED_MODULE_3__.bind
], TitleBar.prototype, "UpdateMaximizeState", null);


/***/ }),

/***/ "../../../web_src/shared/js/ui/windowresizegrip.tsx":
/*!**********************************************************!*\
  !*** ../../../web_src/shared/js/ui/windowresizegrip.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WindowResizeGrip": () => (/* binding */ WindowResizeGrip)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

class WindowResizeGrip extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {
    constructor(props) {
        super(props);
        this.m_fnExistingPopupInitializer = undefined;
        this.BindResizeGrip = this.BindResizeGrip.bind(this);
    }
    BindResizeGrip(element) {
        let nWidth = 0;
        let nHeight = 0;
        if (element) {
            let bounds = element.getBoundingClientRect();
            let window = element.ownerDocument.defaultView;
            if (bounds && window) {
                nWidth = Math.ceil(window.innerWidth - bounds.left);
                nHeight = Math.ceil(window.innerHeight - bounds.top);
            }
        }
        // SteamClient.Window.SetResizeGrip is registered when the javascript context is created, so we shouldn't have to wait
        // for the popup context to receive javascript methods
        let popup = this.props.popup;
        if (popup.SteamClient && popup.SteamClient.Window && popup.SteamClient.Window.SetResizeGrip)
            popup.SteamClient.Window.SetResizeGrip(nWidth, nHeight);
    }
    componentWillUnmount() {
        let popup = this.props.popup;
        popup.SteamClient.Window.SetResizeGrip(0, 0);
    }
    render() {
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "window_resize_grip", ref: this.BindResizeGrip }));
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/arrayutils.ts":
/*!******************************************************!*\
  !*** ../../../web_src/shared/js/utils/arrayutils.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArrayEquals": () => (/* binding */ ArrayEquals),
/* harmony export */   "ArrayWithoutElement": () => (/* binding */ ArrayWithoutElement),
/* harmony export */   "CountMatches": () => (/* binding */ CountMatches),
/* harmony export */   "FilterInPlace": () => (/* binding */ FilterInPlace),
/* harmony export */   "FindAndRemove": () => (/* binding */ FindAndRemove),
/* harmony export */   "FindAndRemoveWhere": () => (/* binding */ FindAndRemoveWhere),
/* harmony export */   "FindLast": () => (/* binding */ FindLast),
/* harmony export */   "MoveElement": () => (/* binding */ MoveElement),
/* harmony export */   "MoveElementToTail": () => (/* binding */ MoveElementToTail),
/* harmony export */   "PadArray": () => (/* binding */ PadArray),
/* harmony export */   "ShallowCompare": () => (/* binding */ ShallowCompare),
/* harmony export */   "ShuffleArray": () => (/* binding */ ShuffleArray),
/* harmony export */   "SortedFindLessOrEqual": () => (/* binding */ SortedFindLessOrEqual),
/* harmony export */   "SortedInsert": () => (/* binding */ SortedInsert),
/* harmony export */   "Unique": () => (/* binding */ Unique)
/* harmony export */ });
/* harmony import */ var shared_utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/utils/assert */ "../../../web_src/shared/js/utils/assert.ts");

/**
 * Purpose: Shuffle an array in place
 * @param vecArray
 */
function ShuffleArray(vecArray) {
    // Do nothing if the array doesn't exist or only has one item
    if ((vecArray === null || vecArray === void 0 ? void 0 : vecArray.length) > 1) {
        let iCurrent = vecArray.length;
        while (iCurrent !== 0) {
            // Pick a remaining element...
            let iRandom = Math.floor(Math.random() * iCurrent);
            iCurrent -= 1;
            // And swap it with the current element.
            let temp = vecArray[iCurrent];
            vecArray[iCurrent] = vecArray[iRandom];
            vecArray[iRandom] = temp;
        }
    }
}
//-----------------------------------------------------------------------------
// Purpose: Moves an array element from one index to another. Pads array if iTo would create a gap after the end of the array
//-----------------------------------------------------------------------------
function MoveElement(vecItems, iFrom, iTo) {
    if (iFrom < 0 || iTo < 0)
        return;
    // if moving element beyond the length of the array, pad out the array
    if (iTo >= vecItems.length)
        vecItems[iTo] = undefined;
    // swap using splice instead of manual iteration. Hoping this memmoves
    vecItems.splice(iTo, 0, vecItems.splice(iFrom, 1)[0]);
}
//-----------------------------------------------------------------------------
// Purpose: Moves an element to the end of the array
//-----------------------------------------------------------------------------
function MoveElementToTail(vecItems, iFrom) {
    MoveElement(vecItems, iFrom, vecItems.length - 1);
}
//-----------------------------------------------------------------------------
// Purpose: Return true if two arrays are equivalent
//-----------------------------------------------------------------------------
function ArrayEquals(vecA, vecB) {
    if (!vecA && !vecB) // both null/undefined arrays should be equal
        return true;
    else if (!vecA || !vecB)
        return false;
    if (vecA.length != vecB.length)
        return false;
    for (let i = 0; i < vecA.length; i++) {
        if (vecA[i] !== vecB[i])
            return false;
    }
    return true;
}
//-----------------------------------------------------------------------------
// Purpose: Finds an element in an array and removes it.  Returns true if it was found.
//-----------------------------------------------------------------------------
function FindAndRemove(vec, item) {
    return FindAndRemoveWhere(vec, (element) => item == element);
}
//-----------------------------------------------------------------------------
// Purpose: Finds an element in an array and removes it.  Returns true if it was found.
//-----------------------------------------------------------------------------
function FindAndRemoveWhere(vec, fnPredicate) {
    let i = vec.findIndex(fnPredicate);
    if (i >= 0) {
        vec.splice(i, 1);
        return true;
    }
    else {
        return false;
    }
}
//-----------------------------------------------------------------------------
// Purpose: Counts the number of entries in the array that pass the match function
//-----------------------------------------------------------------------------
function CountMatches(vec, fnMatch) {
    return vec.reduce((sum, element, index, array) => sum + (fnMatch(element, index, array) ? 1 : 0), 0);
}
//-----------------------------------------------------------------------------
// Purpose: Returns an array without the element.  Does not modify the passed array, and the result is
//	always a mutable copy.
//-----------------------------------------------------------------------------
function ArrayWithoutElement(vec, item) {
    return vec.filter((element) => item !== element);
}
//-----------------------------------------------------------------------------
// Purpose: Compares arrays, matching length and shallow element compare. Returns true if equal.
//-----------------------------------------------------------------------------
function ShallowCompare(lhs, rhs) {
    if (lhs.length != rhs.length)
        return false;
    for (let i = 0; i < lhs.length; i++) {
        if (lhs[i] != rhs[i])
            return false;
    }
    return true;
}
//-----------------------------------------------------------------------------
// Purpose: Finds the element with the highest index that is less than or equal to the provided element
//-----------------------------------------------------------------------------
function SortedFindLessOrEqual(vec, element, fnCompare) {
    let iStart = 0;
    let iStop = vec.length - 1;
    while (iStart <= iStop) {
        let iMid = Math.floor((iStart + iStop) / 2);
        let nCompare = fnCompare(vec[iMid], element);
        if (nCompare < 0) {
            iStart = iMid + 1;
        }
        else if (nCompare > 0) {
            iStop = iMid - 1;
        }
        else {
            // found a match - but we want the last one - keep looking
            if (iStop == iMid)
                return iMid;
            if (iMid == iStart) {
                // This means we have just start and stop elements left to check
                if (iStop > iMid && fnCompare(element, vec[iMid + 1]) < 0)
                    return iMid;
                else
                    return iMid + 1;
            }
            else {
                iStart = iMid;
            }
        }
    }
    return iStop;
}
//-----------------------------------------------------------------------------
// Purpose: Finds the element with the highest index that is less than or equal to the provided element
//-----------------------------------------------------------------------------
function SortedInsert(vec, element, fnCompare) {
    let iBefore = SortedFindLessOrEqual(vec, element, fnCompare);
    if (true) {
        // these will sometimes fire if sort func is bad - causes bad sorting
        if (iBefore >= 0) {
            if (fnCompare(vec[iBefore], element) > 0) {
                (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_0__.AssertMsg)(false, `fnCompare( vec[iBefore], element ) <= 0`);
            }
        }
        if (iBefore + 1 < vec.length) {
            if (fnCompare(element, vec[iBefore + 1]) >= 0) {
                (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_0__.AssertMsg)(false, `fnCompare( element, vec[iBefore+ 1] ) < 0`);
            }
        }
    }
    vec.splice(iBefore + 1, 0, element);
}
//-----------------------------------------------------------------------------
// Purpose: Filters an array to only the elements passing a test, in place
//-----------------------------------------------------------------------------
function FilterInPlace(vec, fnCompare) {
    let i = 0;
    let j = 0;
    while (i < vec.length) {
        const val = vec[i];
        if (fnCompare(val, i, vec)) {
            vec[j++] = val;
        }
        i++;
    }
    vec.length = j;
    return vec;
}
/**
 * Purpose: Pads an array to the specified length, using the specified fill element.
 * @param vec
 * @param len
 * @param fill
 */
function PadArray(vec, len, fill) {
    if (!vec) {
        console.error("array should be defined for us to fill in the missing indexes");
    }
    if (vec.length < len) {
        return vec.concat(Array(len - vec.length).fill(fill));
    }
    return vec;
}
/** @returns Last element in array satisfying given predicate, or undefined if none. */
function FindLast(vecItems, predicate) {
    if (!predicate)
        return undefined;
    for (let i = vecItems.length - 1; i >= 0; --i) {
        const a = vecItems[i];
        if (predicate(a, i, vecItems))
            return a;
    }
    return undefined;
}
/** @return Return a unique version of the array provided */
function Unique(rgInput) {
    const uniqSet = new Set();
    rgInput.forEach((v) => uniqSet.add(v));
    return Array.from(uniqSet);
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/assert.ts":
/*!**************************************************!*\
  !*** ../../../web_src/shared/js/utils/assert.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertMsg": () => (/* binding */ AssertMsg)
/* harmony export */ });
function AssertMsg(test, message, ...args) {
    if (console.assert) {
        if (args.length == 0)
            console.assert(!!test, message);
        else
            console.assert(!!test, message, ...args);
    }
    else {
        // console.assert is not available in react builds
        if (!test)
            console.warn(message, ...args);
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/bind.ts":
/*!************************************************!*\
  !*** ../../../web_src/shared/js/utils/bind.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bind": () => (/* binding */ bind)
/* harmony export */ });
/**
 * This is a typescript decorator.  Decorate a class method with @bind to make sure the method is always invoked in
 * 	the context of the object instance it's declared in.
 *
 * This allows you to use it in react without worrying about the reference changing.
 *
 * example:
 *
 * 		@bind onTextInput( event ) { ... }
 *
 * 		render() {
 *			return <input OnInput={ this.onTextInput } />;
 * 		}
 *
 */
function bind(target, propertyKey, descriptor) {
    return {
        get() {
            let fnBound = descriptor.value.bind(this);
            if (!this.hasOwnProperty(propertyKey)) {
                Object.defineProperty(this, propertyKey, { value: fnBound });
            }
            return fnBound;
        },
    };
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/callbackutils.ts":
/*!*********************************************************!*\
  !*** ../../../web_src/shared/js/utils/callbackutils.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CCallbackList": () => (/* binding */ CCallbackList),
/* harmony export */   "CScheduledFunc": () => (/* binding */ CScheduledFunc),
/* harmony export */   "CTrackedEventListeners": () => (/* binding */ CTrackedEventListeners),
/* harmony export */   "CUnregisterList": () => (/* binding */ CUnregisterList),
/* harmony export */   "IReadonlySubscribableValue": () => (/* binding */ IReadonlySubscribableValue),
/* harmony export */   "ISubscribableValue": () => (/* binding */ ISubscribableValue),
/* harmony export */   "PromiseObj": () => (/* binding */ PromiseObj),
/* harmony export */   "SubscribableValue": () => (/* binding */ SubscribableValue)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/utils/arrayutils */ "../../../web_src/shared/js/utils/arrayutils.ts");
/* harmony import */ var shared_utils_bind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/bind */ "../../../web_src/shared/js/utils/bind.ts");



//-----------------------------------------------------------------------------
// Purpose: Interface to register and unregister callbacks from, with ability to dispatch.
//-----------------------------------------------------------------------------
class CCallbackList {
    constructor() {
        this.m_vecCallbacks = [];
    }
    Register(fnCallback) {
        this.m_vecCallbacks.push(fnCallback);
        let fnUnregister = () => { shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_0__.FindAndRemove(this.m_vecCallbacks, fnCallback); };
        return { Unregister: fnUnregister };
    }
    Dispatch(...args) {
        // Iterate over a copy of the array of callbacks, so that callbacks can register/unregister without affecting this dispatch.
        for (const fnCallback of Array.from(this.m_vecCallbacks)) {
            fnCallback(...args);
        }
    }
    ClearAllCallbacks() {
        this.m_vecCallbacks = [];
    }
    CountRegistered() {
        return this.m_vecCallbacks.length;
    }
}
/**
 * Use this interface to surface subscribable values for consumption by useSubscribableValue.
 */
class IReadonlySubscribableValue {
}
/**
 * Minimal API for components & stores to use with CSubscribableValue.
 */
class ISubscribableValue extends IReadonlySubscribableValue {
}
/**
 * A property that can be used with useSubscribableValue to watch the latest value.
 * This is kind of like an @observable field but without using mobx.
 */
class CSubscribableValue {
    /** Constructed with a trim interface exposed to external users via the exported SubscribableValue<T> method.  */
    constructor(initialValue) {
        this.m_callbacks = new CCallbackList();
        this.m_currentValue = initialValue;
    }
    /** Sets a new value and notifies Subscribers of the new value.  */
    Set(newValue) {
        this.m_currentValue = newValue;
        this.m_callbacks.Dispatch(newValue);
    }
    /** A snapshot of the current value which can change at any time.  */
    get Value() {
        return this.m_currentValue;
    }
    /** Adds a subscription to the backing CCallbackList and returns an Unsubscribe function.  */
    Subscribe(subscriber) {
        const registration = this.m_callbacks.Register(subscriber);
        return { Unsubscribe: registration.Unregister };
    }
}
/**
 * Constructs an ISubscribableValue.
 */
function SubscribableValue(initialValue) {
    return new CSubscribableValue(initialValue);
}
/**
 * Wraps setting and canceling a timeout to cut down on typing
 */
class CScheduledFunc {
    Schedule(nTimeoutMS, fnCallback) {
        if (this.IsScheduled())
            this.Cancel();
        this.m_fnCallback = fnCallback;
        this.m_schTimer = window.setTimeout(this.ScheduledInternal, nTimeoutMS);
    }
    IsScheduled() {
        return (this.m_schTimer !== undefined);
    }
    Cancel() {
        if (this.m_schTimer) {
            clearTimeout(this.m_schTimer);
            this.m_schTimer = undefined;
        }
    }
    ScheduledInternal() {
        this.m_schTimer = undefined;
        let fnCallback = this.m_fnCallback;
        this.m_fnCallback = undefined;
        fnCallback();
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    shared_utils_bind__WEBPACK_IMPORTED_MODULE_1__.bind
], CScheduledFunc.prototype, "ScheduledInternal", null);
class CTrackedEventListeners {
    constructor() {
        this.m_rgListeners = [];
    }
    AddEventListener(element, type, listener) {
        element.addEventListener(type, listener);
        this.m_rgListeners.push({ element, type, listener });
    }
    Unregister() {
        for (let listener of this.m_rgListeners) {
            listener.element.removeEventListener(listener.type, listener.listener);
        }
        this.m_rgListeners = [];
    }
}
/**
 * Like Promise.all, but works on an object and returns results of promises as values of those keys
 * @param object
 */
function PromiseObj(object) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
        let promises = [];
        const objectKeys = Object.keys(object);
        objectKeys.forEach((key) => promises.push(object[key]));
        const resolvedValues = yield Promise.all(promises);
        const responseObject = {};
        return resolvedValues.reduce((resolvedObject, promiseResult, index) => {
            resolvedObject[objectKeys[index]] = promiseResult;
            return resolvedObject;
        }, responseObject);
    });
}
/**
 * Wrapper around an array to cut down on typing for common scenario of needing to wrap a number of unregister functions in
 * a single unregister func
 */
class CUnregisterList {
    constructor() {
        this.m_vecCallbacks = [];
    }
    Push(fnCallback) {
        this.m_vecCallbacks.push(fnCallback);
    }
    PushArrayRemove(rgArray, element) {
        this.m_vecCallbacks.push(() => shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_0__.FindAndRemove(rgArray, element));
    }
    Unregister() {
        for (let fn of this.m_vecCallbacks)
            fn();
        this.m_vecCallbacks = [];
    }
    GetUnregisterFunc() {
        return this.Unregister;
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    shared_utils_bind__WEBPACK_IMPORTED_MODULE_1__.bind
], CUnregisterList.prototype, "Unregister", null);


/***/ }),

/***/ "../../../web_src/shared/js/utils/classnames.ts":
/*!******************************************************!*\
  !*** ../../../web_src/shared/js/utils/classnames.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Utility function for building up a valid DOM "class" attribute or JSX className prop
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(...names) {
    return names.reduce((result, name) => {
        if (!name)
            return result;
        if (typeof name === 'string')
            return result ? `${result} ${name}` : name;
        if (typeof name === 'object')
            return result ? `${result} ${stringifyClassnameObject(name)}` : stringifyClassnameObject(name);
        // Otherwise we dont know how to process the type. Skip.
        return result;
    }, '');
}
function stringifyClassnameObject(obj) {
    return Object.keys(obj).reduce((result, name) => {
        if (!obj[name])
            return result;
        return result ? `${result} ${name}` : name;
    }, '');
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/cookies.ts":
/*!***************************************************!*\
  !*** ../../../web_src/shared/js/utils/cookies.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BCanAccessCookies": () => (/* binding */ BCanAccessCookies),
/* harmony export */   "GetCookie": () => (/* binding */ GetCookie),
/* harmony export */   "SetCookie": () => (/* binding */ SetCookie)
/* harmony export */ });
/**
 * Reads a cookie value
 */
function GetCookie(strCookieName) {
    if (!BCanAccessCookies() || !window.document.cookie)
        return null;
    let rgMatches = document.cookie.match('(^|; )' + strCookieName + '=([^;]*)');
    if (rgMatches && rgMatches[2])
        return decodeURIComponent(rgMatches[2]);
    return null;
}
/**
 * Writes a cookie value
 */
function SetCookie(strCookieName, strValue, nExpiresInDays, strPath) {
    if (!BCanAccessCookies())
        return;
    if (!strPath)
        strPath = '/';
    let strDate = '';
    if (typeof nExpiresInDays != 'undefined' && nExpiresInDays) {
        let dtExpires = new Date();
        dtExpires.setTime(dtExpires.getTime() + 1000 * 60 * 60 * 24 * nExpiresInDays);
        strDate = '; expires=' + dtExpires.toUTCString();
    }
    document.cookie = encodeURIComponent(strCookieName) + '=' + encodeURIComponent(strValue) + strDate + ';path=' + strPath;
}
/**
 * Checks for access to cookies
 *
 * Currently this plays a role for React Native, where there is no document to access.
 */
function BCanAccessCookies() {
    return !!window.document;
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/decorators.ts":
/*!******************************************************!*\
  !*** ../../../web_src/shared/js/utils/decorators.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": () => (/* binding */ debounce)
/* harmony export */ });
/**
 * Function decorator that makes sure calls to this function cannot occur more
 * than once per X milliseconds. It does this internally by setting an interval
 * timer that keeps track of whether we've seen any requests in the interval
 * and waits until the interval has elapsed before it calls it again.
 *
 * Example usage:
 *     @debounce( 100 ) MyFunction() { ... }
 *
 */
function debounce(unTimeMS) {
    return function (target, propertyKey, descriptor) {
        const fnWrapped = descriptor.value;
        descriptor.value = function (...args) {
            let debounceProperties = this[propertyKey + '_DebounceProperties'];
            if (debounceProperties === undefined) {
                debounceProperties = this[propertyKey + '_DebounceProperties'] = {
                    hTimer: undefined,
                    nPending: 0,
                };
            }
            if (debounceProperties.hTimer === undefined) {
                // Call it for the initial time.
                fnWrapped.apply(this, args);
                debounceProperties.hTimer = window.setInterval(() => {
                    if (debounceProperties.nPending > 0) {
                        // Call it the subsequent time.
                        fnWrapped.apply(this, args);
                        // No more pending for this interval.
                        debounceProperties.nPending = 0;
                    }
                    else {
                        // No one wanted a subsequent call, so cancel our timer
                        // because we're done.
                        window.clearInterval(debounceProperties.hTimer);
                        debounceProperties.hTimer = undefined;
                    }
                }, unTimeMS);
            }
            else {
                // Make a note that we need to be called a when the interval lapses.
                debounceProperties.nPending += 1;
            }
        };
    };
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/domutils.ts":
/*!****************************************************!*\
  !*** ../../../web_src/shared/js/utils/domutils.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddMissingStylesheetsToWindow": () => (/* binding */ AddMissingStylesheetsToWindow),
/* harmony export */   "AddStylesheetsToDocument": () => (/* binding */ AddStylesheetsToDocument),
/* harmony export */   "BElementContainsSelection": () => (/* binding */ BElementContainsSelection),
/* harmony export */   "BElementFullscreen": () => (/* binding */ BElementFullscreen),
/* harmony export */   "BIsDragLeaveOutOfElement": () => (/* binding */ BIsDragLeaveOutOfElement),
/* harmony export */   "BIsElementScrollableOnAxis": () => (/* binding */ BIsElementScrollableOnAxis),
/* harmony export */   "BIsParent": () => (/* binding */ BIsParent),
/* harmony export */   "BIsParentOrSelf": () => (/* binding */ BIsParentOrSelf),
/* harmony export */   "BlobToFile": () => (/* binding */ BlobToFile),
/* harmony export */   "CChildScrolledIntoViewCoordinator": () => (/* binding */ CChildScrolledIntoViewCoordinator),
/* harmony export */   "CancelFullscreen": () => (/* binding */ CancelFullscreen),
/* harmony export */   "ClientRectToScreenCoords": () => (/* binding */ ClientRectToScreenCoords),
/* harmony export */   "CopyTextToClipboard": () => (/* binding */ CopyTextToClipboard),
/* harmony export */   "CopyURLToClipboard": () => (/* binding */ CopyURLToClipboard),
/* harmony export */   "DistanceBetweenRects": () => (/* binding */ DistanceBetweenRects),
/* harmony export */   "FindAncestorWithAttribute": () => (/* binding */ FindAncestorWithAttribute),
/* harmony export */   "FindAncestrally": () => (/* binding */ FindAncestrally),
/* harmony export */   "FindFirstDescendantsWithAttribute": () => (/* binding */ FindFirstDescendantsWithAttribute),
/* harmony export */   "FindScrollableAncestor": () => (/* binding */ FindScrollableAncestor),
/* harmony export */   "GetDistanceFromRect": () => (/* binding */ GetDistanceFromRect),
/* harmony export */   "GetFileFromPasteEvent": () => (/* binding */ GetFileFromPasteEvent),
/* harmony export */   "GetOwningWindowForElement": () => (/* binding */ GetOwningWindowForElement),
/* harmony export */   "GetOwningWindowForEvent": () => (/* binding */ GetOwningWindowForEvent),
/* harmony export */   "GetStyleSheetLinks": () => (/* binding */ GetStyleSheetLinks),
/* harmony export */   "GetStyleSheetLinksForDocument": () => (/* binding */ GetStyleSheetLinksForDocument),
/* harmony export */   "HandleMutationAddAndRemove": () => (/* binding */ HandleMutationAddAndRemove),
/* harmony export */   "IsHTMLElement": () => (/* binding */ IsHTMLElement),
/* harmony export */   "IsHTMLElementTextInput": () => (/* binding */ IsHTMLElementTextInput),
/* harmony export */   "IsHTMLInputElement": () => (/* binding */ IsHTMLInputElement),
/* harmony export */   "IsHTMLTextAreaElement": () => (/* binding */ IsHTMLTextAreaElement),
/* harmony export */   "RectHeight": () => (/* binding */ RectHeight),
/* harmony export */   "RectWidth": () => (/* binding */ RectWidth),
/* harmony export */   "RequestFullscreen": () => (/* binding */ RequestFullscreen),
/* harmony export */   "RunWhenDocumentReady": () => (/* binding */ RunWhenDocumentReady),
/* harmony export */   "ScrollIntoViewIfNeeded": () => (/* binding */ ScrollIntoViewIfNeeded),
/* harmony export */   "UpdateStylesheetsInDocument": () => (/* binding */ UpdateStylesheetsInDocument),
/* harmony export */   "WaitForNextEvent": () => (/* binding */ WaitForNextEvent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/utils/arrayutils */ "../../../web_src/shared/js/utils/arrayutils.ts");
/* harmony import */ var shared_utils_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/assert */ "../../../web_src/shared/js/utils/assert.ts");



/** Type guard for Elements that are HTMLElements.
 * The "is" here tells typescript to treat the parameter as an HTMLElement if this function returns true,
 * so you can do eg IsHTMLElement( thing ) && thing.parentElement
 */
function IsHTMLElement(element) {
    // Note: instanceof HTMLElement would seem to be a more general solution,
    // but I have personally witnessed HTML elements that were not instanceof HTMLElement,
    // so some other method (e.g. this one) seems necessary.
    return element != null && element.focus !== undefined;
}
function BIsDragLeaveOutOfElement(event) {
    if (!event.clientX && !event.clientY && !event.screenX && !event.screenY) {
        // This is a drag off of a window
        return true;
    }
    if (event.relatedTarget) {
        return !BIsParentOrSelf(event.currentTarget, event.relatedTarget);
    }
    else {
        // only chrome has relatedTarget, in other browsers this API is borderline nonfunctional
        let rect = event.currentTarget.getBoundingClientRect();
        if (event.clientX <= rect.left || event.clientX >= rect.right ||
            event.clientY <= rect.top || event.clientY >= rect.bottom) {
            console.log(`${event.clientX} <= ${rect.left} || ${event.clientX} >= ${rect.right} ||
				${event.clientY} <= ${rect.top} || ${event.clientY} >= ${rect.bottom}`);
            return true;
        }
        return false;
    }
}
/**
 * Is the passed "parent" element an ancestor of child or the node itself?
 * Useful for mouseover/mouseout and drag events, but mouseenter/mouseleave are recommended.
 * @param parent
 * @param child
 */
function BIsParentOrSelf(parent, child) {
    while (child) {
        if (child.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE) // Parent is in the shadow DOM, switch to the host element and continue
         {
            child = child.parentNode.host;
        }
        if (child == parent)
            return true;
        child = child.parentElement;
    }
    return false;
}
/**
 * Is the passed "parent" element an ancestor of child?
 * @param parent
 * @param child
 */
function BIsParent(parent, child) {
    while (child) {
        child = child.parentElement;
        if (child == parent)
            return true;
    }
    return false;
}
/**
 * Checks if any element under the specified element has a selection larger than 0 characters
 */
function BElementContainsSelection(target) {
    if (!window.getSelection)
        return false;
    let windowSelection = window.getSelection();
    let cRangesInTarget = 0;
    for (let i = 0; i < windowSelection.rangeCount; i++) {
        // can have a selection with 0 length.. skip
        let range = windowSelection.getRangeAt(i);
        if (range.startOffset == range.endOffset)
            continue;
        let elAncestor = range.commonAncestorContainer;
        if (BIsParentOrSelf(target, elAncestor))
            cRangesInTarget++;
    }
    return (windowSelection.rangeCount > 0 && windowSelection.rangeCount == cRangesInTarget);
}
/**
 * Scroll an element into view if needed
 * @param element The element to ensure is visible
 * @param scrollElement The scrollable element
 */
function ScrollIntoViewIfNeeded(element, scrollParent) {
    if (true)
        (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_1__.AssertMsg)(BIsParent(scrollParent, element), 'scrollParent is not a parent element of element');
    let top = element.offsetTop;
    if (element.offsetParent != scrollParent) {
        if (true)
            (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_1__.AssertMsg)(BIsParentOrSelf(element.offsetParent, scrollParent), 'offset parent is between element and scroll parent - not going to work');
        top -= scrollParent.offsetTop;
    }
    if (top < scrollParent.scrollTop)
        element.scrollIntoView(true);
    else if (top + element.offsetHeight > scrollParent.scrollTop + scrollParent.offsetHeight)
        element.scrollIntoView(false);
}
//-----------------------------------------------------------------------------
// Purpose: I hope I get the job
//-----------------------------------------------------------------------------
function GetDistanceFromRect(rect, x, y) {
    let xdist = 0, ydist = 0;
    if (x < rect.left)
        xdist = rect.left - x;
    else if (x > rect.right)
        xdist = x - rect.right;
    if (y < rect.top)
        ydist = rect.top - y;
    else if (y > rect.bottom)
        ydist = y - rect.bottom;
    return Math.sqrt(xdist * xdist + ydist * ydist);
}
/**
 * The classic
 */
function DistanceBetweenRects(rectA, rectB) {
    let xdist = 0, ydist = 0;
    if (rectB.right < rectA.left)
        xdist = rectA.left - rectB.right;
    else if (rectB.left > rectA.right)
        xdist = rectB.left - rectA.right;
    if (rectB.bottom < rectA.top)
        ydist = rectA.top - rectB.bottom;
    else if (rectB.top > rectA.bottom)
        ydist = rectB.top - rectA.bottom;
    return Math.sqrt(xdist * xdist + ydist * ydist);
}
/**
 * Helper to convert client rect coordinates to screen rect.  The client rect must be inside
 * the passed-in window
 * @param win window containing the client rect
 * @param rect rect to transform
 */
function ClientRectToScreenCoords(win, rect) {
    // for some reason, spread operator doesn't work on rect (though typescript is sure it does).
    return {
        top: win.screenTop + rect.top, bottom: win.screenTop + rect.bottom,
        left: win.screenLeft + rect.left, right: win.screenLeft + rect.right,
    };
}
/**
 * Easier adapter for code that was using the browser's ClientRect
 */
function RectWidth(rect) {
    return rect.right - rect.left;
}
/**
 * Easier adapter for code that was using the browser's ClientRect
 */
function RectHeight(rect) {
    return rect.bottom - rect.top;
}
/** Returns the window targetted by the given event. */
function GetOwningWindowForEvent(event) {
    let owningWindow = undefined;
    if (event && IsHTMLElement(event.currentTarget))
        owningWindow = event.currentTarget.ownerDocument.defaultView;
    return owningWindow;
}
/**
 * Return the window that holds the given element
 */
function GetOwningWindowForElement(element) {
    let owningWindow = undefined;
    if (element) {
        owningWindow = element.ownerDocument.defaultView;
    }
    return owningWindow;
}
/**
 * Put the passed text on the user's clipboard
 * @param strText
 */
function CopyTextToClipboard(strText) {
    // on Steam Deck, this runs in the iframe for friendsui, so we need
    // to ask the parent document to do it, since it has focus
    let activeDocument = window.document;
    try {
        activeDocument = window.top.document;
    }
    catch (e) {
        //let error = e;
    }
    let textarea = activeDocument.createElement("textarea");
    textarea.textContent = strText;
    textarea.style.position = 'fixed';
    activeDocument.body.appendChild(textarea);
    textarea.select();
    try {
        activeDocument.execCommand("copy");
    }
    catch (ex) {
        console.warn("Copy to clipboard failed.", ex);
    }
    finally {
        activeDocument.body.removeChild(textarea);
    }
}
/**
 * Put the passed URL on the user's clipboard. Trims off anything gross that
 * we don't want in the clipboard.
 * @param strURL
 */
function CopyURLToClipboard(strURL) {
    const k_strSteamOpenPrefix = "steam://openurl/";
    if (strURL.startsWith(k_strSteamOpenPrefix)) {
        strURL = strURL.slice(k_strSteamOpenPrefix.length);
    }
    CopyTextToClipboard(strURL);
}
/**
 * Sees if there is a file present in a OnPaste event.
 * Caller should preventDefault on the event if a file is returned.
 * @param event an on paste event.
 * @return {File} The file present in the paste event, or null if the event was some other kind of paste like text
 */
function GetFileFromPasteEvent(event) {
    if (!event)
        return null;
    // Certain applications, many of which being Microsoft Office products,
    // send multiple flavors of text, including an image of the text. We
    // need to pay attention to the ClipboardData's types array to figure
    // out if we actually want to upload an image here, or if there's
    // associated text version to share.
    // If there are no files, we can't upload an image here, so we're done.
    if (event.clipboardData.files.length == 0)
        return null;
    // Look through the list of types to see if there's a text variant that
    // the browser can handle for us. We might only want to actually care
    // about 'text' and 'text/plain', but I'm not sure of any examples
    // where we have a 'text/html' or something with a 'Files' that doesn't
    // also have a 'text/plain', where we'd want to use the image instead
    // of the rich text.
    const bHasTextType = event.clipboardData.types.some((s) => (s == 'text' || s.startsWith('text/')) && s !== 'text/html');
    if (bHasTextType)
        return null;
    // Alright, we've filtered out all of the text clipboards, and now this
    // should just be the images, so start the uploading process.
    return event.clipboardData.files[0];
}
/**
 * Returns true if element is fullscreen in browser
 */
function BElementFullscreen(element) {
    let doc = element.ownerDocument;
    return doc.fullscreen || doc.webkitIsFullScreen || doc.mozFullScreen || doc.msFullscreenElement;
}
/**
 * Tries to open element in fullscreen
 */
function RequestFullscreen(element, videoElement) {
    let e = element;
    if (e.requestFullscreen) {
        e.requestFullscreen();
    }
    else if (e.webkitRequestFullscreen) {
        e.webkitRequestFullscreen();
    }
    else if (videoElement && videoElement.webkitSetPresentationMode) {
        // The Fullscreen API is not supported on iOS Safari. Use this special function on the video element instead.
        videoElement.webkitSetPresentationMode('fullscreen');
    }
    else if (e.mozRequestFullScreen)
        e.mozRequestFullScreen();
    else if (e.msRequestFullscreen)
        e.msRequestFullscreen();
}
/**
 * Tries to open element in fullscreen
 */
function CancelFullscreen(element) {
    let doc = element.ownerDocument;
    if (doc.cancelFullscreen)
        doc.cancelFullscreen();
    else if (doc.webkitCancelFullScreen)
        doc.webkitCancelFullScreen();
    else if (doc.mozCancelFullScreen)
        doc.mozCancelFullScreen();
    else if (doc.msExitFullscreen)
        doc.msExitFullscreen();
}
/** Type guard for html input elements. */
function IsHTMLInputElement(htmlElement) {
    return htmlElement.nodeName === 'INPUT';
}
/** Type guard for html textarea elements. */
function IsHTMLTextAreaElement(htmlElement) {
    return htmlElement.nodeName === 'TEXTAREA';
}
function IsHTMLElementTextInput(strTagName, strInputType) {
    switch (strTagName) {
        case "TEXTAREA":
            return true;
        case "INPUT":
            switch (strInputType) {
                case "date":
                case "datetime-local":
                case "datetime":
                case "email":
                case "month":
                case "number":
                case "password":
                case "search":
                case "tel":
                case "text":
                case "time":
                case "url":
                case "week":
                    return true;
                default:
                    return false;
            }
        default:
            return false;
    }
}
/**
 * Run the passed-in function when the document is ready to render, or immediately if
 * the document has already loaded.
 */
function RunWhenDocumentReady(fn) {
    if (document.readyState == 'loading')
        document.addEventListener('DOMContentLoaded', fn);
    else
        fn();
}
class CChildScrolledIntoViewCoordinator {
    constructor(nBufferPx) {
        this.m_bNeedSort = false;
        this.m_bOffsetsInvalidated = false;
        this.m_rgChildren = [];
        this.RecomputeVisibility = () => {
            let yMin = this.m_elParent.scrollTop - this.m_nBufferPx;
            let yMax = this.m_elParent.scrollTop + this.m_elParent.clientHeight + this.m_nBufferPx;
            this.EnsureSort();
            // todo: binary search?
            //	also right now, this only fires for becoming visible.  Could remove elements afterwards
            for (let child of this.m_rgChildren) {
                if (child.yOffset < yMin)
                    continue;
                else if (child.yOffset > yMax)
                    break;
                child.fnCallback(true);
            }
            this.m_nLastYMin = yMin;
            this.m_nLastYMax = yMax;
        };
        this.m_nBufferPx = nBufferPx;
    }
    SetParent(elParent) {
        if (this.m_elParent) {
            this.m_elParent.ownerDocument.defaultView.removeEventListener('resize', this.RecomputeVisibility);
        }
        this.m_elParent = elParent;
        if (this.m_elParent) {
            this.m_elParent.ownerDocument.defaultView.addEventListener('resize', this.RecomputeVisibility);
        }
    }
    InvalidateOffsetsAndRecompute() {
        this.m_bOffsetsInvalidated = true;
        this.RecomputeVisibility();
    }
    EnsureSort() {
        if (this.m_bOffsetsInvalidated) {
            for (let i = 0; i < this.m_rgChildren.length; i++) {
                this.m_rgChildren[i].yOffset = this.m_rgChildren[i].element.offsetTop;
            }
            this.m_bOffsetsInvalidated = false;
        }
        if (this.m_bNeedSort) {
            this.m_rgChildren.sort((a, b) => a.yOffset - b.yOffset); //ascending by yoffset
            this.m_bNeedSort = false;
        }
    }
    RegisterChild(child, fnCallback) {
        this.m_rgChildren.push({
            element: child,
            yOffset: child.offsetTop,
            fnCallback,
        });
        this.m_bNeedSort = true;
        if (this.m_nLastYMin !== undefined && this.m_nLastYMax !== undefined) {
            if (child.offsetTop >= this.m_nLastYMin && child.offsetTop <= this.m_nLastYMax)
                fnCallback(true);
        }
    }
    UnregisterChild(child) {
        shared_utils_arrayutils__WEBPACK_IMPORTED_MODULE_0__.FindAndRemoveWhere(this.m_rgChildren, (scrollChild) => scrollChild.element == child);
    }
}
function BlobToFile(blob, fileName) {
    const b = blob;
    // A Blob() is almost a File() - it's just missing the two properties below which we will add
    b.lastModifiedDate = new Date();
    b.name = fileName || Date.now().toString();
    // Cast to a File() type
    return blob;
}
/**
 * Finds the closest ancestor of an element with a specified attribute within rootElement.
 * @returns Closest ancestor with specified attribute, or rootElement if none.
 * @param rootElement Stopping-point for search.
 * @param element Starting-point for search; must be within rootElement.
 * @param attribute Attribute that found element must have.
*/
function FindAncestorWithAttribute(rootElement, element, attribute) {
    let e = element.parentElement;
    while (e && e !== rootElement && !e.hasAttribute(attribute)) {
        e = e.parentElement;
    }
    return e || rootElement;
}
/**
 * Returns the set of all elements with the specified attribute encountered first
 * on every path to a leaf node rooted at rootElement, in topological order
 * (i.e. the order they would appear in a text version of the document).
 * No element of that set is a descendant of another, though any of them
 * may have descendants with the specified attribute.
 * This is equivalent to removing all elements in rootElement that don't have the specified attribute,
 * with remaining great-*grandparents adopting their orphaned great-*grandchildren,
 * and taking the children of rootElement in what remains.
 * Example:
 * Imagine a hierarchy like this:
 * <div data-nav-type='group'> (A)
 *  <div ...>
 *   <div data-nav-type='group'> (B)
 *    <div ...>
 *     <span ...>
 *      <button data-nav-type='target'> (C)
 *       <div ...>
 *        <div data-nav-type='group'> (D)
 *         <div data-nav-type='target'> (E)
 *        </div>
 *       </div>
 *      </button>
 *     </span>
 *    <div data-nav-type='target'> (F)
 *    </div>
 *    <div>
 *     <div data-nav-type='group'> (G)
 *    </div>
 *    <div data-nav-type='target'> (H)
 *   </div>
 *  </div>
 * </div>
 * The first data-nav-type descendants of A are B, F, and G.
 * The other data-nav-type descendants of A are descendants of one of those, and not part of the result set.
 * @param rootElement The starting point of the search.
 * @param strAttribute Attribute that found elements must have.
*/
function FindFirstDescendantsWithAttribute(rootElement, strAttribute) {
    const matchesSet = [];
    // Don't check rootElement; start search with children, in order.
    const frontierStack = Array.prototype.slice.call(rootElement.children).reverse();
    while (frontierStack.length > 0) {
        // Only explore elements if they don't have the attribute.
        const e = frontierStack.pop();
        if (e.hasAttribute(strAttribute))
            matchesSet.push(e);
        else
            frontierStack.push(...Array.prototype.slice.call(e.children).reverse());
    }
    return matchesSet;
}
/**
 * Looks for ancestor in dom that is scrollable. Returns null if not found
 */
function FindScrollableAncestor(element, limitToAxis) {
    let current = element.parentElement;
    while (current) {
        if (!limitToAxis || limitToAxis == 'x') {
            let strStyle = window.getComputedStyle(current);
            if (strStyle.overflowX == 'scroll' || strStyle.overflowX == 'auto' || strStyle.position == 'fixed')
                break;
        }
        if (!limitToAxis || limitToAxis == 'y') {
            let strStyle = window.getComputedStyle(current);
            if (strStyle.overflowY == 'scroll' || strStyle.overflowY == 'auto' || strStyle.position == 'fixed')
                break;
        }
        current = current.parentElement;
    }
    return current;
}
/**
 * Walks up the hierarchy searching for an element that matches the predicate, or undefined if none found.
 */
function FindAncestrally(element, predicate) {
    while (element) {
        if (predicate(element))
            return element;
        element = element.parentElement;
    }
    return undefined;
}
/** @returns Whether element can scroll on given axis. */
function BIsElementScrollableOnAxis(element, axis) {
    // check if window
    if (!("ownerDocument" in element))
        return true;
    // An element could have its scroll size > frame size, yet its style declares it non-scrolling.
    const style = element.ownerDocument.defaultView.getComputedStyle(element);
    const overflow = axis === 'x' ? style.overflowX : style.overflowY;
    const bIsScrollable = overflow === 'auto' || overflow === 'scroll';
    return bIsScrollable;
}
/**
 * Returns a Promise that resolves the next time the event occurs.
 */
function WaitForNextEvent(element, type) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
        let listener;
        const promise = new Promise((resolve) => {
            listener = resolve;
            element.addEventListener(type, resolve); // This would be easier with `once`, but IE11 doesn't support it.
        });
        const event = yield promise;
        element.removeEventListener(type, listener);
        return event;
    });
}
/**
 * Returns a map of url -> link for all style sheets in the current document
 */
function GetStyleSheetLinks() {
    return GetStyleSheetLinksForDocument(document);
}
/**
 * Returns a map of url -> link for all style sheets in the given document
 */
function GetStyleSheetLinksForDocument(doc) {
    const hrefs = {};
    const nodeList = doc.querySelectorAll('link[rel="stylesheet"]');
    nodeList.forEach((node) => {
        hrefs[node.href] = node;
    });
    return hrefs;
}
/**
 * Adds any missing stylesheets in the provided map to the specified window
 */
function AddMissingStylesheetsToWindow(win, styleSheetLinks) {
    AddStylesheetsToDocument(win.document, styleSheetLinks, true);
}
/**
 * Adds any missing stylesheets in the provided map to the specified document, optionally removing an existing stylesheet links that are not in the passed set.
 * @returns array of links added
 */
function AddStylesheetsToDocument(doc, styleSheetLinks, bRemoveExistingLinks) {
    const objNeededLinks = Object.assign({}, styleSheetLinks);
    const elHead = doc.getElementsByTagName("head")[0];
    const rgLinks = elHead.getElementsByTagName("link");
    const nLinkCount = rgLinks.length;
    for (let i = 0; i < nLinkCount; ++i) {
        const link = rgLinks[i];
        if (objNeededLinks[link.href]) {
            delete objNeededLinks[link.href];
        }
        else if (bRemoveExistingLinks) {
            link.parentNode.removeChild(link);
        }
    }
    let rgAddedLinks = [];
    for (let strHref in objNeededLinks) {
        const elLink = objNeededLinks[strHref];
        const elNewLink = doc.createElement("link");
        for (let iAttribute = 0; iAttribute < elLink.attributes.length; iAttribute++) {
            let attribute = elLink.attributes.item(iAttribute);
            elNewLink.setAttribute(attribute.name, attribute.value);
        }
        rgAddedLinks.push(elNewLink);
    }
    // add to top
    elHead.prepend(...rgAddedLinks);
    return rgAddedLinks;
}
/**
 * Updates any stylesheest in the provided map within the specified document, adding any that are not present at all.
 */
function UpdateStylesheetsInDocument(doc, styleSheetLinks) {
    // Strips query params
    const normalizeHref = (href) => href.split('?')[0];
    // Normalize query params off of links so we can update with cache busting rather than just prepending like AddStylesheetsToDocument does
    const normalizedLinks = Object.keys(styleSheetLinks).reduce((normalized, href) => {
        normalized[normalizeHref(href)] = [href, styleSheetLinks[href]];
        return normalized;
    }, {});
    const elHead = doc.getElementsByTagName('head')[0];
    const rgLinks = elHead.getElementsByTagName('link');
    for (let i = 0; i < rgLinks.length; i++) {
        const link = rgLinks[i];
        const replacementInfo = normalizedLinks[normalizeHref(link.href)];
        if (replacementInfo) {
            // In dev we create a new link rather than updating the existing one to help with
            // code changes and ensuring we only have the latest changes.
            const linkToUpdate =  true ? document.createElement('link') : 0;
            const [_, replacement] = replacementInfo;
            for (let iAttribute = 0; iAttribute < replacement.attributes.length; iAttribute++) {
                let attribute = replacement.attributes.item(iAttribute);
                linkToUpdate.setAttribute(attribute.name, attribute.value);
            }
            if (true) {
                // Now we need to insert our new link and remove the old. We wait until the new
                // on has loaded so there is not a flash of unstyled UI.
                let parent = link.parentElement;
                linkToUpdate.addEventListener('load', () => parent.removeChild(link));
                parent.insertBefore(linkToUpdate, link);
            }
            delete normalizedLinks[normalizeHref(link.href)];
        }
    }
    // Remaining items in normalized links need to be added (after denormalizing)
    const remainingLinks = Object.keys(normalizedLinks).reduce((denormalized, normalizedHref) => {
        const [href, link] = normalizedLinks[normalizedHref];
        denormalized[href] = link;
        return denormalized;
    }, {});
    AddStylesheetsToDocument(doc, remainingLinks);
}
function HandleMutationAddAndRemove(mutation, fnOnElementAdded, fnOnElementRemoved) {
    if (mutation.type === 'childList') {
        for (let iNode = 0; iNode < mutation.addedNodes.length; iNode++) {
            const node = mutation.addedNodes[iNode];
            if (node.nodeType === Node.ELEMENT_NODE) {
                const element = node;
                // It is possible for an element to added and removed in the same mutation, in which case, it will not
                // have a parent element. Don't bother adding elements without a parent element.
                if (element.parentElement) {
                    fnOnElementAdded(element);
                }
            }
        }
        for (let iNode = 0; iNode < mutation.removedNodes.length; iNode++) {
            const node = mutation.removedNodes[iNode];
            if (node.nodeType === Node.ELEMENT_NODE) {
                fnOnElementRemoved(node);
            }
        }
    }
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/localization.ts":
/*!********************************************************!*\
  !*** ../../../web_src/shared/js/utils/localization.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BLocStringExists": () => (/* binding */ BLocStringExists),
/* harmony export */   "CLocLanguageArray": () => (/* binding */ CLocLanguageArray),
/* harmony export */   "CLocalizationManager": () => (/* binding */ CLocalizationManager),
/* harmony export */   "GetConfiguredLocale": () => (/* binding */ GetConfiguredLocale),
/* harmony export */   "LoadLocalizationFiles": () => (/* binding */ LoadLocalizationFiles),
/* harmony export */   "LocaleToELanguage": () => (/* binding */ LocaleToELanguage),
/* harmony export */   "LocalizationManager": () => (/* binding */ LocalizationManager),
/* harmony export */   "Localize": () => (/* binding */ Localize),
/* harmony export */   "LocalizeCalendarMonth": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarMonth),
/* harmony export */   "LocalizeCalendarTime": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarTime),
/* harmony export */   "LocalizeCalendarTimeLessGranular": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarTimeLessGranular),
/* harmony export */   "LocalizeCalendarWeekday": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarWeekday),
/* harmony export */   "LocalizeCalendarWeekdayAndDayMonth": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarWeekdayAndDayMonth),
/* harmony export */   "LocalizeCalendarYear": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeCalendarYear),
/* harmony export */   "LocalizeDateHumanReadable": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeDateHumanReadable),
/* harmony export */   "LocalizeFromFallback": () => (/* binding */ LocalizeFromFallback),
/* harmony export */   "LocalizeInlineReact": () => (/* binding */ LocalizeInlineReact),
/* harmony export */   "LocalizeInlineReactPlural": () => (/* binding */ LocalizeInlineReactPlural),
/* harmony export */   "LocalizePlural": () => (/* binding */ LocalizePlural),
/* harmony export */   "LocalizeReact": () => (/* binding */ LocalizeReact),
/* harmony export */   "LocalizeReactPlural": () => (/* binding */ LocalizeReactPlural),
/* harmony export */   "LocalizeRtime32ToShortDate": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeRtime32ToShortDate),
/* harmony export */   "LocalizeRtime32ToShorterDate": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeRtime32ToShorterDate),
/* harmony export */   "LocalizeTimeSince": () => (/* reexport safe */ _localization_datetime__WEBPACK_IMPORTED_MODULE_8__.LocalizeTimeSince),
/* harmony export */   "NativeLanguageNames": () => (/* binding */ NativeLanguageNames)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");
/* harmony import */ var shared_clienttypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/clienttypes */ "../../../web_src/shared/js/clienttypes/index.ts");
/* harmony import */ var shared_webui_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/webui/config */ "../../../web_src/shared/js/webui/config.ts");
/* harmony import */ var _arrayutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./arrayutils */ "../../../web_src/shared/js/utils/arrayutils.ts");
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./assert */ "../../../web_src/shared/js/utils/assert.ts");
/* harmony import */ var shared_stores_ierrorreportingstore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/stores/ierrorreportingstore */ "../../../web_src/shared/js/stores/ierrorreportingstore.ts");
/* harmony import */ var _callbackutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./callbackutils */ "../../../web_src/shared/js/utils/callbackutils.ts");
/* harmony import */ var _localization_datetime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./localization/datetime */ "../../../web_src/shared/js/utils/localization/datetime.ts");









//-----------------------------------------------------------------------------
// Purpose: Singleton localization manager
//-----------------------------------------------------------------------------
class CLocalizationManager {
    constructor() {
        this.m_mapTokens = new Map();
        this.m_mapFallbackTokens = new Map();
        this.m_cbkTokensChanged = new _callbackutils__WEBPACK_IMPORTED_MODULE_7__.CCallbackList();
    }
    static InstallErrorReportingStore(store) {
        this.sm_ErrorReportingStore = store;
    }
    // Given a language (such as english or sc_schinese), this will return the language that should be used as a fallback (such as english or schinese)
    // and should be used instead of assuming English since that may not be the desired fallback in all cases
    static GetLanguageFallback(sLanguage) {
        return (sLanguage === 'sc_schinese') ? 'schinese' : 'english';
    }
    // Same as the above, but operates on the language enum
    static GetELanguageFallback(language) {
        return (language === shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_SteamChina_SChinese) ? shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Simplified_Chinese : shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_English;
    }
    // Given a language, this determines if it is valid in the specified realm or not
    static IsELanguageValidInRealm(language, realm) {
        const langRealm = (language === shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_SteamChina_SChinese) ? shared_clienttypes__WEBPACK_IMPORTED_MODULE_2__.ESteamRealm.k_ESteamRealmChina : shared_clienttypes__WEBPACK_IMPORTED_MODULE_2__.ESteamRealm.k_ESteamRealmGlobal;
        return (realm === langRealm);
    }
    // Given an array of realms, this will return the list of languages that matches at least one of these provided realms
    static GetLanguageListForRealms(realmList) {
        const rv = new Array();
        for (let language = shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_English; language < shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_MAX; language++) {
            for (const realm of realmList) {
                if (this.IsELanguageValidInRealm(language, realm)) {
                    rv.push(language);
                    break;
                }
            }
        }
        return rv;
    }
    InitFromObjects(primary, fallback, sharedPrimary, sharedFallback, bAppend) {
        if (!bAppend) {
            this.m_mapTokens.clear();
        }
        const allPrimary = Object.assign(Object.assign({}, (sharedPrimary || {})), primary);
        const allFallback = Object.assign(Object.assign({}, (sharedFallback || {})), (fallback || {}));
        this.AddTokens(allPrimary, allFallback);
        this.m_cbkTokensChanged.Dispatch();
    }
    InitDirect(dict, fallback) {
        this.m_mapTokens.clear();
        this.m_mapFallbackTokens.clear();
        this.AddTokens(dict, fallback);
        this.m_cbkTokensChanged.Dispatch();
    }
    AddTokens(dict, fallback) {
        Object.keys(dict).forEach((key) => {
            this.m_mapTokens.set(key, dict[key]);
        });
        // add any missing keys from the fallback language
        if (fallback) {
            Object.keys(fallback).forEach((key) => {
                if (!this.m_mapTokens.has(key))
                    this.m_mapTokens.set(key, fallback[key]);
                this.m_mapFallbackTokens.set(key, fallback[key]);
            });
        }
    }
    GetTokensChangedCallbackList() {
        return this.m_cbkTokensChanged;
    }
    GetPreferredLocales() {
        if (this.m_rgLocalesToUse)
            return this.m_rgLocalesToUse;
        if (navigator && navigator.languages)
            return navigator.languages;
        // Fallback to english
        return ['en-US'];
    }
    // Similar to the PHP version, gives me the list of languages in fallback order to lookup localization tokens
    GetELanguageFallbackOrder(rgIncludeRealmLanguages = null) {
        let langs = new Array();
        langs.push((0,shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.PchLanguageToELanguage)(shared_webui_config__WEBPACK_IMPORTED_MODULE_3__.Config.LANGUAGE));
        let rgLanguages = shared_webui_config__WEBPACK_IMPORTED_MODULE_3__.Config.SUPPORTED_LANGUAGES || [];
        rgLanguages.forEach((lang) => {
            if (lang.value != shared_webui_config__WEBPACK_IMPORTED_MODULE_3__.Config.LANGUAGE) {
                langs.push((0,shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.PchLanguageToELanguage)(lang.value));
            }
        });
        if (rgIncludeRealmLanguages) {
            const rgLanguages = CLocalizationManager.GetLanguageListForRealms(rgIncludeRealmLanguages);
            rgLanguages.forEach((eLang) => {
                if (langs.indexOf(eLang) == -1) {
                    langs.push(eLang);
                }
            });
        }
        return langs;
    }
    SetPreferredLocales(rgLocales) {
        this.m_rgLocalesToUse = rgLocales;
    }
    BLooksLikeToken(strToken) {
        return strToken && strToken.length > 0 && strToken.charAt(0) == '#';
    }
    LocalizeIfToken(strTokenOrString, bFailSilently) {
        return this.BLooksLikeToken(strTokenOrString) ? this.LocalizeString(strTokenOrString, bFailSilently) : strTokenOrString;
    }
    LocalizeString(strToken, bFailSilently) {
        if (true) {
            (0,_assert__WEBPACK_IMPORTED_MODULE_5__.AssertMsg)(this.m_mapTokens.size > 0, `Attempting to localize token '${strToken}' with no tokens in our map.`);
        }
        // must start with #
        if (!this.BLooksLikeToken(strToken))
            return undefined;
        let strValue = this.m_mapTokens.get(strToken.substring(1));
        if (strValue === undefined) {
            if (!bFailSilently && CLocalizationManager.sm_ErrorReportingStore) {
                CLocalizationManager.sm_ErrorReportingStore.ReportError(new Error(`Unable to find localization token '${strToken}' for language '${shared_webui_config__WEBPACK_IMPORTED_MODULE_3__.Config.LANGUAGE}', ${this.m_mapTokens.size} tokens in map`), { bIncludeMessageInIdentifier: true });
            }
            return undefined;
        }
        return strValue;
    }
    LocalizeStringFromFallback(strToken) {
        // must start with #
        if (!strToken || strToken.length == 0 || strToken.charAt(0) != '#')
            return undefined;
        let strValue = this.m_mapFallbackTokens.get(strToken.substring(1));
        if (strValue === undefined)
            return undefined;
        return strValue;
    }
}
function BLocStringExists(strToken) {
    return (LocalizationManager.LocalizeString(strToken, true) != undefined);
}
//-----------------------------------------------------------------------------
// Purpose: Localizes token
// Parameters:	strToken - token to look up, starting with #
//				Variable number of trailing arguments which will be used to replace %1$s, %2$s, etc. in strings
//-----------------------------------------------------------------------------
function Localize(strToken, ...args) {
    let strValue = LocalizationManager.LocalizeString(strToken);
    if (strValue === undefined)
        return strToken;
    return ReplaceArgumentsInString(strValue, ...args);
}
//-----------------------------------------------------------------------------
// Purpose: Localizes token, substituting strings or react elements for arguments
// Parameters:	strToken - token to look up, starting with #
//				Variable number of trailing arguments which will be used to replace %1$s, %2$s, etc. in strings
//
//	The output is expected to be used in JSX, eg: <div>{ LocalizeReact( '#foo', <MyReactElement /> ) }</div>
//-----------------------------------------------------------------------------
function LocalizeReact(strToken, ...args) {
    let strValue = LocalizationManager.LocalizeString(strToken);
    if (strValue === undefined)
        return strToken;
    let output = [];
    let regex = /(.*?)%(\d+)\$s/g;
    let cCharactersConsumed = 0;
    let match;
    while ((match = regex.exec(strValue))) {
        cCharactersConsumed += match[0].length;
        output.push(match[1]);
        let index = parseInt(match[2]);
        if (index >= 1 && index <= args.length)
            output.push(args[index - 1]);
    }
    output.push(strValue.substr(cCharactersConsumed));
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, ...output);
}
//-----------------------------------------------------------------------------
// Purpose: Localizes token with a number, substituting strings or react elements for arguments - expects token to be the
//		singular number case, will look for a token with "_Plural" if number is not 1
// Parameters:	strToken - token to look up, starting with #
//				A number, which will replace %1$s in the resulting string.  Can be a string (formatted number)
//				Variable number of trailing arguments which will be used to replace %2$s, %3$s etc. in strings
//
//	The output is expected to be used in JSX, eg: <div>{ LocalizeReact( '#foo', <MyReactElement /> ) }</div>
//-----------------------------------------------------------------------------
function LocalizeReactPlural(strToken, number, ...args) {
    if (number === 1 || number === '1') {
        return LocalizeReact(strToken, number, ...args);
    }
    else {
        return LocalizeReact(strToken + '_Plural', number.toLocaleString(), ...args);
    }
}
/**
 * Uses the specified localization token and React elements to create a formatted, localized string. The localization token is parsed
 * for matching <#> ... </#> segments, and the text from those segments is set as the children of each matching arg parameter.
 *
 * Example token:
 * 		"TestToken": "Press the <1>Enter</1> Button"
 * Can be used with:
 * 		let str = LocalizeInlineReact( '#TestToken', <span style={ {color: 'red'} } /> ) }
 */
function LocalizeInlineReact(strToken, ...args) {
    let strValue = LocalizationManager.LocalizeIfToken(strToken);
    if (strValue === undefined)
        return strToken;
    return LocalizeInlineReactHelper(strValue, ...args);
}
/**
 * Same as LocalizeInlineReact, but accepts a number to determine whether to return the plural version of the token while supporting inline react
 */
function LocalizeInlineReactPlural(strToken, number, ...args) {
    let strValue = undefined;
    if (number === 1 || number === '1') {
        strValue = Localize(strToken, number);
    }
    else {
        strValue = Localize(strToken + '_Plural', number);
    }
    if (strValue === undefined)
        return strToken;
    return LocalizeInlineReactHelper(strValue, ...args);
}
/**
 * Worker for LocalizeInlineReact so we can support Localize and LocalizePlural use cases
 */
function LocalizeInlineReactHelper(strLocalizedToken, ...args) {
    let output = [];
    let regex = /(.*?)<(\d+)>(.*)<\/(\2)>/g;
    let cCharactersConsumed = 0;
    let match;
    while ((match = regex.exec(strLocalizedToken))) {
        cCharactersConsumed += match[0].length;
        output.push(match[1]);
        let index = parseInt(match[2]);
        let strInner = match[3] || '';
        let arg = (index >= 1 && index <= args.length) ? args[index - 1] : null;
        let rct = arg ? react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(args[index - 1], {}, [strInner]) : strInner;
        output.push(rct);
    }
    output.push(strLocalizedToken.substr(cCharactersConsumed));
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, ...output);
}
//-----------------------------------------------------------------------------
// Purpose: Localizes token with a number - expects token to be the singular number case, will look
//		for a token with "_Plural" if number is not 1
// Parameters:	strToken - token to look up, starting with #
//				A number, which will replace %1$s in the resulting string.  Can be a string (formatted number)
//				Variable number of trailing arguments which will be used to replace %2$s, %3$s etc. in strings
//-----------------------------------------------------------------------------
function LocalizePlural(strToken, number, ...args) {
    if (number === 1 || number === '1') {
        return Localize(strToken, number, ...args);
    }
    else {
        return Localize(strToken + '_Plural', number, ...args);
    }
}
//-----------------------------------------------------------------------------
// Purpose: Localizes token from fallback language (english)
// Parameters:	strToken - token to look up, starting with #
//				Variable number of trailing arguments which will be used to replace %1$s, %2$s, etc. in strings
//-----------------------------------------------------------------------------
function LocalizeFromFallback(strToken, ...args) {
    let strValue = LocalizationManager.LocalizeStringFromFallback(strToken);
    if (strValue === undefined)
        return strToken;
    return ReplaceArgumentsInString(strValue, ...args);
}
/**
 * Replaces %1$s, %2$s, etc. in an already looked up loc string with provided arguments
 */
function ReplaceArgumentsInString(strLocalized, ...args) {
    // found a matching token
    if (args.length == 0)
        return strLocalized;
    strLocalized = strLocalized.replace(/%(?:(\d+)\$)?s/g, function (match, index) {
        // Subtract one from index because loc strings are 1-based and
        // the args array is 0-based.
        if (index <= args.length && index >= 1) {
            let arg = args[index - 1];
            return String(arg === undefined || arg === null ? '' : arg);
        }
        return match;
    });
    return strLocalized;
}
// A somewhat common pattern is to have an array that can be indexed by the language for storing a collection of localized strings. This
// class provides a collection of utilities to help deal with setting and getting those values based upon language. This takes the array
// in for modification rather than is an object that can be used, since a lot of these cases are saved/loaded to JSON which doesn't support
// objects
class CLocLanguageArray {
    //given a language array, this will set the specified value for the provided language. This returns the provided array as a return
    //value to allow for chaining assignment
    static Set(rgLanguageStrings, language, newValue) {
        //make sure that we have room in this array
        if (rgLanguageStrings.length <= language) {
            //sanity check that we aren't making an exessively large array
            if (language >= shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_MAX)
                return rgLanguageStrings;
            rgLanguageStrings = (0,_arrayutils__WEBPACK_IMPORTED_MODULE_4__.PadArray)(rgLanguageStrings, language + 1, null);
        }
        rgLanguageStrings[language] = newValue;
        return rgLanguageStrings;
    }
    //looks up the provided language from the specified array. If nothing is set (i.e. null) or this language is outside of the range of the array
    //an empty string will be returned
    static Get(rgLanguageStrings, language) {
        return (rgLanguageStrings && rgLanguageStrings.length > language) ? (rgLanguageStrings[language] || '') : '';
    }
    //this is the same as above, but with the catch that if the provided language isn't found, it will lookup a fallback language and
    //check for that, and return that if nothing is found for the primary language
    static GetWithFallback(rgLanguageStrings, language) {
        if (rgLanguageStrings) {
            const primaryString = CLocLanguageArray.Get(rgLanguageStrings, language);
            return primaryString || CLocLanguageArray.Get(rgLanguageStrings, CLocalizationManager.GetELanguageFallback(language));
        }
        return null;
    }
}
/**
 * Returns a map of language names in that language.
 * These strings do not need to be localized as they do not change between languages.
 */
const NativeLanguageNames = {
    "english": "English",
    "german": "Deutsch",
    "french": "Français",
    "italian": "Italiano",
    "korean": "한국어",
    "spanish": "Español — España",
    "schinese": "简体中文",
    "tchinese": "繁體中文",
    "russian": "Русский",
    "thai": "ไทย",
    "japanese": "日本語",
    "portuguese": "Português",
    "polish": "Polski",
    "danish": "Dansk",
    "dutch": "Nederlands",
    "finnish": "Suomi",
    "norwegian": "Norsk",
    "swedish": "Svenska",
    "hungarian": "Magyar",
    "czech": "Čeština",
    "romanian": "Română",
    "turkish": "Türkçe",
    "arabic": "العربية",
    "brazilian": "Português — Brasil",
    "bulgarian": "български",
    "greek": "Ελληνικά",
    "ukrainian": "Українська",
    "latam": "Español — Latinoamérica",
    "vietnamese": "Tiếng Việt",
    "koreana": "한국어",
    //sc_schinese is not listed here as this isn't something that should be selectable
};
/**
 * Returns a map of language names in that language.
 * These strings do not need to be localized as they do not change between languages.
 */
const LanguageICUNames = {
    "english": "en",
    "german": "de",
    "french": "fr",
    "italian": "it",
    "korean": "ko",
    "latam": "es-419",
    "spanish": "es",
    "schinese": "zh-cn",
    "tchinese": "zh-tw",
    "russian": "ru",
    "thai": "th",
    "japanese": "ja",
    "brazilian": "pt-br",
    "portuguese": "pt",
    "polish": "pl",
    "danish": "da",
    "dutch": "nl",
    "finnish": "fi",
    "norwegian": "no",
    "swedish": "sv",
    "hungarian": "hu",
    "czech": "cs",
    "romanian": "ro",
    "turkish": "tr",
    "arabic": "ar",
    "bulgarian": "bg",
    "greek": "el",
    "ukrainian": "uk",
    "vietnamese": "vi",
    //These alias to other languages to allow them to be used on the back end, but still map to meaningful locales
    "sc_schinese": "zh-cn",
    "koreana": "ko",
};
/**
 * Map common locales to ELanguage. Used by the VOD code - look at dash_player.js
 */
const LocaleToELanguage = {
    "en-US": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_English,
    "de-DE": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_German,
    "fr-FR": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_French,
    "it-IT": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Italian,
    "ko-KR": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Korean,
    "es-ES": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Spanish,
    "zh-CH": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Simplified_Chinese,
    "zh-CN": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Traditional_Chinese,
    "ru-RU": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Russian,
    "th-TH": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Thai,
    "ja-JP": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Japanese,
    "pt-PT": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Portuguese,
    "pl-PL": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Polish,
    "da-DK": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Danish,
    "nl-NL": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Dutch,
    "fi-FI": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Finnish,
    "nb-NO": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Norwegian,
    "sv-SE": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Swedish,
    "hu-HU": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Hungarian,
    "cs-CZ": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Czech,
    "ro-RO": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Romanian,
    "tr-TR": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Turkish,
    "pt-BR": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Brazilian,
    "bg-BG": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Bulgarian,
    "el-GR": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Greek,
    "ar-SA": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Arabic,
    "uk-UA": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Ukrainian,
    "es-419": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Latam_Spanish,
    "vi-VN": shared_clientenums__WEBPACK_IMPORTED_MODULE_1__.ELanguage.k_Lang_Vietnamese,
};
/** @returns the locale (short code, e.g. 'de, 'zh-cn') for the current language from Steam Settings, or null if unknown. */
function GetConfiguredLocale() {
    return LanguageICUNames[shared_webui_config__WEBPACK_IMPORTED_MODULE_3__.Config.LANGUAGE] || null;
}
/**
 * Loads localization json files. Like Promise.all(), but doesn't explode when one of the maps failed to load
 */
function LoadLocalizationFiles(rgValues) {
    // ideally we would just use Promise.allSettled() here, but it is pretty new and we are worried about browser support. So, rolling our own instead
    let fnResolve;
    let ret = new Promise((resolve) => fnResolve = resolve);
    let rgResults = Array(rgValues.length);
    let nPendingCallbacks = rgValues.length;
    rgValues.map((value, i) => {
        Promise.resolve(value).then((result) => {
            rgResults[i] = result;
            nPendingCallbacks--;
            if (nPendingCallbacks == 0)
                fnResolve(rgResults);
        })
            .catch((error) => {
            console.error('Failed to load localiation file: ' + error);
            // fill in with empty struct as caller is going to just pass this to the load call
            rgResults[i] = {};
            nPendingCallbacks--;
            if (nPendingCallbacks == 0)
                fnResolve(rgResults);
        });
    });
    return ret;
}
const LocalizationManager = new CLocalizationManager();
window.LocalizationManager = LocalizationManager;


/***/ }),

/***/ "../../../web_src/shared/js/utils/localization/datetime.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/utils/localization/datetime.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BDoesLocaleUse24Hourclock": () => (/* binding */ BDoesLocaleUse24Hourclock),
/* harmony export */   "ETimeSinceSuffix": () => (/* binding */ ETimeSinceSuffix),
/* harmony export */   "LocalizeCalendarMonth": () => (/* binding */ LocalizeCalendarMonth),
/* harmony export */   "LocalizeCalendarMonthAndYear": () => (/* binding */ LocalizeCalendarMonthAndYear),
/* harmony export */   "LocalizeCalendarQuarter": () => (/* binding */ LocalizeCalendarQuarter),
/* harmony export */   "LocalizeCalendarTime": () => (/* binding */ LocalizeCalendarTime),
/* harmony export */   "LocalizeCalendarTimeLessGranular": () => (/* binding */ LocalizeCalendarTimeLessGranular),
/* harmony export */   "LocalizeCalendarWeekday": () => (/* binding */ LocalizeCalendarWeekday),
/* harmony export */   "LocalizeCalendarWeekdayAndDayMonth": () => (/* binding */ LocalizeCalendarWeekdayAndDayMonth),
/* harmony export */   "LocalizeCalendarYear": () => (/* binding */ LocalizeCalendarYear),
/* harmony export */   "LocalizeDateHumanReadable": () => (/* binding */ LocalizeDateHumanReadable),
/* harmony export */   "LocalizeRTimeToDateAndTimeAndTZ": () => (/* binding */ LocalizeRTimeToDateAndTimeAndTZ),
/* harmony export */   "LocalizeRTimeToHourAndMinutes": () => (/* binding */ LocalizeRTimeToHourAndMinutes),
/* harmony export */   "LocalizeRtime32ToMonthYear": () => (/* binding */ LocalizeRtime32ToMonthYear),
/* harmony export */   "LocalizeRtime32ToShortDate": () => (/* binding */ LocalizeRtime32ToShortDate),
/* harmony export */   "LocalizeRtime32ToShorterDate": () => (/* binding */ LocalizeRtime32ToShorterDate),
/* harmony export */   "LocalizeRtime32ToYear": () => (/* binding */ LocalizeRtime32ToYear),
/* harmony export */   "LocalizeShortCalendarMonth": () => (/* binding */ LocalizeShortCalendarMonth),
/* harmony export */   "LocalizeTimeRemaining": () => (/* binding */ LocalizeTimeRemaining),
/* harmony export */   "LocalizeTimeSince": () => (/* binding */ LocalizeTimeSince),
/* harmony export */   "LocalizedRTtimeToDateRangeShort": () => (/* binding */ LocalizedRTtimeToDateRangeShort)
/* harmony export */ });
/* harmony import */ var mobx_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx-utils */ "./node_modules/mobx-utils/mobx-utils.module.js");
/* harmony import */ var _localization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localization */ "../../../web_src/shared/js/utils/localization.ts");
/* harmony import */ var _time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../time */ "../../../web_src/shared/js/utils/time.ts");



// some of these functions return an observable value, some don't.  Look for references to MobxUtils.now().
// MobxUtils.now() can batch updates, but as used here it will probably not do that effectively.
var ETimeSinceSuffix;
(function (ETimeSinceSuffix) {
    ETimeSinceSuffix[ETimeSinceSuffix["None"] = 0] = "None";
    ETimeSinceSuffix[ETimeSinceSuffix["Ago"] = 1] = "Ago";
    ETimeSinceSuffix[ETimeSinceSuffix["Remaining"] = 2] = "Remaining";
})(ETimeSinceSuffix || (ETimeSinceSuffix = {}));
function LocalizeTimeSince(nSeconds, optsOrBoolean, bForceSingleUnits) {
    let options;
    if (typeof optsOrBoolean === 'boolean') {
        let bExcludeAgo = optsOrBoolean;
        let eSuffix = bExcludeAgo ? ETimeSinceSuffix.None : ETimeSinceSuffix.Ago;
        options = { eSuffix, bForceSingleUnits: bForceSingleUnits, bHighGranularity: false };
    }
    else {
        options = Object.assign({ eSuffix: ETimeSinceSuffix.Ago, bForceSingleUnits: false, bHighGranularity: false }, optsOrBoolean);
    }
    let strLocPrefix = '#TimeInterval_';
    if (options.eSuffix == ETimeSinceSuffix.Ago)
        strLocPrefix = '#TimeSince_';
    else if (options.eSuffix == ETimeSinceSuffix.Remaining)
        strLocPrefix = '#TimeRemaining_';
    let fnNumberFormatter = (num) => Math.floor(num);
    if (options.bAllowDecimal)
        fnNumberFormatter = (num) => Math.round(num * 10) / 10;
    if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerYear * 2) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XYears', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerYear));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerYear) {
        nSeconds -= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerYear;
        if ((nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth * 2) && !options.bForceSingleUnits)
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1YearXMonths', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth));
        else
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Year');
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth * 2) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XMonths', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerWeek * 2) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XWeeks', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerWeek));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerWeek) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Week', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerWeek));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay * 2) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XDays', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay) {
        nSeconds -= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay;
        if ((nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour * 2) && !options.bForceSingleUnits)
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1DayXHours', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour));
        else
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Day');
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour * 2) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XHours', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour));
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour) {
        nSeconds -= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour;
        if ((nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute * 2) && !options.bForceSingleUnits)
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1HourXMinutes', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute));
        else
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Hour');
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute * 2) {
        const nMinutes = Math.floor(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute);
        const nSecondsRemaining = nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute;
        if (!options.bHighGranularity || nSecondsRemaining == 0) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XMinutes', fnNumberFormatter(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute));
        }
        if (nSecondsRemaining == 1) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XMinutes1Second', nMinutes);
        }
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XMinutesXSeconds', nMinutes, nSecondsRemaining);
    }
    else if (nSeconds >= _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute) {
        const nSecondsRemaining = nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute;
        if (!options.bHighGranularity || nSecondsRemaining == 0) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Minute');
        }
        else if (nSecondsRemaining == 1) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Minute1Second');
        }
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1MinuteXSeconds', nSecondsRemaining);
    }
    else {
        if (!options.bHighGranularity) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'LessThanAMinute');
        }
        if (nSeconds == 1) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + '1Second');
        }
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)(strLocPrefix + 'XSeconds', nSeconds);
    }
}
function LocalizeDateHumanReadable(rtime, bHideYearOrOpts, bShowFullWeekday) {
    let baseOpts;
    if (bHideYearOrOpts === undefined || bHideYearOrOpts === true || bHideYearOrOpts === false) {
        baseOpts = {
            weekday: bShowFullWeekday ? 'long' : 'short',
            year: bHideYearOrOpts ? undefined : 'numeric',
        };
    }
    else {
        baseOpts = bHideYearOrOpts;
    }
    let date = new Date(rtime * 1000);
    const dateOptions = Object.assign({ weekday: 'short', month: 'long', day: 'numeric', year: 'numeric' }, baseOpts);
    let strDate = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dateOptions);
    return strDate;
}
/**
 * Purpose: Localize a date range (from to to). If they are the same month, we can shrink the message "June 23 - 27".
 * If they are different months, then "June 23 - July 1"
 */
function LocalizedRTtimeToDateRangeShort(rtimeStart, rtimeEnd) {
    let startDate = new Date(rtimeStart * 1000);
    let endDate = new Date(rtimeEnd * 1000);
    const dtNow = new Date();
    // If we cross year, then we need to include the year in both case
    // If we aren't in the current year, then lets be super clear as well.
    if (startDate.getFullYear() != endDate.getFullYear() ||
        dtNow.getFullYear() == startDate.getFullYear()) {
        return `${LocalizeRtime32ToShortDate(rtimeStart)} - ${LocalizeRtime32ToShortDate(rtimeEnd)}`;
    }
    const dayMonthOptions = {
        month: 'short',
        day: 'numeric',
    };
    const startDayAndMonth = startDate.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dayMonthOptions) + ' - ';
    // We can shorten it
    if (startDate.getMonth() == endDate.getMonth()) {
        const dayOptions = {
            day: 'numeric',
        };
        return startDayAndMonth + endDate.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dayOptions);
    }
    else {
        return startDayAndMonth + endDate.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dayMonthOptions);
    }
}
/**
 * Purpose: Localize the date to a short form string, e.g. Oct 26, 2018 in English
 *  Input is unix time in seconds (or rtime32)
 */
function LocalizeRtime32ToShortDate(rtime, opts) {
    let date = new Date(rtime * 1000);
    let strDate, nKey;
    if (!opts) {
        // Canonicalize the date and check the cache.
        const nKey = date.setHours(0, 0, 0, 0);
        let strDate = g_mapCachedLocalizedShortDate.get(nKey);
        if (strDate)
            return strDate;
    }
    const dateOptions = Object.assign({ year: 'numeric', month: 'short', day: 'numeric' }, opts);
    strDate = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dateOptions);
    if (nKey !== undefined)
        g_mapCachedLocalizedShortDate.set(nKey, strDate);
    return strDate;
}
function LocalizeRtime32ToMonthYear(rtime) {
    let date = new Date(rtime * 1000);
    return LocalizeCalendarMonthAndYear(date);
}
function LocalizeRtime32ToYear(rtime) {
    let date = new Date(rtime * 1000);
    return LocalizeCalendarYear(date);
}
const g_mapCachedLocaleUses24HourClock = new Map();
/** @returns true if the specified local defaults to using 24-hour time (13:00 vs. 1:00pm) */
function BDoesLocaleUse24Hourclock(strLocale) {
    let bUses24HourClock = g_mapCachedLocaleUses24HourClock.get(strLocale);
    if (bUses24HourClock === true || bUses24HourClock === false)
        return bUses24HourClock;
    // Compare formatted time with and without explicitly requesting 24 time.
    const dt = new Date();
    dt.setHours(15); // Make sure we are looking at PM.
    const strDefaultFormat = dt.toLocaleTimeString(strLocale, { hour: 'numeric' });
    const str24HourFormat = dt.toLocaleTimeString(strLocale, { hour: 'numeric', hour12: false });
    bUses24HourClock = strDefaultFormat == str24HourFormat;
    g_mapCachedLocaleUses24HourClock.set(strLocale, bUses24HourClock);
    return bUses24HourClock;
}
/**
 * Purpose: Localizes the time into a short hour and minutes format in the correct timezone. e.g. "7:00 PM" or "19:00".
 */
function LocalizeRTimeToHourAndMinutes(rtime, options, formatOptions) {
    const date = new Date(rtime * 1000);
    const options24HourClock = { hour: 'numeric', minute: '2-digit', hourCycle: 'h23' };
    const options12HourClock = { hour: 'numeric', minute: '2-digit' };
    const rgLocales = _localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales();
    const bUse24HourClock = options.bForce24HourClock || BDoesLocaleUse24Hourclock(rgLocales[0]); // Just check the first locale.
    const mergedFormatOptions = Object.assign(Object.assign({}, (bUse24HourClock ? options24HourClock : options12HourClock)), formatOptions);
    return date.toLocaleTimeString(rgLocales, mergedFormatOptions);
}
/** Caches date strings for MMM, DD, YYYY */
const g_mapCachedLocalizedShortDate = new Map();
/** Caches date strings for MMM, DD. Only used for current year. */
const g_mapCachedLocalizedShorterDate = new Map();
/**
 * Localizes the date to an even shorter form string, e.g. Tomorrow, Yesterday or Oct 26 in English.
 * If observed (e.g. used in a render function), the string will recompute at End Of Day.
 * Only includes the year if it's different from the current one.
 *  Input is unix time in seconds (or rtime32)
 *
 * bUseRelativeNames = default true, use Today/Tomorrow/Yesterday
 */
function LocalizeRtime32ToShorterDate(rtime, fullmonthname, bUseRelativeNames = true, bMobx = true) {
    const dtNow = new Date();
    const dt = new Date(rtime * 1000);
    if (dt.getFullYear() != dtNow.getFullYear()) {
        return LocalizeRtime32ToShortDate(rtime); // Can't go shorter.
    }
    if (bMobx) {
        // Schedule recomputation at upcoming midnight.
        mobx_utils__WEBPACK_IMPORTED_MODULE_2__.now(new Date().setHours(24, 0, 0, 0) - dtNow.getTime());
    }
    // Compare to previous midnight.
    const dtCompare = new Date();
    dtCompare.setHours(0, 0, 0, 0);
    if (bUseRelativeNames) {
        if (dt >= dtCompare) // Today or later.
         {
            // Check following midnight.
            dtCompare.setDate(dtCompare.getDate() + 1);
            if (dt < dtCompare)
                return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Today');
            // And the one after that.
            dtCompare.setDate(dtCompare.getDate() + 1);
            if (dt < dtCompare)
                return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Tomorrow');
        }
        else // Older than today; check the midnight before yesterday.
         {
            dtCompare.setDate(dtCompare.getDate() - 1);
            if (dt >= dtCompare)
                return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Yesterday');
        }
    }
    // Any day this year and but more than one day away gets the month and day.
    const dateOptions = {
        month: !fullmonthname ? 'short' : 'long',
        day: 'numeric',
    };
    // Canonicalize the date and check the cache.
    const key = dt.setHours(0, 0, 0, 0) + dateOptions.month;
    let strDate = g_mapCachedLocalizedShorterDate.get(key);
    if (strDate)
        return strDate;
    strDate = dt.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dateOptions);
    g_mapCachedLocalizedShorterDate.set(key, strDate);
    return strDate;
}
/**
 * Converts the time to a string containing the date and time for the current time zone
 * @param rt the absolute time
 * @param bForce24HourClock if it should display 24-hr times instead of 12-hr am/pm times
 * @param strTZ a string naming the time zone
 * @returns formatted date-time string
 */
function LocalizeRTimeToDateAndTimeAndTZ(rt, bForce24HourClock, strTZ) {
    const date = new Date(rt * 1000);
    return LocalizeCalendarWeekdayAndDayMonth(date, false, false) + ' ' + LocalizeRTimeToHourAndMinutes(rt, { bForce24HourClock }) + ' ' + strTZ;
}
/**
 * With no options:
 * If Today was Tuesday, March 20th, 2019
 *
 * 										// future timestamps are not supported.. will just default to <month> <year>
 *
 * Today								// March 20th at noon
 * Yesterday							// March 19th at 11pm
 * This week							// 2 days ago
 * ...
 * A week ago							// Anything <= Tuesday of previous week
 * Two weeks ago						// Keep using * weeks ago for at least 3 weeks, then change to Month
 * ...
 * February								// Show just month until year no longer matches
 * December 2018						// Everything earlier
 * ...
 */
function LocalizeCalendarTime(rtime, opts) {
    // Using Date object instead of rtime32, so this code properly handles daylight savings, etc.
    const dt = new Date(rtime * 1000);
    const dtNow = new Date();
    const options = Object.assign({ bGranularFutureTime: false, bGranularTodayTimeOnly: false, bGranularToday: false, bGranularYesterday: false, bGranularWeek: false, bGranularPast: false, bAbbreviateDayOfWeek: false, bForce24HourClock: false }, opts);
    // if in future, just return <month> ( <year> )
    if (dt > dtNow) {
        if (!options.bGranularFutureTime) {
            mobx_utils__WEBPACK_IMPORTED_MODULE_2__.now(dt.getTime() - dtNow.getTime()); // Recalculate once we reach that point.
            return (dt.getFullYear() == dtNow.getFullYear()) ? LocalizeCalendarMonth(dt) : LocalizeCalendarMonthAndYear(dt);
        }
        // Schedule recomputation at upcoming midnight.
        mobx_utils__WEBPACK_IMPORTED_MODULE_2__.now(new Date().setHours(24, 0, 0, 0) - dtNow.getTime());
        let dtCompare = new Date();
        // Midnight tomorrow
        dtCompare.setHours(0, 0, 0, 0);
        dtCompare.setDate(dtCompare.getDate() + 1);
        if (dt < dtCompare) {
            // Still today
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Today');
        }
        dtCompare.setDate(dtCompare.getDate() + 1);
        if (dt < dtCompare) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Tomorrow');
        }
        // One week out we'll return the DOW
        dtCompare.setDate(dtCompare.getDate() + 5);
        if (dt < dtCompare) {
            return LocalizeCalendarWeekday(dt);
        }
        return LocalizeCalendarWeekdayAndDayMonth(dt, true, options.bAbbreviateDayOfWeek);
    }
    // Schedule recomputation at upcoming midnight.
    mobx_utils__WEBPACK_IMPORTED_MODULE_2__.now(new Date().setHours(24, 0, 0, 0) - dtNow.getTime());
    let dtCompare = new Date(); // We will keep updating dtCompare as we move back in time.
    // Compare to previous midnight.
    dtCompare.setHours(0, 0, 0, 0);
    if (dt >= dtCompare) {
        if (options.bGranularToday) {
            if (options.bGranularTodayTimeOnly)
                return LocalizeRTimeToHourAndMinutes(rtime, { bForce24HourClock: options.bForce24HourClock });
            else
                return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Today_At', LocalizeRTimeToHourAndMinutes(rtime, { bForce24HourClock: options.bForce24HourClock }));
        }
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Today');
    }
    // Then the midnight before yesterday.
    dtCompare.setDate(dtNow.getDate() - 1);
    if (dt >= dtCompare) {
        if (options.bGranularYesterday) {
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Yesterday_At', LocalizeRTimeToHourAndMinutes(rtime, { bForce24HourClock: options.bForce24HourClock }));
        }
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Yesterday');
    }
    // Set to midnight after the same day of week on the previous week (so if today is Tuesday, set to midnight of previous Wednesday)
    dtCompare.setDate(dtNow.getDate() - 6);
    const dtStartOfCurrentWeek = new Date(dtCompare);
    if (options.bGranularWeek && dt >= dtStartOfCurrentWeek) {
        return LocalizeCalendarWeekdayAndDayMonth(dt, false, !options.bAbbreviateDayOfWeek);
    }
    if (options.bGranularPast) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Past_At', LocalizeDateHumanReadable(rtime, dt.getFullYear() == dtNow.getFullYear(), !options.bAbbreviateDayOfWeek), LocalizeRTimeToHourAndMinutes(rtime, { bForce24HourClock: options.bForce24HourClock }));
    }
    if (dt >= dtStartOfCurrentWeek)
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeSince_ThisWeek');
    // if older than 7 days but still this month, return X weeks ago
    if (dt.getMonth() == dtNow.getMonth() && dt.getFullYear() == dtNow.getFullYear()) {
        const nWeeks = Math.floor((dtStartOfCurrentWeek.valueOf() - dt.valueOf()) / (_time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerWeek * 1000)) + 1;
        return nWeeks == 1 ? (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeSince_1Week') : (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeSince_XWeeks', nWeeks);
    }
    // if happened this year, just return month
    if (dt.getFullYear() == dtNow.getFullYear()) {
        return LocalizeCalendarMonth(dt);
    }
    // default to <month> <year>
    return LocalizeCalendarMonthAndYear(dt);
}
/**
 * If Today was Tuesdsay, March 20th, 2019
 *
 * Recent								// March 20th at noon
 * Recent								// Anything on or after March 1
 * February								// Show just month until year no longer matches
 * December 2018						// Anything last year
 * 2017									// Anything 2+ years ago (just shows year)
 * ...
 *
 */
function LocalizeCalendarTimeLessGranular(rtime) {
    // Using Date object instead of rtime32, so this code properly handles daylight savings, etc.
    const dt = new Date(rtime * 1000);
    const dtNow = new Date();
    // Schedule recomputation at upcoming midnight.
    mobx_utils__WEBPACK_IMPORTED_MODULE_2__.now(new Date().setHours(24, 0, 0, 0) - dtNow.getTime());
    // find a date where everything after it is "recent". If less than 15 days into a month, use the
    // start of the previous month so the recent bucket doesn't become small (for example 1 day on the first of any month)
    let dtCompare = new Date();
    if (dtCompare.getDate() < 15)
        dtCompare.setMonth(dtCompare.getMonth() - 1);
    dtCompare = (0,_time__WEBPACK_IMPORTED_MODULE_1__.RoundToBeginningOfMonth)(dtCompare);
    if (dt >= dtCompare)
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_Recent');
    // if happened this year, just return month
    if (dt.getFullYear() == dtNow.getFullYear()) {
        return LocalizeCalendarMonth(dt);
    }
    // if last year and not yet July of the current year, return year and month
    if (dtNow.getMonth() < 6 && dt.getFullYear() == dtNow.getFullYear() - 1)
        return LocalizeCalendarMonthAndYear(dt);
    // just return year
    return LocalizeCalendarYear(dt);
}
const g_mapCachedLocalizedWeekday = new Map();
const g_mapCachedLocalizedMonth = new Map();
const g_mapCachedLocalizedYear = new Map();
const g_mapCachedLocalizedMonthAndYear = new Map();
const g_mapCachedLocalizedWeekdayAndDayMonth = new Map();
const g_mapCachedLocalizedShortMonth = new Map();
/** @returns e.g. "Friday, May 22 " */
function LocalizeCalendarWeekdayAndDayMonth(date, fullmonthname = false, fulldayname = true) {
    const dateOptions = {
        weekday: fulldayname ? 'long' : 'short',
        day: 'numeric',
        month: !fullmonthname ? 'short' : 'long',
    };
    const strMapKey = date.setHours(0, 0, 0, 0) + dateOptions.weekday + dateOptions.month;
    let strWeekday = g_mapCachedLocalizedWeekdayAndDayMonth.get(strMapKey);
    if (strWeekday)
        return strWeekday;
    strWeekday = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), dateOptions);
    g_mapCachedLocalizedWeekdayAndDayMonth.set(strMapKey, strWeekday);
    return strWeekday;
}
function LocalizeCalendarWeekday(date) {
    let strWeekday = g_mapCachedLocalizedWeekday.get(date.getDay());
    if (strWeekday)
        return strWeekday;
    strWeekday = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), { weekday: 'long' });
    g_mapCachedLocalizedWeekday.set(date.getDay(), strWeekday);
    return strWeekday;
}
function LocalizeCalendarMonth(date) {
    let strMonth = g_mapCachedLocalizedMonth.get(date.getMonth());
    if (strMonth)
        return strMonth;
    strMonth = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), { month: 'long' });
    g_mapCachedLocalizedMonth.set(date.getMonth(), strMonth);
    return strMonth;
}
function LocalizeShortCalendarMonth(date) {
    let strMonth = g_mapCachedLocalizedShortMonth.get(date.getMonth());
    if (strMonth)
        return strMonth;
    strMonth = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), { month: 'short' });
    g_mapCachedLocalizedShortMonth.set(date.getMonth(), strMonth);
    return strMonth;
}
/** Returns just 4 digit year as a string */
function LocalizeCalendarYear(date) {
    let strYear = g_mapCachedLocalizedYear.get(date.getFullYear());
    if (strYear)
        return strYear;
    // This will be formatted in some languages, like "2022年" in japanese
    strYear = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), { year: 'numeric' });
    g_mapCachedLocalizedYear.set(date.getFullYear(), strYear);
    return strYear;
}
function LocalizeCalendarMonthAndYear(date) {
    const nMapKey = date.getMonth() + 12 * date.getFullYear(); // Must be unique per ( month, year ) pair.
    let strMonthAndYear = g_mapCachedLocalizedMonthAndYear.get(nMapKey);
    if (strMonthAndYear)
        return strMonthAndYear;
    strMonthAndYear = date.toLocaleDateString(_localization__WEBPACK_IMPORTED_MODULE_0__.LocalizationManager.GetPreferredLocales(), { month: 'long', year: 'numeric' });
    g_mapCachedLocalizedMonthAndYear.set(nMapKey, strMonthAndYear);
    return strMonthAndYear;
}
// return a string like "Q3 2022"
function LocalizeCalendarQuarter(date) {
    switch (date.getUTCMonth()) {
        case 0: // january
        case 1:
        case 2:
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_QuarterOfYear_Q1', date.getUTCFullYear());
        case 3:
        case 4:
        case 5:
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_QuarterOfYear_Q2', date.getUTCFullYear());
        case 6:
        case 7:
        case 8:
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_QuarterOfYear_Q3', date.getUTCFullYear());
        case 9:
        case 10:
        case 11:
        default: // not expected for getUTCMonth not to return a 0-11 value
            return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#Time_QuarterOfYear_Q4', date.getUTCFullYear());
    }
}
/** Return a string representing time remaining for the given number of seconds. In English:
 * Greater than 1 year: "> 1 year"
 * Greater than 1 month: "1m 2d"
 * Greater than 1 day: "1d 12:23"
 * Greater than 1 hour: "01:23:45"
 * Less than 1 hour: "12:34"
 */
function LocalizeTimeRemaining(nSeconds) {
    const nYears = Math.floor(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerYear);
    const nMonths = Math.floor(nSeconds / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth);
    const nDays = Math.floor((nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMonth) / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay);
    const nHours = Math.floor((nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerDay) / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour);
    const nMinutes = Math.floor((nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerHour) / _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute);
    nSeconds = nSeconds % _time__WEBPACK_IMPORTED_MODULE_1__.Seconds.PerMinute;
    if (nYears > 0) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeRemaining_MoreThanOneYear');
    }
    if (nMonths > 0) {
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeRemaining_MonthsDays', nMonths, nDays);
    }
    if (nDays > 0) {
        // Display days and hours and minutes
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeRemaining_DaysHoursMinutes', nDays, nHours.toString().padStart(2, '0'), nMinutes.toString().padStart(2, '0'));
    }
    if (nHours > 0) {
        // Display hours, minutes, and seconds
        return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeRemaining_HoursMinutesSeconds', nHours.toString().padStart(2, '0'), nMinutes.toString().padStart(2, '0'), nSeconds.toString().padStart(2, '0'));
    }
    // Display minutes and seconds
    return (0,_localization__WEBPACK_IMPORTED_MODULE_0__.Localize)('#TimeRemaining_MinutesSeconds', nMinutes.toString().padStart(2, '0'), nSeconds.toString().padStart(2, '0'));
}
/*
function TestLocalizeCalendarTime()
{
    console.log( 'now: ', LocalizeCalendarTime( 1554246872 ) );
    console.log( 'yesterday: ', LocalizeCalendarTime( 1554185672 ) );
    console.log( 'Saturday: ', LocalizeCalendarTime( 1554012872 ) );
    console.log( 'Wednesday: ', LocalizeCalendarTime( 1553753672 ) );
    console.log( 'last week: ', LocalizeCalendarTime( 1553667711 ) );
    console.log( 'last week: ', LocalizeCalendarTime( 1553149311 ) );
    console.log( 'two weeks ago: ', LocalizeCalendarTime( 1553062911 ) );
    console.log( 'three weeks ago: ', LocalizeCalendarTime( 1552458111 ) );
    console.log( 'March: ', LocalizeCalendarTime( 1551856472 ) );
    console.log( 'April 2016: ', LocalizeCalendarTime( 1461337071 ) );

    console.log( 'Future: ', LocalizeCalendarTime( 1648941711 ) );
}
*/


/***/ }),

/***/ "../../../web_src/shared/js/utils/mathutils.ts":
/*!*****************************************************!*\
  !*** ../../../web_src/shared/js/utils/mathutils.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Clamp": () => (/* binding */ Clamp),
/* harmony export */   "RandomInt": () => (/* binding */ RandomInt),
/* harmony export */   "RemapVal": () => (/* binding */ RemapVal),
/* harmony export */   "RemapValClamped": () => (/* binding */ RemapValClamped),
/* harmony export */   "isNumeric": () => (/* binding */ isNumeric)
/* harmony export */ });
//-----------------------------------------------------------------------------
// Purpose: Returns a random int from min up to but and including max
//-----------------------------------------------------------------------------
function RandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
//-----------------------------------------------------------------------------
// Purpose: Clamp an input value to a given lower and upper bound
//-----------------------------------------------------------------------------
function Clamp(value, min, max) {
    if (value == null || isNaN(value)) {
        return value;
    }
    return Math.max(min, Math.min(max, value));
}
//-----------------------------------------------------------------------------
// Purpose: Remap a value in the range [min1,max1] to [min2,max2].
//-----------------------------------------------------------------------------
function RemapVal(value, min1, max1, min2, max2) {
    return min2 + (max2 - min2) * (value - min1) / (max1 - min1);
}
//-----------------------------------------------------------------------------
// Purpose: Remap a value in the range [min1,max1] to [min2,max2].
//-----------------------------------------------------------------------------
function RemapValClamped(value, min1, max1, min2, max2) {
    return Clamp(min2 + (max2 - min2) * (value - min1) / (max1 - min1), Math.min(min2, max2), Math.max(min2, max2));
}
//-----------------------------------------------------------------------------
// Purpose: To check if a string is Numeric - copied from https://stackoverflow.com/questions/175739/built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number
//-----------------------------------------------------------------------------
function isNumeric(str) {
    // we only process strings!
    if (typeof str !== "string")
        return false;
    return !Number.isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
        !Number.isNaN(Number.parseFloat(str)); // ...and ensure strings of whitespace fail
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/index.ts":
/*!************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/index.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComputeZoomForElement": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.ComputeZoomForElement),
/* harmony export */   "CreateIntersectionObserver": () => (/* reexport safe */ _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__.CreateIntersectionObserver),
/* harmony export */   "CreateResizeObserver": () => (/* reexport safe */ _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__.CreateResizeObserver),
/* harmony export */   "MergeRefs": () => (/* reexport safe */ _refutils__WEBPACK_IMPORTED_MODULE_1__.MergeRefs),
/* harmony export */   "bind": () => (/* reexport safe */ shared_utils_bind__WEBPACK_IMPORTED_MODULE_5__.bind),
/* harmony export */   "measure": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.measure),
/* harmony export */   "rgb": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.rgb),
/* harmony export */   "rgba": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.rgba),
/* harmony export */   "setRef": () => (/* reexport safe */ _refutils__WEBPACK_IMPORTED_MODULE_1__.setRef),
/* harmony export */   "useCallbackList": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useCallbackList),
/* harmony export */   "useComputedZoom": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useComputedZoom),
/* harmony export */   "useDisjointedValue": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useDisjointedValue),
/* harmony export */   "useEffectWithDependencyDebugging": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useEffectWithDependencyDebugging),
/* harmony export */   "useEventListener": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useEventListener),
/* harmony export */   "useForceUpdate": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate),
/* harmony export */   "useForceUpdateOnResizeObserved": () => (/* reexport safe */ _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__.useForceUpdateOnResizeObserved),
/* harmony export */   "useGlobalEventListener": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useGlobalEventListener),
/* harmony export */   "useId": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useId),
/* harmony export */   "useIntersectionObserver": () => (/* reexport safe */ _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__.useIntersectionObserver),
/* harmony export */   "useInterval": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useInterval),
/* harmony export */   "useIsUnmounted": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useIsUnmounted),
/* harmony export */   "useLazyMemoizedValue": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useLazyMemoizedValue),
/* harmony export */   "useMemoWithDependencyDebugging": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useMemoWithDependencyDebugging),
/* harmony export */   "useModalState": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useModalState),
/* harmony export */   "useMultipleRefs": () => (/* reexport safe */ _refutils__WEBPACK_IMPORTED_MODULE_1__.useMultipleRefs),
/* harmony export */   "usePreventVerticalShrinking": () => (/* reexport safe */ _usepreventverticalshrinking__WEBPACK_IMPORTED_MODULE_4__.usePreventVerticalShrinking),
/* harmony export */   "usePreviousValue": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.usePreviousValue),
/* harmony export */   "usePromise": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.usePromise),
/* harmony export */   "useRefAndShareWith": () => (/* reexport safe */ _refutils__WEBPACK_IMPORTED_MODULE_1__.useRefAndShareWith),
/* harmony export */   "useRefCallbackWithCleanup": () => (/* reexport safe */ _refutils__WEBPACK_IMPORTED_MODULE_1__.useRefCallbackWithCleanup),
/* harmony export */   "useResizeObserver": () => (/* reexport safe */ _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__.useResizeObserver),
/* harmony export */   "useSubscribableValue": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useSubscribableValue),
/* harmony export */   "useSubscribableValueCallback": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useSubscribableValueCallback),
/* harmony export */   "useThrottle": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useThrottle),
/* harmony export */   "useTimeout": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useTimeout),
/* harmony export */   "useTimer": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useTimer),
/* harmony export */   "useUnmemoizedTimeout": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useUnmemoizedTimeout),
/* harmony export */   "useValueWasTrueRecently": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useValueWasTrueRecently),
/* harmony export */   "useValueWasTrueRecentlyOrNow": () => (/* reexport safe */ _reactutils__WEBPACK_IMPORTED_MODULE_0__.useValueWasTrueRecentlyOrNow),
/* harmony export */   "useVisibleOnScreen": () => (/* reexport safe */ _usevisibleonscreen__WEBPACK_IMPORTED_MODULE_3__.useVisibleOnScreen)
/* harmony export */ });
/* harmony import */ var _reactutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reactutils */ "../../../web_src/shared/js/utils/reactutils/reactutils.ts");
/* harmony import */ var _refutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./refutils */ "../../../web_src/shared/js/utils/reactutils/refutils.ts");
/* harmony import */ var _useresizeobserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useresizeobserver */ "../../../web_src/shared/js/utils/reactutils/useresizeobserver.ts");
/* harmony import */ var _usevisibleonscreen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./usevisibleonscreen */ "../../../web_src/shared/js/utils/reactutils/usevisibleonscreen.ts");
/* harmony import */ var _usepreventverticalshrinking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./usepreventverticalshrinking */ "../../../web_src/shared/js/utils/reactutils/usepreventverticalshrinking.ts");
/* harmony import */ var shared_utils_bind__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/utils/bind */ "../../../web_src/shared/js/utils/bind.ts");








/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/reactutils.ts":
/*!*****************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/reactutils.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComputeZoomForElement": () => (/* binding */ ComputeZoomForElement),
/* harmony export */   "measure": () => (/* binding */ measure),
/* harmony export */   "rgb": () => (/* binding */ rgb),
/* harmony export */   "rgba": () => (/* binding */ rgba),
/* harmony export */   "useCallbackList": () => (/* binding */ useCallbackList),
/* harmony export */   "useComputedZoom": () => (/* binding */ useComputedZoom),
/* harmony export */   "useDisjointedValue": () => (/* binding */ useDisjointedValue),
/* harmony export */   "useEffectWithDependencyDebugging": () => (/* binding */ useEffectWithDependencyDebugging),
/* harmony export */   "useEventListener": () => (/* binding */ useEventListener),
/* harmony export */   "useForceUpdate": () => (/* binding */ useForceUpdate),
/* harmony export */   "useGlobalEventListener": () => (/* binding */ useGlobalEventListener),
/* harmony export */   "useId": () => (/* binding */ useId),
/* harmony export */   "useInterval": () => (/* binding */ useInterval),
/* harmony export */   "useIsUnmounted": () => (/* binding */ useIsUnmounted),
/* harmony export */   "useLazyMemoizedValue": () => (/* binding */ useLazyMemoizedValue),
/* harmony export */   "useMemoWithDependencyDebugging": () => (/* binding */ useMemoWithDependencyDebugging),
/* harmony export */   "useModalState": () => (/* binding */ useModalState),
/* harmony export */   "usePreviousValue": () => (/* binding */ usePreviousValue),
/* harmony export */   "usePromise": () => (/* binding */ usePromise),
/* harmony export */   "useSubscribableValue": () => (/* binding */ useSubscribableValue),
/* harmony export */   "useSubscribableValueCallback": () => (/* binding */ useSubscribableValueCallback),
/* harmony export */   "useThrottle": () => (/* binding */ useThrottle),
/* harmony export */   "useTimeout": () => (/* binding */ useTimeout),
/* harmony export */   "useTimer": () => (/* binding */ useTimer),
/* harmony export */   "useUnmemoizedTimeout": () => (/* binding */ useUnmemoizedTimeout),
/* harmony export */   "useValueWasTrueRecently": () => (/* binding */ useValueWasTrueRecently),
/* harmony export */   "useValueWasTrueRecentlyOrNow": () => (/* binding */ useValueWasTrueRecentlyOrNow)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_utils_callbackutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/callbackutils */ "../../../web_src/shared/js/utils/callbackutils.ts");
// ideally these utils should not have many dependencies beyond react and dom.
// please put any mobx-referencing utilities in mobxutils.ts and not in here


/**
 * This is a typescript decorator.  Decorate a class method with @measure to see timing in devtools's performance tab
 *   under the "Timings" header.
 * React adds a few of these at a higher level, and CEF tracks every single function call in "Main" in an information
 *   firehose way.  This decorator gives you more control over how you view your performance (e.g., not buried under
 *   20 levels of react call hierarchy), allows you to clearly visualize causal React framework events caused by user
 *   code (e.g., onScroll => synchronous React Tree Reconciliation) and focus on the things that matter or are most
 *   likely to cause trouble.
 * It helps you choose where to spend time optimizing, and does not pollute production build functions but does cost
 *   fractional milliseconds in dev builds for a function call and timestamping calls.
 *
 * example:
 *      // Don't get specific or namespacey with the name.  Performance names are well-scoped under their parent calling context
 *      //   and it is abundantly clear in the performance tab who's render it is just naming it "render"
 *      @measure( 'render', 'friendly_short_classname_for_production_build_testing' )
 *      render()
 *      {
 *          const something = this.MaybeExpensiveSubrenderWork();
 *          return <div>{ something }</div>;
 *      }
 *
 *      @measure( 'maybe_expensive_subrender_work' )
 *      private MaybeExpensiveSubrenderWork()
 *      { [...] }
 * @param measurementName Probably the name of your method, or something shorter for nicer display in chrome devtools.
 * @param className For debugging production builds where classnames are uglifyified and you have locally edited the production blocker in this annotation.
 */
function measure(measurementName, className) {
    return (target, propertyKey, descriptor) => {
        // Don't wrap functions for measuring in production.
        // This block is evaluated during build time, and process.env.NODE_ENV is known at that time.
        //   Branch pruning drops the else and the rest of this does not appear in the production build.
        // Furthermore, the removal is transitive.  In production, the entire annotation expression
        //   evaluates to the original method descriptor constexpr style and all argument strings are stripped.
        //
        // If you, intrepid future developer, wish to change this expression, do ensure via judicious grep
        //   that method names and class names do not survive production build branch pruning processes.
        //
        // To capture user timings for production builds, change the expression to:
        //   if ( false && process.env.NODE_ENV == 'production' )
        if (false) {}
        const originalFunction = descriptor.value;
        descriptor.value = function (...args) {
            performance.mark(`${measurementName}_start`);
            const returnValue = originalFunction.apply(this, args);
            if (false) {}
            else {
                performance.measure(measurementName, `${measurementName}_start`);
            }
            performance.clearMarks(`${measurementName}_start`);
            return returnValue;
        };
        return descriptor;
    };
}
function rgb(red, green, blue) {
    let rgbArray = [red, green, blue];
    return rgbArray;
}
function rgba(red, green, blue, alpha) {
    let rgbaArray = [red, green, blue, alpha];
    return rgbaArray;
}
/**
 * Set a timeout that aborts if the component unmounts.
 * The handler function is memoized with its initial value.
 * @param handler Function to execute.
 * @param ms Timeout delay. If changed, timeout restarts with new delay.
 * @param deps Additional dependencies that, when changed, reset the timeout.
 */
function useTimeout(handler, ms, deps = []) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const fnHandlerMemoized = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(handler, []);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (!fnHandlerMemoized)
            return null;
        const handle = setTimeout(fnHandlerMemoized, ms);
        return () => clearTimeout(handle);
    }, [ms, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Set a timeout that aborts if the component unmounts.
 * The handler function that is executed is the latest one passed in. Dependency list is used to restart the timer.
 * @param handler Function to execute.
 * @param ms Timeout delay. If changed, timeout restarts with new delay.
 * @param deps Additional dependencies that, when changed, reset the timeout.
 */
function useUnmemoizedTimeout(handler, ms, deps = []) {
    const refHandler = react__WEBPACK_IMPORTED_MODULE_0__.useRef(handler);
    refHandler.current = handler;
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (!refHandler.current)
            return null;
        const handle = setTimeout(() => {
            refHandler.current && refHandler.current();
        }, ms);
        return () => clearTimeout(handle);
    }, [ms, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Set an interval that ends when the component unmounts.
 * @param handler Function to execute.
 * @param ms Interval delay. If changed, interval restarts with new delay.
 * @param deps Additional dependencies that, when changed, reset the timeout.
 */
function useInterval(handler, ms, deps = []) {
    const refHandler = react__WEBPACK_IMPORTED_MODULE_0__.useRef(handler);
    refHandler.current = handler;
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (!refHandler.current)
            return null;
        let fnCallCurrent = () => {
            if (refHandler.current)
                refHandler.current();
        };
        const handle = setInterval(fnCallCurrent, ms);
        return () => clearInterval(handle);
    }, [ms, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Simple timer hook that updates when the timer completes.
 * Changing the countdown duration resets the countdown.
 *
 * Takes an optional callback for when the timer is complete, but also
 * returns state indicating the completeness that you can use.
 * Changing the `fnOnComplete` callback value doesn't reset the timer; when
 * the timer is complete it'll call the latest callback provided.
 */
function useTimer(nCountdownMs, fnOnComplete, bStartOnMount = true) {
    const refOnCompleteHandle = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fnOnComplete);
    refOnCompleteHandle.current = fnOnComplete; // Always use latest function without resetting the timer.
    const [bTimerCompleted, setTimerCompleted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);
    const refTimeoutHandle = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);
    const fnOnTimeout = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        setTimerCompleted(true);
        refOnCompleteHandle.current && refOnCompleteHandle.current();
    }, []);
    const fnStopTimer = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        window.clearTimeout(refTimeoutHandle.current);
    }, []);
    const fnRestartTimer = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        setTimerCompleted(false);
        fnStopTimer();
        refTimeoutHandle.current = window.setTimeout(fnOnTimeout, nCountdownMs);
    }, [fnStopTimer, nCountdownMs, fnOnTimeout]);
    const fnOnMount = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        if (bStartOnMount)
            fnRestartTimer();
    }, [bStartOnMount, fnRestartTimer]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(fnOnMount, [nCountdownMs, fnOnMount]); // Start/restart timer on mount and when desired duration changes.
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => fnStopTimer, [fnStopTimer]); // Always cancel timer on unmount.
    return { bTimerCompleted, fnStopTimer, fnRestartTimer };
}
/**
 * Returns `defaultValue` (default `undefined`) until the promise resolves, then returns the value from the promise.
 *
 * @param promiseFunction A function that returns a Promise<T>.
 * @param dependencies The things you captured in your promiseFunction, same as when you use React.useEffect.
 * @param defaultValue Optional value to use until the promise resolves.
 */
function usePromise(promiseFunction, dependencies, defaultValue) {
    const [promiseValue, setPromiseValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultValue);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        let bEffectStillActive = true;
        const promise = promiseFunction();
        promise && promise.then((newPromiseValue) => {
            if (bEffectStillActive) {
                setPromiseValue(newPromiseValue);
            }
        });
        return () => {
            bEffectStillActive = false;
        };
    }, 
    // Dependencies are set by the caller, and the promiseFunction is essentially the effect
    // so it is not included in the dependency list.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies);
    return promiseValue;
}
/**
 * Returns a forceUpdate() function that will queue a new rendering of the component.
 */
function useForceUpdate() {
    const [, setGeneration] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);
    const forceUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setGeneration((nGeneration) => nGeneration + 1), []);
    return forceUpdate;
}
/**
 * Hook that returns a function which, when called, returns true if
 * the component has been unmounted. Useful in asynchronous callbacks.
 *
 * NOTE: This can often be an anti-pattern; prefer to use canceleable promises,
 * unsubscribable event listeners, etc.
 */
function useIsUnmounted() {
    const refIsUnmounted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        return () => {
            refIsUnmounted.current = true;
        };
    }, []);
    const fnIsInmounted = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => refIsUnmounted.current, []);
    return fnIsInmounted;
}
/**
 * Function that computes the cumulative zoom (based on the "zoom" chromium css style) at the
 * level in the document containing the provided element. Since this triggers a DOM
 * layout recalculation, compute it rarely, such as on component mount.
 * @param element
 */
function ComputeZoomForElement(element) {
    let fCumulativeZoom = 1;
    // Walk upwards, stopping before we hit the html root element.
    // That elem's zoom style must be ignored because it's automatically
    // set to reflect the current DPI scale.
    // https://bugs.chromium.org/p/chromium/issues/detail?id=899707
    while (element != null && element.tagName != "HTML") {
        // "zoom" used to exist on the standard CSS property interface,
        // but since it was removed from the spec by the web standards
        // committee it has also been removed from the TS interface by
        // the Typescript team, so we have to cast here now.
        const style = getComputedStyle(element);
        if (style.zoom) {
            const fElemZoom = Number.parseFloat(style.zoom);
            if (!isNaN(fElemZoom)) {
                fCumulativeZoom *= fElemZoom;
            }
        }
        element = element.parentElement;
    }
    return fCumulativeZoom;
}
/**
 * Hook that computes the cumulative zoom (based on the "zoom" chromium css style) at the
 * level in the document containing the provided element (by ref). Since this triggers a DOM
 * layout recalculation, it's computed once on mount.
 * @param ref
 */
function useComputedZoom(ref) {
    const [computedZoom, setComputedZoom] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => setComputedZoom(ComputeZoomForElement(ref.current)), [ref]);
    return computedZoom;
}
/**
 * Hook that returns a function that when called with a callback, executes
 * that callback at most once per `nLimitMs`. When it executes a callback, only
 * the most recent callback given is executed, with the rest discarded.
 *
 * If the callback is given and one has not been executed in the past `nLimitMs`,
 * the callback is executed almost immediately (after the current stack frame clears).
 * Changes to `nLimitMs` take effect for subsequent callbacks.
 *
 * If the component is unmounted while a callback is pending, the callback is
 * executed at that time.
 *
 * @param nLimitMs Maximum rate (in milliseconds) to execute the callback.
 * @returns Function that accepts a new callback to execute.
 */
function useThrottle(nLimitMs) {
    // Use a stable state object with state inside it instead of individual react
    // states because we don't want to trigger a component re-render every time
    // the throttled callback is executed.
    const [executionState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({
        flLastExecutionTimeMs: 0,
        fnLatestCallback: null,
        nTimeoutHandle: 0,
    });
    // Stable function that immediately invokes the most recent callback passed
    // to the hook.
    const fnExecuteLatestCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        if (executionState.fnLatestCallback != null) {
            executionState.fnLatestCallback();
            executionState.fnLatestCallback = null;
            executionState.flLastExecutionTimeMs = new Date().getTime();
        }
        window.clearTimeout(executionState.nTimeoutHandle);
        executionState.nTimeoutHandle = 0;
    }, [executionState]);
    // Component being unmounted with a callback still pending? Call it on the way out.
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        return () => fnExecuteLatestCallback();
    }, [fnExecuteLatestCallback, executionState]);
    return (fnCallback) => {
        executionState.fnLatestCallback = fnCallback;
        const nMsNow = new Date().getTime();
        const nMsSinceLastExecution = nMsNow - executionState.flLastExecutionTimeMs;
        const nMsUntilNextExecution = Math.max(nLimitMs - nMsSinceLastExecution, 0);
        window.clearTimeout(executionState.nTimeoutHandle);
        executionState.nTimeoutHandle = window.setTimeout(fnExecuteLatestCallback, nMsUntilNextExecution);
    };
}
/**
 * A hook for listening to a DOM event on an HTMLElement, automatically
 * unlistening when the hook's component unmounts, when the event handler changes,
 * or when the observed element changes. In the latter two cases, we relisten with the
 * new element and handler.
 *
 * If no element or listener is provided, nothing happens.
 *
 * Don't change the options property; we don't deep-diff it.
 *
 * @param elem The HTML element to listen on
 * @param listener The event handler
 * @param options The optional options parameter of addEventListener()
 */
function useEventListener(ref, type, listener, options) {
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        const elem = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!elem || !listener) {
            return undefined;
        }
        elem.addEventListener(type, listener, options);
        return () => elem.removeEventListener(type, listener);
    }, [ref, type, listener]); // eslint-disable-line react-hooks/exhaustive-deps
}
function useGlobalEventListener(elem, type, listener, options) {
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (!elem || !listener) {
            return undefined;
        }
        elem.addEventListener(type, listener, options);
        return () => elem.removeEventListener(type, listener);
    }, [elem, type, listener]); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Helper to register and unregister a callback
 */
function useCallbackList(list, fnCallback) {
    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(() => {
        if (!fnCallback || !list)
            return undefined;
        let handle = list.Register(fnCallback);
        return () => handle.Unregister();
    }, [list, fnCallback]);
}
/**
 * Use the latest value held by the SubscribableValue.
 */
function useSubscribableValue(subscribableValue) {
    const [value, setValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(subscribableValue === null || subscribableValue === void 0 ? void 0 : subscribableValue.Value);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (subscribableValue == null)
            return () => { };
        const subscription = subscribableValue.Subscribe(setValue);
        // If the subscribable has changed, immediately set the state value to the current value,
        // since we'll only be notified of changes hereafter.
        if (value !== subscribableValue.Value)
            setValue(subscribableValue.Value);
        return subscription === null || subscription === void 0 ? void 0 : subscription.Unsubscribe; // For cleaning up on unmount
    }, [subscribableValue]); // eslint-disable-line react-hooks/exhaustive-deps
    return value;
}
/** Register a callback to be notified of changes to an ISubscribableValue. */
function useSubscribableValueCallback(subscribableValue, fnCallback) {
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (subscribableValue == null)
            return () => { };
        const subscription = subscribableValue.Subscribe(fnCallback);
        return subscription === null || subscription === void 0 ? void 0 : subscription.Unsubscribe; // For cleaning up on unmount
    }, [subscribableValue, fnCallback]);
}
/**
 * Hook to have the value a control shows be the latest value the user set via the control while
 * they're interacting with it and for a short amount of time thereafter.
 *
 * After the specified timeout, the value returned from this function will revert from the interaction
 * value back to the actual value.
 *
 * @param actualValue Latest actual value being given to this control.
 * @param fnCommitValue Callback to commit a change to the actual value on user interaction.
 * @param nTimeoutMs How long after the user stops interacting with the control before reverting the shown value back to `actualValue`.
 * @returns The interaction value and a function to set the value when interacting.
 */
function useDisjointedValue(actualValue, fnCommitValue, nTimeoutMs = 1000) {
    const refCommitValue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fnCommitValue);
    refCommitValue.current = fnCommitValue;
    const [displayValue, setDisplayValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(actualValue);
    const [bIsUserInteracting, setIsUserInteracting] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);
    const fnOnTimerExpired = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        setDisplayValue(actualValue);
        setIsUserInteracting(false);
    }, [actualValue, setDisplayValue]);
    const { fnStopTimer, fnRestartTimer } = useTimer(nTimeoutMs, fnOnTimerExpired, false);
    // While the user is interacting with the control, use that value for display
    const fnSetInteractionValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((newValue) => {
        fnRestartTimer();
        setDisplayValue(newValue);
        setIsUserInteracting(true);
        refCommitValue.current && refCommitValue.current(newValue);
    }, [setDisplayValue, fnRestartTimer]);
    return [bIsUserInteracting ? displayValue : actualValue, fnSetInteractionValue];
}
/** @returns the value passed in on the previous iteration, or null on the first call. */
function usePreviousValue(value) {
    const refValue = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => { refValue.current = value; });
    return refValue.current;
}
/**
 * Wrapper for React.useEffect that logs dependency changes to the console. Useful for debugging extra re-rendering.
 * Use this as a drop-in replacement for React.useEffect. Pass in a name to help differentiate multiple hook instances.
 */
function useEffectWithDependencyDebugging(fnEffectCallback, rgDependencies, strDebugName = '') {
    var _a;
    const rgPrevDeps = (_a = usePreviousValue(rgDependencies)) !== null && _a !== void 0 ? _a : [];
    for (let i = 0; i < rgPrevDeps.length; i++) {
        if (rgPrevDeps[i] !== rgDependencies[i]) {
            console.log(`[${strDebugName}] useEffect dependency #${i} changed:`, rgPrevDeps[i], rgDependencies[i]);
        }
    }
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(fnEffectCallback, rgDependencies); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Wrapper for React.useMemo that logs dependency changes to the console. Useful for debugging extra re-rendering.
 * Use this as a drop-in replacement for React.useMemo. Pass in a name to help differentiate multiple hook instances.
 */
function useMemoWithDependencyDebugging(fnMemoizedCallback, rgDependencies, strDebugName = '') {
    var _a;
    const rgPrevDeps = (_a = usePreviousValue(rgDependencies)) !== null && _a !== void 0 ? _a : [];
    for (let i = 0; i < rgPrevDeps.length; i++) {
        if (rgPrevDeps[i] !== rgDependencies[i]) {
            console.log(`[${strDebugName}] useMemo dependency #${i} changed:`, rgPrevDeps[i], rgDependencies[i]);
        }
    }
    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(fnMemoizedCallback, rgDependencies); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Hook that returns true if the input `bValue` was true in the last nWithinPastMS milliseconds.
 * This will return false if bValue has just become true, which allows for a useEffect on that transition.
 */
function useValueWasTrueRecently(bValue, nWithinPastMS) {
    const [bWasTrueRecently, setWasTrueRecently] = react__WEBPACK_IMPORTED_MODULE_0__.useState(bValue);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {
        if (bValue) {
            setWasTrueRecently(true);
            return undefined;
        }
        else {
            const iTimeout = window.setTimeout(() => setWasTrueRecently(false), nWithinPastMS);
            return () => window.clearTimeout(iTimeout);
        }
    }, [bValue, nWithinPastMS]);
    return bWasTrueRecently;
}
/**
 * As above, but also returns true if the value is true now
 */
function useValueWasTrueRecentlyOrNow(bValue, nWithinPastMS) {
    return useValueWasTrueRecently(bValue, nWithinPastMS) || bValue;
}
/**
 * Helper for tracking modal state, gives memoized show/hide functions.  Could be used for any boolean really.
 */
function useModalState(bDefaultVisible = false) {
    const [bModalVisible, setModalVisible] = react__WEBPACK_IMPORTED_MODULE_0__.useState(bDefaultVisible);
    const showModal = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setModalVisible(true), []);
    const closeModal = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => setModalVisible(false), []);
    return [bModalVisible, showModal, closeModal];
}
let g_unIdCounter = 0;
/**
 * Semi-polyfill for React 18's useId. This doesn't handle SSR hydration matching,
 * so it should not be relied upon in contexts where SSR is used -- if that's necessary,
 * React 18 upgrade should happen and this should be replaced with the native useId.
 *
 * @returns a globally unique string that will remain the same for the lifetime of the component
 */
function useId() {
    const [strID] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => {
        const id = g_unIdCounter++;
        return `:valve${id.toString(32)}:`;
    });
    return strID;
}
/**
 * Constructs a value once, using the passed-in constructor.  If the
 * constructor changes, it will be invoked again on next access.
 */
function useLazyMemoizedValue(fnConstruct) {
    const refValue = react__WEBPACK_IMPORTED_MODULE_0__.useRef();
    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {
        if (!refValue.current || refValue.current.factory != fnConstruct)
            refValue.current = { value: fnConstruct(), factory: fnConstruct };
        return refValue.current.value;
    }, [fnConstruct]);
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/refutils.ts":
/*!***************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/refutils.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MergeRefs": () => (/* binding */ MergeRefs),
/* harmony export */   "setRef": () => (/* binding */ setRef),
/* harmony export */   "useMultipleRefs": () => (/* binding */ useMultipleRefs),
/* harmony export */   "useRefAndShareWith": () => (/* binding */ useRefAndShareWith),
/* harmony export */   "useRefCallbackWithCleanup": () => (/* binding */ useRefCallbackWithCleanup)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Assigns an instance a React.Ref to the specified instance.
 * @param ref
 * @param instance
 */
function setRef(ref, instance) {
    if (ref == null) {
        return;
    }
    if (typeof ref == 'function') {
        ref(instance);
    }
    else if ("current" in ref) {
        ref.current = instance;
    }
}
/**
 * An aggregator of refs. Pass in any amount of upstream refs, and they'll automatically
 * be updated when the downstream ref is assigned a value.
 *
 * @param refs All upstream refs that should be updated when the return ref is assigned a value.
 * @returns Downstream ref. Pass this onto your referenced component.
 */
function useMultipleRefs(...refs) {
    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback((instance) => {
        for (const ref of refs) {
            setRef(ref, instance);
        }
    }, refs); // eslint-disable-line react-hooks/exhaustive-deps
}
/**
 * Merges multiple refs into one.  Not memoized.
 */
function MergeRefs(...refs) {
    if (!refs || refs.length === 0)
        return undefined;
    if (refs.length === 1)
        return refs[0];
    return (value) => refs.forEach((ref) => {
        if (!ref)
            return;
        else if (typeof ref === 'function')
            ref(value);
        else
            ref.current = value;
    });
}
/**
 * Provides a ref callback function that behaves like useEffect; you can return a function
 * to clean up.  Useful for binding event handlers that you want to unbind.
 *
 * The callback will be invoked if the ref changes, or if the dependency array changes.
 * When a change happens, the old callback will be invoked with null and the new callback
 * will be invoked with the element (like a normal ref callback when it is changed).
 *
 * @param fnRefCallback A callback to invoke when element is ref'd or dependencies change
 * @param deps Dependency array
 */
function useRefCallbackWithCleanup(fnRefCallback, deps) {
    const refUnregisterCallback = react__WEBPACK_IMPORTED_MODULE_0__.useRef();
    const fnCallbackWrapper = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((element) => {
        if (refUnregisterCallback.current)
            refUnregisterCallback.current();
        refUnregisterCallback.current = fnRefCallback(element);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
    return fnCallbackWrapper;
}
/**
 * Hook that returns a ref hook we can both assign and access, that also forwards
 * its ref value upwards to the forwarded ref for the parent component to reference.
 *
 * @param forwardedRef Optional reference forwarded in to the component.
 * @returns Object with two refs. You can access the ref's value from refWithValue, and must pass refWithElement onto the component you want to reference.
 */
function useRefAndShareWith(forwardedRef) {
    const localRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    const targetRef = useMultipleRefs(forwardedRef, localRef);
    return { refWithValue: localRef, refForElement: targetRef };
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/usepreventverticalshrinking.ts":
/*!**********************************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/usepreventverticalshrinking.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usePreventVerticalShrinking": () => (/* binding */ usePreventVerticalShrinking)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _useresizeobserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useresizeobserver */ "../../../web_src/shared/js/utils/reactutils/useresizeobserver.ts");


/**
 * Hook to allow an element to vertically grow but not shrink.
 * Returns a string to pass as a minHeight style (e.g. "34px") and a ref you should pass onto
 * the element we'll want to prevent shrinking.
 */
function usePreventVerticalShrinking() {
    const [flMinHeight, setMinHeight] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);
    const fnOnResize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((entry) => {
        const elem = entry.target;
        const flHeight = elem.clientHeight;
        if (flHeight > flMinHeight) {
            setMinHeight(flHeight);
        }
    }, [flMinHeight]);
    const strMinHeightStyle = flMinHeight + "px";
    const refForResizeObserver = (0,_useresizeobserver__WEBPACK_IMPORTED_MODULE_1__.useResizeObserver)(fnOnResize);
    return { strMinHeightStyle, refForResizeObserver };
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/useresizeobserver.ts":
/*!************************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/useresizeobserver.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CreateIntersectionObserver": () => (/* binding */ CreateIntersectionObserver),
/* harmony export */   "CreateResizeObserver": () => (/* binding */ CreateResizeObserver),
/* harmony export */   "useForceUpdateOnResizeObserved": () => (/* binding */ useForceUpdateOnResizeObserved),
/* harmony export */   "useIntersectionObserver": () => (/* binding */ useIntersectionObserver),
/* harmony export */   "useResizeObserver": () => (/* binding */ useResizeObserver)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assert */ "../../../web_src/shared/js/utils/assert.ts");
/* harmony import */ var _reactutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reactutils */ "../../../web_src/shared/js/utils/reactutils/reactutils.ts");
/* harmony import */ var _refutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./refutils */ "../../../web_src/shared/js/utils/reactutils/refutils.ts");




function useHTMLObserver(callback, fnNewObserver) {
    return (0,_refutils__WEBPACK_IMPORTED_MODULE_3__.useRefCallbackWithCleanup)((elem) => {
        if (!elem)
            return undefined;
        // Even though the browser API returns multiple elements, we're just going to tell
        // our callback about the first entry.
        const observer = fnNewObserver(elem.ownerDocument.defaultView, (entryList) => {
            callback(entryList[0]);
        });
        observer.observe(elem);
        return () => observer.unobserve(elem);
    }, [callback, fnNewObserver]);
}
/**
 * Observe changes to the size of an element and react to them.
 *
 * This will fire for any change, including window resizes and CSS layout changes - anything
 * that causes the ref'd element to become a different size.
 *
 * @param callback Callback to be invoked when element resizes.  Will receive a single ResizeObserverEntry
 * @returns a ref to be placed on the element to observe
 */
function useResizeObserver(callback) {
    const fnNewObserver = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((ownerWindow, fnCallback) => {
        if (ownerWindow.ResizeObserver) {
            return new ownerWindow.ResizeObserver(fnCallback);
        }
        else {
            // legacy browsers- functionality is not available, but return a ResizeObserver-shaped thing so code will still run
            // Mostly iOS devices - iPhone 6 and original iPad Air or earlier cannot update to an iOS with ResizeObserver
            (0,_assert__WEBPACK_IMPORTED_MODULE_1__.AssertMsg)(false, "ResizeObserver is not available");
            return {
                observe: () => { },
                unobserve: () => { },
                disconnect: () => { },
            };
        }
    }, []);
    return useHTMLObserver(callback, fnNewObserver);
}
function useIntersectionObserver(callback, options) {
    const fnNewObserver = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((ownerWindow, fnCallback) => {
        return new ownerWindow.IntersectionObserver(fnCallback, options);
    }, [options]);
    return useHTMLObserver(callback, fnNewObserver);
}
/**
 * Force a re-render of the component when the size of an element changes for any reason.
 *
 * @returns a ref to be placed on the element.
 */
function useForceUpdateOnResizeObserved() {
    const forceUpdate = (0,_reactutils__WEBPACK_IMPORTED_MODULE_2__.useForceUpdate)();
    return useResizeObserver(forceUpdate);
}
/**
 * Helper for legacy react components.  Creates resize observer in correct window context for observing element
 */
function CreateResizeObserver(element, ...args) {
    const ownerWindow = element.ownerDocument.defaultView;
    const resizeObserver = new ownerWindow.ResizeObserver(...args);
    resizeObserver.observe(element);
    return resizeObserver;
}
/**
 * Helper for legacy react components.  Creates intersection observer in correct window context for observing element
 */
function CreateIntersectionObserver(element, ...args) {
    const ownerWindow = element.ownerDocument.defaultView;
    const intersectionObserver = new ownerWindow.IntersectionObserver(...args);
    intersectionObserver.observe(element);
    return intersectionObserver;
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/reactutils/usevisibleonscreen.ts":
/*!*************************************************************************!*\
  !*** ../../../web_src/shared/js/utils/reactutils/usevisibleonscreen.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useVisibleOnScreen": () => (/* binding */ useVisibleOnScreen)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _useresizeobserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useresizeobserver */ "../../../web_src/shared/js/utils/reactutils/useresizeobserver.ts");
/* harmony import */ var _refutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./refutils */ "../../../web_src/shared/js/utils/reactutils/refutils.ts");



/**
 * Determines if an element is visible on screen by looking at:
 * 1. Whether or not it is within the viewport
 * 2. Whether or not its computed visibility is hidden.
 *
 * Note that due to limits with how the browser's getComputedStyle API works this is unable catch elements on screen with opacity: 0.
 * They also will need to have visibility: hidden in order to correctly show as not visible.
 */
function useVisibleOnScreen() {
    const [bIntersecting, setIntersecting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const observerRef = (0,_useresizeobserver__WEBPACK_IMPORTED_MODULE_1__.useIntersectionObserver)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((entry) => setIntersecting(entry.isIntersecting), []));
    const { style, ref: styleRef } = useComputedStyle();
    const mergedRef = (0,_refutils__WEBPACK_IMPORTED_MODULE_2__.useMultipleRefs)(observerRef, styleRef);
    const bStyleVisible = style ? style.visibility !== 'hidden' : true;
    return { bVisible: bIntersecting && bStyleVisible, ref: mergedRef };
}
/**
 * Gets the living computed style for an element while minimizing forced layout / paint from calling getComputedStyle.
 */
function useComputedStyle() {
    const [elem, setElem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [style, setStyle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (elem)
            setStyle(window.getComputedStyle(elem));
    }, [elem]);
    return { style, ref: setElem };
}


/***/ }),

/***/ "../../../web_src/shared/js/utils/time.ts":
/*!************************************************!*\
  !*** ../../../web_src/shared/js/utils/time.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetUnixTime": () => (/* binding */ GetUnixTime),
/* harmony export */   "IsDateSameDay": () => (/* binding */ IsDateSameDay),
/* harmony export */   "IsDateSameYear": () => (/* binding */ IsDateSameYear),
/* harmony export */   "IsDateTheDayBefore": () => (/* binding */ IsDateTheDayBefore),
/* harmony export */   "RoundToBeginningOfDay": () => (/* binding */ RoundToBeginningOfDay),
/* harmony export */   "RoundToBeginningOfHour": () => (/* binding */ RoundToBeginningOfHour),
/* harmony export */   "RoundToBeginningOfMonth": () => (/* binding */ RoundToBeginningOfMonth),
/* harmony export */   "Seconds": () => (/* binding */ Seconds),
/* harmony export */   "Sleep": () => (/* binding */ Sleep),
/* harmony export */   "ToUnixTime": () => (/* binding */ ToUnixTime)
/* harmony export */ });
/**
 * Constants for number of seconds in period
 */
const Seconds = {
    PerYear: 31536000,
    PerMonth: 2628000,
    PerWeek: 604800,
    PerDay: 86400,
    PerHour: 3600,
    PerMinute: 60,
};
/**
 * Returns true if both dates are on the same day
 */
function IsDateSameDay(lhs, rhs) {
    return (lhs.getFullYear() == rhs.getFullYear() && lhs.getMonth() == rhs.getMonth() && lhs.getDate() == rhs.getDate());
}
/**
 * Returns true if dtUnknown is the day before dtTarget
 */
function IsDateTheDayBefore(dtTarget, dtUnknown) {
    // build day before
    let dtDayBefore = new Date(dtTarget);
    dtDayBefore.setDate(dtDayBefore.getDate() - 1);
    return IsDateSameDay(dtDayBefore, dtUnknown);
}
/** @returns true if both dates are in the same year */
function IsDateSameYear(lhs, rhs) {
    return (lhs.getFullYear() == rhs.getFullYear());
}
/** Rounds provided date to the beginning of the current hour */
function RoundToBeginningOfHour(dt) {
    return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), 0, 0, 0);
}
/** Rounds provided date to the beginning of the user's day */
function RoundToBeginningOfDay(dt) {
    return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), 0, 0, 0, 0);
}
function RoundToBeginningOfMonth(dt) {
    return new Date(dt.getFullYear(), dt.getMonth(), 1, 0, 0, 0, 0);
}
function Sleep(nDurationMS) {
    return new Promise((resolve) => setTimeout(resolve, nDurationMS));
}
function GetUnixTime() {
    return Math.floor(Date.now() / 1000);
}
function ToUnixTime(dt) {
    return Math.floor(dt.getTime() / 1000);
}


/***/ }),

/***/ "../../../web_src/shared/js/webui/config.ts":
/*!**************************************************!*\
  !*** ../../../web_src/shared/js/webui/config.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BConfigContextInGamepadUI": () => (/* binding */ BConfigContextInGamepadUI),
/* harmony export */   "BIsInPresentationMode": () => (/* binding */ BIsInPresentationMode),
/* harmony export */   "BroadcastConfig": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.BroadcastConfig),
/* harmony export */   "CommunityConfig": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.CommunityConfig),
/* harmony export */   "Config": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config),
/* harmony export */   "ConfigContext": () => (/* binding */ ConfigContext),
/* harmony export */   "ConfigContextRoot": () => (/* binding */ ConfigContextRoot),
/* harmony export */   "EventConfig": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.EventConfig),
/* harmony export */   "GET_BASE_URL": () => (/* binding */ GET_BASE_URL),
/* harmony export */   "GET_BASE_WEB_PROPERTY": () => (/* binding */ GET_BASE_WEB_PROPERTY),
/* harmony export */   "GenerateNewSessionID": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.GenerateNewSessionID),
/* harmony export */   "GetConfigJSON": () => (/* binding */ GetConfigJSON),
/* harmony export */   "GetOptionalConfigJSON": () => (/* binding */ GetOptionalConfigJSON),
/* harmony export */   "InitConfig": () => (/* binding */ InitConfig),
/* harmony export */   "InitConfigAsync": () => (/* binding */ InitConfigAsync),
/* harmony export */   "UserConfig": () => (/* reexport safe */ shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.UserConfig),
/* harmony export */   "useConfigContext": () => (/* binding */ useConfigContext),
/* harmony export */   "useInDesktopUI": () => (/* binding */ useInDesktopUI),
/* harmony export */   "useInGamepadUI": () => (/* binding */ useInGamepadUI),
/* harmony export */   "useOnDeck": () => (/* binding */ useOnDeck)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var shared_utils_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/assert */ "../../../web_src/shared/js/utils/assert.ts");
/* harmony import */ var shared_utils_cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/utils/cookies */ "../../../web_src/shared/js/utils/cookies.ts");
/* harmony import */ var shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shared/webui/configconstants */ "../../../web_src/shared/js/webui/configconstants.ts");






const ConfigContext = react__WEBPACK_IMPORTED_MODULE_0___default().createContext({});
const useConfigContext = () => {
    let context = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(ConfigContext);
    (0,shared_utils_assert__WEBPACK_IMPORTED_MODULE_1__.AssertMsg)(context.IN_GAMEPADUI !== undefined, "Trying to use ConfigContext without a provider!  Add ConfigContextRoot to application.");
    return context;
};
/**
 * Config context with default values
 */
function ConfigContextRoot(props) {
    const { IN_GAMEPADUI, IN_DESKTOPUI, IN_VR, children } = props;
    const value = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(() => ({
        IN_GAMEPADUI: IN_GAMEPADUI !== null && IN_GAMEPADUI !== void 0 ? IN_GAMEPADUI : shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.IN_GAMEPADUI,
        IN_DESKTOPUI: IN_DESKTOPUI !== null && IN_DESKTOPUI !== void 0 ? IN_DESKTOPUI : false,
        IN_VR: IN_VR !== null && IN_VR !== void 0 ? IN_VR : false,
    }), [IN_GAMEPADUI, IN_DESKTOPUI, IN_VR]);
    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ConfigContext.Provider, { value }, children);
}
/**
 * Helper function to determine whether we are in the gamepadui context
 * @returns boolean
 */
function useInGamepadUI() {
    const configContext = useConfigContext();
    return configContext === null || configContext === void 0 ? void 0 : configContext.IN_GAMEPADUI;
}
/**
 * Helper function to determine whether we are in the desktopui context
 * This can go away once we ship DesktopUI and sunset VGUI
 * @returns boolean
 */
function useInDesktopUI() {
    const configContext = useConfigContext();
    return  false && (0);
}
/**
 * Helper function to determine whether we are running on Deck
 * @returns boolean
 */
function useOnDeck() {
    return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.ON_DECK;
}
function BConfigContextInGamepadUI(configContext) {
    return configContext === null || configContext === void 0 ? void 0 : configContext.IN_GAMEPADUI;
}
const CONFIG_ELEMENT_ID = 'webui_config';
// Helper method to determine if we are in presentation mode. Only supported where we can read a cookie.
const k_PresentationModeCookie = 'presentation_mode';
function BIsInPresentationMode() {
    let strPresentationMode = null;
    if ((0,shared_utils_cookies__WEBPACK_IMPORTED_MODULE_2__.BCanAccessCookies)()) {
        strPresentationMode = (0,shared_utils_cookies__WEBPACK_IMPORTED_MODULE_2__.GetCookie)(k_PresentationModeCookie);
    }
    return Boolean(strPresentationMode && Number.parseInt(strPresentationMode) === 1);
}
/**
 * Initialize global & webpack config with data from PHP
 */
function InitConfig(strConfigElement = CONFIG_ELEMENT_ID) {
    const rgConfigsLoaded = {};
    const rgConfig = GetConfigJSON('config', strConfigElement);
    if (rgConfig) {
        delete rgConfig.SESSIONID; // no longer read from page
        Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config, rgConfig);
        rgConfigsLoaded.config = true;
    }
    const rgUserConfig = GetConfigJSON('userinfo', strConfigElement);
    if (rgUserConfig) {
        Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.UserConfig, rgUserConfig);
        rgConfigsLoaded.userConfig = true;
        // Presentation Mode: Remove our support user status so that we can present a feature for a recording
        // or screen capture as if we are regular users and prevent the various react widgets from showing support
        // or valve only features.
        if (shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.UserConfig.is_support && BIsInPresentationMode()) {
            shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.UserConfig.is_support = false;
        }
    }
    const rgBroadcastConfig = GetConfigJSON('broadcast', strConfigElement);
    if (rgBroadcastConfig) {
        Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.BroadcastConfig, rgBroadcastConfig);
        rgConfigsLoaded.broadcastConfig = true;
    }
    const rgCommunityConfig = GetConfigJSON('community', strConfigElement);
    if (rgCommunityConfig) {
        Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.CommunityConfig, rgCommunityConfig);
        rgConfigsLoaded.communityConfig = true;
    }
    const rgEventConfig = GetConfigJSON('event', strConfigElement);
    if (rgEventConfig) {
        Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.EventConfig, rgEventConfig);
        rgConfigsLoaded.eventConfig = true;
    }
    return rgConfigsLoaded;
}
function InitConfigAsync(axios, baseUrl, options) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
        if (options.config) {
            const response = yield axios.get(baseUrl + 'ajaxgetconfig');
            const rgConfig = response.data;
            if (rgConfig) {
                delete rgConfig.SESSIONID; // no longer read from page
                Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config, rgConfig);
            }
        }
        if (options.userConfig) {
            const userResponse = yield axios.get(baseUrl + 'ajaxgetuserconfig', { withCredentials: true });
            const rgUserConfig = userResponse.data;
            if (rgUserConfig) {
                Object.assign(shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.UserConfig, rgUserConfig);
            }
        }
    });
}
function GetConfigJSONInternal(attr, IdOrElement = CONFIG_ELEMENT_ID, bLogOnMissingConfigElement) {
    let elConfig;
    if (typeof IdOrElement === 'string')
        elConfig = !({"NODE_ENV":"development","STEAM_BUILD":"dev"}).MOBILE_BUILD && document.getElementById(IdOrElement);
    else
        elConfig = IdOrElement;
    if (elConfig) {
        try {
            if (elConfig.hasAttribute('data-' + attr)) {
                let rgConfig = JSON.parse(elConfig.getAttribute('data-' + attr));
                return rgConfig;
            }
            return null;
        }
        catch (e) {
            console.error('Failed to parse config', e);
        }
    }
    else {
        if (bLogOnMissingConfigElement)
            console.error('Missing config element #', IdOrElement);
    }
    return undefined;
}
function GetConfigJSON(attr, IdOrElement = CONFIG_ELEMENT_ID) {
    return GetConfigJSONInternal(attr, IdOrElement, true);
}
/**
 * Read a blob of JSON out of a data attribute on the web page. Returns undefined and does
 * not log an error if the attribute is not found. Use this version if your code is supposed
 * to run on the client, and then handle the error case.
 * @param attr The name of the data attribute on CONFIG_ELEMENT_ID
 */
function GetOptionalConfigJSON(attr, IdOrElement = CONFIG_ELEMENT_ID) {
    return GetConfigJSONInternal(attr, IdOrElement, false);
}
function BBaseURLMatches(currentURL, strBaseURL) {
    return strBaseURL.length != 0 && currentURL.startsWith(strBaseURL);
}
// Returns the web property you are connected to. If this is hokey, we can specify it in the config itself.
// DO NOT PUT this into the Config object as it will break mobile. Native code does not have window.location.href
function GET_BASE_URL() {
    if (!window || !window.location || !window.location.href) {
        console.warn('Unable to determine base url!');
        return 'unknown';
    }
    const currentURL = window.location.href;
    if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.COMMUNITY_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.COMMUNITY_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.CHAT_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.CHAT_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.PARTNER_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.PARTNER_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.HELP_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.HELP_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STEAMTV_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STEAMTV_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STATS_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STATS_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.INTERNAL_STATS_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.INTERNAL_STATS_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_CHECKOUT_BASE_URL)) {
        return shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_CHECKOUT_BASE_URL;
    }
    else if (BBaseURLMatches(currentURL, 'https://steamloopback.host')) {
        return 'https://steamloopback.host';
    }
    return '';
}
function GET_BASE_WEB_PROPERTY() {
    const currentURL = window.location.href;
    if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_BASE_URL) || BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STORE_CHECKOUT_BASE_URL)) {
        return 'store';
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.COMMUNITY_BASE_URL)) {
        return 'community';
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.PARTNER_BASE_URL)) {
        return 'partnerweb';
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.HELP_BASE_URL)) {
        return 'help';
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STEAMTV_BASE_URL)) {
        return 'steamtv';
    }
    else if (BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.STATS_BASE_URL) || BBaseURLMatches(currentURL, shared_webui_configconstants__WEBPACK_IMPORTED_MODULE_3__.Config.INTERNAL_STATS_BASE_URL)) {
        return 'stats';
    }
    return '';
}


/***/ }),

/***/ "../../../web_src/shared/js/webui/configconstants.ts":
/*!***********************************************************!*\
  !*** ../../../web_src/shared/js/webui/configconstants.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BroadcastConfig": () => (/* binding */ BroadcastConfig),
/* harmony export */   "CommunityConfig": () => (/* binding */ CommunityConfig),
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "EventConfig": () => (/* binding */ EventConfig),
/* harmony export */   "GenerateNewSessionID": () => (/* binding */ GenerateNewSessionID),
/* harmony export */   "UserConfig": () => (/* binding */ UserConfig)
/* harmony export */ });
/* harmony import */ var shared_utils_mathutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/utils/mathutils */ "../../../web_src/shared/js/utils/mathutils.ts");
/* harmony import */ var shared_utils_cookies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shared/utils/cookies */ "../../../web_src/shared/js/utils/cookies.ts");
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");



/**
 * Global configuration constants.
 * Populated by GetWebUIConfig on websites.
 * Library fills most fields: some in the URL passed from newlibrarypage.cpp, some in CURLStore.Init,
 * and some in SteamLibrary.InitConfig directly. Some it skips - be sure to test.
 */
const Config = {
    EUNIVERSE: 0,
    WEB_UNIVERSE: '',
    LANGUAGE: 'english',
    SUPPORTED_LANGUAGES: [],
    COUNTRY: '',
    /** CDNStorage based URL scheme, https://<host>/<hash>(_<size>)?.jpg - no two-character URL subdir */
    AVATAR_BASE_URL: '',
    MEDIA_CDN_COMMUNITY_URL: '',
    MEDIA_CDN_URL: '',
    COMMUNITY_CDN_URL: '',
    COMMUNITY_CDN_ASSET_URL: '',
    BASE_URL_SHARED_CDN: '',
    STORE_CDN_URL: '',
    PUBLIC_SHARED_URL: '',
    COMMUNITY_BASE_URL: '',
    /** usually same as community_base_url, but will be steam-chat.com in client or steam.tv in broadcast mode */
    CHAT_BASE_URL: '',
    STORE_BASE_URL: '',
    STORE_CHECKOUT_BASE_URL: '',
    LOGIN_BASE_URL: '',
    SUPPORT_BASE_URL: '',
    STORE_ICON_BASE_URL: '',
    IMG_URL: '',
    STEAMTV_BASE_URL: '',
    HELP_BASE_URL: '',
    PARTNER_BASE_URL: '',
    /** public stats, e.g. partner.steampowered.com */
    STATS_BASE_URL: '',
    /** internal stats, e.g. steamstats.valvesoftware.com */
    INTERNAL_STATS_BASE_URL: '',
    BASE_URL_STORE_CDN_ASSETS: '',
    /** Whether or not we are running in the client. NOTE: This is also true in React web pages running in the client. */
    IN_CLIENT: false,
    USE_POPUPS: false,
    IN_MOBILE: false,
    IN_MOBILE_WEBVIEW: false,
    IN_TENFOOT: false,
    PLATFORM: '',
    /** SNR code if available for the current page. It should be appended to all outward links */
    SNR: '',
    LAUNCHER_TYPE: shared_clientenums__WEBPACK_IMPORTED_MODULE_2__.ELauncherType.k_ELauncherTypeDefault,
    EREALM: 0,
    /** technically Linux underneath, so needs its own flag to distinguish */
    IN_CHROMEOS: false,
    /** technically Linux underneath, so needs its own flag to distinguish */
    TESLA: false,
    // client-only parameters:
    LOCAL_HOSTNAME: '',
    // web-only parameters:
    WEBAPI_BASE_URL: '',
    TOKEN_URL: '',
    BUILD_TIMESTAMP: 0,
    /** when the page was rendered */
    PAGE_TIMESTAMP: 0,
    /** true only set from webui_util.php, indicating we are running reactjs hosted from our web servers. */
    FROM_WEB: false,
    /** stringified EMachineAuthWebDomain - note that this includes 'Client' and 'Mobile' */
    WEBSITE_ID: 'Unknown',
    // this used to be part of config, but reading the cookie is best.  Defined as a getter for backwards compatibility.
    get SESSIONID() {
        return GetSessionID();
    },
    // web chat specific, could move to a specialized config struct
    FRIENDSUI_BETA: false,
    STEAM_TV: false,
    DEV_MODE: false,
    // steamui specific, could move to a narrower config
    /** Whether we're directly a SteamUI context (which includes being GamepadUI). Never true for Community, FriendsUI, etc. */
    IN_STEAMUI: false,
    /** @note Tom Bui: deprecated--only true for friendsui now. */
    IN_GAMEPADUI: false,
    /** Whether we're using a shared js context or not.  Always true for gamepadui. */
    IN_STEAMUI_SHARED_CONTEXT: false,
    /** Whether there is only one shared js context.  To be removed once we ship -steamuisharedjscontext. */
    ONE_STEAMUI_SHARED_CONTEXT: false,
    /** Whether GamepadUI is in Steam Deck override mode and should display similarly to device on desktop */
    DECK_DISPLAY_MODE: false,
    /** Whether we are running on the Steam Deck device (in gamepadui mode or not).  Can be emulated with -steamdeck. */
    ON_DECK: false,
    /** Whether we are running in SteamOS (with -steamos[3] on Linux). */
    ON_STEAMOS: false,
    /** Whether Gamescope is running (with gamepadui) or not */
    IN_GAMESCOPE: false,
    IN_LOGIN: false,
    IN_LOGIN_REFRESH: false,
    USE_LONGEST_LOC_STRING: false,
};
/** User info, mostly populated by GetWebUICurrentUserInfo and GetWebUICurrentUserInfoForStore */
const UserConfig = {
    logged_in: false,
    steamid: '',
    accountid: 0,
    account_name: '',
    token: undefined,
    token_use_id: undefined,
    webapi_token: '',
    authwgtoken: '',
    is_support: false,
    is_limited: false,
    is_partner_member: false,
    short_url: '',
    country_code: '', // user country code i.e US (string)
};
const BroadcastConfig = {
    steamid: '',
    clanid: 0,
    listid: 0, // listid of the specific list owned by curator/creator
};
/**
 * Information about the clan being viewed.
 * Populated by GetWebUICommunityConfigForGroup on community, by GetWebUICommunityConfigForStore on store,
 * partial support from GetWebUICommunityConfigForFAQs on help, and not to be trusted elsewhere.
 */
const CommunityConfig = {
    CLANSTEAMID: '',
    CLANACCOUNTID: 0,
    APPID: 0,
    VANITY_ID: '',
    IS_CREATOR_HOME: false,
    IS_CURATOR: false,
    IS_OGG: false,
    CAN_UPLOAD_IMAGES: false,
    APP_NAME: '',
    HEADER_IMAGE: '',
    HAS_ADULT_CONTENT: false,
    HAS_ADULT_CONTENT_SEX: false,
    HAS_ADULT_CONTENT_VIOLENCE: false,
    IS_VALVE_GROUP: false,
    IS_ALLOWED_SC: false, // OGG and a short list of curators only.
};
/**
 * Information about the event or sale being viewed.
 * Populated by GetWebUIEventConfig for store.
 */
const EventConfig = {
    ANNOUNCEMENT_GID: '',
    TAKEOVER_ANNOUNCEMENT_GID: '', // used by content hubs page that for a limited time override the default hub (think theme for sale event)
};
let g_fallbackSessionID;
/**
 * Read sessionid value from cookie.
 */
function GetSessionID() {
    if (!(0,shared_utils_cookies__WEBPACK_IMPORTED_MODULE_1__.BCanAccessCookies)()) {
        // We can't use cookies directly here but still want to have some
        // internally consistent idea of a session id.
        if (!g_fallbackSessionID)
            g_fallbackSessionID = GenerateNewSessionID();
        return g_fallbackSessionID;
    }
    let strSessionID = (0,shared_utils_cookies__WEBPACK_IMPORTED_MODULE_1__.GetCookie)("sessionid");
    if (!strSessionID) {
        strSessionID = GenerateNewSessionID();
    }
    return strSessionID;
}
/**
 * Generates a random session id
 */
function GenerateSessionID() {
    let strSessionID = '';
    for (let i = 0; i < 24; i++)
        strSessionID += (0,shared_utils_mathutils__WEBPACK_IMPORTED_MODULE_0__.RandomInt)(0, 35).toString(36);
    return strSessionID;
}
/**
 * In client, stomps session id with a new one
 */
function GenerateNewSessionID() {
    let strSessionID = GenerateSessionID();
    // slam cookie for this session
    (0,shared_utils_cookies__WEBPACK_IMPORTED_MODULE_1__.SetCookie)('sessionid', strSessionID, 0);
    return strSessionID;
}


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldIn": () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__esDecorate": () => (/* binding */ __esDecorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__propKey": () => (/* binding */ __propKey),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__runInitializers": () => (/* binding */ __runInitializers),
/* harmony export */   "__setFunctionName": () => (/* binding */ __setFunctionName),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};

function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};

function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}


/***/ }),

/***/ "./node_modules/axios/package.json":
/*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************************!*\
  !*** ./src/js/index_friends.tsx ***!
  \**********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var shared_domutil_popupmanager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shared/domutil/popupmanager */ "../../../web_src/shared/js/domutil/popupmanager.ts");
/* harmony import */ var js_components_friends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js/components/friends */ "./src/js/components/friends.tsx");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var js_common_mainwindow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js/common/mainwindow */ "./src/js/common/mainwindow.tsx");
/* harmony import */ var js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! js/stores/offlinefriendsstore */ "./src/js/stores/offlinefriendsstore.ts");
/* harmony import */ var shared_clientenums__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared/clientenums */ "../../../web_src/shared/js/clientenums.ts");
/* harmony import */ var shared_clienttypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! shared/clienttypes */ "../../../web_src/shared/js/clienttypes/index.ts");
/* harmony import */ var shared_steamclient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! shared/steamclient */ "../../../web_src/shared/js/steamclient.ts");
/* harmony import */ var shared_ui_shared_dialog_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! shared/ui/shared_dialog.css */ "../../../web_src/shared/js/ui/shared_dialog.css");
/* harmony import */ var shared_ui_shared_dialog_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(shared_ui_shared_dialog_css__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _css_fonts_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../css/fonts.css */ "./src/css/fonts.css");
/* harmony import */ var _css_fonts_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_css_fonts_css__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _css_index_friends_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../css/index_friends.css */ "./src/css/index_friends.css");
/* harmony import */ var _css_index_friends_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_css_index_friends_css__WEBPACK_IMPORTED_MODULE_10__);

/**
 * This is the entry point for friendsui code that ships with the client.  Friendsui is dynamically
 * loaded off the web, this code primarily does two things:
 *  1) builds the iframe that hosts the friendsui code loaded off the web
 *  2) displays the "couldn't connect to steam network" friendslist and offline friendslist popup
 */













window._Steam = { onComponentMounted: js_common_mainwindow__WEBPACK_IMPORTED_MODULE_3__.onComponentMounted };
window.test = js_common_mainwindow__WEBPACK_IMPORTED_MODULE_3__.RegisterForStyleSheetChanges;
let g_strFrame = '';
let g_strFrameURL = '';
let g_hLoadIframe = undefined;
let g_hShowLoadingWindow = undefined;
let g_hCheckForNewFriendsUI = undefined;
let g_NumNetworkCheckTries = 0;
let g_ErrorPopups = [];
let g_strLastErrorPopupRestoreDetails = '';
let g_eUIMode = shared_clientenums__WEBPACK_IMPORTED_MODULE_5__.EUIMode.k_EUIMode_Unknown;
// True means always show (loader window was visible), false means never show (loader window was explicitly closed by user),
// undefined means loader window was never visible so do whatever
let g_bShowFriendsListOnLoad = undefined;
// If the user selected a persona state from the taskbar, we need to write that down and forward it
// to friendsui when it's ready
let g_ePersonaStateOnStartup = undefined;
let g_LoadedBuildTimestamp = 0;
let g_AvailableBuildTimestamp = 0;
let g_ChatStateToRestoreOnStartup = undefined;
let g_OfflineChatStore;
// Every 4 hours check for new code
let g_CheckForUpdatesIntervalSeconds = 14400;
// NEVER COMMIT WITH THESE ON! FOR CSS DEBUGGING USE.
let g_ForceFailure = false;
let g_ForceLongLoading = false;
// global init
window.addEventListener('message', OnMessageFromFrame);
function StartChat(strFrame) {
    SteamClient.WebChat.RegisterForFriendPostMessage(HandlePostMessage);
    if (g_hCheckForNewFriendsUI !== undefined) {
        clearInterval(g_hCheckForNewFriendsUI);
        g_hCheckForNewFriendsUI = undefined;
    }
    g_strFrame = strFrame;
    g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.Loading);
    g_LoadedBuildTimestamp = 0;
    ClearLoadingTimeouts();
    // for testing
    if (g_ForceFailure) {
        g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.FailRetry);
        ShowFriendsListPopup();
        return;
    }
    else if (g_ForceLongLoading) {
        ShowFriendsListPopup();
        return;
    }


    // Ugly excision of synchronous code that doesn't belong up here because GetWebChatURL() does not block for some dumbfuck reason
    // All of this belongs after we re-assign GetWebChatURL
    function finish()
    {
        // This timeout is to start showing the loading window early if we are still checking but it's slow
        g_hShowLoadingWindow = setTimeout(LoadFrameSlow, 4000);
        // This timeout is for GetWebChatURL never returning, which can happen if steamwebhelper.exe is broken
        g_hLoadIframe = setTimeout(LoadFrameTimeout, 1000);
        SteamClient.WebChat.GetWebChatURL().then((strURL) => {
		
		    //console.log("CHECK strURL: " + strURL)
		    //fetch(strURL).then(resp => console.log("Response: ", resp))
		
            g_strFrameURL = strURL;
            if (g_hLoadIframe !== undefined) {
                clearTimeout(g_hLoadIframe);
                g_hLoadIframe = undefined;
            }
            if (strURL) {
                let url = new URL(strURL);
                url.searchParams.set('origin', window.origin);
                g_strFrameURL = url.href;
                console.log('Loading chat from url: ', url.href);
                StartNetworkCheck(url.href);
            }
            else {
                ClearLoadingTimeouts();
                console.log('Empty webchat URL, we are in offline mode');
                g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.OfflineMode);
            }
        });
    }


	//
	// Overriding SteamClient.WebChat.GetWebChatURL()
	//
	
	// friendsui.dll injects many C-side cef bindings into our root scope, including SteamClient.WebChat.GetWebChatURL()
	// It does this every time the window's visibility changes, instead of when the window is created, because why bother doing things correctly when you are Valve and Steam prints $1000000 a day
	// So we cannot replace GetWebChatURL in a sane location like Init() because our replacement function will get clobbered
	
	// The unmanaged SteamClient.WebChat.GetWebChatURL() function returns a promise that in turn on success returns the URL of the friends pwa
	// Example: https://steam-chat.com/chat/clientui/?l=english&cc=US&build=1685488080
	// The url will have the l, cc, and build GET params set per the state of the steam client
	// Idk what GetWebChatURL() returns on failure since it always seems to succeed, which begs the question why tf is this a promise in the first place
	// We don't have any scenario in which we should return a failure URL instead of the path to the steam-chat.com snapshot index.html, so our promise will always succeed
	
	// Alternatively, we could patch friendsui.dll into returning a different string for GetWebChatURL()
	// But that takes more effort, and it might(?) trigger VAC

    // Also of note: there is also an injected WebChat.GetWebChatLanguage() method, which presumably (untested) returns strings like "english" or "russian"
	
	if (PATCH_ENABLE)
	{
        // First, we need to get the actual url from getwebchat since it conveniently has the `l` and `cc` GET params set on it
        // And I don't know of any other injected method that more cleanly/directly gets the Steam client's chosen display language & country
        SteamClient.WebChat.GetWebChatURL().then((url) => // GetWebChatURL() is not synchronous because that would make too much sense
        {
            console.log("Original GetWebChatURL: ", url);

            let urlParams = new URLSearchParams(url.split('?')[1]); // split() because URLSearchParams is too stupid to understand urls with search params; it only understands search params without a url. Great.
            let displayLanguage = urlParams.get("l") ?? "english"; // english is a fallback present on all computers
            let countryCode = urlParams.get("cc") ?? "US"; // the steam-chat.com snapshots I capture are captured in the US so "US" is what is baked into the hypertext wherever this string is used
            
            // Now we can build the new url
            let payloadRootUrl = "https://steamloopback.host/" + TfusionPatch_MetadataJson.Level0.PayloadName + "/" // must have trailing slash! (for payload's friends.js logic)
		
		    let iframeSrc = payloadRootUrl + TfusionPatch_MetadataJson.Level0.PayloadRootIndexFilename
			    + "?DisplayLanguage=" + encodeURIComponent(displayLanguage)
			    + "&CountryCode=" + encodeURIComponent(countryCode)
			    + "&PayloadRootUrl=" + encodeURIComponent(payloadRootUrl);
		    
		    SteamClient.WebChat.GetWebChatURL = function() {
			    return new Promise( function(succeed, fail) {
				    succeed(iframeSrc);
			    });
		    };
            
            // Patch entry point installed, proceed normally from here
            finish();
        });
	}

    // Passthrough; no patch
    else
    {
        finish();
    }
}
function ClearLoadingTimeouts() {
    if (g_hLoadIframe !== undefined) {
        clearTimeout(g_hLoadIframe);
        g_hLoadIframe = undefined;
    }
    if (g_hShowLoadingWindow !== undefined) {
        clearTimeout(g_hShowLoadingWindow);
        g_hShowLoadingWindow = undefined;
    }
}
function StartNetworkCheck(strURL) {
    console.log("Checking network... " + g_NumNetworkCheckTries);
    // First time a quicker timeout, incase network isn't settled on startup and
    // we are going to fail regardless without a retry
    let timeout = 7500;
    if (g_NumNetworkCheckTries == 0) {
        timeout = 500;
    }
    else if (g_NumNetworkCheckTries == 1) {
        timeout = 2000;
    }
    let url = strURL;
    ++g_NumNetworkCheckTries;
    axios__WEBPACK_IMPORTED_MODULE_2___default().head(strURL, { timeout: timeout }).then((response) => {
        if (response.headers['x-buildtimestamp'] === undefined)
            console.log("Network check (head req) got 200, but no x-buildtimestamp, not valid? Proceeding anyway...");
        console.log("Network check (head req) passed after " + g_NumNetworkCheckTries + " tries...");
        LoadChat(url);
    }).catch(err => {
        // Failed or timed out, try again, or move on to showing failure
        console.log("Network check try " + g_NumNetworkCheckTries + " failed...");
        if (g_NumNetworkCheckTries >= 3)
            LoadFrameTimeout();
        else
            StartNetworkCheck(url);
    });
}
function LoadChat(strURL) {
    console.log('Loading chat from url: ', strURL);
    // start a timer to see when iframe is loaded. If not cancelled, load failed.
    if (g_hLoadIframe !== undefined)
        clearTimeout(g_hLoadIframe);
    g_hLoadIframe = setTimeout(LoadFrameTimeout, 15000);
    // start load
    let iframe = document.getElementById(g_strFrame);
    iframe.src = strURL;
}
function LoadFrameTimeout() {
    console.log('Failed to load chat!');
    ClearLoadingTimeouts();
    g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.FailRetry);
    if (g_eUIMode == shared_clientenums__WEBPACK_IMPORTED_MODULE_5__.EUIMode.k_EUIMode_GamePadUI)
        return;
    ShowFriendsListPopup();
}
function LoadFrameSlow() {
    if (g_eUIMode != shared_clientenums__WEBPACK_IMPORTED_MODULE_5__.EUIMode.k_EUIMode_GamePadUI && g_OfflineChatStore.loadingState != js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.Loaded)
        ShowFriendsListPopup();
    g_hShowLoadingWindow = undefined;
}
function ClearIFrame() {
    let iframe = document.getElementById(g_strFrame);
    if (iframe && iframe.src != undefined)
        iframe.src = undefined;
    // always take over message handler if we unloaded the main chat app
    SteamClient.WebChat.RegisterForFriendPostMessage(HandlePostMessage);
    SteamClient.WebChat.RegisterOverlayChatBrowserInfoChanged(OnOverlayChatBrowserInfoChanged);
}
function SignInToFriends() {
    g_NumNetworkCheckTries = 0;
    StartChat('tracked_frame_friends_chat');
}
function OnMessageFromFrame(event) {
    if (typeof event.data != 'object' || event.data.message == undefined)
        return;
    if (event.data.message == 'ShowFriendsErrorRetryDialog') {
        ClearLoadingTimeouts();
        // clear iframe if it was loaded
        ClearIFrame();
        g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.FailRetry);
        ShowFriendsListPopup();
    }
    else if (event.data.message == 'ChatJavascriptInitialized') {
        IsChatJavascriptIntialized = true;
        g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.Loaded);
        ClearLoadingTimeouts();
        let strOrigin = g_strFrameURL.match(/(https:\/\/[^\/]+)\/.*/)[1];
        window.frames[0].postMessage({ message: 'LoaderWindowRestoreDetails', data: g_strLastErrorPopupRestoreDetails, bVisible: g_bShowFriendsListOnLoad }, strOrigin);
        if (g_ePersonaStateOnStartup !== undefined) {
            window.frames[0].postMessage({ message: 'SetPersonaState', persona_state: g_ePersonaStateOnStartup }, strOrigin);
            g_ePersonaStateOnStartup = undefined;
        }
        if (event.data.data !== undefined)
            g_LoadedBuildTimestamp = event.data.data;
        else
            g_LoadedBuildTimestamp = 0;
        if (g_ChatStateToRestoreOnStartup != undefined) {
            // Ask friendsui to reload the state
            try {
                window.frames[0].postMessage({ message: 'ReloadSerializedChatState', state: g_ChatStateToRestoreOnStartup }, strOrigin);
                g_ChatStateToRestoreOnStartup = undefined;
            }
            catch (e) {
                console.log("Failed trying to ask FriendsUI to restore chat state after reload");
                g_ChatStateToRestoreOnStartup = undefined;
            }
        }
        g_hCheckForNewFriendsUI = setInterval(CheckForNewFriendsUIInterval, g_CheckForUpdatesIntervalSeconds * 1000);
        HideFriendsListPopup();
        console.log('Chat loaded! ' + g_LoadedBuildTimestamp);
    }
    else if (event.data.message == 'ChatReloadRequest') {
        if (g_strFrame == undefined || g_strFrame == '')
            return;
        g_NumNetworkCheckTries = 0;
        if (event.data.state != undefined)
            g_ChatStateToRestoreOnStartup = event.data.state;
        StartChat(g_strFrame);
    }
    else if (event.data.message == 'CheckForAndForceUpdate') {
        CheckForNewFriendsUI(true);
    }
    else if (event.data.message == 'SignInRequest') {
        SignInToFriends();
    }
    else if (event.data.message == 'SignOutRequest') {
        ClearLoadingTimeouts();
        ClearIFrame();
        g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.SignIn);
        g_bShowFriendsListOnLoad = event.data.bShowLoaderWindow;
        if (event.data.bShowLoaderWindow) {
            let context = undefined;
            if (event.data.browserContext)
                context = event.data.browserContext;
            ShowFriendsListPopup(context);
        }
    }
    else if (event.data.message == 'FriendsListRestoreDetailsChanged') {
        let strRestoreDetails = event.data.data;
        let errorpopup = new js_components_friends__WEBPACK_IMPORTED_MODULE_1__.CFriendsListLoaderPopup(g_OfflineChatStore, undefined);
        // Save the position in the dialog's local storage and remember it so we can pass it back
        // to the friends list if we relogin.
        errorpopup.SaveWindowPosition(strRestoreDetails);
        g_strLastErrorPopupRestoreDetails = strRestoreDetails;
    }
    else if (event.data.message == 'ErrorPopupRestoreDetailsChanged') {
        g_strLastErrorPopupRestoreDetails = event.data.data;
    }
    else if (event.data.message == 'ErrorPopupClosed') {
        g_bShowFriendsListOnLoad = false;
    }
}
function CheckForNewFriendsUIInterval() {
    CheckForNewFriendsUI(false);
}
function CheckForNewFriendsUI(bForce) {
	
	// We use always a local snapshot of steam-chat.com with extras and modifications on top
	// These are static resources on the local file system and cannot silently change themselves in the background. Only the user can change these files.
	// So there is no need or reason to compare our local snapshot with the remote pwa files
	return;
	
	
    SteamClient.WebChat.GetWebChatURL().then((strURL) => {
        console.log('Checking for updates from chat from url: ', strURL);
        if (g_hLoadIframe !== undefined) {
            clearTimeout(g_hLoadIframe);
            g_hLoadIframe = undefined;
        }
        axios__WEBPACK_IMPORTED_MODULE_2___default().head(strURL, { timeout: 10000 }).then((response) => {
            let buildAvail = 0;
            if (response.headers['x-buildtimestamp'] !== undefined) {
                g_AvailableBuildTimestamp = Number(response.headers['x-buildtimestamp']);
                console.log("Currently available build: " + g_AvailableBuildTimestamp);
                // Normally we only auto-update if our build is at least 24 hours out of date, FriendsUI itself
                // may wait for the "very out of date" signal at 7 days if it doesn't have a chance to update while idle
                let secondsOutOfDateToUpdateMin = 24 * 3600;
                if (bForce)
                    secondsOutOfDateToUpdateMin = 0;
                if (g_AvailableBuildTimestamp != 0 && g_LoadedBuildTimestamp != 0) {
                    let nSecondsOutOfDate = g_AvailableBuildTimestamp - g_LoadedBuildTimestamp;
                    if (g_OfflineChatStore.loadingState == js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.Loaded && nSecondsOutOfDate > secondsOutOfDateToUpdateMin) {
                        // We are more than 24 hours out of date, time to try to reload in the background if we can, but
                        // first, see if we are actually more than 7 days out of date, then we are more agressive about showing
                        // the user they are out of date
                        let bVeryOutOfDate = (nSecondsOutOfDate > (7 * 24 * 3600));
                        let bForceUpdate = Number(response.headers['x-forceuiupdate']) || bForce;
                        console.log("We are out of date enough to reload if idle, bVeryOutOfDate=" + (bVeryOutOfDate ? 'true' : 'false'));
                        // Ok to throw exception here if no match, will go to .catch below
                        let strOrigin = strURL.match(/(https:\/\/[^\/]+)\/.*/)[1];
                        window.frames[0].postMessage({ message: 'UpdatedBuildAvailable', bVeryOutOfDate: bVeryOutOfDate, bForce: bForceUpdate, nSecondsOutOfDate: nSecondsOutOfDate }, strOrigin);
                    }
                }
            }
        }).catch(err => {
            console.log("Failed trying to check available build timestamp");
        });
    });
}
function OnOverlayChatBrowserInfoChanged() {
    SteamClient.WebChat.GetOverlayChatBrowserInfo().then((vecBrowserInfo) => {
        let mapMissing = new Map();
        for (let i = 0; i < g_ErrorPopups.length; ++i) {
            if (g_ErrorPopups[i].browser_info && g_ErrorPopups[i].browser_info.m_unPID != 0) {
                mapMissing.set(g_ErrorPopups[i].browser_info.m_unPID, true);
            }
        }
        // figure out if any are gone
        for (let info of vecBrowserInfo)
            mapMissing.delete(info.unPID);
        // remove deleted
        for (let i = g_ErrorPopups.length - 1; i >= 0; i--) {
            if (g_ErrorPopups[i].browser_info != undefined && mapMissing.has(g_ErrorPopups[i].browser_info.m_unPID)) {
                console.log("Deleting error/offline dialog for: " + g_ErrorPopups[i].browser_info.m_unPID);
                g_ErrorPopups[i].Close();
                g_ErrorPopups[i] = undefined;
                g_ErrorPopups.pop();
            }
        }
    })
        .catch((strError) => {
        console.log("Failed to load overlay browser info:", strError);
    });
}
function HandlePostMessage(event) {
    let data = event.data;
    if (!data || !data.command)
        return;
    if (data.command == 'ShowPopupFriendsList') {
        // we are still trying to load, but user is already trying to activate friendsui
        console.log('ShowPopupFriendsList');
        let browserContext = { m_unPID: 0, m_nBrowserID: -1 };
        if (event.data.pid !== undefined) {
            browserContext = { m_unPID: event.data.pid, m_nBrowserID: event.data.browserid };
        }
        ShowFriendsListPopup(browserContext);
    }
    else if (data.command == 'SetPersonaState') {
        let state = data.persona_state;
        if (state != shared_clientenums__WEBPACK_IMPORTED_MODULE_5__.EPersonaState.k_EPersonaStateOffline) {
            g_ePersonaStateOnStartup = state;
            g_NumNetworkCheckTries = 0;
            StartChat('tracked_frame_friends_chat');
        }
    }
}
function HandleLibraryCommandMessage(strChannel, strMessage, strArguments) {
    if (strMessage == 'SignInToFriends') {
        SignInToFriends();
    }
}
function ShowFriendsListPopup(browserContext = undefined) {
    // Normalize browser context to be really sure we don't show twice for desktop
    if (browserContext == undefined || browserContext == null)
        browserContext = { m_unPID: 0, m_nBrowserID: -1 };
    for (let i = 0; i < g_ErrorPopups.length; ++i) {
        if (g_ErrorPopups[i].browser_info.m_nBrowserID == browserContext.m_nBrowserID
            && g_ErrorPopups[i].browser_info.m_unPID == browserContext.m_unPID) {
            g_ErrorPopups[i].Show();
            g_bShowFriendsListOnLoad = true;
            return;
        }
    }
    let errorPopup = new js_components_friends__WEBPACK_IMPORTED_MODULE_1__.CFriendsListLoaderPopup(g_OfflineChatStore, browserContext);
    g_ErrorPopups.push(errorPopup);
    errorPopup.Show();
    g_bShowFriendsListOnLoad = true;
}
function HideFriendsListPopup() {
    for (let i = 0; i < g_ErrorPopups.length; ++i) {
        g_ErrorPopups[i].Close();
        g_ErrorPopups[i] = undefined;
    }
    g_ErrorPopups = [];
}
function Init() {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
        // Doesn't work in VGUI -forcevgui windows!!
        //RegisterForStyleSheetChanges();
        g_OfflineChatStore = new js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.COfflineChatStore();
        g_OfflineChatStore.Init();
        // never rejects
        let strLanguage = yield SteamClient.WebChat.GetWebChatLanguage();
        try {
            yield (0,js_common_mainwindow__WEBPACK_IMPORTED_MODULE_3__.InitLocalization)(strLanguage);
        }
        catch (e) {
            console.log("Failed to load localization!");
        }
        SteamClient.WebChat.RegisterForFriendPostMessage(HandlePostMessage);
        SteamClient.WebChat.RegisterOverlayChatBrowserInfoChanged(OnOverlayChatBrowserInfoChanged);
        if ((0,shared_steamclient__WEBPACK_IMPORTED_MODULE_7__.BSteamClientHasMethod)('Messaging.RegisterForMessages')) {
            SteamClient.Messaging.RegisterForMessages('FriendsLoader', HandleLibraryCommandMessage);
        }
        let bSignIntoFriends = yield SteamClient.WebChat.GetSignIntoFriendsOnStart();
        if (!bSignIntoFriends) {
            console.log("Don't sign in on start");
            g_OfflineChatStore.SetLoadingState(js_stores_offlinefriendsstore__WEBPACK_IMPORTED_MODULE_4__.EFriendLoadingState.SignIn);
            return;
        }
        let unAccountID = yield SteamClient.WebChat.GetCurrentUserAccountID();
        shared_domutil_popupmanager__WEBPACK_IMPORTED_MODULE_0__.g_PopupManager.SetCurrentLoggedInAccountID(unAccountID);
        g_eUIMode = yield SteamClient.WebChat.GetUIMode();
        

        //
        // Iframe page failure detection
        //

        // See gh issue #5

        // For reasons™, chromium never raises onerror for iframes and instead raises onload when an unhandled exception occurs while an iframe is loading
        // This means we are prevented from simply listening for an error from within the iframe
        // Instead, our only option is to employ the following:
        // 1. The iframe document must post a window message after it has completed loading that indicates.
        // 2. We listen to the iframe's onload. If onload is raised before we receive the posted message from the iframe's document, we conclude it experienced an unhandled exception.
        // The inner friends.js already does #1 (ChatJavascriptIntialized) and we already listen for it (OnMessageFromFrame) so that makes this easier

        // If we detect the iframe failed to load, we will assume the most likely known scenario: Valve's race condition as noted in issue #5
        // Per that assumption, the injected SteamClient interface is borked, and the only way to regenerate it is to refresh ourself (the outer Steam\clientui\index_friends.html document, not the inner remote\public\index.html iframe)
        // Note that this is a stronger refresh than the blue "Retry Connection" button that appears when the Valve code "detects" the inner iframe failed (by ugly fixed timeout)
        // Normally, that button only reloads the iframe and is thus only suitable for handling network issues (this can be changed with rootconfig.OuterFrame.RetryConnectionButtonStrongerReload)
        // - Related note: I have upgraded the blue retry connection button to perform the same kind of full/strong reload that we're doing here. This behavior is enabled by rootconfig.OuterFrame.RetryConnectionButtonStrongerReload.

        // We will only reload a limited number of times

        let iframe = document.getElementById("tracked_frame_friends_chat");
        iframe.addEventListener("load", function()
        {
            if (PATCH_ENABLE)
            {
                if (!IsChatJavascriptIntialized)
                {
                    console.log("[!!!] An unhandled exception occurred while the inner document was loading [!!!]");
                    if (IframeErrorInducedReloadCount < IframeErrorInducedReloadCountMax && IframeErrorInducedReloadCountMax > 0)
                    {
                        let retryCount = IframeErrorInducedReloadCount + 1;
                        console.log(`Reloading outer document (attempt ${retryCount}/${IframeErrorInducedReloadCountMax})`);
                    
                        // Graduated delay between page reloads to increase coverage likelihood on slower systems
                        let reloadDelay = 2000 * Math.pow(IframeErrorInducedReloadCount, 2); // milliseconds
                    
                        setTimeout(function()
                            {
                                // Cookies are the only way to pass data to new instance of this document; urlvars don't work because we are prevented from loading a different web page
                                // Which means we have to deal with the fact that cookies persist, so we'll make this one expire shortly
                                // 8 seconds is probably long enough to allow for a page reload 99% of the time while also being short enough to expire between exiting Steam and relaunching it even on fast disks
                                Cookies.set("IframeErrorInducedReloadCount", retryCount, {expires: new Date(new Date().getTime() + 8000)} );
                            
                                // reload() is the only thing that works, which is why we have to use cookies
                                // assign(), replace(), location= and location.href= all do absolutely nothing. I'm assuming steamwebhelper has cef configured to deny web pages the ability to navigate elsewhere.
                                window.location.reload();
                            },
                            reloadDelay
                        );
                    }
                    else
                    {
                        console.log("Maximum number of consecutive automatic outer document reloads reached (" + IframeErrorInducedReloadCountMax + ")");
                        if (TfusionPatch_RootConfig_GetValueOrFallback("OuterFrame.RetryConnectionButtonStrongerReload", true)) {
                            console.log("Use 'Retry Connection' button to manually reload"); }
                    }
                }
            }
        });


        StartChat("tracked_frame_friends_chat");
    });
}
document.addEventListener('DOMContentLoaded', () => Init());

})();

/******/ })()
;
//# sourceMappingURL=friends.js.map?contenthash=981b0e2def6570df9500